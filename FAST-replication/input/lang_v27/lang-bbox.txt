public void test01501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01501"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("                 ...", (double) 100); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d); }
public void test01502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01502"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01503"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 10, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01504"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("/tmp/gen_tests.pl_3149116_1718294617/target/classes:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/randoop-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/replacecall-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/covered-class-current.ja"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Illegal embedded sign character"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01505"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("JAVAWPLATF.RSWAPIWSP.CUFUCATU.N"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01506"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("edomdexim"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01507"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("44OPENJDK 64-BIT SERVER VM44"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01508"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 'a', (float) 237, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 237.0f + "'", float3 == 237.0f); }
public void test01509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01509"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(10L, 5L, 12L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 5L + "'", long3 == 5L); }
public void test01510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01510"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/tmp/gen_tests.pl_3149116_1718294617/target/classes:/home/islam/mywork/defects4j/framework/lib/test_generation/generation/randoop-current.jar:/home/islam/mywork/defects4j/framework/lib/test_generation/generation/replacecall-current.jar:/home/islam/mywork/defects4j/framework/lib/test_generation/generation/covered-class-current.ja"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01511"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("           /USR/JA..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01512"); long[] longArray6 = new long[] { 1, '4', 5, 14, 10, (byte) 0 }; long long7 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); long long8 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); long long9 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); long long10 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); long long11 = org.apache.commons.lang3.math.NumberUtils.min(longArray6); long long12 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); long long13 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); org.junit.Assert.assertNotNull(longArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[1, 52, 5, 14, 10, 0]"); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L); }
public void test01513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01513"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("PrivateBuild"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"PrivateBuild\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01514"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 73, 29L, 7L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 7L + "'", long3 == 7L); }
public void test01515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01515"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("aa/gaa_aasas.aa_3149116_1718294617/aaagaa/aaassas:/haaa/asaaa/MyWaak/daaaaas4j/aaaaawaak/aab/aasa_gaaaaaaaaa/gaaaaaaaaa/aaadaaa-auaaaaa.jaa:/haaa/asaaa/MyWaak/daaaaas4j/aaaaawaak/a"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01516"); float[] floatArray1 = new float[] { 10L }; float float2 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float3 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); float float4 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float5 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float6 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); float float7 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); org.junit.Assert.assertNotNull(floatArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[10.0]"); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f); org.junit.Assert.assertTrue("'" + float4 + "' != '" + 10.0f + "'", float4 == 10.0f); org.junit.Assert.assertTrue("'" + float5 + "' != '" + 10.0f + "'", float5 == 10.0f); org.junit.Assert.assertTrue("'" + float6 + "' != '" + 10.0f + "'", float6 == 10.0f); org.junit.Assert.assertTrue("'" + float7 + "' != '" + 10.0f + "'", float7 == 10.0f); }
public void test01517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01517"); int[] intArray4 = new int[] { (byte) -1, 100, (byte) -1, (byte) 100 }; int int5 = org.apache.commons.lang3.math.NumberUtils.max(intArray4); int int6 = org.apache.commons.lang3.math.NumberUtils.max(intArray4); int int7 = org.apache.commons.lang3.math.NumberUtils.max(intArray4); int int8 = org.apache.commons.lang3.math.NumberUtils.max(intArray4); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 100, -1, 100]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100); }
public void test01518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01518"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 27, (long) 20, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01519"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("O1.8C"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01520"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("           MIXED MODE    ", (float) 84L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 84.0f + "'", float2 == 84.0f); }
public void test01521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01521"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Sun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolki"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Sun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolki\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01522"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01523"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) (byte) -1, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01524"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01525"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("edomdexishort) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01526"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("klooTX.11X.tw.nus", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01527"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(29L, 33L, 180L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 180L + "'", long3 == 180L); }
public void test01528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01528"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("JavawPlatf.rswAPIwSp.cufucatu.n", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01529"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 99, (double) 24L, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01530"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim..."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01531"); long[] longArray3 = new long[] { 1L, (byte) 0, '4' }; long long4 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long5 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long6 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long7 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long8 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long9 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long10 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long11 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); java.lang.Class<?> wildcardClass12 = longArray3.getClass(); org.junit.Assert.assertNotNull(longArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 0, 52]"); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test01532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01532"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("", 1.8f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.8f + "'", float2 == 1.8f); }
public void test01533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01533"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("4444444444444444444444444444444444444444444444444.."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01534"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("itSUN.WT.X11.XTOOLKI", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01535"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("Oracl"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Oracl\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01536"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) (byte) 10, 301L, 35L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 301L + "'", long3 == 301L); }
public void test01537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01537"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("#####################..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01538"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("1.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4", (long) 50); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 50L + "'", long2 == 50L); }
public void test01539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01539"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("...-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"...-8UTF-8UTF-8UTF-8UTF-8UTF-8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01540"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) ' ', 125, (int) '4'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32); }
public void test01541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01541"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("0b-1...."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"0b-1....\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01542"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 0, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01543"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(51, 22, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01544"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444desrodne/bil/erj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444desrodne/bil/erj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01545"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 179, 0.0d, (double) 12L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 179.0d + "'", double3 == 179.0d); }
public void test01546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01546"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Sun.awt.X11.XToolk"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Sun.awt.X11.XToolk\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01547"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 3.0f, (double) 42L, 1.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 42.0d + "'", double3 == 42.0d); }
public void test01548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01548"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 586, Float.POSITIVE_INFINITY, (float) 24L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 24.0f + "'", float3 == 24.0f); }
public void test01549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01549"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("4444444", (float) 301L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 4444444.0f + "'", float2 == 4444444.0f); }
public void test01550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01550"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("      \n      ", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test01551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01551"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("/tmp"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01552"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("B44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01553"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("Mixed modeaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01554"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) 1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01555"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("MIXEDMODEMIXEDMODEMIXEDMODMIXEDMODEMIXEDMODEMIXEDMOD                        "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01556"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("Sun.awt.X11GraphicsEnvironment"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01557"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 301, 31L, (long) (short) -1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 301L + "'", long3 == 301L); }
public void test01558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01558"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"s\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01559"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("#######################islam########################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01560"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) 0, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01561"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("ISLAM"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01562"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.wt.x11.xtoolkit"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01563"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 6, (long) 180, (long) 4); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4L + "'", long3 == 4L); }
public void test01564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01564"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("sun.awt.x11.xtoolkiedom dexim"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01565"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("i411.XTOOitSUN.WT.X11.XTOOL"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01566"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01567"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("...4444..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01568"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits(" RuntOJe EnvOronJent"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01569"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("1.8.0_412"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01570"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("###############################################44444", 36); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 36 + "'", int2 == 36); }
public void test01571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01571"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(6.0d, (double) 74, (double) 12); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 6.0d + "'", double3 == 6.0d); }
public void test01572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01572"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("PrivateBuild", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test01573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01573"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("nus1x.tw.nus"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01574"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01575"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/usr/ja..."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01576"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 100, (short) 1, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01577"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("SUN.WT.X11.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUN.WT.X11.X\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01578"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("444oPENjdk 64-bIT sERVER vm444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"444oPENjdk 64-bIT sERVER vm444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01579"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(44444L, 11L, (long) 177); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 11L + "'", long3 == 11L); }
public void test01580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01580"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("SUN.WT.X11.XTOOLKIT                                         "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01581"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 36, (long) '4', (long) (byte) 100); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test01582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01582"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("25.412-b08"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01583"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("4"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01584"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.wt.X11.XToolkiedomdexi"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01585"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun...."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01586"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 3, (float) 19, (float) (short) -1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 19.0f + "'", float3 == 19.0f); }
public void test01587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01587"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed", (float) (short) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test01588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01588"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("8", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 8.0f + "'", float2 == 8.0f); }
public void test01589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01589"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("   SUN.AWT.X11.XTOOLKIEDOM DEXIM   ", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test01590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01590"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 0L, 0.0f, (float) 586L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 586.0f + "'", float3 == 586.0f); }
public void test01591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01591"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("SUN.AWT.X11.XTOOLK", (double) 177); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 177.0d + "'", double2 == 177.0d); }
public void test01592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01592"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("#  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01593"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("TIKLOOTX.11X.TW.NUSTHI!OTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUS"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01594"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("Java Platform API Specif8-FTU8-FTU8-FTU8-FTU8-FTU8-F"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Platform API Specif8-FTU8-FTU8-FTU8-FTU8-FTU8-F\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01595"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 14, (double) 177.0f, (double) 10.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d); }
public void test01596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01596"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun. wt.X11.XToolkit44444444444444444444444444444444444/               4444444444444444444444444444444444444444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01597"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("1.8-1.8B1.808 11.8.1.881.8.HI!"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01598"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("11F-811F-811F-811F-811F-811F-811F-811F-811F-811F-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"11F-811F-811F-811F-811F-811F-811F-811F-811F-811F-8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01599"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("Sun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolkiSun.awt.X11.XToolki", (double) 180L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 180.0d + "'", double2 == 180.0d); }
public void test01600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01600"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("TNEMNORIVNeSCIHPARg11SUN.AWT.x11.xtOOLK"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"TNEMNORIVNeSCIHPARg11SUN.AWT.x11.xtOOLK\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01601"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("/usr/lib/jvm/j       v       -8-openjdk-       md64/j"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/j       v       -8-openjdk-       md64/j\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01602"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("edomdexi"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01603"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) 10, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01604"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(9, 2, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01605"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("sun.awt.X11.XToolkittiklootx.11x.tw.nus/                ...r/             tiklootx.11x.tw.nus/                ...r/             Java Platform API Specificationtiklootx.11x.tw.nus/                ...r/             Java Platform API Specificationtiklootx.11x.tw.nus/                ...r/             "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolkittiklootx.11x.tw.nus/                ...r/             tiklootx.11x.tw.nus/                ...r/             Java Platform API Specificationtiklootx.11x.tw.nus/                ...r/             Java Platform API Specificationtiklootx.11x.tw.nus/                ...r/\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01606"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/aaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /aaaaaaaaaaaaaaaaaaaaaaaaa/aaaaaaaaaaaaaaaaaaaaaaaaa is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01607"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 29, (float) 331, (float) 48L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 29.0f + "'", float3 == 29.0f); }
public void test01608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01608"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 100, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01609"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("     Linux     "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Linux\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01610"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 52, 0L, (long) 44444); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 44444L + "'", long3 == 44444L); }
public void test01611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01611"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 66, 180L, (long) 179); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 180L + "'", long3 == 180L); }
public void test01612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01612"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.a#####################                ", 73); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 73 + "'", int2 == 73); }
public void test01613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01613"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.asun.awt.X11un.wt.X1sun.wt.X11.XToolkit1.X                                  lkisun.a", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01614"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("AMD641.8AMD641.8AMD641.8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01615"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 0, (short) (byte) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01616"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("1.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01617"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 180, 0L, (long) 27); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 180L + "'", long3 == 180L); }
public void test01618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01618"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("Java Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine SpecificationJava Virtual Machine Specification"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01619"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("MIXEDMODEMIXEDMODEMIXEDMODEMIXEDMODMIXEDMODEMIXEDMODEMIXEDMOD"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01620"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) -1, (short) 0, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01621"); java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("44"); org.junit.Assert.assertNotNull(bigInteger1); }
public void test01622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01622"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 0, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01623"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("###################################################################################################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01624"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(97.0d, (double) 3L, (double) 99); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test01625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01625"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("Sun.awt.X11.XToolk##########################################################################################################################################################################################################################################################################################################################################################################################################################################################################"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01626"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("444444"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01627"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("Sun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01628"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("rj/46dmerj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/o-8-avaj/mvj/bil/rsu/"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"rj/46dmerj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/o-8-avaj/mvj/bil/rsu/\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01629"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01630"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("            edomdexim", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01631"); double[] doubleArray1 = new double[] { 14 }; double double2 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double3 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray1); double double4 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double5 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); java.lang.Class<?> wildcardClass6 = doubleArray1.getClass(); org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[14.0]"); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.0d + "'", double3 == 14.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 14.0d + "'", double4 == 14.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 14.0d + "'", double5 == 14.0d); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test01632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01632"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("x.11x.tw.nus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"x.11x.tw.nus\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01633"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(52, 180, 16); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 180 + "'", int3 == 180); }
public void test01634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01634"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("2-8u412-ga-1~22.04.1-b0"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01635"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("amd64", 52L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 52L + "'", long2 == 52L); }
public void test01636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01636"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, 51.0d, (double) 216); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01637"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("sunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsun"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsunsunwtXsun\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01638"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 50, (long) (short) 0, (long) (byte) -1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test01639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01639"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01640"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("T.X11.XTOOLKITwt.X11.XToolkit1.X", (short) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01641"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("oracle corporation                                                                                                                                                                                                                                                                                            "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: oracle corporation                                                                                                                                                                                                                                                                                             is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01642"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("...VM"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01643"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte(".a"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01644"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 21, (float) 48, (float) 83); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 83.0f + "'", float3 == 83.0f); }
public void test01645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01645"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 10, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01646"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("Java Platform API Specific"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01647"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("xunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunil"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01648"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("SUN.AWT.x11.xtOOLK      ", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01649"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("LATF.RSWAPIWSP.CUFUCATU.N"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01650"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("25.412-B08", (long) 31); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 31L + "'", long2 == 31L); }
public void test01651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01651"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(216, 22, 5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5); }
public void test01652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01652"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("...wt.X1..."); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01653"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 100, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01654"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) ' ', 1, 7); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test01655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01655"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("            edomdexim"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01656"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(51L, 42L, (long) 12); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 12L + "'", long3 == 12L); }
public void test01657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01657"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Jsun.awt.X11GrRuntimeEnvironmentsEnvironment"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Jsun.awt.X11GrRuntimeEnvironmentsEnvironment\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01658"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 10, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01659"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("1.8.0_121.8.0_121.8.0_121.8", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01660"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 119, (long) 0, 84L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01661"); int[] intArray3 = new int[] { ' ', '#', 39 }; int int4 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int5 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int6 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int7 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int8 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int9 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int10 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 35, 39]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39 + "'", int4 == 39); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 39 + "'", int5 == 39); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39 + "'", int6 == 39); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32); }
public void test01662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01662"); float[] floatArray1 = new float[] { 10L }; float float2 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float3 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float4 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float5 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); float float6 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float7 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float8 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float9 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float10 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); float float11 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); org.junit.Assert.assertNotNull(floatArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[10.0]"); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f); org.junit.Assert.assertTrue("'" + float4 + "' != '" + 10.0f + "'", float4 == 10.0f); org.junit.Assert.assertTrue("'" + float5 + "' != '" + 10.0f + "'", float5 == 10.0f); org.junit.Assert.assertTrue("'" + float6 + "' != '" + 10.0f + "'", float6 == 10.0f); org.junit.Assert.assertTrue("'" + float7 + "' != '" + 10.0f + "'", float7 == 10.0f); org.junit.Assert.assertTrue("'" + float8 + "' != '" + 10.0f + "'", float8 == 10.0f); org.junit.Assert.assertTrue("'" + float9 + "' != '" + 10.0f + "'", float9 == 10.0f); org.junit.Assert.assertTrue("'" + float10 + "' != '" + 10.0f + "'", float10 == 10.0f); org.junit.Assert.assertTrue("'" + float11 + "' != '" + 10.0f + "'", float11 == 10.0f); }
public void test01663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01663"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01664"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) -1, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01665"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("####..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01666"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                                     Java Platform API Specification                                     "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                                     Java Platform API Specification                                     \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01667"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-ga-1~22.04.1-b08", 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01668"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("AaaaaaaMixed modeaaaaaaaaaaaaaaaaaaaaGB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"AaaaaaaMixed modeaaaaaaaaaaaaaaaaaaaaGB\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01669"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.awt.X11.XToolkiedom dexi                                    "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01670"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 45, 33); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 45 + "'", int3 == 45); }
public void test01671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01671"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("pecific"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"pecific\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01672"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test01673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01673"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("ODE"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01674"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("              ..."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01675"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 1L, Float.POSITIVE_INFINITY, (float) (byte) -1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + Float.POSITIVE_INFINITY + "'", float3 == Float.POSITIVE_INFINITY); }
public void test01676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01676"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("awt.X11.XToolki", 11); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11); }
public void test01677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01677"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) (short) 10, (float) 8L, 100.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 8.0f + "'", float3 == 8.0f); }
public void test01678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01678"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"S\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01679"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 100, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01680"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) 0, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01681"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("a64", 586); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 586 + "'", int2 == 586); }
public void test01682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01682"); long[] longArray3 = new long[] { 1L, (byte) 0, '4' }; long long4 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long5 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long6 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long7 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long8 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); org.junit.Assert.assertNotNull(longArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 0, 52]"); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test01683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01683"); long[] longArray3 = new long[] { 1L, (byte) 0, '4' }; long long4 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long5 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long6 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long7 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long8 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long9 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long10 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long11 = org.apache.commons.lang3.math.NumberUtils.min(longArray3); long long12 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); long long13 = org.apache.commons.lang3.math.NumberUtils.max(longArray3); org.junit.Assert.assertNotNull(longArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 0, 52]"); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L); }
public void test01684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01684"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod                        "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01685"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(10L, (long) 125, (long) 11); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 125L + "'", long3 == 125L); }
public void test01686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01686"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (-1L), (double) 180L, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 180.0d + "'", double3 == 180.0d); }
public void test01687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01687"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 73, (long) 32, 97L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test01688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01688"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("1.8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01689"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) 10, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01690"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("                                                                                             !IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01691"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH", (long) 61); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 61L + "'", long2 == 61L); }
public void test01692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01692"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) (byte) -1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01693"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01694"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("sun.wt.X11.XToolkit", (long) 'a'); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L); }
public void test01695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01695"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("UTF-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"UTF-8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01696"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("sun.awt.X11.XToolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: sun.awt.X11.XToolkit is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01697"); double[] doubleArray5 = new double[] { '4', (-1.0d), '4', 10L, 10.0d }; double double6 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray5); double double7 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray5); double double8 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray5); double double9 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray5); double double10 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray5); double double11 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray5); double double12 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray5); java.lang.Class<?> wildcardClass13 = doubleArray5.getClass(); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, 52.0, 10.0, 10.0]"); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d)); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d)); org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d)); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test01698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01698"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(Float.POSITIVE_INFINITY, (float) 42L, (float) (short) -1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + Float.POSITIVE_INFINITY + "'", float3 == Float.POSITIVE_INFINITY); }
public void test01699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01699"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("hi!                                                                                                                                                                    ", (long) 87); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 87L + "'", long2 == 87L); }
public void test01700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01700"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) '4', (float) 29L, 50.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 29.0f + "'", float3 == 29.0f); }
public void test01701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01701"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 36, (long) 39, (long) '#'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L); }
public void test01702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01702"); java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("520"); org.junit.Assert.assertEquals("'" + number1 + "' != '" + 520 + "'", number1, 520); }
public void test01703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01703"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(119, 87, 19); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19); }
public void test01704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01704"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("                                                utf-8"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01705"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(82L, 97L, (long) 125); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 82L + "'", long3 == 82L); }
public void test01706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01706"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01707"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 84L, 4444444.0f, (float) 180L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 4444444.0f + "'", float3 == 4444444.0f); }
public void test01708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01708"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("A.ORACLE.COM/"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"A.OR\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01709"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("###############################################44444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"###############################################44444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01710"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 27, (double) 32, (double) 36); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.0d + "'", double3 == 36.0d); }
public void test01711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01711"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01712"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 100, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01713"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("###########################################...  ...############################################"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01714"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("4444444444444444444444444444444444444444444444444444", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test01715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01715"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 100, (short) (byte) -1, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01716"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(586, 125, 36); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 586 + "'", int3 == 586); }
public void test01717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01717"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 20, (double) 87L, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 87.0d + "'", double3 == 87.0d); }
public void test01718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01718"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("UTF-8UT...   UTF-8UTF", (float) 7L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 7.0f + "'", float2 == 7.0f); }
public void test01719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01719"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble(" Server VM", (double) 20.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 20.0d + "'", double2 == 20.0d); }
public void test01720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01720"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 'a', (float) 179, (float) 6L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 179.0f + "'", float3 == 179.0f); }
public void test01721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01721"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("    O...    ", (long) 5); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 5L + "'", long2 == 5L); }
public void test01722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01722"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("1.8-1.8b1.808 11.8.1.881.8.hi!", (double) 216.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 216.0d + "'", double2 == 216.0d); }
public void test01723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01723"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("39", 586L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 39L + "'", long2 == 39L); }
public void test01724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01724"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 0, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01725"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong(" Server VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \" Server VM\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01726"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/JJJJJJ"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01727"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("                                                                                     ...lP avaJ"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01728"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("             ...vm", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01729"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 331.0f, (double) 0, (double) 1.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 331.0d + "'", double3 == 331.0d); }
public void test01730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01730"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("25.412-b08", 2.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.0f + "'", float2 == 2.0f); }
public void test01731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01731"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("                    ", (double) 4444444.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4444444.0d + "'", double2 == 4444444.0d); }
public void test01732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01732"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(11L, 97L, (long) 18); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test01733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01733"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sunJava Platform API Specificatio"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01734"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim...1.8domdeximedomdexim..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01735"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 48, 50L, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01736"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("s"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01737"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("aaaaaOpenJDK 6tiklootx.11x.tw.nus/                ...r/            -Bit Server VMaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"aaaaaOpenJDK 6tiklootx.11x.tw.nus/                ...r/            -Bit Server VMaaaaaa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01738"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 10, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01739"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 16, (long) 125, 7L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 7L + "'", long3 == 7L); }
public void test01740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01740"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(0.0f, (float) 12, (float) 34); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 34.0f + "'", float3 == 34.0f); }
public void test01741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01741"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("SUNAaaaaaaMixed modeaaaaaaaaaaaaaaaaaaaaGBSUN"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUNAaaaaa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01742"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test01743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01743"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("#############################...\n\n\n\n\n\n\n"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01744"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("                        ", (double) 520); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 520.0d + "'", double2 == 520.0d); }
public void test01745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01745"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01746"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(331.0f, (float) (short) 0, 35.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 331.0f + "'", float3 == 331.0f); }
public void test01747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01747"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("...    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01748"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("JAVA VIRTUAL MACHINE SPECIFICATION", (long) 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01749"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("", (long) ' '); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 32L + "'", long2 == 32L); }
public void test01750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01750"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 0, (short) (byte) 100, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01751"); int[] intArray3 = new int[] { ' ', '#', 39 }; int int4 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int5 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int6 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int7 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int8 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int9 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int10 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int11 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 35, 39]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39 + "'", int4 == 39); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39 + "'", int6 == 39); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 39 + "'", int8 == 39); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 39 + "'", int11 == 39); }
public void test01752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01752"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("                ####################                ", 1.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test01753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01753"); short[] shortArray3 = new short[] { (byte) 10, (short) 1, (short) 10 }; short short4 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); short short5 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); short short6 = org.apache.commons.lang3.math.NumberUtils.max(shortArray3); short short7 = org.apache.commons.lang3.math.NumberUtils.max(shortArray3); short short8 = org.apache.commons.lang3.math.NumberUtils.max(shortArray3); short short9 = org.apache.commons.lang3.math.NumberUtils.max(shortArray3); short short10 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); short short11 = org.apache.commons.lang3.math.NumberUtils.max(shortArray3); org.junit.Assert.assertNotNull(shortArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10, 1, 10]"); org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1); org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 1 + "'", short5 == (short) 1); org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 10 + "'", short6 == (short) 10); org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 10 + "'", short7 == (short) 10); org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10); org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 10 + "'", short9 == (short) 10); org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 1 + "'", short10 == (short) 1); org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 10 + "'", short11 == (short) 10); }
public void test01754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01754"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("#######################islam########################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"#######\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01755"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("t.x11.xtoolkitwt.x11.xtoolkit1.x", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01756"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) (byte) 100, (short) (byte) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01757"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64", (int) (short) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test01758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01758"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(217, 29, 179); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 217 + "'", int3 == 217); }
public void test01759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01759"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("JJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01760"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 0, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01761"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(10.0f, (float) 15, (float) 19L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 19.0f + "'", float3 == 19.0f); }
public void test01762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01762"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) -1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01763"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("   ", (long) 217); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 217L + "'", long2 == 217L); }
public void test01764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01764"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("                        hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                         "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01765"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) (byte) -1, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01766"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("1.8.0_121.8.0_121.8.0_121.8", (long) 24); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24L + "'", long2 == 24L); }
public void test01767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01767"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(0.0d, 1.7999999523162842d, 4444444.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4444444.0d + "'", double3 == 4444444.0d); }
public void test01768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01768"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("http://java.oracle.com/"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"http:\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01769"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 15, 51.0d, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01770"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("1nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus.nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus8nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus.nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus0nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus_nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus412"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01771"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("        ", 52L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 52L + "'", long2 == 52L); }
public void test01772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01772"); float[] floatArray3 = new float[] { 1, 10L, 0 }; float float4 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float5 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float6 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float7 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float8 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); org.junit.Assert.assertNotNull(floatArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[1.0, 10.0, 0.0]"); org.junit.Assert.assertTrue("'" + float4 + "' != '" + 10.0f + "'", float4 == 10.0f); org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f); org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f); org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.0f + "'", float7 == 0.0f); org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f); }
public void test01773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01773"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("    64-Bit Server VM    ", 31); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 31 + "'", int2 == 31); }
public void test01774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01774"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("J#v# Pl...                                                                                     ", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01775"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("Server", (float) (short) 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test01776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01776"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("HI!    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"HI!    \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01777"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01778"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jr"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jr\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01779"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("Java Platform API Specific"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01780"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("25.412-b08SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.P", (float) 33L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 33.0f + "'", float2 == 33.0f); }
public void test01781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01781"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01782"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(1727, 100, 52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52); }
public void test01783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01783"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01784"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("PrivateBuild", (long) (short) 10); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L); }
public void test01785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01785"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("                                                  ", (float) (-1L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test01786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01786"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("                 ...                 ...                 ...                 ...                 ...                 ...        "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01787"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("edomdexi##", (short) (byte) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test01788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01788"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("###############################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01789"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("amd641.8amd641.8amd641.8", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test01790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01790"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("Private Build"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01791"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("...VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"...VM\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01792"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444desrodne/bil/erj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01793"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("amd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aa", 99L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 99L + "'", long2 == 99L); }
public void test01794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01794"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("UTF-8UT...  ...", 42L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 42L + "'", long2 == 42L); }
public void test01795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01795"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("44444###############################################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01796"); float[] floatArray3 = new float[] { 1, 10L, 0 }; float float4 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float5 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float6 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float7 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float8 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float9 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float10 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float11 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); org.junit.Assert.assertNotNull(floatArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[1.0, 10.0, 0.0]"); org.junit.Assert.assertTrue("'" + float4 + "' != '" + 10.0f + "'", float4 == 10.0f); org.junit.Assert.assertTrue("'" + float5 + "' != '" + 10.0f + "'", float5 == 10.0f); org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f); org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.0f + "'", float7 == 0.0f); org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f); org.junit.Assert.assertTrue("'" + float9 + "' != '" + 10.0f + "'", float9 == 10.0f); org.junit.Assert.assertTrue("'" + float10 + "' != '" + 10.0f + "'", float10 == 10.0f); org.junit.Assert.assertTrue("'" + float11 + "' != '" + 10.0f + "'", float11 == 10.0f); }
public void test01797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01797"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("LATF.RSWAPIWSP.CUFUCATU.N"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01798"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("6dma/bil/segakcap/avaj/rsu/46_68x/bil/rsu/:46_68x/bil/:inj/ung-xunil-46_68x/bil/rsu/:ung-xunil-4bil/rsu/:bil/:inj/bil/rsu/:ung-xunil-"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"6dma/bil/segakcap/avaj/rsu/46_68x/bil/rsu/:46_68x/bil/:inj/ung-xunil-46_68x/bil/rsu/:ung-xunil-4bil/rsu/:bil/:inj/bil/rsu/:ung-xunil-\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01799"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("####", (double) 0L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01800"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("utf-8utf-8utf-8utf-8utf-8utf-8utf-8utf-8utf-8utf-H25.412-b08SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.P!"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"utf-8utf-8utf-8utf-8utf-8utf-8utf-8utf-8utf-8utf-H25.412-b08SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.P!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01801"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("520", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 520 + "'", short2 == (short) 520); }
public void test01802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01802"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      SUN.AWT.x11.xtOOLK      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01803"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) (byte) 100, (short) (byte) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01804"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("/home/islam"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01805"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 1, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01806"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(1L, 44444L, (long) 61); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L); }
public void test01807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01807"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("o Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Cedom deximo Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co Co"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01808"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 52, (float) 18, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 52.0f + "'", float3 == 52.0f); }
public void test01809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01809"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) 520, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01810"); byte[] byteArray6 = new byte[] { (byte) -1, (byte) 1, (byte) -1, (byte) 10, (byte) 0, (byte) 0 }; byte byte7 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte8 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); byte byte9 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); byte byte10 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); byte byte11 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte12 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 1, -1, 10, 0, 0]"); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10); org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1); org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1); org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) -1 + "'", byte10 == (byte) -1); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 10 + "'", byte11 == (byte) 10); org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) -1 + "'", byte12 == (byte) -1); }
public void test01811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01811"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(0.0f, (float) 6L, (float) (byte) 0); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 6.0f + "'", float3 == 6.0f); }
public void test01812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01812"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 129, (float) 44444L, 30.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 30.0f + "'", float3 == 30.0f); }
public void test01813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01813"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod                        "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01814"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("hi!   ", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test01815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01815"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("               ", (double) 42); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 42.0d + "'", double2 == 42.0d); }
public void test01816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01816"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) -1, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01817"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("", (long) 9); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 9L + "'", long2 == 9L); }
public void test01818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01818"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("dexim edom"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"dexim edom\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01819"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 180L, 0.0f, (float) 34); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test01820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01820"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) (byte) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01821"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) (byte) 10, 33L, (long) (-1)); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 33L + "'", long3 == 33L); }
public void test01822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01822"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("#############################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01823"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 1727, 35); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1727 + "'", int3 == 1727); }
public void test01824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01824"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01825"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("TNEMNORIVNeSTNEMNORIVNe EMITNUrRg11x.TWA.NUSj", (double) '#'); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 35.0d + "'", double2 == 35.0d); }
public void test01826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01826"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("o C"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01827"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 0, (short) (byte) 1, (short) 520); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01828"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("L"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"L\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01829"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(10L, (long) 129, (long) (short) 1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 129L + "'", long3 == 129L); }
public void test01830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01830"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 100, (short) 0, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01831"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(30L, (long) 87, (long) (byte) 0); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 87L + "'", long3 == 87L); }
public void test01832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01832"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) 520, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01833"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) -1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01834"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("hi!2", (long) 20); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 20L + "'", long2 == 20L); }
public void test01835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01835"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 0, (short) (byte) 10, (short) 520); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01836"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib", (short) (byte) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01837"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01838"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 177, (double) 6.0f, 520.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 520.0d + "'", double3 == 520.0d); }
public void test01839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01839"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("Sun.awt.X11.XToolkSun.awt.X11.XToolkSun.awt.X11.XToolkSun.awt.X11.XToolkSun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01840"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 100, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01841"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("Server                ...VM", 177.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 177.0f + "'", float2 == 177.0f); }
public void test01842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01842"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/usr/lib/jvm/java-8-openjdk-amd64/jr", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01843"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(331.0f, 0.0f, (float) 51); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test01844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01844"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble(" Runtime Environment", (double) 8); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 8.0d + "'", double2 == 8.0d); }
public void test01845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01845"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 100, (float) (short) 1, 30.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f); }
public void test01846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01846"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber(".awt.X11.XToolkitSUN.WT.X11.XTOOLKIT"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01847"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ.../JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/j"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ.../JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/j is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01848"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01849"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 100, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01850"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("omdexim                                                                                                                                                                                                                                           "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01851"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLongorg.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string} catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01852"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 10, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01853"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("IKLOOTX.11X.TW...  ..IKLOOTX.11X.TW"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"IKLOOTX.11X.TW...  ..IKLOOTX.11X.TW\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01854"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("                                                                         Java Pl..                                                                         ", (short) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01855"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("suUn.wt.X1sun.wt.X11.XToolkit1.X                                  .awUn.wt.X1sun.wt.X11.XToolkit1.X                                  .X11.XToolk"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01856"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 57, 97.0f, (float) 1727); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 57.0f + "'", float3 == 57.0f); }
public void test01857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01857"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (short) 1, 84L, (long) (-1)); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test01858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01858"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(48.0d, 1.0d, (double) 57); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test01859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01859"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, (long) 36, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 36L + "'", long3 == 36L); }
public void test01860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01860"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("java virtual machine specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"java virtual machine specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01861"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("AaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaGBAaaaaaaaG"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Aa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01862"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.wt.X1sun.wt.X11.XToolki#######Linux#######"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01863"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01864"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("\n####"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"?####\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01865"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 0, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01866"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("                     amd64                  "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01867"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("Un.wt.X1sun.wt.X11.XToolkit1.X                                         Mixed mode"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01868"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 100, (short) (byte) 10, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01869"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("44"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 44L + "'", long1 == 44L); }
public void test01870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01870"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    r/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    b/jvm/jaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    vaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    -8-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    peaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    jdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    -aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHI!    md64/jre", (short) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01871"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 0, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01872"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) -1, (short) -1, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01873"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("/             /             "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01874"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("...wt.X1...", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01875"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("444oPENjdk 64-bIT sERVER vm444"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01876"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("aaaaaaaaaaaaaaaaaaaaaaaaaaaaGBaaaaaaaaaaaaaaaaaaaaa", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test01877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01877"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 100, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01878"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("Sun.awt.X11.XToolki", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01879"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("n.wt.X11.XToolkitcat", (float) 32L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 32.0f + "'", float2 == 32.0f); }
public void test01880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01880"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 0L, (double) 10L, (double) 237.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 237.0d + "'", double3 == 237.0d); }
public void test01881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01881"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa2-8u412-ga-1~22.04.1-b0"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01882"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("SUN.PRINT.PSPRINTERJOB"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01883"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("SUN.WT.X11.XTOOLKI"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUN.WT.X11.XTOOLKI\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01884"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 51, (long) (byte) 0, 29L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 51L + "'", long3 == 51L); }
public void test01885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01885"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1suaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X1\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01886"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("SUN.PRINT.PSPRINTERJOB                                                                               "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01887"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("SUN.WT.X11.XTOOLKI"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUN.WT.X11.XTOOLKI\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01888"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("Server       "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01889"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("sun.wt.X1sun.wt.X11.sun.awt.x11graphicsenvironmentoolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X1sun.wt.X11.sun.awt.x11graphicsenvironmentoolkit\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01890"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("11.8.1.881.8.hi!1.8-1.8b1.808"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01891"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 87, 0L, 586L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 586L + "'", long3 == 586L); }
public void test01892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01892"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (byte) 100, (int) (short) 10, 61); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test01893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01893"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 217L, 44444.0f, (float) 6); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 6.0f + "'", float3 == 6.0f); }
public void test01894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01894"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) (byte) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01895"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("java virtual machine specification", 8.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 8.0d + "'", double2 == 8.0d); }
public void test01896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01896"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("Server", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01897"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/home/islam/home/islam/home/islam/home/islam/25.412-b08SUN.PRINT.PSPRINTERJOBHI!SUN.PRINT.P"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /home/islam/home/islam/home/islam/home/islam/25.412-b08SUN.PRINT.PSPRINTERJOBHI!SUN.PRINT.P is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01898"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01899"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("edomdexim/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md64/jresun.print.PSPrinterJobMixed mode"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01900"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 10, (short) -1, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01901"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("...    "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01902"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01903"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 24.0f, (double) 44444, (double) 32.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 44444.0d + "'", double3 == 44444.0d); }
public void test01904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01904"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL", (double) 29.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 29.0d + "'", double2 == 29.0d); }
public void test01905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01905"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("pecific"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"pecific\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01906"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("SUN.AWT.x11.xtOOLK      "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01907"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("Sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01908"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("/odeusrode/odelibode/odejvmode/odejavaode-ode8ode-odeopenjdkode-odeamdode64ode/odejreode/odelibode/odeextode:/odeusrode/odejavaode/odepackagesode/odelibode/odeext"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01909"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!  hi!", (float) 34); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 34.0f + "'", float2 == 34.0f); }
public void test01910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01910"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01911"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("                             Server                ...VM", 179); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 179 + "'", int2 == 179); }
public void test01912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01912"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (short) 520, 0, 180); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01913"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("/usr/lib/jvm/java-8-openjdk-amd64/j44444444444444444", (float) 20); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 20.0f + "'", float2 == 20.0f); }
public void test01914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01914"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (short) 100, 52, 469); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 469 + "'", int3 == 469); }
public void test01915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01915"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 100, (short) (byte) 1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01916"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("1.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01917"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(331L, (long) 61, (long) 36); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 36L + "'", long3 == 36L); }
public void test01918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01918"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("   UTUTF-8UTF-8UTF-8amdUTUTF-8UTF-8UTF-864UTUTF-8UTF-8UTF-8   UTUTF-8UTF-8UTF-8amdUTUTF-8UTF-8UTF-864UTUTF-8UTF-8UTF-8 UTUTF-8UTF-8UTF-8aa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01919"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) 1, (short) 520); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 520 + "'", short3 == (short) 520); }
public void test01920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01920"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, (long) (short) 10, (long) 83); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01921"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(3, 331, 22); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3); }
public void test01922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01922"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("amd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01923"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01924"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("                        hi!                         ", (short) (byte) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test01925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01925"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 100, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01926"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("!ih.8.188.1.8.11 808.1b8", 31); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 31 + "'", int2 == 31); }
public void test01927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01927"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01928"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(586, 0, 36); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01929"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 2L, 0.0f, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test01930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01930"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("OdeedomdexiOdeedomdexiOdeedomdexiOdeedomdexiOdeedomdexiOdeedomdexiOdeedomdexiOdeedomdexiOdeedomdexiOde", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01931"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigIntegerorg.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01932"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("              ..."); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01933"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("1.8-1.8B1.808 11.8.1.881.8.HI!", (double) (short) 520); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 520.0d + "'", double2 == 520.0d); }
public void test01934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01934"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.asun.a", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01935"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) -1, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01936"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(20, 20, 331); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 331 + "'", int3 == 331); }
public void test01937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01937"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("domdeximedomdeximedomdeximdomdeximedomdeximedomdexim edom dexim"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01938"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("Java Platform API Specif8-FTU8-FTU8-FTU8-FTU8-FTU8-F"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01939"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 97, (long) 52, (long) 87); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test01940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01940"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(16, (int) (byte) 0, 3); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01941"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("     1.8.0_412-8u412-ga-1~22.04.1-b0      "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01942"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(476, 32, 586); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 586 + "'", int3 == 586); }
public void test01943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01943"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL###########...11.XTOOitSUN.WT.X11.XTOOL\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01944"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("...\n\n\n\n\n\n\n"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01945"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("oTX.11X...SUN.AWT.x11.xtOOLK"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01946"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("amd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aaamd64amd64aa", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01947"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 82, (float) 44L, (float) 10L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f); }
public void test01948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01948"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("                                         noitaroproC elcarO"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01949"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) -1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01950"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("1.8-1.8B1.808 11.8.1.881.8.HI!"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.8-1.8B1.808 11.8.1.881.8.HI!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01951"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 129, (float) 84L, 37.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 37.0f + "'", float3 == 37.0f); }
public void test01952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01952"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("sunJava Platform API Specificatio"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sunJava Platform API Specificatio\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01953"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("    ..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01954"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.print.psprinterjobhi!   sun.print.psprinterjobhi!   sun.print.psprinterjobhi!   sun.print.psprinterjobhi!   sun.print.psprinterjobhi!   sun.print.psprinterjobhi!   sun.print.psprinterjob", (float) 125L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 125.0f + "'", float2 == 125.0f); }
public void test01955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01955"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("javawplatf.rswapiwsp.cufucatu.n"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01956"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 100, (short) 520, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01957"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("OpenJDK64-..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Illegal embedded sign character"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01958"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("hi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTohi!2\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01959"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 1592, (long) 5, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1592L + "'", long3 == 1592L); }
public void test01960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01960"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 24, (float) 14, (float) 24); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 24.0f + "'", float3 == 24.0f); }
public void test01961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01961"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("-linux-gnu:/usr/lib/jni:/lib:/usr/lib4-linux-gnu:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64:/usr/lib/x86_64/usr/java/packages/lib/amd6"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01962"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(10.0f, (float) 301, (float) 0L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 301.0f + "'", float3 == 301.0f); }
public void test01963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01963"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, (double) 23, (double) (byte) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01964"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.awt.x11graphicsenvironment                  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01965"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) (byte) 10, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01966"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("un.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  ", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01967"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("...latform API Specif", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01968"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("klooTX.11X.tw.nus", (short) (byte) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01969"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (short) 1, 0.0d, (double) 469); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01970"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("               mixed mode mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod    "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01971"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhi!    ", (short) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01972"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01973"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("ISLAM"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01974"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("808.1B8.1-8.1...aaaaa...aaaaa...aaaaa...aaaaa...aaaaa...aaaaa!IH.8.188.1.8.11"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01975"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte(" ", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01976"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("                ...", (short) (byte) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01977"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("UN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  SUN.AWT.X11.XTOOLKUN.WT.X1SUN.WT.X11.XTOOLKIT1.X                                  "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01978"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("pecific", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01979"); short[] shortArray5 = new short[] { (byte) 10, (byte) -1, (short) 100, (short) 0, (short) 100 }; short short6 = org.apache.commons.lang3.math.NumberUtils.max(shortArray5); short short7 = org.apache.commons.lang3.math.NumberUtils.min(shortArray5); short short8 = org.apache.commons.lang3.math.NumberUtils.max(shortArray5); short short9 = org.apache.commons.lang3.math.NumberUtils.max(shortArray5); short short10 = org.apache.commons.lang3.math.NumberUtils.max(shortArray5); org.junit.Assert.assertNotNull(shortArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, 100, 0, 100]"); org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 100 + "'", short6 == (short) 100); org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -1 + "'", short7 == (short) -1); org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 100 + "'", short8 == (short) 100); org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 100 + "'", short9 == (short) 100); org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 100 + "'", short10 == (short) 100); }
public void test01980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01980"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("                       ...VM                       ", 5L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 5L + "'", long2 == 5L); }
public void test01981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01981"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("dexim edom"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01982"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("Server VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Server VM is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01983"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("s"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"s\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01984"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("##################################SUN.WT.X11.XTOOLKI", 21); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21); }
public void test01985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01985"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("sun.#wt.X11.XToolkiedom dexi"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.#wt.X11.XToolkiedom dexi\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01986"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("lINUX     IL/RSU/O-8-AVAJ/MVJ/BIL/RSU/"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01987"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.awt.X11.XToolkiedom dexim"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01988"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("                     amd64                  ", (float) 98); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 98.0f + "'", float2 == 98.0f); }
public void test01989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01989"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("T.X11.XTOOLKITwt.X11.XToolkit1.X"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01990"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 0, (short) 1, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01991"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble(" #############################", (double) 5); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.0d + "'", double2 == 5.0d); }
public void test01992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01992"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("/usr/j..."); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01993"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("aaaaaaaaGB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: aaaaaaaaGB is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01994"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("a64"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"a64\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01995"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("...         mIXED MODE"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01996"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("44OpenJDK 64-Bit Server VM444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01997"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/usr/j...", 99L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 99L + "'", long2 == 99L); }
public void test01998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01998"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 217L, 42.0d, 32.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d); }
public void test01999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01999"); double[] doubleArray1 = new double[] { 14 }; double double2 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double3 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray1); double double4 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray1); double double5 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray1); double double6 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double7 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray1); java.lang.Class<?> wildcardClass8 = doubleArray1.getClass(); org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[14.0]"); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.0d + "'", double3 == 14.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 14.0d + "'", double4 == 14.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 14.0d + "'", double5 == 14.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 14.0d + "'", double6 == 14.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 14.0d + "'", double7 == 14.0d); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test02000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test02000"); float[] floatArray1 = new float[] { 10L }; float float2 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float3 = org.apache.commons.lang3.math.NumberUtils.min(floatArray1); float float4 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); float float5 = org.apache.commons.lang3.math.NumberUtils.max(floatArray1); org.junit.Assert.assertNotNull(floatArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[10.0]"); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f); org.junit.Assert.assertTrue("'" + float4 + "' != '" + 10.0f + "'", float4 == 10.0f); org.junit.Assert.assertTrue("'" + float5 + "' != '" + 10.0f + "'", float5 == 10.0f); }
public void test00501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00501"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("25.412-B08"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00502"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08", (double) '4'); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d); }
public void test00503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00503"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("islam"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00504"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, (int) (byte) 10, 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00505"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("Ode"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00506"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00507"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                ..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                ...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00508"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("\n"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"?\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00509"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 179, (long) 0, (long) (short) -1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 179L + "'", long3 == 179L); }
public void test00510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00510"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("/"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00511"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("amd641.8amd641.8amd641.8amd64144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b0841.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd641.8amd641.8amd641.8amd64144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b0841.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00512"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 100, (short) -1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00513"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("44444", (short) (byte) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00514"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("####...", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test00515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00515"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 37, (long) (short) 10, (long) 32); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 37L + "'", long3 == 37L); }
public void test00516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00516"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("           mixed mode    "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00517"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("omdexim "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00518"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 12, (long) 20, 180L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 12L + "'", long3 == 12L); }
public void test00519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00519"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (byte) 100, (double) 7, (double) 6.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test00520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00520"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("   SUN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00521"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("/usr/j..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00522"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("                                     Mixed mode"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00523"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00524"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(39L, (long) (byte) 1, (long) (byte) 10); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 39L + "'", long3 == 39L); }
public void test00525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00525"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("##################################SUN.WT.X11.XTOOLKI", (float) 52L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 52.0f + "'", float2 == 52.0f); }
public void test00526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00526"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("O1.8 C", 6); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6); }
public void test00527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00527"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (short) -1, (long) 30, 1L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00528"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 14, (float) 12L, (float) (short) -1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 14.0f + "'", float3 == 14.0f); }
public void test00529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00529"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 100, (short) (byte) 1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00530"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("X.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"X.X\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00531"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 1, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00532"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("44444", (long) 5); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 44444L + "'", long2 == 44444L); }
public void test00533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00533"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("/usr/lib/jvm/java-8-openjdk-amd64/j"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00534"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 1, (float) 97, 2.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f); }
public void test00535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00535"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("           mixed mode    sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00536"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (byte) -1, (double) 100.0f, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00537"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("T.X11.XTOOLKITwt.X11.XToolkit1.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"T.X11\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00538"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun. wt.X11.XToolkit44444444444444444444444444444444444/               4444444444444444444444444444444444444444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00539"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 100, (short) (byte) 10, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00540"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                                                  \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00541"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 10, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00542"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00543"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(30, 24, 29); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30); }
public void test00544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00544"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(35.0d, (double) 29, (double) (-1.0f)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00545"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("SUN.WT.X11.XTOOLKIT"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00546"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("####...", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test00547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00547"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00548"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00549"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("omdexim "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00550"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) (byte) 10, 39L, (long) (byte) 1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 39L + "'", long3 == 39L); }
public void test00551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00551"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 1L, (float) 180L, 97.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 180.0f + "'", float3 == 180.0f); }
public void test00552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00552"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun#############################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00553"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, 0L, 100L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test00554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00554"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("     sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"     sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00555"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("                             Server                ...VM"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00556"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("########"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00557"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) -1, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00558"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("   SUN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message:   SUN.AWT.X11.XTOOLKIEDOM DEXIM   is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00559"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (short) 0, 0L, (long) 99); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00560"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: UN.AWT.X11.XTOOLKIEDOM DEXIM   is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00561"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 32, (long) 3, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L); }
public void test00562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00562"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 37L, (double) 99, (double) 4); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d); }
public void test00563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00563"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00564"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(0.0f, (float) 4, (float) 177); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00565"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("java virtual machine specification", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test00566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00566"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(331, 16, 177); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); }
public void test00567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00567"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("HTTP://JAVA.ORACLE.COM/"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00568"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00569"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) -1, (short) (byte) 1, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00570"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00571"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444HI!   44444444444444444444444444444444444444444444444444444444444444444444444444444444444444", (short) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test00572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00572"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("           /USR/JA..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00573"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 5.0f, (double) 'a', 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d); }
public void test00574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00574"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("#############################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"#############################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00575"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 20, (float) 32, (float) 6L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f); }
public void test00576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00576"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("11.8.1.881.8.1.801.8_1.84121.8-1.881.8u1.84121.8-1.8ga1.8-1.811.8~1.8221.8.1.8041.8.1.811.8-1.8b1.808", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test00577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00577"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("tiklootx.11x.tw.nus/                ...r/             "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"t\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00578"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("/usr/lib/jvm/java-8-openjdk-amd64//usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00579"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00580"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00581"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("amd64   amd64 aa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd64   amd64 aa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00582"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 14, (float) 7, (float) 3L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 14.0f + "'", float3 == 14.0f); }
public void test00583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00583"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 21, (long) 20, (long) 97); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 20L + "'", long3 == 20L); }
public void test00584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00584"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00585"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("                 ..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00586"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus", (long) 27); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 27L + "'", long2 == 27L); }
public void test00587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00587"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) 1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00588"); int[] intArray3 = new int[] { ' ', '#', 39 }; int int4 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); int int5 = org.apache.commons.lang3.math.NumberUtils.min(intArray3); int int6 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); java.lang.Class<?> wildcardClass7 = intArray3.getClass(); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 35, 39]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39 + "'", int4 == 39); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39 + "'", int6 == 39); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test00589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00589"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (short) 1, (double) 180, (double) 24L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 180.0d + "'", double3 == 180.0d); }
public void test00590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00590"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("en", (double) 24L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 24.0d + "'", double2 == 24.0d); }
public void test00591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00591"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/odeusrode/odelibode/odejvmode/odejavaode-ode8ode-odeopenjdkode-odeamdode64ode/odejreode/odelibode/odeextode:/odeusrode/odejavaode/odepackagesode/odelibode/odeext", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test00592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00592"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su", (int) (byte) 10); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10); }
public void test00593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00593"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong(" #############################", 8L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 8L + "'", long2 == 8L); }
public void test00594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00594"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 331L, (float) 331L, 100.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 331.0f + "'", float3 == 331.0f); }
public void test00595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00595"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("44444"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 44444 + "'", int1 == 44444); }
public void test00596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00596"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) 10, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00597"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00598"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test00599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00599"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("4444444444444444444444444444444444/aa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"4444444444444444444444444444444444/aa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00600"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00601"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(0.0f, (float) (byte) 100, (float) 30L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f); }
public void test00602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00602"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 180.0f, 0.0d, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 180.0d + "'", double3 == 180.0d); }
public void test00603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00603"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(30L, 24L, 179L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 179L + "'", long3 == 179L); }
public void test00604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00604"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("c", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00605"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00606"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 44444); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 44444.0d + "'", double2 == 44444.0d); }
public void test00607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00607"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(6, 82, 82); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6); }
public void test00608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00608"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/usr/lib/jvm/java-8-openjdk-amd64/j", (int) '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35); }
public void test00609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00609"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("tiklooTX.11X.tw.nus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00610"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("           mixed mode mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00611"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("sun.print.PSPrinterJob"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00612"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00613"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("..."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00614"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 1, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00615"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00616"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("##################################SUN.WT.X11.XTOOLKI", (float) 30L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 30.0f + "'", float2 == 30.0f); }
public void test00617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00617"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 10, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00618"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00619"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (-1.0f), 0.0d, (double) 8); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00620"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 0, (long) 179, 10L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00621"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 0, (float) 29, 84.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 84.0f + "'", float3 == 84.0f); }
public void test00622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00622"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort(".awt.X11.XToolkitSUN.WT.X11.XTOOLKIT"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00623"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00624"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00625"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) -1, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00626"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, 10L, 180L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00627"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00628"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 24L, (float) 12, (float) (short) 1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f); }
public void test00629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00629"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 21, (float) 2L, (float) 37); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 37.0f + "'", float3 == 37.0f); }
public void test00630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00630"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00631"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(10, 0, 35); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35); }
public void test00632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00632"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 4, 179.0f, (float) 179L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 4.0f + "'", float3 == 4.0f); }
public void test00633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00633"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 44444L, 0.0d, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00634"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((-1), 52, 12); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52); }
public void test00635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00635"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("#############################                                    "); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00636"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 10, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00637"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 100, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00638"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (short) 100, 99, 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test00639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00639"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(82, 5, 84); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5); }
public void test00640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00640"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (-1L), (double) (short) -1, (double) '4'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00641"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 177, (long) 6, (long) 84); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 6L + "'", long3 == 6L); }
public void test00642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00642"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("#############################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"#############################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00643"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(24L, (long) 1, (long) 12); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L); }
public void test00644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00644"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00645"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble(":"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \":\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00646"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 32, (long) 82, (long) 29); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 29L + "'", long3 == 29L); }
public void test00647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00647"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 100, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00648"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("#"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00649"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKIT"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKIT\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00650"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(11, (int) (byte) 10, 52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52); }
public void test00651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00651"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("25.412-b08SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.P", 179.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 179.0f + "'", float2 == 179.0f); }
public void test00652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00652"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) -1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00653"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("Java Platform API Specificatio"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Platform API Specificatio\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00654"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 37L, (double) 5.0f, (double) 0.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 37.0d + "'", double3 == 37.0d); }
public void test00655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00655"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 179.0f, 179.0d, (double) 179L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 179.0d + "'", double3 == 179.0d); }
public void test00656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00656"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("http://java.oracle.com/", (short) (byte) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00657"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 37, (float) 30L, (float) 97); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f); }
public void test00658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00658"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("                             Server                ...VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \" \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00659"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(331.0f, (float) (short) 1, (float) 177); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f); }
public void test00660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00660"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) 0, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00661"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("                                                                                          "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: A blank string is not a valid number"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00662"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Java Virtual Machine Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Virtual Machine Specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00663"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("EDOM DEXIM"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00664"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) '4', (long) 6, (long) 7); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 6L + "'", long3 == 6L); }
public void test00665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00665"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 100, (short) (byte) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00666"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("us1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00667"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 10, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00668"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.wt.X11.XToolkiedom dexi"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00669"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 10.0f, 14.0d, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.0d + "'", double3 == 14.0d); }
public void test00670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00670"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal(" Server VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00671"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 24L, (float) 1L, 52.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f); }
public void test00672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00672"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 7, (long) 6, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 7L + "'", long3 == 7L); }
public void test00673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00673"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("HI!   "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00674"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Java Platform API SpecificationJava Platform API Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Platform API SpecificationJava Platform API Specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00675"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/usr/lib/jvm/java-8-openjdk-amd64//usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00676"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("linuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinuxenlinux"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00677"); byte[] byteArray6 = new byte[] { (byte) -1, (byte) 1, (byte) -1, (byte) 10, (byte) 0, (byte) 0 }; byte byte7 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte8 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); byte byte9 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte10 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte11 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); java.lang.Class<?> wildcardClass12 = byteArray6.getClass(); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 1, -1, 10, 0, 0]"); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10); org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) -1 + "'", byte8 == (byte) -1); org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 10 + "'", byte9 == (byte) 10); org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 10 + "'", byte10 == (byte) 10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) -1 + "'", byte11 == (byte) -1); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test00678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00678"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("           mixed mode           "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00679"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("OpenJDK64-BitServerVM"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00680"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLongorg.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00681"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("6.5.0-35-generic"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00682"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, (int) (short) 10, 12); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00683"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 1, (short) 0, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00684"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) -1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00685"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("-linux-gnu:/usr/lib/jni:/lib:/usr/lib4-linux-gnu:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64:/usr/lib/x86_64/usr/java/packages/lib/amd6"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00686"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/r/b/jvm/jv-8-pejd-md64/jre"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/r/b/jvm/jv-8-pejd-md64/jre\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00687"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("sun.awt.X11.XToolki", 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00688"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) (byte) -1, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00689"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) 10, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00690"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext", (short) (byte) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test00691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00691"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00692"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("edom dexim"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00693"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("4444444444444444444444444444444444/aa", (double) 27); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 27.0d + "'", double2 == 27.0d); }
public void test00694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00694"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                        hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                         "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                        hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                         \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00695"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("1.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4121.8.0_4", (long) 11); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 11L + "'", long2 == 11L); }
public void test00696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00696"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(8, 177, (int) (short) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 177 + "'", int3 == 177); }
public void test00697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00697"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("1.8.0_12"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00698"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("EDOM DEXIM"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00699"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 12L, 1.0f, (float) 44444L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f); }
public void test00700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00700"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (-1L), 0.0d, (double) 7L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00701"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("...latform API Specif", (long) (short) -1); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L)); }
public void test00702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00702"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00703"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("hi!                                                                                                                                                                    "); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00704"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 180.0f, (double) (-1.0f), (double) 84); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 180.0d + "'", double3 == 180.0d); }
public void test00705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00705"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort(""); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00706"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00707"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("4444AAAAAAAAAAAAAAAA", (long) 'a'); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L); }
public void test00708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00708"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 1, 6); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6); }
public void test00709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00709"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("x.11x.tw.nus"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00710"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!  HI!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00711"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("/usr/ja..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00712"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("8.146DMAED", (short) (byte) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00713"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) -1, (short) (byte) 100, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00714"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt(".RSWAPIWSP.CUFUCATU.N", 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00715"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(100.0f, (float) 82, (float) 0L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00716"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 0, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00717"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 0, (long) 99, 44444L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00718"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(97L, 1L, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test00719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00719"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sus"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00720"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) -1, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00721"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) 0, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00722"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00723"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (-1), (long) 20, 27L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00724"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("HTTP://JAVA.ORACLE.COM/", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test00725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00725"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("ODE"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00726"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, 0L, (long) '4'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00727"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 0, (long) 21, (long) 29); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 29L + "'", long3 == 29L); }
public void test00728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00728"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("edomdexim"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00729"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("edomdexi"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00730"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(52L, (long) 52, (long) '#'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L); }
public void test00731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00731"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 100, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00732"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) '4', 237, (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52); }
public void test00733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00733"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 100, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00734"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("deamd641.8"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00735"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(0.0f, 0.0f, (float) 29L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00736"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(3, 14, (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 14 + "'", int3 == 14); }
public void test00737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00737"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.awt.X11.XToolkit##Java Platform API Specification#Java Platform API Specification#"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.a\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00738"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00739"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(52.0f, 0.0f, (float) 6); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00740"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00741"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("       "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00742"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("...   "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00743"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("B"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00744"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 1, (float) 20L, (float) 5); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 20.0f + "'", float3 == 20.0f); }
public void test00745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00745"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(3L, (long) (byte) 1, (long) 0); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L); }
public void test00746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00746"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("SUN.PRINT.PSPRINTERJOB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUN.PRINT.PSPRINTERJOB\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00747"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("444444444444444!4444444444444444"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00748"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("en", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test00749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00749"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00750"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 100, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00751"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("amd641.8amd641.8amd641.8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd641\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00752"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("MIXEDMODEMIXEDMODEMIXEDMODMIXEDMODEMIXEDMODEMIXEDMOD", (float) 'a'); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test00753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00753"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00754"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav", (float) 82); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 82.0f + "'", float2 == 82.0f); }
public void test00755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00755"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00756"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("sun. wt.X11.XToolkit44444444444444444444444444444444444/               4444444444444444444444444444444444444444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00757"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("52.0"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"52.0\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00758"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("oTX.11X.tw.nus1X.tw.nus/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/liboTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00759"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("ode"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00760"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("itSUN.WT.X11.XTOOLKI"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"itSUN.WT.X11.XTOOLKI\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00761"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("4444444444aaaaaaaaaaaaaaaaaaaaaaaaaaaaa/44444444444444444444444444444444444AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/4444444444aaaaaaaaaaaaaaaaaaaaaaaaaaaaa/44444444444444444444444444444444444", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test00762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00762"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 0, 10L, (long) 'a'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00763"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("           mixed mode mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00764"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("rj/46dmerj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/o-8-avaj/mvj/bil/rsu/", (long) 20); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 20L + "'", long2 == 20L); }
public void test00765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00765"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("   amd64"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00766"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("           mixed mode           "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00767"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("44444###############################################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"44444###############################################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00768"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!  HI!"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00769"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) (byte) 10, (short) (byte) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00770"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("uw8w0_4u2-8u4u2-.a-u~22w04wu-b08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Illegal embedded sign character"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00771"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 331L, 6.0f, (float) 237); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 6.0f + "'", float3 == 6.0f); }
public void test00772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00772"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("sun.awt.X11.XToolki"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolki\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00773"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.awt.X11.XToolkit4444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00774"); byte[] byteArray2 = new byte[] { (byte) 10, (byte) 100 }; byte byte3 = org.apache.commons.lang3.math.NumberUtils.min(byteArray2); byte byte4 = org.apache.commons.lang3.math.NumberUtils.min(byteArray2); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, 100]"); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10); }
public void test00775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00775"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 37.0f, 97.0d, (double) (short) 10); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d); }
public void test00776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00776"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("Un.wt.X1sun.wt.X11.XToolkit1.X                                  ", (float) (short) 100); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test00777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00777"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("aa/gaa_aasas.aa_3149116_1718294617/aaagaa/aaassas:/haaa/asaaa/MyWaak/daaaaas4j/aaaaawaak/aab/aasa_gaaaaaaaaa/gaaaaaaaaa/aaadaaa-auaaaaa.jaa:/haaa/asaaa/MyWaak/daaaaas4j/aaaaawaak/a", (double) 3L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.0d + "'", double2 == 3.0d); }
public void test00778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00778"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("8b1.808 11.8.1.881.8.hi!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00779"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 52, 0L, (long) 331); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00780"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("Oracle Corporation"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00781"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("/usr/lib/jvm/java-8-openjdk-amd64/jre", (long) '#'); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L); }
public void test00782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00782"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("aaaaa..."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00783"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("omdexim "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00784"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("                                                                                                                                                                 hi!    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                                                                                                                                                                 hi!    \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00785"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00786"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (short) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test00787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00787"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 100, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00788"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(179L, (long) 29, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00789"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("1.8.0###############################"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00790"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("25.412-b08http://java.oracle.com/http://java.oracle.", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00791"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("rj/46dmerj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/o-8-avaj/mvj/bil/rsu/"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00792"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("###########################################...  ...############################################", (float) 177); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 177.0f + "'", float2 == 177.0f); }
public void test00793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00793"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("52SUN.WT.X11.XTOOLKI", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test00794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00794"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00795"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("\n####"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"####\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00796"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("              ...                                                                                                                                                      "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"    \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00797"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(8, (int) (short) 1, 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test00798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00798"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) 100, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00799"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("4444444444444444444444444444444444444444444444444..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00800"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("                                                UTF-8"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00801"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) -1, (short) 0, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00802"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11GraphicsEnvironment"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00803"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 100, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00804"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.awt.X11.XToolkiedom dexi"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00805"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("Java Virtual Machine Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Virtual Machine Specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00806"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("     "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00807"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, (double) 100.0f, (double) 179); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00808"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(24, 30, 476); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24); }
public void test00809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00809"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("25.412-B08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"25.412-B08\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00810"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(177, 8, 14); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8); }
public void test00811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00811"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("X.X"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00812"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("B44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"B44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00813"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("O C", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test00814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00814"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 20.0f, (double) 51, 4.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 51.0d + "'", double3 == 51.0d); }
public void test00815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00815"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 32, (float) 14, (float) 20L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f); }
public void test00816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00816"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/ja"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/ja is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00817"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) ' ', 2, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32); }
public void test00818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00818"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("AaaaaaaaGB"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00819"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(51, 476, (int) (short) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test00820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00820"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 29L, (double) 52, (double) 12L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00821"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("oTX.11X.tw.nus1X.tw.nus/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/liboTX.11X.tw.nus1X.tw.nus", (long) 19); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 19L + "'", long2 == 19L); }
public void test00822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00822"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloatorg.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00823"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00824"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 179, (double) (short) 100, (double) 27); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 27.0d + "'", double3 == 27.0d); }
public void test00825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00825"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("aaaaaaaaGB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"aaaaaaaaGB\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00826"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("#  "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00827"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00828"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 177.0f, (double) 37, 4.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 177.0d + "'", double3 == 177.0d); }
public void test00829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00829"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("                ..."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00830"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 37, (-1.0f), (float) 31); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 37.0f + "'", float3 == 37.0f); }
public void test00831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00831"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 97, (double) 2L, (double) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d); }
public void test00832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00832"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6", (double) (byte) 1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test00833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00833"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 20.0f, 3.0d, (double) 8); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 20.0d + "'", double3 == 20.0d); }
public void test00834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00834"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("edom dexim"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00835"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("           /usr/ja..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00836"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH", (long) (short) 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test00837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00837"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("8.146dmaed"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00838"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, 0.0d, (double) 44444L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00839"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) -1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00840"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 5, (float) 8L, (float) 30); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 5.0f + "'", float3 == 5.0f); }
public void test00841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00841"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(100.0d, (double) 8, 52.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 8.0d + "'", double3 == 8.0d); }
public void test00842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00842"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 32, (long) 31, (long) ' '); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 31L + "'", long3 == 31L); }
public void test00843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00843"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 3L, 52.0f, (float) 0); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 52.0f + "'", float3 == 52.0f); }
public void test00844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00844"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("xtode:/odeusrode/odejavaode/odepackagesode/odelibode/odeext"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"xtode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00845"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(10.0f, 32.0f, (float) 44444); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 44444.0f + "'", float3 == 44444.0f); }
public void test00846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00846"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (short) 0, 7, (int) (short) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00847"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(11L, (long) 331, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00848"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00849"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 2, 30L, (long) 4); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L); }
public void test00850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00850"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(52, 3, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00851"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("SUN.AWT.X11.XTOOLKIEDOM DEXIM"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00852"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("Java Platform API Specificatio"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00853"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, (long) (byte) 100, (long) 37); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00854"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00855"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("amd641.8amd641.8amd641.8amd64144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b0841.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd641.8amd641.8amd641.8amd64144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b0841.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00856"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("ODE", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00857"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 100, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00858"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(10.0d, (double) 180L, (double) ' '); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d); }
public void test00859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00859"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00860"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00861"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("amd641.8amd641.8amd641.8amd64144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b0841.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64", 180L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 180L + "'", long2 == 180L); }
public void test00862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00862"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("########"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00863"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 10, (short) (byte) 100, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00864"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.awt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00865"); double[] doubleArray2 = new double[] { 1.0d, 2L }; double double3 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray2); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 2.0]"); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.0d + "'", double3 == 2.0d); }
public void test00866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00866"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 6, (long) 8, 24L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24L + "'", long3 == 24L); }
public void test00867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00867"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("tnemnorivnEstnemnorivnE emitnuRrG11X.twa.nusJ"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00868"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("HI!    "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00869"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("mixedmodemixedmodemixedmodemixedmodmixedmodemixedmodemixedmod", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00870"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("                                                  "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00871"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) '#', 32, (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00872"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHTTP://JAVA.ORACLE.COM/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHTTP://JAVA.ORACLE.COM/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00873"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 21, 1L, (long) 20); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L); }
public void test00874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00874"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("sun.wt.X11.XToolkit                                         "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: sun.wt.X11.XToolkit                                         is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00875"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(97.0d, (double) 37.0f, (double) ' '); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d); }
public void test00876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00876"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("SUN.AWT.x11.xtOOLK      "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUN\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00877"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("jAVA vIRTUAL mACHINE sPECIFICATION"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: jAVA vIRTUAL mACHINE sPECIFICATION is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00878"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8", 39.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 39.0d + "'", double2 == 39.0d); }
public void test00879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00879"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jr"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00880"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("SUN.WT.X11.XTOOLKI"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00881"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(82, 0, 21); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 82 + "'", int3 == 82); }
public void test00882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00882"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(84.0f, 0.0f, (float) 37L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 84.0f + "'", float3 == 84.0f); }
public void test00883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00883"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble(".nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00884"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(4, 7, 20); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4); }
public void test00885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00885"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("1.8.0_412", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00886"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("            edomdexim"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00887"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, (long) (short) 1, (long) 'a'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test00888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00888"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus", (float) (short) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test00889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00889"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(30, (int) (byte) 1, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00890"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("MIXEDMODEMIXEDMODEMIXEDMODMIXEDMODEMIXEDMODEMIXEDMOD"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00891"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort(" 44444444     ", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00892"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (byte) -1, 0.0d, 32.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d); }
public void test00893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00893"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("Mixed mode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00894"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOB\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00895"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("amd64   amd64 aa"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00896"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("Oracle Corporation                                         "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00897"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger(".RSWAPIWSP.CUFUCATU.N"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \".RSWAPIWSP.CUFUCATU.N\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00898"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(179, 16, 44444); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); }
public void test00899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00899"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test00900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00900"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(30, 10, (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test00901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00901"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(24.0d, 31.0d, (double) 82); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 24.0d + "'", double3 == 24.0d); }
public void test00902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00902"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444HI!   44444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00903"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("               "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00904"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("amd6418amd6418amd6418"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00905"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("               mixed mode mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \" \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00906"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) (-1), (float) 7L, (float) 45); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00907"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ.../JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jv"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00908"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 52.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d); }
public void test00909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00909"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) '4', 44444.0d, 35.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 44444.0d + "'", double3 == 44444.0d); }
public void test00910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00910"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) (byte) 1, 10.0f, (float) 11L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 11.0f + "'", float3 == 11.0f); }
public void test00911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00911"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("us1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00912"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00913"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(100.0f, (float) (byte) -1, 2.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00914"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", 82.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 82.0d + "'", double2 == 82.0d); }
public void test00915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00915"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) (byte) 1, 6L, (long) 50); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 50L + "'", long3 == 50L); }
public void test00916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00916"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) '#', 32.0d, (double) (short) -1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d); }
public void test00917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00917"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 4.0f, (double) 0.0f, 44444.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00918"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 0, (short) 0, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00919"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md64/jre"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00920"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("###############################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"###############################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00921"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 1L, 0.0f, (float) 10); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f); }
public void test00922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00922"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (byte) 10, 0.0d, (double) (-1)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00923"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA                .../AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00924"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00925"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) -1, (short) (byte) 1, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00926"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (short) 0, (double) 35, (double) 44444); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00927"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGB", (long) (-1)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L)); }
public void test00928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00928"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 7, 0L, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00929"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00930"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(51, 21, (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 51 + "'", int3 == 51); }
public void test00931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00931"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00932"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 30.0f, (double) 20.0f, 177.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 177.0d + "'", double3 == 177.0d); }
public void test00933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00933"); double[] doubleArray1 = new double[] { 14 }; double double2 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double3 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double4 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double5 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double6 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray1); double double7 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray1); org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[14.0]"); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.0d + "'", double3 == 14.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 14.0d + "'", double4 == 14.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 14.0d + "'", double5 == 14.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 14.0d + "'", double6 == 14.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 14.0d + "'", double7 == 14.0d); }
public void test00934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00934"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 12.0f, (double) 97, (double) 16); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d); }
public void test00935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00935"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00936"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGB"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00937"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("Linux     il/rsu/o-8-avaj/mvj/bil/rsu/"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Linux     il/rsu/o-8-avaj/mvj/bil/rsu/\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00938"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(5, 39, 16); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5); }
public void test00939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00939"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, 45, 7); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00940"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(0.0d, (double) 2.0f, (double) 10.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d); }
public void test00941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00941"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 27, 177); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 177 + "'", int3 == 177); }
public void test00942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00942"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00943"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("amd64   amd64 aa"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00944"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat(".5.035gc", (float) 37L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 37.0f + "'", float2 == 37.0f); }
public void test00945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00945"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(37, 0, 97); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00946"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib", 20L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 20L + "'", long2 == 20L); }
public void test00947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00947"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00948"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("oTX.11X...."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00949"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/USR/JAVA/PACKAGES/LIB/AMD64:/USR/LIB/X86_64-LINUX-GNU/JNI:/LIB/X86_64-LINUX-GNU:/USR/LIB/X86_64-LINUX-GNU:/USR/LIB/JNI:/LIB:/USR/LIB", 35); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35); }
public void test00950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00950"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 0, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00951"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("8.146DMAED"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00952"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("/usr/j..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/j...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00953"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("amd641.OpenJDK 64-Bit Server V"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd641.OpenJDK 64-Bit Server V\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00954"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 5, 51); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 51 + "'", int3 == 51); }
public void test00955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00955"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 3L, (double) 11L, (double) 100L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test00956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00956"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("Java Platform API SpecificationJava Platform API Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Platform API SpecificationJava Platform API Specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00957"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("TNEMNORI"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"TNEMNORI\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00958"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00959"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(179, 99, 84); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 179 + "'", int3 == 179); }
public void test00960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00960"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00961"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 476); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 476.0d + "'", double2 == 476.0d); }
public void test00962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00962"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"UN.AWT.X11.XTOOLKIEDOM DEXIM   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00963"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("/////"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/////\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00964"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!", 11L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 11L + "'", long2 == 11L); }
public void test00965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00965"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.asun.a"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00966"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("Jsun.awt.X11GraphicsEnvironment"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Jsun\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00967"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 16, (double) 82.0f, (double) 301); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 301.0d + "'", double3 == 301.0d); }
public void test00968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00968"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, 0.0d, (double) 14); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00969"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-", (double) 14); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); }
public void test00970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00970"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("1.8.0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.8.0aaaa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00971"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) 0, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00972"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(0.0f, (float) 50L, (float) ' '); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00973"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("otx.11x.tw.nus1x.tw.nus/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/libotx.11x.tw.nus1x.tw.nus"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00974"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 100, (short) (byte) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00975"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 1.8f, (double) (byte) 10, (double) 11L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.7999999523162842d + "'", double3 == 1.7999999523162842d); }
public void test00976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00976"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("/usr/lib/jvm/j       v       -8-openjdk-       md64/j"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00977"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("", (int) (byte) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test00978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00978"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 11, (long) '4', (long) 84); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 84L + "'", long3 == 84L); }
public void test00979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00979"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 0, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00980"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 48, (long) 2, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00981"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (short) 1, 24, 19); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24); }
public void test00982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00982"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("                          ", 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test00983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00983"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 0, 37.0f, (float) 35); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00984"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(0.0f, 30.0f, (-1.0f)); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 30.0f + "'", float3 == 30.0f); }
public void test00985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00985"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("jSUN.AWT.x11gRAPHICSPNVIRONMENT"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00986"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("/usr/ja...", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test00987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00987"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00988"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("1.8.0_412-8u412-ga-1~22.04.1-b0", (double) 35L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 35.0d + "'", double2 == 35.0d); }
public void test00989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00989"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("...  ...", (int) (byte) 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00990"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 52, (double) 35, (double) 20); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00991"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("Sun.awt.X11GraphicsEnvironment", (double) 177.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 177.0d + "'", double2 == 177.0d); }
public void test00992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00992"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("               "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00993"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("1.8.0###############################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00994"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("X.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: X.X is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00995"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("1.8.0_12"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.8.0_12\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00996"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) (byte) 10, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00997"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 100, (short) 10, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00998"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("", (-1L)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L)); }
public void test00999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00999"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("#######################isl4m########################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"######################isl4m########################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test01000"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("   /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01001"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("Sun.awt.X11.XToolkSun.awt.X11.XToolkSun.awt.X11.XToolkSun.awt.X11.XToolkSun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01002"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01003"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("\n####", (long) 4); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 4L + "'", long2 == 4L); }
public void test01004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01004"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01005"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 0, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01006"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444HI!   44444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"4444444444444444444444444444444444444444444444444444444444444444444444444444444444444HI!   44444444444444444444444444444444444444444444444444444444444444444444444444444444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01007"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(99, (int) (short) 10, 237); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 237 + "'", int3 == 237); }
public void test01008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01008"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 52, (double) 10.0f, (double) 180.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d); }
public void test01009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01009"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("SUN.PRINT.PSPRINTERJOB                                                                               "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01010"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("Sun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01011"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("44444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01012"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("-linux-gnu:/usr/lib/jni:/lib:/usr/lib4-linux-gnu:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64:/usr/lib/x86_64/usr/java/packages/lib/amd6"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01013"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) -1, (short) 10, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01014"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 50L, (float) 20L, 32.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 20.0f + "'", float3 == 20.0f); }
public void test01015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01015"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 5, (long) 30, 50L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 5L + "'", long3 == 5L); }
public void test01016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01016"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(16, 7, (int) (byte) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test01017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01017"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("Java Platform API SpecificationJava Platform API SpecificationJava Platform API SpecificationJava Platform API SpecificationJava Platform API SpecificationJava Platform API SpecificationJava Platform API SpecificationJava Platform ALinux"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01018"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(30.0f, (float) 32L, (float) 180L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 180.0f + "'", float3 == 180.0f); }
public void test01019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01019"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 1, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01020"); float[] floatArray5 = new float[] { 39L, 0L, 37, 331L, '4' }; float float6 = org.apache.commons.lang3.math.NumberUtils.max(floatArray5); float float7 = org.apache.commons.lang3.math.NumberUtils.max(floatArray5); float float8 = org.apache.commons.lang3.math.NumberUtils.max(floatArray5); float float9 = org.apache.commons.lang3.math.NumberUtils.max(floatArray5); float float10 = org.apache.commons.lang3.math.NumberUtils.min(floatArray5); org.junit.Assert.assertNotNull(floatArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[39.0, 0.0, 37.0, 331.0, 52.0]"); org.junit.Assert.assertTrue("'" + float6 + "' != '" + 331.0f + "'", float6 == 331.0f); org.junit.Assert.assertTrue("'" + float7 + "' != '" + 331.0f + "'", float7 == 331.0f); org.junit.Assert.assertTrue("'" + float8 + "' != '" + 331.0f + "'", float8 == 331.0f); org.junit.Assert.assertTrue("'" + float9 + "' != '" + 331.0f + "'", float9 == 331.0f); org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f); }
public void test01021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01021"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01022"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong(".nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \".nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01023"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("                                                UTF-8", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01024"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("un.wt.X1sun.wt.X11.XToolkit1.X                                  ", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test01025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01025"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("aaaaaaaaGB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01026"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("                                                  ", (float) 0L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test01027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01027"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, (long) 16, (long) 50); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 50L + "'", long3 == 50L); }
public void test01028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01028"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("###########################################...  ...############################################"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01029"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) 100, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01030"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01031"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("sun.awt.X11.XToolkit4444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolkit4444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01032"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("F-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8", (long) (short) 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01033"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("tiklootx.11x.tw.nusthi!otx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nus"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01034"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("4444444444aaaaaaaaaaaaaaaaaaaaaaaaaaaaa/44444444444444444444444444444444444AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/4444444444aaaaaaaaaaaaaaaaaaaaaaaaaaaaa/44444444444444444444444444444444444", (float) 50L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 50.0f + "'", float2 == 50.0f); }
public void test01035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01035"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 1L, 0.0d, (double) 24); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 24.0d + "'", double3 == 24.0d); }
public void test01036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01036"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.awt.X11.XToolkit##Java Platform API Specification#Java Platform API Specification#", (float) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test01037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01037"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01038"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("###########..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"###########...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01039"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 1, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01040"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) 0, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01041"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("11.8.1.881.8.hi!1.8-1.8b1.808"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01042"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("1.8.0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa444444444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01043"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(476.0d, (double) 'a', (double) 100.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 476.0d + "'", double3 == 476.0d); }
public void test01044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01044"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("...   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: ...    is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01045"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(44444, (int) (short) 100, 21); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21); }
public void test01046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01046"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("un.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X", 1.7999999523162842d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.7999999523162842d + "'", double2 == 1.7999999523162842d); }
public void test01047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01047"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(12, 0, 31); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01048"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("Sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01049"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) -1, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01050"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("MIXEDMODEMIXEDMODEMIXEDMODMIXEDMODEMIXEDMODEMIXEDMOD                        "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01051"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 20L, (double) 'a', (double) 1L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test01052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01052"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 52L, (double) 3, (double) 82); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test01053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01053"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("tiklooTX.11X.tw.nustiklooTX.11X.", (int) (short) 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test01054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01054"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-hi!", (double) ' '); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 32.0d + "'", double2 == 32.0d); }
public void test01055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01055"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) 1, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01056"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 100, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01057"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 0, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01058"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 0, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01059"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("", (long) 12); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 12L + "'", long2 == 12L); }
public void test01060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01060"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("jAVA vIRTUAL mACHINE sPECIFICATION", (long) 48); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 48L + "'", long2 == 48L); }
public void test01061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01061"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("tiklootx.11x.tw.nus/                ...r/             "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01062"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("Java virtual machine specification"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01063"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 1, (short) 1, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01064"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("islam"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"islam\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01065"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("HI!   HI!   HI!   HI!   HI!   HI!   HI!   HI!   HI!   HI!   HI!  hi!"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01066"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 29, 180L, 29L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 29L + "'", long3 == 29L); }
public void test01067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01067"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(14.0d, (double) 586, (double) 3L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 586.0d + "'", double3 == 586.0d); }
public void test01068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01068"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ...                 ..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"    \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01069"); float[] floatArray3 = new float[] { 1, 10L, 0 }; float float4 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float5 = org.apache.commons.lang3.math.NumberUtils.max(floatArray3); float float6 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float7 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float8 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); float float9 = org.apache.commons.lang3.math.NumberUtils.min(floatArray3); org.junit.Assert.assertNotNull(floatArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[1.0, 10.0, 0.0]"); org.junit.Assert.assertTrue("'" + float4 + "' != '" + 10.0f + "'", float4 == 10.0f); org.junit.Assert.assertTrue("'" + float5 + "' != '" + 10.0f + "'", float5 == 10.0f); org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f); org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.0f + "'", float7 == 0.0f); org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f); org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f); }
public void test01070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01070"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (short) 1, 11, 179); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test01071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01071"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(82L, 31L, 7L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 7L + "'", long3 == 7L); }
public void test01072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01072"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 45, (long) '#', (long) 180); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 180L + "'", long3 == 180L); }
public void test01073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01073"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(37, 2, 2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2); }
public void test01074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01074"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("itSUN.WT.X11.XTOOLKI", (double) 177); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 177.0d + "'", double2 == 177.0d); }
public void test01075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01075"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01076"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.wt.X1sun...."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01077"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 50L, (double) 37, (double) 100); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test01078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01078"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGB                                                                         "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01079"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 179.0f, (double) 0, 177.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01080"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444HI!   44444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"4444444444444444444444444444444444444444444444444444444444444444444444444444444444444HI!   44444444444444444444444444444444444444444444444444444444444444444444444444444444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01081"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, (long) 50, 24L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01082"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("...    "); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01083"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01084"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!  hi!", 14.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); }
public void test01085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01085"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 0, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01086"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01087"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, 19L, 11L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 19L + "'", long3 == 19L); }
public void test01088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01088"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(48, (int) (short) 10, 30); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48); }
public void test01089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01089"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("#####################sun.asun.a#####################                ", (double) 82.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 82.0d + "'", double2 == 82.0d); }
public void test01090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01090"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("UN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01091"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("OpenJDK Runtime Environment", (float) 237); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 237.0f + "'", float2 == 237.0f); }
public void test01092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01092"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("aaaaa...", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01093"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("           /usr/ja...", 476.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 476.0d + "'", double2 == 476.0d); }
public void test01094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01094"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 84, 180); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 180 + "'", int3 == 180); }
public void test01095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01095"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) -1, (byte) 100, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01096"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) 10, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01097"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("-1~22.04.1-b08a44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01098"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 0, (double) 0.0f, (double) 100.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01099"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("...-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01100"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 12, (long) 20, (long) 331); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test01101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01101"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!   hi!  hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01102"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("Ode", 21); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21); }
public void test01103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01103"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("0b-1.40.22~1-g-214u8-21444444###############################################44444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Illegal embedded sign character"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01104"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 82L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 82.0d + "'", double2 == 82.0d); }
public void test01105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01105"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("sun.wt.X1sun...."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X1sun....\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01106"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(35, 97, 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97); }
public void test01107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01107"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01108"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) (byte) 1, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01109"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(331L, 0L, (long) 27); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test01110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01110"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("un.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.XSUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01111"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigitsorg.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01112"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("SUN.AWT.X11.XTOOLK", 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01113"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("http://java.oracle.com/", (float) 87); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 87.0f + "'", float2 == 87.0f); }
public void test01114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01114"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("                                     Mixed mode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message:                                      Mixed mode is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01115"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/USR/JA..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01116"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("tiklootx.11x.tw.nusthi!otx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nustiklootx.11x.tw.nus"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01117"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01118"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("Sun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01119"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) -1, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01120"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) (byte) 100, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01121"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 0, (float) 48, (float) 476); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 476.0f + "'", float3 == 476.0f); }
public void test01122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01122"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("   amd64"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01123"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("HI!    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"HI!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01124"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("   SUN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01125"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) (byte) 0, (float) 84, 1.8f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test01126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01126"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 10, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01127"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 30, 39L, (long) (byte) -1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test01128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01128"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, (double) 37, 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01129"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("0b-1.40.22~1-g-214u8-214_0.8.14444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"0b-1.40.22~1-g-214u8-214_0.8.14444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01130"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("52...", (float) 35); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 35.0f + "'", float2 == 35.0f); }
public void test01131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01131"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 0, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01132"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("sun.wt.X1sun...."); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01133"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.awt.X11.XToolkiedom dexim"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01134"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(0.0f, (float) 51, (float) 1L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 51.0f + "'", float3 == 51.0f); }
public void test01135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01135"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 10, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01136"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01137"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) (-1L), (float) 14, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 14.0f + "'", float3 == 14.0f); }
public void test01138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01138"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01139"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) -1, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01140"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("###########################################...  ...############################################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"###########################################...  ...############################################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01141"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("   amd64   amd64 aa", 179); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 179 + "'", int2 == 179); }
public void test01142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01142"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01143"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("SUN.AWT.x11.xtOOLK      "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01144"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) -1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01145"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-hi! is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01146"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01147"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("           /USR/JA..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"           /USR/JA...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01148"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("c"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01149"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("/USR/JAVA/PACKAGES/LIB/AMD64:/USR/LIB/X86_64-LINUX-GNU/JNI:/LIB/X86_64-LINUX-GNU:/USR/LIB/X86_64-LINUX-GNU:/USR/LIB/JNI:/LIB:/USR/LIB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01150"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(0.0f, (float) 20L, (float) 87); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test01151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01151"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01152"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("Jsun.awt.X11GraphicsEnvironment"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Jsun.awt.X11GraphicsEnvironment\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01153"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 100, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01154"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("otx.11x.tw.nus1x.tw.nus/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/libotx.11x.tw.nus1x.tw.n", (double) 84); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 84.0d + "'", double2 == 84.0d); }
public void test01155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01155"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 10, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01156"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 10, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01157"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, (int) (short) 100, 35); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test01158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01158"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("                                     mIXED MODE"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mIXED MODE\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01159"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sus", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test01160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01160"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/USR/JAVA/PACKAGES/LIB/AMD64:/USR/LIB/X86_64-LINUX-GNU/JNI:/LIB/X86_64-LINUX-GNU:/USR/LIB/X86_64-LINUX-GNU:/USR/LIB/JNI:/LIB:/USR/LIB"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01161"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 2L, 177.0f, (float) 179); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 179.0f + "'", float3 == 179.0f); }
public void test01162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01162"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 52, 2L, (long) 99); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 99L + "'", long3 == 99L); }
public void test01163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01163"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("openJDK 64-Bit Server VM"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01164"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 4, (long) (short) -1, (long) 100); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test01165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01165"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11.XToolkitJava Platform API SpecificationJava Platform API Specification"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01166"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01167"); java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("44444"); org.junit.Assert.assertNotNull(bigDecimal1); }
public void test01168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01168"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("Linux     il/rsu/o-8-avaj/mvj/bil/rsu/"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01169"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 48L, 331.0f, (float) 216); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 331.0f + "'", float3 == 331.0f); }
public void test01170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01170"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/usr/lib/jvm/j       v       -8-openjdk-       md64/j"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/j       v       -8-openjdk-       md64/j\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01171"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("JavaPlatformAPISpecificatio", (short) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01172"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 0, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01173"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("######           mixed mode    #######"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01174"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 2.0f, (double) 12L, (double) 1.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test01175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01175"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("444444", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test01176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01176"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(4, 24, 84); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 84 + "'", int3 == 84); }
public void test01177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01177"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("amd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aaamd64   amd64 aa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01178"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.PSPRINTERJOB is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01179"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("   amd64   amd64 aa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01180"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("11.XTOOitSUN.WT.X11.XTOOL"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"11.XTOOitSUN.WT.X11.XTOOL\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01181"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(100L, (long) 179, (long) 2); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L); }
public void test01182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01182"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("52..."); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01183"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 48L, (double) 1, (double) 10L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test01184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01184"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("amd641.OpenJDK 64-Bit Server VM"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01185"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("OPENJDK 64-BIT SERVER VM", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01186"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 177, 20.0d, (double) 3L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test01187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01187"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("#####################..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01188"); long[] longArray6 = new long[] { 1, '4', 5, 14, 10, (byte) 0 }; long long7 = org.apache.commons.lang3.math.NumberUtils.max(longArray6); long long8 = org.apache.commons.lang3.math.NumberUtils.min(longArray6); java.lang.Class<?> wildcardClass9 = longArray6.getClass(); org.junit.Assert.assertNotNull(longArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[1, 52, 5, 14, 10, 0]"); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test01189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01189"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Private Build"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Private Build\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01190"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(48, (int) ' ', 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48); }
public void test01191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01191"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("Java virtual machine specification", (float) 45); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 45.0f + "'", float2 == 45.0f); }
public void test01192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01192"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("Linux       ", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test01193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01193"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01194"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) 0, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01195"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("UTF-8UT...   UTF-8UTF"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01196"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("", 30); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 30 + "'", int2 == 30); }
public void test01197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01197"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("xunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunil"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"xunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunilnexunil\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01198"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat(".nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus", (float) 39); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 39.0f + "'", float2 == 39.0f); }
public void test01199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01199"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(476.0d, (double) 12.0f, (double) 32L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 12.0d + "'", double3 == 12.0d); }
public void test01200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01200"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("Java Platform API Specificatio"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01201"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(5L, 99L, (long) ' '); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 99L + "'", long3 == 99L); }
public void test01202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01202"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("sun.awt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01203"); short[] shortArray2 = new short[] { (short) 10, (short) 0 }; short short3 = org.apache.commons.lang3.math.NumberUtils.min(shortArray2); short short4 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short5 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short6 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short7 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short8 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); org.junit.Assert.assertNotNull(shortArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[10, 0]"); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10); org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 10 + "'", short5 == (short) 10); org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 10 + "'", short6 == (short) 10); org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 10 + "'", short7 == (short) 10); org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10); }
public void test01204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01204"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 20, (long) 48, 3L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L); }
public void test01205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01205"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01206"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 100, (short) -1, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01207"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 301, 331L, (long) 20); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test01208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01208"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("25.412-b08SUN.PRINT.PSPRINTERJOBHI!   SUN.PRINT.P"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01209"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("omdexim "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"omdexim \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01210"); float float3 = org.apache.commons.lang3.math.NumberUtils.max(0.0f, (float) 19L, (float) 29L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 29.0f + "'", float3 == 29.0f); }
public void test01211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01211"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01212"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("4444444444444444444444444444444444444444444444444444", (float) 2L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + Float.POSITIVE_INFINITY + "'", float2 == Float.POSITIVE_INFINITY); }
public void test01213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01213"); byte[] byteArray1 = new byte[] { (byte) 1 }; byte byte2 = org.apache.commons.lang3.math.NumberUtils.max(byteArray1); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max(byteArray1); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[1]"); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01214"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("                             Server                ...VM", (long) 586); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 586L + "'", long2 == 586L); }
public void test01215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01215"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(84, 50, (int) (short) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01216"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(331.0f, (float) 12, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test01217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01217"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("JavawPlatf.rswAPIwSp.cufucatu.n"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: JavawPlatf.rswAPIwSp.cufucatu.n is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01218"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/usr/lib/jvm/java-8-openjdk-amd64/jr"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-openjdk-amd64/jr\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01219"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(45, 37, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 45 + "'", int3 == 45); }
public void test01220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01220"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("sLinux                                  ", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01221"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("LATF.RSWAPIWSP.CUFUCATU.N", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test01222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01222"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("AaaaaaaaGB", (float) 30L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 30.0f + "'", float2 == 30.0f); }
public void test01223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01223"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmodesun.awt.X11.XToolkit4444mixedmode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01224"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("...o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jr"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01225"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk           1.8.0_12Sun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01226"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("amd64"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01227"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("OpenJDK64-...", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01228"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64", (short) (byte) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test01229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01229"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("########################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"########################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01230"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01231"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("            edomdexim"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01232"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("amd641.OpenJDK 64-Bit Server V"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd641.OpenJDK 64-Bit Server V\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01233"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 99, (long) 100, 52L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L); }
public void test01234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01234"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(180, 4, 50); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 180 + "'", int3 == 180); }
public void test01235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01235"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(237, 33, 237); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 237 + "'", int3 == 237); }
public void test01236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01236"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01237"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) -1, (short) 0, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01238"); short[] shortArray2 = new short[] { (short) 10, (short) 0 }; short short3 = org.apache.commons.lang3.math.NumberUtils.min(shortArray2); short short4 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short5 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short6 = org.apache.commons.lang3.math.NumberUtils.min(shortArray2); short short7 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); short short8 = org.apache.commons.lang3.math.NumberUtils.max(shortArray2); org.junit.Assert.assertNotNull(shortArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[10, 0]"); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10); org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 10 + "'", short5 == (short) 10); org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0); org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 10 + "'", short7 == (short) 10); org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 10 + "'", short8 == (short) 10); }
public void test01239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01239"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("edomdeximsaaaaaaaaaaaaaaaaaaa ", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01240"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01241"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", 51.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 51.0d + "'", double2 == 51.0d); }
public void test01242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01242"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01243"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("", (float) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test01244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01244"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("/USR/JAVA/PACKAGES/LIB/AMD64:/USR/LIB/X86_64-LINUX-GNU/JNI:/LIB/X86_64-LINUX-GNU:/USR/LIB/X86_64-LINUX-GNU:/USR/LIB/JNI:/LIB:/USR/LIB"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01245"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) 10, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01246"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("TIKLOOTX.11X.TW.NUSTHI!OTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUSTIKLOOTX.11X.TW.NUS", (long) 20); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 20L + "'", long2 == 20L); }
public void test01247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01247"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("Java Platform API Specificatio"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01248"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 'a', (long) 301, 35L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 301L + "'", long3 == 301L); }
public void test01249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01249"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(32, 52, 84); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 84 + "'", int3 == 84); }
public void test01250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01250"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(82.0d, 180.0d, (double) (byte) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01251"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 7, (float) 331L, 3.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 3.0f + "'", float3 == 3.0f); }
public void test01252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01252"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01253"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("M", (long) 586); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 586L + "'", long2 == 586L); }
public void test01254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01254"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01255"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                                                UTF-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                                                UTF-8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01256"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("44444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01257"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(30L, 97L, 37L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 30L + "'", long3 == 30L); }
public void test01258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01258"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test01259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01259"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("      ", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01260"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("Oracle Corporation                                         "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Oracle Corporation                                         \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01261"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("                 IKLOOTX.11X.TW.NUS"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01262"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("       "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"       \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01263"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte(".5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5V revreS tiB-46 KDJnepO.146dmaeneg-53-0.5.6cireneg-53-0.5.64.52", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test01264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01264"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("..."); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01265"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 30, 14.0f, (float) 11); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 11.0f + "'", float3 == 11.0f); }
public void test01266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01266"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("80b-1.40.22~1-g-214u8-214_0.8.14444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01267"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01268"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("           mixed mode    sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixed mode    sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01269"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("1.8.0_412", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01270"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Illegal embedded sign character"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01271"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, (double) 0L, (double) 39.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01272"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("    ", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test01273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01273"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (byte) 0, (long) 301, (long) 14); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01274"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 331, (long) 82, (long) ' '); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test01275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01275"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("...SU/:46DMA/BIL/SEGAKCAP/AVAJ/RSU/"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01276"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("/USR/JAVA/PACKAGES/LIB/AMD64:/US..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/USR/JAVA/PACKAGES/LIB/AMD64:/US...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01277"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) 1, (short) (byte) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01278"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) -1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test01279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01279"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("ode", (short) (byte) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test01280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01280"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) -1, (short) 0, (short) (byte) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01281"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.print.PSPrinterJob     ", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01282"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("#######################isl#m##"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01283"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 10, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01284"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(3L, 2L, (long) 51); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 51L + "'", long3 == 51L); }
public void test01285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01285"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01286"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("0b-1...."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"b-1....\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01287"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("hi!", (short) (byte) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test01288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01288"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("...-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01289"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) 1, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01290"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (byte) -1, (int) 'a', 83); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01291"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 35, 51.0d, 16.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d); }
public void test01292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01292"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) 1, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01293"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01294"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("b44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-ga-1~22.04.1-b08"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01295"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 0, 35L, (long) 42); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 42L + "'", long3 == 42L); }
public void test01296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01296"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("444OpenJDK 64-Bit Server VM444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"444OpenJDK 64-Bit Server VM444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01297"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("...  ..", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01298"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 331, 0L, (long) 216); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test01299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01299"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("AAAAAAAAAAAAAAAA"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"AAAAAAAAAAAAAAAA\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01300"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 51L, (float) 32L, 3.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 3.0f + "'", float3 == 3.0f); }
public void test01301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01301"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("edomdexi##"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01302"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (short) 10, 24, 177); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test01303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01303"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(52.0d, 0.0d, 12.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01304"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("                          "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01305"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, 21, 42); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01306"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 39, 0L, (long) 21); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01307"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.print.PSPrinterJob     "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01308"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("...t.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01309"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("Mixed modeaaaaaaaaaaaaaaaaaaaaaaaaaaa", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01310"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 39, (double) 15, 20.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 39.0d + "'", double3 == 39.0d); }
public void test01311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01311"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("46dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.146dma8.1480b-1.40.22~1-g-214u8-214_0.8.14444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444146dma8.146dma8.146dma8.146dma", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01312"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01313"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("HTTP://JAVA.ORACLE.COM/aaaaaaaaaaaaaaaa", (long) '#'); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L); }
public void test01314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01314"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("                                          "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: A blank string is not a valid number"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01315"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("HTTP://JAVA.ORACLE.COM/aaaaaaaaaaaaaaaa", 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01316"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01317"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) 0, (short) (byte) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01318"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 48, (float) 7, (float) (byte) 1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 48.0f + "'", float3 == 48.0f); }
public void test01319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01319"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("1.8-1.8b1.808 11.8.1.881.8.hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1.8-1.8b1.808 11.8.1.881.8.hi!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01320"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("####...", 301L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 301L + "'", long2 == 301L); }
public void test01321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01321"); java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("8"); org.junit.Assert.assertEquals("'" + number1 + "' != '" + 8 + "'", number1, 8); }
public void test01322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01322"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("Private Build", (float) 331L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 331.0f + "'", float2 == 331.0f); }
public void test01323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01323"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(8L, (long) 45, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test01324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01324"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(12, 27, 21); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12); }
public void test01325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01325"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 0, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01326"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01327"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("                     amd64                  ", (double) 331); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 331.0d + "'", double2 == 331.0d); }
public void test01328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01328"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 4, (float) (byte) 100, (float) 24); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 4.0f + "'", float3 == 4.0f); }
public void test01329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01329"); short[] shortArray3 = new short[] { (byte) 10, (short) 1, (short) 10 }; short short4 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); short short5 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); short short6 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); short short7 = org.apache.commons.lang3.math.NumberUtils.max(shortArray3); short short8 = org.apache.commons.lang3.math.NumberUtils.min(shortArray3); java.lang.Class<?> wildcardClass9 = shortArray3.getClass(); org.junit.Assert.assertNotNull(shortArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10, 1, 10]"); org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1); org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 1 + "'", short5 == (short) 1); org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 1 + "'", short6 == (short) 1); org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 10 + "'", short7 == (short) 10); org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 1 + "'", short8 == (short) 1); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test01330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01330"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) 0, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01331"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("Oracle Corporation", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01332"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 10, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01333"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("otx.11x.tw.nus1x.tw.nus/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/libotx.11x.tw.nus1x.tw.nu"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01334"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("\n####"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01335"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Server       "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Server\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01336"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(1.7999999523162842d, (double) 6L, (double) (byte) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01337"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("#######################islam########################", (double) 8.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 8.0d + "'", double2 == 8.0d); }
public void test01338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01338"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("Sun.wt.x11.x", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01339"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(586.0d, (double) 20, (double) 39); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 20.0d + "'", double3 == 20.0d); }
public void test01340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01340"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 48L, (double) 476.0f, (double) 20.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 476.0d + "'", double3 == 476.0d); }
public void test01341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01341"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("mixedmodemixedmodemixedmodemixedmodmixedmodemixedmodemixedmod", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01342"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("               mixed mode mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod    ", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01343"); byte[] byteArray3 = new byte[] { (byte) 1, (byte) -1, (byte) 1 }; byte byte4 = org.apache.commons.lang3.math.NumberUtils.min(byteArray3); byte byte5 = org.apache.commons.lang3.math.NumberUtils.max(byteArray3); byte byte6 = org.apache.commons.lang3.math.NumberUtils.max(byteArray3); byte byte7 = org.apache.commons.lang3.math.NumberUtils.min(byteArray3); byte byte8 = org.apache.commons.lang3.math.NumberUtils.max(byteArray3); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, -1, 1]"); org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) -1 + "'", byte4 == (byte) -1); org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 1 + "'", byte5 == (byte) 1); org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 1 + "'", byte6 == (byte) 1); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) -1 + "'", byte7 == (byte) -1); org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 1 + "'", byte8 == (byte) 1); }
public void test01344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01344"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.awt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01345"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("           /usr/ja..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"           /usr/ja...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01346"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("6d..."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01347"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 100, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01348"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("", (float) 51L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 51.0f + "'", float2 == 51.0f); }
public void test01349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01349"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01350"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("edomdexim/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md64/jresun.print.PSPrinterJobMixed mode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01351"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGB", 237); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 237 + "'", int2 == 237); }
public void test01352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01352"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(3.0f, (float) 83, (float) 21); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 3.0f + "'", float3 == 3.0f); }
public void test01353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01353"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.a#####################                ", (short) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test01354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01354"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa2-8u412-ga-1~22.04.1-b0"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01355"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(21, 44444, (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01356"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("IKLOOTX.11X.TW.NUS", 180.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 180.0d + "'", double2 == 180.0d); }
public void test01357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01357"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.wt.X1sun.wt.X11.XToolkit1.sunwtX11XToolkitDPltforAPISecifictionDPltforAPISecifiction", (double) 7L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 7.0d + "'", double2 == 7.0d); }
public void test01358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01358"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa2-8u412-ga-1~22.04.1-b0"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01359"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("Sun.awt.X11GraphicsEnvironment", (short) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test01360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01360"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("                 ..."); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01361"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 476, 44444.0d, (double) '#'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 44444.0d + "'", double3 == 44444.0d); }
public void test01362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01362"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 1, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01363"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("######           m/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/javxed mode    #######"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"######           m/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav  /JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/javxed mode    #######\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01364"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) -1, (short) (byte) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01365"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("n.wt.X11.XToolkitcat"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01366"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("                                                                         Java Pl..                                                                         "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01367"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 100, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01368"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(7, 0, (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01369"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("mixed modeaaaaaaaaaaaaaaaaaaaaaaaaaaa", (double) 42L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 42.0d + "'", double2 == 42.0d); }
public void test01370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01370"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("/odeusrode/odelibode/odejvmode/odejavaode-ode8ode-odeopenjdkode-odeamdode64ode/odejreode/odelibode/odeextode:/odeusrode/odejavaode/odepackagesode/odelibode/odeext"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01371"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 0, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01372"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.", (float) 216); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 216.0f + "'", float2 == 216.0f); }
public void test01373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01373"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("jAVApLATFORMapisPECIFICATIO"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01374"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(51, 216, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01375"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1su"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01376"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("     sun.awt.X11GraphicsEnvironment     "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01377"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 18, (long) 48, 44444L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 44444L + "'", long3 == 44444L); }
public void test01378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01378"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("ode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"ode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01379"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 0, 16.0d, 8.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d); }
public void test01380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01380"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 0, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01381"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 10, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01382"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(18, 0, 19); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01383"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("   amd64mixed modeaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   amd64mixed modeaaaaaaaaaaaaaaaaaaaaaaaaaaa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01384"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("Ode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Ode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01385"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("omdexim                                                                                                                                                                                                                                           "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01386"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("25.46.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5."); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01387"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("4444444444444444444444444444444444444444444444444.."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01388"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("hi!                                                                                                                                                                    "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01389"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01390"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jr"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jrsun.wt.X1sun.wt.X11.XToolkit1.XToolkit/usr/lib/jvm/java-8-o/usr/lib/jvm/java-8-openjdk-amd64/jremd64/jr\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01391"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01392"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 100, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test01393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01393"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test01394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01394"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-ga-1~22.04.1-b08"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test01395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01395"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01396"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, (double) 237, 301.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01397"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("oTX.11X.tw.nus1X.tw.nustiklooTX.1tiklooTX.11X.twTIKLOOTX.11X.TW.NUStiklooTX.11X.twa.nus     ", (double) 48.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 48.0d + "'", double2 == 48.0d); }
public void test01398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01398"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 15, 30L, (long) 31); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15L + "'", long3 == 15L); }
public void test01399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01399"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 586, 31L, 331L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 586L + "'", long3 == 586L); }
public void test01400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01400"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(3, 177, 50); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 177 + "'", int3 == 177); }
public void test01401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01401"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("...   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"...   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01402"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("   amd64    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   amd64    \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01403"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun....sun.wt.X1sun", 74); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test01404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01404"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("52.0"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01405"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 1, (byte) -1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01406"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 100, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test01407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01407"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) (byte) 1, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01408"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("amd6 ", (double) 100); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d); }
public void test01409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01409"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 19, (long) 10, 586L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 586L + "'", long3 == 586L); }
public void test01410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01410"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.print.PSPrinterJob"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01411"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("IKLOOTX.11X.TW.NUS"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: IKLOOTX.11X.TW.NUS is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01412"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGB"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaGB\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01413"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 0, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01414"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(4L, 7L, (long) 87); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 87L + "'", long3 == 87L); }
public void test01415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01415"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble(".5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5.6cireneg-53-0.5V revreS tiB-46 KDJnepO.146dmaeneg-53-0.5.6cireneg-53-0.5.64.52"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01416"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01417"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/usr/lib/jvm/java-8-openjdk-JavawPlatf.rswAPIwSp.cufucatu.n/j", (int) 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97); }
public void test01418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01418"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01419"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 10, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test01420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01420"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.awt.X11.XToolkiedom dex"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01421"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("6.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: 6.5.0-35-generic6.5.0-35-geneamd641.OpenJDK 64-Bit Server V5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01422"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("OPENJDK 64-BIT SERVER VM", (int) (byte) 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test01423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01423"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 37L, (float) 22, (float) 180L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 180.0f + "'", float3 == 180.0f); }
public void test01424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01424"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("/             /             ", 14.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); }
public void test01425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01425"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("############################################1"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"############################################1\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01426"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("aa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"aa\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01427"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("Sun. wt.X11.XToolkit44444444444444444444444444444444444/               4444444444444444444444444444444444444444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444J v Pl tform PI Specific tion44444444444444444444444444444444444/               44444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Sun. \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01428"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("                ..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01429"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 1, (short) (byte) 1, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test01430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01430"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("hi!            ..."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01431"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) (byte) 100, 48L, 20L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test01432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01432"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("omdexim ", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01433"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(83, (int) (short) 10, 66); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 83 + "'", int3 == 83); }
public void test01434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01434"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) (byte) 1, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01435"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByteorg.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01436"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sunJava Platform API Specificatio"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sunJav\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01437"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, 476, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01438"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 32, 0.0d, (double) 37.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test01439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01439"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 33, (long) 31, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 33L + "'", long3 == 33L); }
public void test01440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01440"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("                                                                                             !IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH", (float) (byte) 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test01441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01441"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("####################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"####################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01442"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("Runtime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime EnvironmentRuntime Environment"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01443"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 33L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 33.0d + "'", double2 == 33.0d); }
public void test01444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01444"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("                                                                                          "); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01445"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong(".nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus", (long) 30); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 30L + "'", long2 == 30L); }
public void test01446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01446"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("##################################SUN.WT.X11.XTOOLKI", (double) 301L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 301.0d + "'", double2 == 301.0d); }
public void test01447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01447"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte(".AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X                                  SUN.AWT.X11.XTOOLKun.wt.X1sun.wt.X11.XToolkit1.X             ", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test01448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01448"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, 27, (int) '4'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01449"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("#######################islam##"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"######################islam##\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01450"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("SUN.AWT.x11.xtOOLK", (double) 6L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.0d + "'", double2 == 6.0d); }
public void test01451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01451"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 1, (short) 10, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test01452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01452"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("/jre4/                ...r/                ...b/jvm/j                ...v                ...-8-                ...pe                ...jd                ...-                ...md6"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01453"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("s", 37L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 37L + "'", long2 == 37L); }
public void test01454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01454"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(84, 50, 16); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); }
public void test01455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01455"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8u412-g-1~22.04.1-b08"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test01456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01456"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                                     mIXED MODE"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                                     mIXED MODE\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01457"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01458"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 10, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test01459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01459"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, 50L, 8L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 50L + "'", long3 == 50L); }
public void test01460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01460"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("T.X11.XTOOLKITwt.X11.XToolkit1.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"T.X11.XTOOLKITwt.X11.XToolkit1.X\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01461"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test01462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01462"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaGBaaaaaaaaaaaaaaaaaaaaa", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test01463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01463"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("                        hi!                         "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01464"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 19, 37L, (long) 586); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 19L + "'", long3 == 19L); }
public void test01465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01465"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 74, (long) 10, (long) 99); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 99L + "'", long3 == 99L); }
public void test01466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01466"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("a64                                        "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01467"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("TNEMNORIVNeSCIHPARg11x.TWA.NUSj", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test01468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01468"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (short) 100, 0, 31); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test01469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01469"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("sunwtX11XToolkitDPltforAPISecifictionDPltforAPISecifiction"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sunwtX11XToolkitDPltforAPISecifictionDPltforAPISecifiction\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01470"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(0L, (long) 1, (long) 100); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test01471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01471"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("aaaaaOpenJDK 64-Bit Server VMaaaaaa"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01472"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun4444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01473"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01474"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("80b-1.40.22~1-ag-214u8-214_0.8.14444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444b", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test01475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01475"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 100, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test01476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01476"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("44OPENJDK 64-BIT SERVER VM444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Illegal embedded sign character"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01477"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("                        domdeximedomdeximedomdeximdomdeximedomdeximedomdexim edom dexim                                   ", 52.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 52.0f + "'", float2 == 52.0f); }
public void test01478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01478"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixedmo\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01479"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("I411.XTOOITSUN.WT.X11.XTOOL", (float) (byte) 100); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test01480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01480"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) (byte) 1, (short) (byte) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test01481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01481"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 0, (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test01482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01482"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(331.0d, (double) 99L, (double) 10L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 331.0d + "'", double3 == 331.0d); }
public void test01483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01483"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 30, (double) 1L, 30.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 30.0d + "'", double3 == 30.0d); }
public void test01484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01484"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(31, (int) '4', 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01485"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("...         mIXED MODE"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01486"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("                          ", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test01487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01487"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(5, 18, 5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18 + "'", int3 == 18); }
public void test01488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01488"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("HI!   HI!   HI!   HI!   HI!   HI!   HI!   HI! sus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusHI!   HI!   HI!   HI!   HI!   HI!   HI!   HI!  ", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test01489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01489"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("tiklooTX.11X.tw.nus"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01490"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("Java Pl.."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01491"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.wt.X1sun....JDK64-..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test01492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01492"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("rj/46dmerj/46dma-kdjnepo-8-avaj/mvj/bil/rsu/o-8-avaj/mvj/bil/rsu/"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test01493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01493"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal(".a#####################                "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01494"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("S          "); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test01495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01495"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("25.412-b08http://java.oracle.com/http://java.oracle."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test01496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01496"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(0.0d, (double) 8.0f, (double) 82L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 82.0d + "'", double3 == 82.0d); }
public void test01497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01497"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("A.ORACLE.COM/"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test01498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01498"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 35, (double) (byte) 1, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d); }
public void test01499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01499"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 125, 0L, 20L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 125L + "'", long3 == 125L); }
public void test01500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01500"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("                        hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                         "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!                                                 hi!\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00001"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte(""); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00002"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (-1L), 0.0d, 1.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test00003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00003"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/usr/lib/jvm/java-8-openjdk-amd64/jre"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00004"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("52.0"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00005"); short[] shortArray0 = new short[] {}; // The following exception was thrown during execution in test generation try { short short1 = org.apache.commons.lang3.math.NumberUtils.min(shortArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty."); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(shortArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]"); }
public void test00006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00006"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("1.8.0_412-8u412-ga-1~22.04.1-b08", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test00007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00007"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00008"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11.XToolk"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00009"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.wt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00010"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (byte) 10, (long) (byte) 0, (long) ' '); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00011"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.awt.X11.XToolkitJava Platform API SpecificationJava Platform API Specification"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00012"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("/"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00013"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00014"); org.apache.commons.lang3.math.NumberUtils numberUtils0 = new org.apache.commons.lang3.math.NumberUtils(); }
public void test00015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00015"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("mixed mode"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00016"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(1.0f, (float) (-1L), 100.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00017"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(52.0d, (double) 10, 10.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00018"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("Java Platform API Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Platform API Specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00019"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("amd64", (float) (byte) -1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test00020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00020"); short[] shortArray0 = null; // The following exception was thrown during execution in test generation try { short short1 = org.apache.commons.lang3.math.NumberUtils.max(shortArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00021"); long[] longArray0 = null; // The following exception was thrown during execution in test generation try { long long1 = org.apache.commons.lang3.math.NumberUtils.min(longArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00022"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("amd64"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00023"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("/usr/lib/jvm/java-8-openjdk-amd64/jre", (long) 100); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L); }
public void test00024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00024"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) (byte) 1, 0.0f, (float) (short) 0); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f); }
public void test00025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00025"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("\n"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00026"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("/usr/lib/jvm/java-8-openjdk-amd64/jre"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00027"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.awt.X11GraphicsEnvironment"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00028"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64", 100.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test00029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00029"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("edom dexim", (float) (-1)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test00030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00030"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("52.0"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 52.0d + "'", double1 == 52.0d); }
public void test00031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00031"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: A blank string is not a valid number"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00032"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("/"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00033"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Zero length string"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00034"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00035"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) (byte) 100, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00036"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 'a', 100L, (long) 10); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test00037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00037"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 100, (short) (byte) 10, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00038"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("Linux"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00039"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) -1, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00040"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00041"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("X.X"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00042"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("X.X", (short) (byte) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test00043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00043"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00044"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) (-1L), 0.0f, (float) (short) 0); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00045"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("Oracle Corporation"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00046"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 10.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d); }
public void test00047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00047"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("islam", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00048"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 100, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00049"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00050"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("Java Platform API Specification"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00051"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 1, (byte) 10, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00052"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.awt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00053"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Java Platform API Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Java Platform API Specification\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00054"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(10L, (long) (byte) 1, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L); }
public void test00055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00055"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(39L, (long) (byte) 100, (long) ' '); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test00056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00056"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 39, 0.0f, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 39.0f + "'", float3 == 39.0f); }
public void test00057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00057"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("B"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00058"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 52L, (double) 39L, (double) (-1L)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00059"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 0, (short) 0, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00060"); float[] floatArray0 = null; // The following exception was thrown during execution in test generation try { float float1 = org.apache.commons.lang3.math.NumberUtils.max(floatArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00061"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 180, (float) 39L, 100.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 39.0f + "'", float3 == 39.0f); }
public void test00062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00062"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("Mixed mode"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00063"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("sun.awt.X11.XToolk"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolk\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00064"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 1, 0.0f, (float) (short) -1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00065"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(14, 3, 2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2); }
public void test00066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00066"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) '4', (double) 1, (double) 100.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test00067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00067"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 3, (double) '4', (double) 3); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test00068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00068"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("sun.wt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X1sun.wt.X11.XToolkit1.XToolkit\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00069"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) -1, (short) 0, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00070"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("1.8.0_412-8u412-ga-1~22.04.1-b0"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00071"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(32, 100, 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test00072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00072"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("sun.awt.X11.XToolki"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolki\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00073"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) '#', 37, 30); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30); }
public void test00074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00074"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 100, (short) (byte) 10, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00075"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("islam"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00076"); java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("1.8"); org.junit.Assert.assertEquals("'" + number1 + "' != '" + 1.8f + "'", number1, 1.8f); }
public void test00077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00077"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav", (short) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test00078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00078"); double[] doubleArray0 = null; // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.lang3.math.NumberUtils.max(doubleArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00079"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 100, (long) '4', (long) 32); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L); }
public void test00080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00080"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(10.0f, (float) (short) -1, (float) 30); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00081"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) ' ', (int) (byte) 0, 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32); }
public void test00082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00082"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 100, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00083"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (short) 1, (int) (short) 1, 30); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test00084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00084"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 32, (-1.0f), (float) 24); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f); }
public void test00085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00085"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("edomdexim"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"edomdexim\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00086"); byte[] byteArray0 = null; // The following exception was thrown during execution in test generation try { byte byte1 = org.apache.commons.lang3.math.NumberUtils.min(byteArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00087"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("edom dexim", (short) (byte) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test00088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00088"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("B"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00089"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00090"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("Oracle Corporation"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Oracle Corporation\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00091"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("\n"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00092"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test00093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00093"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("edom dexim"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"edom dexim\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00094"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(0.0d, 0.0d, (double) 10L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d); }
public void test00095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00095"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.print.PSPrinterJob"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00096"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, (int) (short) 0, 30); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00097"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 4); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.0d + "'", double2 == 4.0d); }
public void test00098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00098"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00099"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00100"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("1.8"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00101"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("/", (long) 32); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 32L + "'", long2 == 32L); }
public void test00102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00102"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("Oracle Corporation"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Oracle Co\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00103"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong(""); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00104"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((-1L), 0L, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00105"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber(""); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00106"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("edom dexim", (byte) 10); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 10 + "'", byte2 == (byte) 10); }
public void test00107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00107"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (byte) 10, 1, 180); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 180 + "'", int3 == 180); }
public void test00108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00108"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test00109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00109"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (short) 10, (long) 14, (long) 32); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L); }
public void test00110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00110"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("                        hi!                         "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"                        hi!                         \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00111"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) (byte) 0, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00112"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("B"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"B\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00113"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 10, 0L, (long) (byte) -1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00114"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("tiklootx.11x.tw.nus", (long) 24); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24L + "'", long2 == 24L); }
public void test00115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00115"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (short) -1, (double) 39.0f, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 39.0d + "'", double3 == 39.0d); }
public void test00116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00116"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(180, 30, 24); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 180 + "'", int3 == 180); }
public void test00117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00117"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 1, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00118"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("SUN.AWT.X11.XTOOLKIEDOM DEXIM", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test00119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00119"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("\n####", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test00120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00120"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 100, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00121"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00122"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits(""); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00123"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-hi!", 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00124"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(14.0d, 100.0d, (double) (byte) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00125"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("sun.wt.x11.xtoolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.x11.xtoolkit\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00126"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) -1, (short) (byte) 1, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00127"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("Java Platform API Specif"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00128"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) (byte) -1, (float) 100, (float) (-1)); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00129"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/home/islam"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00130"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(1.0d, (double) (short) 100, (double) 'a'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test00131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00131"); int[] intArray0 = null; // The following exception was thrown during execution in test generation try { int int1 = org.apache.commons.lang3.math.NumberUtils.min(intArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00132"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 14, (long) 8, (long) 3); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L); }
public void test00133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00133"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(24L, (-1L), 39L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00134"); int[] intArray3 = new int[] { ' ', '#', 39 }; int int4 = org.apache.commons.lang3.math.NumberUtils.max(intArray3); java.lang.Class<?> wildcardClass5 = intArray3.getClass(); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 35, 39]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39 + "'", int4 == 39); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test00135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00135"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 0, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00136"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 0L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00137"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("           mixed mode           "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixed mode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00138"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(331, 8, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 331 + "'", int3 == 331); }
public void test00139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00139"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00140"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 32); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32); }
public void test00141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00141"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00142"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 0, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00143"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("SUN.WT.X11.XTOOLKI"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00144"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("1.8.0_412", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00145"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 24, 1L, (long) '4'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L); }
public void test00146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00146"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, (long) 4, (long) '4'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00147"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) 'a', 0, 31); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97); }
public void test00148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00148"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) (byte) 0, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00149"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("Java Virtual Machine Specification", 97); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97); }
public void test00150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00150"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 5); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5); }
public void test00151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00151"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00152"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("52.0"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00153"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("edomdexim", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00154"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 5, 0L, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00155"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("OpenJDK 64-Bit Server VM"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00156"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("sun.awt.X11.XToolkiedom dexim"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00157"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("     Linux     "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"     Linux     \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00158"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("1.8.0_412-8u412-ga-1~22.04.1-b0", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00159"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-hi!", (short) 10); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 10 + "'", short2 == (short) 10); }
public void test00160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00160"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("OpenJDK Runtime Environment", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test00161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00161"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (byte) 10, (int) (byte) -1, (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test00162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00162"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, (-1), 29); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00163"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("...  ...", (double) 39); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 39.0d + "'", double2 == 39.0d); }
public void test00164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00164"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("sun.awt.X11.XToolkiedom dexim"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X11.XToolkiedom dexim\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00165"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.awt.X11.XToolki"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00166"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("444OpenJDK 64-Bit Server VM444", (int) 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97); }
public void test00167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00167"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("Java Platform API Specif"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00168"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("25.412-b08"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00169"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11.XToolki"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00170"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) '#', (long) 180, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00171"); long[] longArray0 = null; // The following exception was thrown during execution in test generation try { long long1 = org.apache.commons.lang3.math.NumberUtils.max(longArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00172"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 'a', (float) 1L, (float) 2); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f); }
public void test00173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00173"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble(""); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00174"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("edomdexim ", (float) (short) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test00175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00175"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (short) -1, 0L, (long) 35); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00176"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("hi!                                                                                                                                                                    ", (long) (byte) 10); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L); }
public void test00177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00177"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.wt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00178"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 4, (double) 16, (double) 0L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d); }
public void test00179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00179"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(100, 180, 32); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32); }
public void test00180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00180"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("25.412-b08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"25.412-b08\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00181"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("", (int) 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97); }
public void test00182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00182"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("     Linux     ", (float) (short) -1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test00183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00183"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) 1, (short) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00184"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("           mixed mode mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00185"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(2, 2, 97); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2); }
public void test00186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00186"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(100L, (long) 30, (long) 'a'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 30L + "'", long3 == 30L); }
public void test00187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00187"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("\n####", 14); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 14 + "'", int2 == 14); }
public void test00188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00188"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("/USR/JA..."); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/USR/JA...\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00189"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("25.412-b08", 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test00190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00190"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.awt.X11.XToolki"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00191"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash", 10); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10); }
public void test00192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00192"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00193"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 32L, (float) 5, 10.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 5.0f + "'", float3 == 5.0f); }
public void test00194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00194"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00195"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/tmp/gen_tests.pl_3149116_1718294617/target/classes:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/randoop-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/replacecall-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/covered-class-current.jar"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00196"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 0, (float) 32L, (float) 1L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00197"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) -1, (short) 10, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00198"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00199"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) (short) -1, (float) 39, (float) 16); org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f)); }
public void test00200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00200"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("444OpenJDK 64-Bit Server VM444", 10.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d); }
public void test00201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00201"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("\n####"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"####\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00202"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 0, 32L, (long) 10); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L); }
public void test00203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00203"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(331, 39, 82); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 39 + "'", int3 == 39); }
public void test00204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00204"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("                                     Mixed mode", 180.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 180.0f + "'", float2 == 180.0f); }
public void test00205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00205"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(1.0d, (double) '4', (double) (byte) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00206"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat(" Server VM"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00207"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("SUN.WT.X11.XTOOLKI", (int) '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52); }
public void test00208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00208"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: A blank string is not a valid number"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00209"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) (byte) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00210"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("OpenJDK Runtime Environment"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00211"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) (byte) -1, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00212"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("sun.asun.awt.X11.XToolkisun.a", 32L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 32L + "'", long2 == 32L); }
public void test00213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00213"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("", (short) (byte) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00214"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.awt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00215"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("  "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00216"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (-1), (double) (short) 0, (double) (byte) 1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00217"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("/", (double) 0.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00218"); double[] doubleArray0 = null; // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00219"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits(".awt.X11.XToolkitSUN.WT.X11.XTOOLKIT"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00220"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("#############################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: ############################# is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00221"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 29, 0.0d, (double) 97.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d); }
public void test00222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00222"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(0, 16, 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00223"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("HI!    "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00224"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 100, (byte) 0, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 100 + "'", byte3 == (byte) 100); }
public void test00225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00225"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(3.0d, (double) 100L, (double) 52L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test00226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00226"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("  ", 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00227"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("en"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00228"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...a/JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...b/j m/jJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ... JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-8-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...pvJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...jdJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...md64/jav", 84); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 84 + "'", int2 == 84); }
public void test00229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00229"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("HI!", (double) (short) -1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d)); }
public void test00230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00230"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) '#', 82, (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00231"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) 1, (short) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test00232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00232"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("..."); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00233"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-hi!"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00234"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("444OpenJDK 64-Bit Server VM444"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00235"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (byte) 100, 52, 97); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100); }
public void test00236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00236"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("          amd64"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00237"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("omdexim ", (float) (short) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test00238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00238"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("edom dexim"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"edom dexim\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00239"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) (byte) -1, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00240"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("11.8.1.881.8.1.801.8_1.84121.8-1.881.8u1.84121.8-1.8ga1.8-1.811.8~1.8221.8.1.8041.8.1.811.8-1.8b1.808"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00241"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("edomdexim "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"edomdexim\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00242"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("     sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"    \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00243"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("islam"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00244"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) -1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00245"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("OPENJDK 64-BIT SERVER VM"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00246"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("52!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih.!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih0"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"2!ih!ih!i\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00247"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("52!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih.!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih0", (short) (byte) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test00248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00248"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("#######################islam########################", (long) (byte) -1); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L)); }
public void test00249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00249"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("nus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nusnus1X.tw.nustiklooTX.1tiklooTX.11X.tw.nus1X.tw.nus"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"n\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00250"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("..."); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00251"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("52.0"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00252"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("sun.wt.X11.XToolkit                                         "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X11.XToolkit                                         \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00253"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("           mixed mode           "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00254"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("B"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00255"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00256"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 16, 39.0d, (double) 39); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d); }
public void test00257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00257"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) (byte) 100, (int) (short) 100, 35); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35); }
public void test00258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00258"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.wt.X11.XToolkit                                         ", (float) 14); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 14.0f + "'", float2 == 14.0f); }
public void test00259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00259"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(52.0d, (double) 37, 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00260"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("                ...", (long) 'a'); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L); }
public void test00261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00261"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (byte) -1, 4, 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4); }
public void test00262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00262"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("            edomdexim"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"            edomdexim\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00263"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("           mixed mode    sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00264"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (-1), (long) 37, (long) 0); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00265"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) -1, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00266"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(16.0d, (double) 0, (double) 8); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d); }
public void test00267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00267"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (-1), (long) (short) 0, (long) 4); org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L)); }
public void test00268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00268"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 10, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00269"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("     Linux     "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00270"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.awt.X11.XToolkitJava Platform API SpecificationJava Platform API Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"s\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00271"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00272"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00273"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("Java Platform API Specification"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00274"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 180, (long) 30, 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 180L + "'", long3 == 180L); }
public void test00275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00275"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00276"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 2, (long) 180, 3L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L); }
public void test00277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00277"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sunsun.wt.X1sun.wt.X11.XToolkit1.XToolkitsun.wt.X1sun"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00278"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(3.0d, 16.0d, (double) 84); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test00279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00279"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, (double) (-1.0f), (double) (byte) 1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00280"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("#####################sun.asun.a#####################", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test00281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00281"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("SUN.WT.X11.XTOOLKIT", 97.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test00282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00282"); float[] floatArray0 = new float[] {}; // The following exception was thrown during execution in test generation try { float float1 = org.apache.commons.lang3.math.NumberUtils.max(floatArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty."); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(floatArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]"); }
public void test00283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00283"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (-1), (double) 5, (double) (-1)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d); }
public void test00284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00284"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 100, (short) 100, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test00285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00285"); float[] floatArray0 = null; // The following exception was thrown during execution in test generation try { float float1 = org.apache.commons.lang3.math.NumberUtils.min(floatArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00286"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("Ode"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00287"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("OPENJDK 64-BIT SERVER VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"OPENJDK 64-BIT SERVER VM\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00288"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00289"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444/AAAAAAAAAAAAAAAAAAAAAAAAAAAAA44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00290"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) '4', (double) 97, (double) 100L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d); }
public void test00291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00291"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 5, 1.0d, (double) (-1)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00292"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 39, (float) 8, (float) 4); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 4.0f + "'", float3 == 4.0f); }
public void test00293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00293"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("   SUN.AWT.X11.XTOOLKIEDOM DEXIM   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"   SUN.AWT.X11.XTOOLKIEDOM DEXIM   \""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00294"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("/tmp"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00295"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("###############################", (double) 30); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 30.0d + "'", double2 == 30.0d); }
public void test00296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00296"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 2, 0L, (long) 8); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00297"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (float) (-1L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test00298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00298"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08", 35); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35); }
public void test00299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00299"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00300"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(24, 14, (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24); }
public void test00301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00301"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble(" Server VM"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Server VM\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00302"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(1L, (long) 0, (long) (byte) 1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00303"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("sun.awt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.awt.X1sun.wt.X11.XToolkit1.XToolkit\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00304"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("hi!", (short) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00305"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("/USR/JA..."); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00306"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("#"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: # is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00307"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) 37, 32L, 37L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L); }
public void test00308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00308"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("Mixed mode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Mixed mode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00309"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444", 14.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 14.0d + "'", double2 == 14.0d); }
public void test00310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00310"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) 0, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00311"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("52!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih.!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih0"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"52!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih.!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih0\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00312"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("sun.wt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"sun.wt.X1sun.wt.X11.XToolkit1.XToolkit\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00313"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("               "); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00314"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) (byte) 1, (short) (byte) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test00315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00315"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("sun.wt.X11.XToolkit"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00316"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) -1, (byte) 10, (byte) -1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00317"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("hi!                                                                                                                                                                    "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00318"); byte[] byteArray3 = new byte[] { (byte) 1, (byte) -1, (byte) 1 }; byte byte4 = org.apache.commons.lang3.math.NumberUtils.min(byteArray3); byte byte5 = org.apache.commons.lang3.math.NumberUtils.max(byteArray3); byte byte6 = org.apache.commons.lang3.math.NumberUtils.min(byteArray3); byte byte7 = org.apache.commons.lang3.math.NumberUtils.max(byteArray3); byte byte8 = org.apache.commons.lang3.math.NumberUtils.max(byteArray3); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, -1, 1]"); org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) -1 + "'", byte4 == (byte) -1); org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 1 + "'", byte5 == (byte) 1); org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) -1 + "'", byte6 == (byte) -1); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 1 + "'", byte7 == (byte) 1); org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 1 + "'", byte8 == (byte) 1); }
public void test00319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00319"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00320"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("                                                UTF-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"UTF-8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00321"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("###############################"); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00322"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("1.8.0_412-8u412-ga-1~22.04.1-b08", 8); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8); }
public void test00323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00323"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(0.0d, 100.0d, (double) 39); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test00324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00324"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sun.wt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00325"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("#####################sun.asun.a#####################", (double) 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test00326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00326"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(179, (int) '4', 84); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52); }
public void test00327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00327"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("444OpenJDK 64-Bit Server VM444", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00328"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 0L, (float) 32L, (float) 39L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 39.0f + "'", float3 == 39.0f); }
public void test00329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00329"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) 14, (long) 16, (long) 331); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test00330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00330"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("OpenJDK64-BitServerVM", (long) (byte) 1); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test00331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00331"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (byte) 100, 30L, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24L + "'", long3 == 24L); }
public void test00332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00332"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(180L, (-1L), (long) 'a'); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 180L + "'", long3 == 180L); }
public void test00333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00333"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 180L, (float) 24, 0.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 180.0f + "'", float3 == 180.0f); }
public void test00334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00334"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash", (byte) -1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) -1 + "'", byte2 == (byte) -1); }
public void test00335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00335"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("sun.wt.X1sun.wt.X11.XToolkit1.XToolkit"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00336"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("6.5.0-35-generic", (short) (byte) -1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) -1 + "'", short2 == (short) -1); }
public void test00337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00337"); byte[] byteArray6 = new byte[] { (byte) -1, (byte) 1, (byte) -1, (byte) 10, (byte) 0, (byte) 0 }; byte byte7 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte8 = org.apache.commons.lang3.math.NumberUtils.max(byteArray6); byte byte9 = org.apache.commons.lang3.math.NumberUtils.min(byteArray6); java.lang.Class<?> wildcardClass10 = byteArray6.getClass(); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 1, -1, 10, 0, 0]"); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 10 + "'", byte7 == (byte) 10); org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 10 + "'", byte8 == (byte) 10); org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test00338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00338"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) ' ', (float) 7, (float) 2); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f); }
public void test00339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00339"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("/home/islam/MyWork/New-work-2023/DBT-workbench/scripts/bash"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00340"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(24L, 97L, (long) 10); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test00341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00341"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) (short) 10, (long) 'a', (long) (short) 100); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L); }
public void test00342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00342"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("                ...", 16); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16); }
public void test00343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00343"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00344"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("52.0"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00345"); byte[] byteArray0 = null; // The following exception was thrown during execution in test generation try { byte byte1 = org.apache.commons.lang3.math.NumberUtils.max(byteArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00346"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, 39L, (long) 8); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00347"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("sun.wt.x11.xtoolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00348"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 0, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00349"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("     sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00350"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger(""); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Zero length BigInteger"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00351"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("sun.asun.a"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: sun.asun.a is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00352"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 30, (double) 37L, 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 37.0d + "'", double3 == 37.0d); }
public void test00353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00353"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("HI!    "); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00354"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 0, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void test00355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00355"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(0.0f, 97.0f, 1.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00356"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("######           mixed mode    #######", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test00357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00357"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) -1, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00358"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("http://java.oracle.com/"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00359"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("sLinux                                  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00360"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 97L, (float) 27, (float) 5); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f); }
public void test00361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00361"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("!ih"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00362"); byte byte1 = org.apache.commons.lang3.math.NumberUtils.toByte("/usr/lib/jvm/java-8-openjdk-amd64/j"); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0); }
public void test00363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00363"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 3, 0.0f, (float) 1L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 3.0f + "'", float3 == 3.0f); }
public void test00364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00364"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(2L, (long) ' ', (long) (byte) 1); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L); }
public void test00365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00365"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 179, (double) 0.0f, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 179.0d + "'", double3 == 179.0d); }
public void test00366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00366"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 39L, (float) 0L, (float) (short) -1); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 39.0f + "'", float3 == 39.0f); }
public void test00367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00367"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat(""); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00368"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 37, (float) 27, (float) 27); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 37.0f + "'", float3 == 37.0f); }
public void test00369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00369"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("Server                ...VM"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00370"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) (byte) 100, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00371"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic", (double) 32L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 32.0d + "'", double2 == 32.0d); }
public void test00372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00372"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("/usr/lib/jvm/java-8-openjdk-amd64/j"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00373"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 37, 100.0f, (float) 24); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f); }
public void test00374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00374"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("B"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"B\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00375"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("..."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00376"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("                ..."); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00377"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic6.5.0-35-generic", (byte) 100); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 100 + "'", byte2 == (byte) 100); }
public void test00378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00378"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444", (short) (byte) 1); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 1 + "'", short2 == (short) 1); }
public void test00379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00379"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("sun.wt.X11.XToolkit"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"s\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00380"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("Java Platform API Specif"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00381"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(97L, 24L, (long) 24); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L); }
public void test00382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00382"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("HI!", (short) 0); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0); }
public void test00383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00383"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) (short) -1, (float) 84, (float) (byte) 10); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 84.0f + "'", float3 == 84.0f); }
public void test00384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00384"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) -1, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1); }
public void test00385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00385"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("mixedmodemixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"mixedmodemixedmodemixedmodemixedmodmixedmodemixedmodemixedmod\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00386"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("     sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo", 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test00387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00387"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("SUN.PRINT.PSPRINTERJOB", 180); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 180 + "'", int2 == 180); }
public void test00388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00388"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShortorg.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00389"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 100, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00390"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("/tmp/gen_tests.pl_3149116_1718294617/target/classes:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/randoop-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/replacecall-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/covered-class-current.jar"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/tmp/gen_tests.pl_3149116_1718294617/target/classes:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/randoop-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/replacecall-current.jar:/home/islam/MyWork/defects4j/framework/lib/test_generation/generation/covered-class-current.jar\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00391"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("52!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih.!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih0"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00392"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 179, (float) 24L, 10.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 179.0f + "'", float3 == 179.0f); }
public void test00393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00393"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("25.412-b08http://java.oracle.com/http://java.oracle."); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00394"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((-1), 24, 331); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00395"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(0, 52, 84); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 84 + "'", int3 == 84); }
public void test00396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00396"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("EDOM DEXIM"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00397"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("Mixed mode"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"Mixed mode\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00398"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("sun.asun.awt.X11.XToolkisun.a"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: sun.asun.awt.X11.XToolkisun.a is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00399"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("   "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: empty String"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00400"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 1, (byte) 0); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00401"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 0, (byte) 10, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00402"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00403"); long long3 = org.apache.commons.lang3.math.NumberUtils.min(0L, 331L, 100L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00404"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) (byte) 100, 0.0d, (double) 37L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test00405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00405"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 35, (double) 32, (double) (-1L)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d); }
public void test00406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00406"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 82, 0.0d, 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 82.0d + "'", double3 == 82.0d); }
public void test00407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00407"); // The following exception was thrown during execution in test generation try { java.lang.Integer int1 = org.apache.commons.lang3.math.NumberUtils.createInteger("/usr/lib/jvm/java-8-openjdk-amd64/jr"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-openjdk-amd64/jr\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00408"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(180.0f, 100.0f, 100.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f); }
public void test00409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00409"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) -1, (short) (byte) 0, (short) 1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 1 + "'", short3 == (short) 1); }
public void test00410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00410"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("          amd64"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00411"); int int3 = org.apache.commons.lang3.math.NumberUtils.min((int) 'a', 37, 97); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 37 + "'", int3 == 37); }
public void test00412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00412"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("11.8.1.881.8.1.801.8_1.84121.8-1.881.8u1.84121.8-1.8ga1.8-1.811.8~1.8221.8.1.8041.8.1.811.8-1.8b1.808", (float) 2L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.0f + "'", float2 == 2.0f); }
public void test00413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00413"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 0, (short) 0, (short) (byte) -1); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00414"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 1.8f, 0.0d, (double) (byte) 1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.7999999523162842d + "'", double3 == 1.7999999523162842d); }
public void test00415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00415"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("64-Bit Server VM", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test00416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00416"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("aa"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00417"); int int3 = org.apache.commons.lang3.math.NumberUtils.min(14, (int) ' ', 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4); }
public void test00418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00418"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(52L, (long) (short) -1, (long) 39); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L); }
public void test00419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00419"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (byte) 10, 24L, (long) 3); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L); }
public void test00420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00420"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("OpenJDK64-BitServerVMOpe           mixed mode           OpenJDK64-BitServerVMOpe"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00421"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("sun.wt.X11.XToolkit                                         "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00422"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(24, 0, 6); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24); }
public void test00423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00423"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(4.0d, (double) (-1.0f), (double) 6); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00424"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 0, 0.0f, 32.0f); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 32.0f + "'", float3 == 32.0f); }
public void test00425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00425"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 24, (double) 'a', (double) 52); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d); }
public void test00426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00426"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("", (long) 8); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 8L + "'", long2 == 8L); }
public void test00427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00427"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00428"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("amd64"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00429"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 10, (short) 100, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00430"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: /aaaaaaaaaaaaaaaaaaaaaaaaaaaaa is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00431"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) (byte) 10, (short) (byte) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 10 + "'", short3 == (short) 10); }
public void test00432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00432"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(10.0f, 14.0f, (float) 31); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 10.0f + "'", float3 == 10.0f); }
public void test00433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00433"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(30L, (long) 0, (long) 35); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L); }
public void test00434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00434"); long long1 = org.apache.commons.lang3.math.NumberUtils.toLong("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test00435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00435"); // The following exception was thrown during execution in test generation try { java.lang.Double double1 = org.apache.commons.lang3.math.NumberUtils.createDouble("O C"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"O C\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00436"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod                        "); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00437"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 1.8f, (double) 5.0f, (double) (short) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d); }
public void test00438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00438"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("hi!    ", 180L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 180L + "'", long2 == 180L); }
public void test00439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00439"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 10, (short) -1, (short) 100); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00440"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("sun.awt.X11.XToolkit44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444444444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa44444444444444444444444444444444444Java Platform API Specification44444444444444444444444444444444444/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444444444444444444444444444444444", (byte) 1); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1); }
public void test00441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00441"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("", 7); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7); }
public void test00442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00442"); float float3 = org.apache.commons.lang3.math.NumberUtils.max((float) 331, (float) 52, (float) 24); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 331.0f + "'", float3 == 331.0f); }
public void test00443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00443"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("EDOM DEXIM", 179); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 179 + "'", int2 == 179); }
public void test00444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00444"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00445"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("\n"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: A blank string is not a valid number"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00446"); long long3 = org.apache.commons.lang3.math.NumberUtils.max((long) '4', 37L, (long) 14); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L); }
public void test00447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00447"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) (-1.0f), (double) 4, (double) 20); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d)); }
public void test00448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00448"); int int2 = org.apache.commons.lang3.math.NumberUtils.toInt("", 331); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 331 + "'", int2 == 331); }
public void test00449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00449"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isDigits("OpenJDK 64-Bit Server VM"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00450"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("#######################islam########################"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"#######################islam########################\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00451"); short short1 = org.apache.commons.lang3.math.NumberUtils.toShort("amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd641.8amd64"); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test00452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00452"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) (byte) 100, (short) 0, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00453"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 10, (byte) 10, (byte) 1); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1); }
public void test00454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00454"); short short2 = org.apache.commons.lang3.math.NumberUtils.toShort("tiklooTX.11X.tw.nus", (short) 100); org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 100 + "'", short2 == (short) 100); }
public void test00455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00455"); long long3 = org.apache.commons.lang3.math.NumberUtils.max(331L, 1L, (long) 29); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 331L + "'", long3 == 331L); }
public void test00456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00456"); int[] intArray0 = null; // The following exception was thrown during execution in test generation try { int int1 = org.apache.commons.lang3.math.NumberUtils.max(intArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00457"); long long2 = org.apache.commons.lang3.math.NumberUtils.toLong("Java Pl...", (long) 3); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3L + "'", long2 == 3L); }
public void test00458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00458"); short short3 = org.apache.commons.lang3.math.NumberUtils.max((short) (byte) 100, (short) 100, (short) (byte) 10); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100); }
public void test00459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00459"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00460"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("11.8.1.881.8.1.801.8_1.84121.8-1.881.8u1.84121.8-1.8ga1.8-1.811.8~1.8221.8.1.8041.8.1.811.8-1.8b1.808", (float) 100L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test00461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00461"); // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger1 = org.apache.commons.lang3.math.NumberUtils.createBigInteger("edomdexi"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"edomdexi\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00462"); byte byte2 = org.apache.commons.lang3.math.NumberUtils.toByte("###############################", (byte) 0); org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0); }
public void test00463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00463"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 84.0f, (double) 3, (double) 29); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test00464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00464"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("Java Virtual Machine Specification"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Java Virtual Machine Specification is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00465"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441.8.0_412-8U412-GA-1~22.04.1-B08"); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00466"); // The following exception was thrown during execution in test generation try { java.math.BigDecimal bigDecimal1 = org.apache.commons.lang3.math.NumberUtils.createBigDecimal("/tmp"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null"); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00467"); float float3 = org.apache.commons.lang3.math.NumberUtils.min((float) 32, (float) 29, (float) 6); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 6.0f + "'", float3 == 6.0f); }
public void test00468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00468"); // The following exception was thrown during execution in test generation try { java.lang.Float float1 = org.apache.commons.lang3.math.NumberUtils.createFloat("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00469"); double double3 = org.apache.commons.lang3.math.NumberUtils.min(37.0d, (double) 14, (double) 3.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test00470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00470"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (byte) 10, (long) 6, (long) 6); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 6L + "'", long3 == 6L); }
public void test00471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00471"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 1, (short) (byte) 100, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00472"); double double2 = org.apache.commons.lang3.math.NumberUtils.toDouble("", (double) 1.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test00473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00473"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(20, 10, (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20); }
public void test00474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00474"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("1.8.0_412-8u412-ga-1~22.04.1-b0", 3.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.0f + "'", float2 == 3.0f); }
public void test00475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00475"); double double3 = org.apache.commons.lang3.math.NumberUtils.max(0.0d, 97.0d, (double) 180); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 180.0d + "'", double3 == 180.0d); }
public void test00476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00476"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("           /usr/ja..."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00477"); long long3 = org.apache.commons.lang3.math.NumberUtils.min((long) (byte) 1, (long) 24, (long) (byte) 0); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test00478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00478"); int int3 = org.apache.commons.lang3.math.NumberUtils.max((int) (short) 0, (int) (byte) 100, 180); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 180 + "'", int3 == 180); }
public void test00479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00479"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) 39.0f, (double) 14, (double) 'a'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.0d + "'", double3 == 14.0d); }
public void test00480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00480"); double double1 = org.apache.commons.lang3.math.NumberUtils.toDouble("Java Pl..."); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test00481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00481"); float float3 = org.apache.commons.lang3.math.NumberUtils.min(179.0f, 0.0f, (float) 8L); org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f); }
public void test00482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00482"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("##################################SUN.WT.X11.XTOOLKI"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00483"); // The following exception was thrown during execution in test generation try { java.lang.Long long1 = org.apache.commons.lang3.math.NumberUtils.createLong("UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8UTF-8\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00484"); boolean boolean1 = org.apache.commons.lang3.math.NumberUtils.isNumber("                                                                                          "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00485"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) -1, (short) 10, (short) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) -1 + "'", short3 == (short) -1); }
public void test00486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00486"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("mixedmodemixedmodemixedmodmixedmodemixedmodemixedmod"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00487"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("sun.wt.X11.XToolkit                                         ", (float) 12); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 12.0f + "'", float2 == 12.0f); }
public void test00488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00488"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.max((byte) 10, (byte) 0, (byte) 10); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 10 + "'", byte3 == (byte) 10); }
public void test00489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00489"); float float1 = org.apache.commons.lang3.math.NumberUtils.toFloat("25.412-b08http://java.oracle.com/http://java.oracle."); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test00490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00490"); double double3 = org.apache.commons.lang3.math.NumberUtils.max((double) 5.0f, (double) (-1), (double) 31); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 31.0d + "'", double3 == 31.0d); }
public void test00491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00491"); int int1 = org.apache.commons.lang3.math.NumberUtils.toInt("linux"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00492"); float float2 = org.apache.commons.lang3.math.NumberUtils.toFloat("", 32.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 32.0f + "'", float2 == 32.0f); }
public void test00493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00493"); double[] doubleArray0 = new double[] {}; // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.lang3.math.NumberUtils.min(doubleArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty."); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]"); }
public void test00494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00494"); double double3 = org.apache.commons.lang3.math.NumberUtils.min((double) '#', (double) 16, 14.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.0d + "'", double3 == 14.0d); }
public void test00495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00495"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("           mixed mode           "); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message:           mixed mode           is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00496"); int int3 = org.apache.commons.lang3.math.NumberUtils.max(32, (-1), 14); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32); }
public void test00497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00497"); // The following exception was thrown during execution in test generation try { java.lang.Number number1 = org.apache.commons.lang3.math.NumberUtils.createNumber("     sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo"); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message:      sun.awt.X11.XToolkitSUN.WT.X11.XTOOLKITwt.X11.XToolkit1.XToolkitsun.wt.X1sun.wt.X11.XTo is not a valid number."); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test00498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00498"); short[] shortArray0 = null; // The following exception was thrown during execution in test generation try { short short1 = org.apache.commons.lang3.math.NumberUtils.min(shortArray0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00499"); short short3 = org.apache.commons.lang3.math.NumberUtils.min((short) 0, (short) 0, (short) (byte) 0); org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0); }
public void test00500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00500"); byte byte3 = org.apache.commons.lang3.math.NumberUtils.min((byte) 100, (byte) 0, (byte) 100); org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0); }
public void testConstructor() { assertNotNull(new NumberUtils()); Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors(); assertEquals(1, cons.length); assertEquals(true, Modifier.isPublic(cons[0].getModifiers())); assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers())); assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers())); }
public void testToIntString() { assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345); assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0); assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0); assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0); }
public void testToIntStringI() { assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345); assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5); }
public void testToLongString() { assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE+"") == Long.MAX_VALUE); assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE+"") == Long.MIN_VALUE); assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); }
public void testToLongStringL() { assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l); assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l); }
public void testToFloatString() { assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE+"") == Float.MAX_VALUE); assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE+"") == Float.MIN_VALUE); assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); }
public void testToFloatStringF() { assertTrue("toFloat(String,int) 1 failed", NumberUtils.toFloat("1.2345", 5.1f) == 1.2345f); assertTrue("toFloat(String,int) 2 failed", NumberUtils.toFloat("a", 5.0f) == 5.0f); }
public void testStringToDoubleString() { assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE+"") == Double.MAX_VALUE); assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE+"") == Double.MIN_VALUE); assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); }
public void testStringToDoubleStringD() { assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); }
public void testToByteString() { assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); }
public void testToByteStringI() { assertTrue("toByte(String,byte) 1 failed", NumberUtils.toByte("123", (byte) 5) == 123); assertTrue("toByte(String,byte) 2 failed", NumberUtils.toByte("12.3", (byte) 5) == 5); }
public void testToShortString() { assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); }
public void testToShortStringI() { assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); }
public void testCreateNumber() { // a lot of things can go wrong assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5")); assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345")); assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D")); assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d")); assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F")); assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f")); assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L))); assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L")); assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l")); assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5")); assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345")); assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue()); assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue()); assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200")); assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20")); assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200")); assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200")); assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null)); assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils .createNumber("12345678901234567890L")); // jdk 1.2 doesn't support this. unsure about jdk 1.2.2 if (SystemUtils.isJavaVersionAtLeast(1.3f)) { assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils .createNumber("1.1E-700F")); } assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils .createNumber("10" + Integer.MAX_VALUE + "L")); assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils .createNumber("10" + Integer.MAX_VALUE)); assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils .createNumber("10" + Long.MAX_VALUE)); // LANG-521 assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2.")); // LANG-638 assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE")); }
public void testCreateFloat() { assertEquals("createFloat(String) failed", new Float("1234.5"), NumberUtils.createFloat("1234.5")); assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null)); this.testCreateFloatFailure(""); this.testCreateFloatFailure(" "); this.testCreateFloatFailure("\b\t\n\f\r"); // Funky whitespaces this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); }
public void testCreateDouble() { assertEquals("createDouble(String) failed", new Double("1234.5"), NumberUtils.createDouble("1234.5")); assertEquals("createDouble(null) failed", null, NumberUtils.createDouble(null)); this.testCreateDoubleFailure(""); this.testCreateDoubleFailure(" "); this.testCreateDoubleFailure("\b\t\n\f\r"); // Funky whitespaces this.testCreateDoubleFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); }
public void testCreateInteger() { assertEquals("createInteger(String) failed", new Integer("12345"), NumberUtils.createInteger("12345")); assertEquals("createInteger(null) failed", null, NumberUtils.createInteger(null)); this.testCreateIntegerFailure(""); this.testCreateIntegerFailure(" "); this.testCreateIntegerFailure("\b\t\n\f\r"); // Funky whitespaces this.testCreateIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); }
public void testCreateLong() { assertEquals("createLong(String) failed", new Long("12345"), NumberUtils.createLong("12345")); assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); this.testCreateLongFailure(""); this.testCreateLongFailure(" "); this.testCreateLongFailure("\b\t\n\f\r"); // Funky whitespaces this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); }
public void testCreateBigInteger() { assertEquals("createBigInteger(String) failed", new BigInteger("12345"), NumberUtils.createBigInteger("12345")); assertEquals("createBigInteger(null) failed", null, NumberUtils.createBigInteger(null)); this.testCreateBigIntegerFailure(""); this.testCreateBigIntegerFailure(" "); this.testCreateBigIntegerFailure("\b\t\n\f\r"); // Funky whitespaces this.testCreateBigIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); }
public void testCreateBigDecimal() { assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); this.testCreateBigDecimalFailure(""); this.testCreateBigDecimalFailure(" "); this.testCreateBigDecimalFailure("\b\t\n\f\r"); // Funky whitespaces this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); }
public void testMinLong() { final long[] l = null; try { NumberUtils.min(l); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.min(new long[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); assertEquals( "min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); }
public void testMinInt() { final int[] i = null; try { NumberUtils.min(i); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.min(new int[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "min(int[]) failed for array length 1", 5, NumberUtils.min(new int[] { 5 })); assertEquals( "min(int[]) failed for array length 2", 6, NumberUtils.min(new int[] { 6, 9 })); assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); }
public void testMinShort() { final short[] s = null; try { NumberUtils.min(s); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.min(new short[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "min(short[]) failed for array length 1", 5, NumberUtils.min(new short[] { 5 })); assertEquals( "min(short[]) failed for array length 2", 6, NumberUtils.min(new short[] { 6, 9 })); assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); }
public void testMinByte() { final byte[] b = null; try { NumberUtils.min(b); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.min(new byte[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); assertEquals( "min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); }
public void testMinDouble() { final double[] d = null; try { NumberUtils.min(d); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.min(new double[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); assertEquals( "min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); assertEquals( "min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); }
public void testMinFloat() { final float[] f = null; try { NumberUtils.min(f); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.min(new float[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "min(float[]) failed for array length 1", 5.9f, NumberUtils.min(new float[] { 5.9f }), 0); assertEquals( "min(float[]) failed for array length 2", 6.8f, NumberUtils.min(new float[] { 6.8f, 9.7f }), 0); assertEquals( "min(float[]) failed for array length 5", -10.6f, NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), 0); assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); }
public void testMaxLong() { final long[] l = null; try { NumberUtils.max(l); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.max(new long[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); assertEquals( "max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); assertEquals( "max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); }
public void testMaxInt() { final int[] i = null; try { NumberUtils.max(i); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.max(new int[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); assertEquals( "max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); assertEquals( "max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); }
public void testMaxShort() { final short[] s = null; try { NumberUtils.max(s); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.max(new short[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); assertEquals( "max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); assertEquals( "max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); }
public void testMaxByte() { final byte[] b = null; try { NumberUtils.max(b); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.max(new byte[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); assertEquals( "max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); assertEquals( "max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); }
public void testMaxDouble() { final double[] d = null; try { NumberUtils.max(d); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.max(new double[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); assertEquals( "max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); assertEquals( "max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); }
public void testMaxFloat() { final float[] f = null; try { NumberUtils.max(f); fail("No exception was thrown for null input."); } catch (IllegalArgumentException ex) {} try { NumberUtils.max(new float[0]); fail("No exception was thrown for empty input."); } catch (IllegalArgumentException ex) {} assertEquals( "max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); assertEquals( "max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); assertEquals( "max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); }
public void testMinimumLong() { assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L)); assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L)); assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L)); assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L)); assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.min(12345L, 12345L, 12345L)); }
public void testMinimumInt() { assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); }
public void testMinimumShort() { short low = 1234; short mid = 1234 + 1; short high = 1234 + 2; assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, high)); assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, low, high)); assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, high, low)); assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, low)); }
public void testMinimumByte() { byte low = 123; byte mid = 123 + 1; byte high = 123 + 2; assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high)); assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high)); assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low)); assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low)); }
public void testMinimumDouble() { double low = 12.3; double mid = 12.3 + 1; double high = 12.3 + 2; assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); }
public void testMinimumFloat() { float low = 12.3f; float mid = 12.3f + 1; float high = 12.3f + 2; assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); }
public void testMaximumLong() { assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); }
public void testMaximumInt() { assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); }
public void testMaximumShort() { short low = 1234; short mid = 1234 + 1; short high = 1234 + 2; assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); }
public void testMaximumByte() { byte low = 123; byte mid = 123 + 1; byte high = 123 + 2; assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(low, mid, high)); assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, low, high)); assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, high, low)); assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(high, mid, high)); }
public void testMaximumDouble() { double low = 12.3; double mid = 12.3 + 1; double high = 12.3 + 2; assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); }
public void testMaximumFloat() { float low = 12.3f; float mid = 12.3f + 1; float high = 12.3f + 2; assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); }
public void testCompareDouble() { assertTrue(Double.compare(Double.NaN, Double.NaN) == 0); assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1); assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1); assertTrue(Double.compare(Double.NaN, 1.2d) == +1); assertTrue(Double.compare(Double.NaN, 0.0d) == +1); assertTrue(Double.compare(Double.NaN, -0.0d) == +1); assertTrue(Double.compare(Double.NaN, -1.2d) == +1); assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0); assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1); assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0); assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1); assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1); assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1); assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1); assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(1.2d, Double.NaN) == -1); assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1); assertTrue(Double.compare(1.2d, 1.2d) == 0); assertTrue(Double.compare(1.2d, 0.0d) == +1); assertTrue(Double.compare(1.2d, -0.0d) == +1); assertTrue(Double.compare(1.2d, -1.2d) == +1); assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(0.0d, Double.NaN) == -1); assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1); assertTrue(Double.compare(0.0d, 1.2d) == -1); assertTrue(Double.compare(0.0d, 0.0d) == 0); assertTrue(Double.compare(0.0d, -0.0d) == +1); assertTrue(Double.compare(0.0d, -1.2d) == +1); assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(-0.0d, Double.NaN) == -1); assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1); assertTrue(Double.compare(-0.0d, 1.2d) == -1); assertTrue(Double.compare(-0.0d, 0.0d) == -1); assertTrue(Double.compare(-0.0d, -0.0d) == 0); assertTrue(Double.compare(-0.0d, -1.2d) == +1); assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(-1.2d, Double.NaN) == -1); assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1); assertTrue(Double.compare(-1.2d, 1.2d) == -1); assertTrue(Double.compare(-1.2d, 0.0d) == -1); assertTrue(Double.compare(-1.2d, -0.0d) == -1); assertTrue(Double.compare(-1.2d, -1.2d) == 0); assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1); assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1); assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0); assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1); assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0); }
public void testCompareFloat() { assertTrue(Float.compare(Float.NaN, Float.NaN) == 0); assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1); assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1); assertTrue(Float.compare(Float.NaN, 1.2f) == +1); assertTrue(Float.compare(Float.NaN, 0.0f) == +1); assertTrue(Float.compare(Float.NaN, -0.0f) == +1); assertTrue(Float.compare(Float.NaN, -1.2f) == +1); assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0); assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1); assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0); assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1); assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1); assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1); assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1); assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(1.2f, Float.NaN) == -1); assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1); assertTrue(Float.compare(1.2f, 1.2f) == 0); assertTrue(Float.compare(1.2f, 0.0f) == +1); assertTrue(Float.compare(1.2f, -0.0f) == +1); assertTrue(Float.compare(1.2f, -1.2f) == +1); assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(0.0f, Float.NaN) == -1); assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1); assertTrue(Float.compare(0.0f, 1.2f) == -1); assertTrue(Float.compare(0.0f, 0.0f) == 0); assertTrue(Float.compare(0.0f, -0.0f) == +1); assertTrue(Float.compare(0.0f, -1.2f) == +1); assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(-0.0f, Float.NaN) == -1); assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1); assertTrue(Float.compare(-0.0f, 1.2f) == -1); assertTrue(Float.compare(-0.0f, 0.0f) == -1); assertTrue(Float.compare(-0.0f, -0.0f) == 0); assertTrue(Float.compare(-0.0f, -1.2f) == +1); assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(-1.2f, Float.NaN) == -1); assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1); assertTrue(Float.compare(-1.2f, 1.2f) == -1); assertTrue(Float.compare(-1.2f, 0.0f) == -1); assertTrue(Float.compare(-1.2f, -0.0f) == -1); assertTrue(Float.compare(-1.2f, -1.2f) == 0); assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1); assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1); assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0); assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1); assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0); }
public void testIsDigits() { assertEquals("isDigits(null) failed", false, NumberUtils.isDigits(null)); assertEquals("isDigits('') failed", false, NumberUtils.isDigits("")); assertEquals("isDigits(String) failed", true, NumberUtils.isDigits("12345")); assertEquals("isDigits(String) neg 1 failed", false, NumberUtils.isDigits("1234.5")); assertEquals("isDigits(String) neg 3 failed", false, NumberUtils.isDigits("1ab")); assertEquals("isDigits(String) neg 4 failed", false, NumberUtils.isDigits("abc")); }
public void testIsNumber() { String val = "12345"; assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); val = "1234.5"; assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); val = ".12345"; assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); val = "1234E5"; assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); val = "1234E+5"; assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); val = "1234E-5"; assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); val = "123.4E5"; assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); val = "-1234"; assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); val = "-1234.5"; assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); val = "-.12345"; assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); val = "-1234E5"; assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); val = "0"; assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); val = "-0"; assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); val = "01234"; assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); val = "-01234"; assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); val = "0xABC123"; assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); val = "0x0"; assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); val = "123.4E21D"; assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); val = "-221.23F"; assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); val = "22338L"; assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); val = null; assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); val = ""; assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); val = "--2.3"; assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); val = ".12.3"; assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); val = "-123E"; assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); val = "-123E+-212"; assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); val = "-123E2.12"; assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); val = "0xGF"; assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); val = "0xFAE-1"; assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); val = "."; assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); val = "-0ABC123"; assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); val = "123.4E-D"; assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); val = "123.4ED"; assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); val = "1234E5l"; assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); val = "11a"; assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); val = "1a"; assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); val = "a"; assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); val = "11g"; assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); val = "11z"; assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); val = "11def"; assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); val = "11d11"; assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); val = "11 11"; assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); val = " 1111"; assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); val = "1111 "; assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); // LANG-521 val = "2."; assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); }
public void testConstants() { assertTrue(NumberUtils.LONG_ZERO instanceof Long); assertTrue(NumberUtils.LONG_ONE instanceof Long); assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long); assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer); assertTrue(NumberUtils.INTEGER_ONE instanceof Integer); assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer); assertTrue(NumberUtils.SHORT_ZERO instanceof Short); assertTrue(NumberUtils.SHORT_ONE instanceof Short); assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short); assertTrue(NumberUtils.BYTE_ZERO instanceof Byte); assertTrue(NumberUtils.BYTE_ONE instanceof Byte); assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte); assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double); assertTrue(NumberUtils.DOUBLE_ONE instanceof Double); assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double); assertTrue(NumberUtils.FLOAT_ZERO instanceof Float); assertTrue(NumberUtils.FLOAT_ONE instanceof Float); assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float); assertTrue(NumberUtils.LONG_ZERO.longValue() == 0); assertTrue(NumberUtils.LONG_ONE.longValue() == 1); assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1); assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0); assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1); assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1); assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0); assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1); assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1); assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0); assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1); assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1); assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d); assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d); assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d); assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f); assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f); assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f); }
public void testLang300() { NumberUtils.createNumber("-1l"); NumberUtils.createNumber("01l"); NumberUtils.createNumber("1l"); }
public void testLang381() { assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; assertTrue(Double.isNaN(NumberUtils.max(a))); assertTrue(Double.isNaN(NumberUtils.min(a))); double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; assertTrue(Double.isNaN(NumberUtils.max(b))); assertTrue(Double.isNaN(NumberUtils.min(b))); float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; assertTrue(Float.isNaN(NumberUtils.max(aF))); float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; assertTrue(Float.isNaN(NumberUtils.max(bF))); }
public void test000() throws Throwable { float float0 = NumberUtils.max((-1628.1744F), (-1628.1744F), (-1628.1744F)); assertEquals((-1628.1744F), float0, 0.01F); }
public void test001() throws Throwable { float float0 = NumberUtils.min((-1637.821F), (-1637.821F), (-1637.821F)); assertEquals((-1637.821F), float0, 0.01F); }
public void test002() throws Throwable { double double0 = NumberUtils.toDouble("mk{JBWd'u=#o7&#FQ"); assertEquals(0.0, double0, 0.01); } @Test(timeout = 4000) public void test003() throws Throwable { double double0 = NumberUtils.min((-863.0815374851), (-863.0815374851), (-863.0815374851)); assertEquals((-863.0815374851), double0, 0.01); } @Test(timeout = 4000) public void test004() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); int[] intArray0 = new int[2]; intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE; int int0 = NumberUtils.min(intArray0); assertEquals((-1), int0); } @Test(timeout = 4000) public void test005() throws Throwable { byte byte0 = NumberUtils.toByte("The Array must not be null"); assertEquals((byte)0, byte0); } @Test(timeout = 4000) public void test006() throws Throwable { double double0 = NumberUtils.max((double) (-313.0F), (double) (-313.0F), (double) (-313.0F)); assertEquals((-313.0), double0, 0.01); } @Test(timeout = 4000) public void test007() throws Throwable { long long0 = NumberUtils.toLong("{[u!BuM)R[4"); assertEquals(0L, long0); } @Test(timeout = 4000) public void test008() throws Throwable { int int0 = NumberUtils.toInt("InvocationTargetException occurred during 1.6 backcompat code"); assertEquals(0, int0); } @Test(timeout = 4000) public void test009() throws Throwable { float float0 = NumberUtils.toFloat("X+^(11?}:Btf^G<5i"); assertEquals(0.0F, float0, 0.01F); } @Test(timeout = 4000) public void test010() throws Throwable { short short0 = NumberUtils.toShort(""); assertEquals((short)0, short0); } @Test(timeout = 4000) public void test011() throws Throwable { int int0 = NumberUtils.toInt((String) null); assertEquals(0, int0); } @Test(timeout = 4000) public void test012() throws Throwable { long long0 = NumberUtils.toLong((String) null, 280L); assertEquals(280L, long0); } @Test(timeout = 4000) public void test013() throws Throwable { float float0 = NumberUtils.toFloat((String) null, 0.0F); assertEquals(0.0F, float0, 0.01F); } @Test(timeout = 4000) public void test014() throws Throwable { double double0 = NumberUtils.toDouble((String) null); assertEquals(0.0, double0, 0.01); } @Test(timeout = 4000) public void test015() throws Throwable { byte byte0 = NumberUtils.toByte((String) null, (byte)113); assertEquals((byte)113, byte0); } @Test(timeout = 4000) public void test016() throws Throwable { short short0 = NumberUtils.toShort((String) null, (short)40); assertEquals((short)40, short0); } @Test(timeout = 4000) public void test017() throws Throwable { try { NumberUtils.createNumber("2E.m."); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 2E.m. is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } } @Test(timeout = 4000) public void test018() throws Throwable { Number number0 = NumberUtils.createNumber((String) null); assertNull(number0); } @Test(timeout = 4000) public void test019() throws Throwable { try { NumberUtils.createNumber(""); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // A blank string is not a valid number // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } } @Test(timeout = 4000) public void test020() throws Throwable { Number number0 = NumberUtils.createNumber("----"); assertNull(number0); } @Test(timeout = 4000) public void test021() throws Throwable { try { NumberUtils.createNumber("0x.[NM"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \".[NM\" // verifyException("java.lang.NumberFormatException", e); } } @Test(timeout = 4000) public void test022() throws Throwable { try { NumberUtils.createNumber("-0x(>8&c_"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"-(>8&c_\" // verifyException("java.lang.NumberFormatException", e); } } @Test(timeout = 4000) public void test023() throws Throwable { Number number0 = NumberUtils.createNumber("0e1"); assertEquals((byte)0, number0.byteValue()); } @Test(timeout = 4000) public void test024() throws Throwable { Number number0 = NumberUtils.createNumber("-0."); assertEquals((short)0, number0.shortValue()); } @Test(timeout = 4000) public void test025() throws Throwable { try { NumberUtils.createNumber("4Beg\".3nS[s9L[Eq"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 4Beg\".3nS[s9L[Eq is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } } @Test(timeout = 4000) public void test026() throws Throwable { try { NumberUtils.createNumber("EvW]miHd%;.,(eK#5"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // no message in exception (getMessage() returned null) // verifyException("java.math.BigDecimal", e); } } @Test(timeout = 4000) public void test027() throws Throwable { Number number0 = NumberUtils.createNumber("0f"); assertEquals((short)0, number0.shortValue()); } @Test(timeout = 4000) public void test028() throws Throwable { try { NumberUtils.createNumber("h^@7}ZuQ6eEBVKq["); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // h^@7}ZuQ6eEBVKq[ is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); }
public void test003() throws Throwable { double double0 = NumberUtils.min((-863.0815374851), (-863.0815374851), (-863.0815374851)); assertEquals((-863.0815374851), double0, 0.01); }
public void test004() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); int[] intArray0 = new int[2]; intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE; int int0 = NumberUtils.min(intArray0); assertEquals((-1), int0); }
public void test005() throws Throwable { byte byte0 = NumberUtils.toByte("The Array must not be null"); assertEquals((byte)0, byte0); }
public void test006() throws Throwable { double double0 = NumberUtils.max((double) (-313.0F), (double) (-313.0F), (double) (-313.0F)); assertEquals((-313.0), double0, 0.01); }
public void test007() throws Throwable { long long0 = NumberUtils.toLong("{[u!BuM)R[4"); assertEquals(0L, long0); } @Test(timeout = 4000) public void test008() throws Throwable { int int0 = NumberUtils.toInt("InvocationTargetException occurred during 1.6 backcompat code"); assertEquals(0, int0); } @Test(timeout = 4000) public void test009() throws Throwable { float float0 = NumberUtils.toFloat("X+^(11?}:Btf^G<5i"); assertEquals(0.0F, float0, 0.01F); }
public void test008() throws Throwable { int int0 = NumberUtils.toInt("InvocationTargetException occurred during 1.6 backcompat code"); assertEquals(0, int0); }
public void test009() throws Throwable { float float0 = NumberUtils.toFloat("X+^(11?}:Btf^G<5i");
public void test010() throws Throwable { short short0 = NumberUtils.toShort(""); assertEquals((short)0, short0); }
public void test011() throws Throwable { int int0 = NumberUtils.toInt((String) null); assertEquals(0, int0); }
public void test012() throws Throwable { long long0 = NumberUtils.toLong((String) null, 280L); assertEquals(280L, long0); }
public void test013() throws Throwable { float float0 = NumberUtils.toFloat((String) null, 0.0F); assertEquals(0.0F, float0, 0.01F); }
public void test014() throws Throwable { double double0 = NumberUtils.toDouble((String) null); assertEquals(0.0, double0, 0.01); }
public void test015() throws Throwable { byte byte0 = NumberUtils.toByte((String) null, (byte)113); assertEquals((byte)113, byte0); }
public void test016() throws Throwable { short short0 = NumberUtils.toShort((String) null, (short)40); assertEquals((short)40, short0); }
public void test017() throws Throwable { try { NumberUtils.createNumber("2E.m."); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 2E.m. is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test018() throws Throwable { Number number0 = NumberUtils.createNumber((String) null); assertNull(number0); }
public void test019() throws Throwable { try { NumberUtils.createNumber(""); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // A blank string is not a valid number // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test020() throws Throwable { Number number0 = NumberUtils.createNumber("----"); assertNull(number0); }
public void test021() throws Throwable { try { NumberUtils.createNumber("0x.[NM"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \".[NM\" // verifyException("java.lang.NumberFormatException", e); } }
public void test022() throws Throwable { try { NumberUtils.createNumber("-0x(>8&c_"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"-(>8&c_\" // verifyException("java.lang.NumberFormatException", e); } }
public void test023() throws Throwable { Number number0 = NumberUtils.createNumber("0e1"); assertEquals((byte)0, number0.byteValue()); }
public void test024() throws Throwable { Number number0 = NumberUtils.createNumber("-0."); assertEquals((short)0, number0.shortValue()); }
public void test025() throws Throwable { try { NumberUtils.createNumber("4Beg\".3nS[s9L[Eq"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 4Beg\".3nS[s9L[Eq is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test026() throws Throwable { try { NumberUtils.createNumber("EvW]miHd%;.,(eK#5"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // no message in exception (getMessage() returned null) // verifyException("java.math.BigDecimal", e); } }
public void test027() throws Throwable { Number number0 = NumberUtils.createNumber("0f"); assertEquals((short)0, number0.shortValue()); }
public void test028() throws Throwable { try { NumberUtils.createNumber("h^@7}ZuQ6eEBVKq["); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // h^@7}ZuQ6eEBVKq[ is not a valid number.
public void test029() throws Throwable { try { NumberUtils.createNumber("0e"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 0e is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test030() throws Throwable { try { NumberUtils.createNumber("0e)"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 0e) is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test031() throws Throwable { Number number0 = NumberUtils.createNumber("0D"); assertEquals((short)0, number0.shortValue()); }
public void test032() throws Throwable { try { NumberUtils.createNumber("?$QY8g8gqg[7QDF"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // ?$QY8g8gqg[7QDF is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test033() throws Throwable { Number number0 = NumberUtils.createNumber("-9L"); assertEquals((-9L), number0); }
public void test034() throws Throwable { try { NumberUtils.createNumber("Vs?$}=d"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // Vs?$}=d is not a valid number.
public void test035() throws Throwable { Number number0 = NumberUtils.createNumber("0l"); assertEquals(0L, number0); }
public void test036() throws Throwable { try { NumberUtils.createNumber("JAj}Y.TdJ$,0|x?IL"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // JAj}Y.TdJ$,0|x?IL is not a valid number.
public void test037() throws Throwable { try { NumberUtils.createNumber("The Array must not be null"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // The Array must not be null is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test038() throws Throwable { try { NumberUtils.createNumber("-,L"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // -,L is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test039() throws Throwable { Number number0 = NumberUtils.createNumber("4f"); assertEquals(4.0F, number0); }
public void test040() throws Throwable { Number number0 = NumberUtils.createNumber("0.f"); assertEquals(0.0F, number0); }
public void test041() throws Throwable { Number number0 = NumberUtils.createNumber("1D"); assertEquals(1.0, number0); }
public void test042() throws Throwable { Number number0 = NumberUtils.createNumber("0.D"); assertEquals(0.0, number0); }
public void test043() throws Throwable { try { NumberUtils.createNumber("|Q7eZYL#x;@E((5"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"|Q7eZY\" // verifyException("java.lang.NumberFormatException", e); } }
public void test044() throws Throwable { Number number0 = NumberUtils.createNumber("0."); assertEquals(0.0F, number0); }
public void test045() throws Throwable { Number number0 = NumberUtils.createNumber("57."); assertEquals(57.0F, number0); }
public void test046() throws Throwable { Float float0 = NumberUtils.createFloat((String) null); assertNull(float0); }
public void test047() throws Throwable { Double double0 = NumberUtils.createDouble((String) null); assertNull(double0); }
public void test048() throws Throwable { Integer integer0 = NumberUtils.createInteger((String) null); assertNull(integer0); }
public void test049() throws Throwable { Long long0 = NumberUtils.createLong((String) null); assertNull(long0); }
public void test050() throws Throwable { BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null); assertNull(bigInteger0); }
public void test051() throws Throwable { BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null); assertNull(bigDecimal0); }
public void test052() throws Throwable { try { NumberUtils.createNumber("D"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // D is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test053() throws Throwable { long[] longArray0 = new long[0]; // Undeclared exception! try { NumberUtils.min(longArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test054() throws Throwable { // Undeclared exception! try { NumberUtils.min((long[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test055() throws Throwable { long[] longArray0 = new long[3]; longArray0[0] = 16L; long long0 = NumberUtils.min(longArray0); assertEquals(0L, long0); }
public void test056() throws Throwable { int[] intArray0 = new int[2]; int int0 = NumberUtils.min(intArray0); assertEquals(0, int0); }
public void test057() throws Throwable { // Undeclared exception! try { NumberUtils.min((int[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test058() throws Throwable { int[] intArray0 = new int[0]; // Undeclared exception! try { NumberUtils.min(intArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test059() throws Throwable { // Undeclared exception! try { NumberUtils.min((short[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test060() throws Throwable { short[] shortArray0 = new short[0]; // Undeclared exception! try { NumberUtils.min(shortArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test061() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); short[] shortArray0 = new short[3]; shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE; short short0 = NumberUtils.min(shortArray0); assertEquals((short)0, short0); }
public void test062() throws Throwable { // Undeclared exception! try { NumberUtils.min((byte[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test063() throws Throwable { byte[] byteArray0 = new byte[0]; // Undeclared exception! try { NumberUtils.min(byteArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test064() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); byte[] byteArray0 = new byte[10]; byteArray0[8] = (byte) numberUtils0.BYTE_MINUS_ONE; byte byte0 = NumberUtils.min(byteArray0); assertEquals((byte) (-1), byte0); }
public void test065() throws Throwable { // Undeclared exception! try { NumberUtils.min((double[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test066() throws Throwable { double[] doubleArray0 = new double[0]; // Undeclared exception! try { NumberUtils.min(doubleArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test067() throws Throwable { double[] doubleArray0 = new double[5]; doubleArray0[4] = Double.NaN; double double0 = NumberUtils.min(doubleArray0); assertEquals(Double.NaN, double0, 0.01); }
public void test068() throws Throwable { double[] doubleArray0 = new double[4]; doubleArray0[3] = (double) (byte) (-1); double double0 = NumberUtils.min(doubleArray0); assertEquals((-1.0), double0, 0.01); }
public void test069() throws Throwable { // Undeclared exception! try { NumberUtils.min((float[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test070() throws Throwable { float[] floatArray0 = new float[0]; // Undeclared exception! try { NumberUtils.min(floatArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test071() throws Throwable { float[] floatArray0 = new float[17]; floatArray0[1] = Float.NaN; float float0 = NumberUtils.min(floatArray0); assertEquals(Float.NaN, float0, 0.01F); }
public void test072() throws Throwable { float[] floatArray0 = new float[17]; floatArray0[1] = (-1.0F); float float0 = NumberUtils.min(floatArray0); assertEquals((-1.0F), float0, 0.01F); }
public void test073() throws Throwable { long[] longArray0 = new long[0]; // Undeclared exception! try { NumberUtils.max(longArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test074() throws Throwable { // Undeclared exception! try { NumberUtils.max((long[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test075() throws Throwable { long[] longArray0 = new long[6]; longArray0[1] = 234L; long long0 = NumberUtils.max(longArray0); assertEquals(234L, long0); }
public void test076() throws Throwable { int[] intArray0 = new int[0]; // Undeclared exception! try { NumberUtils.max(intArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test077() throws Throwable { // Undeclared exception! try { NumberUtils.max((int[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test078() throws Throwable { int[] intArray0 = new int[3]; intArray0[0] = (-548); int int0 = NumberUtils.max(intArray0); assertEquals(0, int0); }
public void test079() throws Throwable { // Undeclared exception! try { NumberUtils.max((short[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test080() throws Throwable { short[] shortArray0 = new short[0]; // Undeclared exception! try { NumberUtils.max(shortArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test081() throws Throwable { short[] shortArray0 = new short[18]; shortArray0[1] = (short)12; short short0 = NumberUtils.max(shortArray0); assertEquals((short)12, short0); }
public void test082() throws Throwable { // Undeclared exception! try { NumberUtils.max((byte[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test083() throws Throwable { byte[] byteArray0 = new byte[0]; // Undeclared exception! try { NumberUtils.max(byteArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test084() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); byte[] byteArray0 = new byte[5]; byteArray0[3] = (byte) numberUtils0.BYTE_ONE; byte byte0 = NumberUtils.max(byteArray0); assertEquals((byte)1, byte0); }
public void test085() throws Throwable { double[] doubleArray0 = new double[0]; // Undeclared exception! try { NumberUtils.max(doubleArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test086() throws Throwable { // Undeclared exception! try { NumberUtils.max((double[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test087() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[3] = Double.NaN; double double0 = NumberUtils.max(doubleArray0); assertEquals(Double.NaN, double0, 0.01); }
public void test088() throws Throwable { double[] doubleArray0 = new double[4]; doubleArray0[3] = (double) (byte)29; double double0 = NumberUtils.max(doubleArray0); assertEquals(29.0, double0, 0.01); }
public void test089() throws Throwable { // Undeclared exception! try { NumberUtils.max((float[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test090() throws Throwable { float[] floatArray0 = new float[0]; // Undeclared exception! try { NumberUtils.max(floatArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test091() throws Throwable { float[] floatArray0 = new float[5]; floatArray0[1] = Float.NaN; float float0 = NumberUtils.max(floatArray0); assertEquals(Float.NaN, float0, 0.01F); }
public void test092() throws Throwable { float[] floatArray0 = new float[3]; floatArray0[2] = 152.5F; float float0 = NumberUtils.max(floatArray0); assertEquals(152.5F, float0, 0.01F); }
public void test093() throws Throwable { long long0 = NumberUtils.min((long) (short)772, (long) 0, (long) 0); assertEquals(0L, long0); }
public void test094() throws Throwable { long long0 = NumberUtils.min((long) (short)759, (long) (short)759, (long) 0); assertEquals(0L, long0); }
public void test095() throws Throwable { int int0 = NumberUtils.min((int) (short)759, (int) (short) (-3717), 0); assertEquals((-3717), int0); }
public void test096() throws Throwable { int int0 = NumberUtils.min((-504), (-504), (-781)); assertEquals((-781), int0); }
public void test097() throws Throwable { short short0 = NumberUtils.min((short)116, (short)65, (short)65); assertEquals((short)65, short0); }
public void test098() throws Throwable { short short0 = NumberUtils.min((short)0, (short)0, (short) (-2063)); assertEquals((short) (-2063), short0); }
public void test099() throws Throwable { byte byte0 = NumberUtils.min((byte)29, (byte) (-42), (byte)29); assertEquals((byte) (-42), byte0); }
public void test100() throws Throwable { byte byte0 = NumberUtils.min((byte)29, (byte)29, (byte) (-64)); assertEquals((byte) (-64), byte0); }
public void test101() throws Throwable { Short short0 = new Short((short) (-2063)); long long0 = NumberUtils.max((long) (short) (-2063), (long) short0, (long) (short)0); assertEquals(0L, long0); }
public void test102() throws Throwable { Short short0 = new Short((short)179); long long0 = NumberUtils.max((long) (short)0, (long) short0, (long) (short)0); assertEquals(179L, long0); }
public void test103() throws Throwable { int int0 = NumberUtils.max((int) (short)244, (int) (short)244, (int) (short)759); assertEquals(759, int0); }
public void test104() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) numberUtils0.INTEGER_ONE, (int) numberUtils0.SHORT_ZERO); assertEquals(1, int0); }
public void test105() throws Throwable { short short0 = NumberUtils.max((short)726, (short)15225, (short)15225); assertEquals((short)15225, short0); }
public void test106() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_ONE); assertEquals((short)1, short0); }
public void test107() throws Throwable { byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)53); assertEquals((byte)53, byte0); }
public void test108() throws Throwable { byte byte0 = NumberUtils.max((byte) (-42), (byte)29, (byte) (-42)); assertEquals((byte)29, byte0); }
public void test109() throws Throwable { boolean boolean0 = NumberUtils.isDigits(""); assertFalse(boolean0); }
public void test110() throws Throwable { boolean boolean0 = NumberUtils.isNumber("2E.m."); assertFalse(boolean0); }
public void test111() throws Throwable { boolean boolean0 = NumberUtils.isNumber((String) null); assertFalse(boolean0); }
public void test112() throws Throwable { boolean boolean0 = NumberUtils.isNumber("d"); assertFalse(boolean0); }
public void test113() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0e."); assertFalse(boolean0); }
public void test114() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0x0x"); assertFalse(boolean0); }
public void test115() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0x"); assertFalse(boolean0); }
public void test116() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0xD"); assertTrue(boolean0); }
public void test117() throws Throwable { boolean boolean0 = NumberUtils.isNumber("-0x%71M#(7YR"); assertFalse(boolean0); }
public void test118() throws Throwable { boolean boolean0 = NumberUtils.isNumber("-0xda^lKTO"); assertFalse(boolean0); }
public void test119() throws Throwable { boolean boolean0 = NumberUtils.isNumber("-"); assertFalse(boolean0); }
public void test120() throws Throwable { boolean boolean0 = NumberUtils.isNumber("..."); assertFalse(boolean0); }
public void test121() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0eEq"); assertFalse(boolean0); }
public void test122() throws Throwable { boolean boolean0 = NumberUtils.isNumber("eV9"); assertFalse(boolean0); }
public void test123() throws Throwable { boolean boolean0 = NumberUtils.isNumber("+\"2#lV:Y2Pc;6H1<*-"); assertFalse(boolean0); }
public void test124() throws Throwable { boolean boolean0 = NumberUtils.isNumber(".[NM"); assertFalse(boolean0); }
public void test125() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0e-)"); assertFalse(boolean0); }
public void test126() throws Throwable { boolean boolean0 = NumberUtils.isNumber("27"); assertTrue(boolean0); }
public void test127() throws Throwable { boolean boolean0 = NumberUtils.isNumber("e"); assertFalse(boolean0); }
public void test128() throws Throwable { boolean boolean0 = NumberUtils.isNumber("E"); assertFalse(boolean0); }
public void test129() throws Throwable { boolean boolean0 = NumberUtils.isNumber(".."); assertFalse(boolean0); }
public void test130() throws Throwable { boolean boolean0 = NumberUtils.isNumber("57."); assertTrue(boolean0); }
public void test131() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0eL"); assertFalse(boolean0); }
public void test132() throws Throwable { boolean boolean0 = NumberUtils.isNumber("D"); assertFalse(boolean0); }
public void test133() throws Throwable { boolean boolean0 = NumberUtils.isNumber("f"); assertFalse(boolean0); }
public void test134() throws Throwable { boolean boolean0 = NumberUtils.isNumber("5F"); assertTrue(boolean0); }
public void test135() throws Throwable { boolean boolean0 = NumberUtils.isNumber("l"); assertFalse(boolean0); }
public void test136() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0L"); assertTrue(boolean0); }
