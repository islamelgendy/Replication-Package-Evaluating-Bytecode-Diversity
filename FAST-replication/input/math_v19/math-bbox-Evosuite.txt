public void test00() throws Throwable { double[] doubleArray0 = new double[3]; CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1429, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MINIMIZE; // Undeclared exception! cMAESOptimizer0.optimize(1429, microsphereInterpolatingFunction0, goalType0, doubleArray0); }
public void test01() throws Throwable { CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1636); List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory(); assertEquals(0, list0.size()); }
public void test02() throws Throwable { double[] doubleArray0 = new double[0]; CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(799, doubleArray0); assertEquals(0.0, CMAESOptimizer.DEFAULT_STOPFITNESS, 0.01); }
public void test03() throws Throwable { CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(30000); List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory(); assertEquals(0, list0.size()); }
public void test04() throws Throwable { CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(); List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory(); assertTrue(list0.isEmpty()); }
public void test05() throws Throwable { CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1643); List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory(); assertEquals(0, list0.size()); }
public void test06() throws Throwable { double[] doubleArray0 = new double[3]; Well1024a well1024a0 = new Well1024a((-9)); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1420, doubleArray0, (-9), 0.0, false, (-9), (-9), well1024a0, false); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MAXIMIZE; // Undeclared exception! cMAESOptimizer0.optimize(1420, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0); }
public void test07() throws Throwable { double[] doubleArray0 = new double[3]; Well1024a well1024a0 = new Well1024a(); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2992), doubleArray0, 947, 0.0, true, 947, 947, well1024a0, true); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-2992)); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 947, 0, true, 947, (-2992), cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true); GoalType goalType0 = GoalType.MAXIMIZE; // Undeclared exception! try { cMAESOptimizer1.optimize(947, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e); } }
public void test08() throws Throwable { double[] doubleArray0 = new double[3]; CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MINIMIZE; // Undeclared exception! try { cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, (double[]) null, doubleArray0); fail("Expecting exception: MathUnsupportedOperationException"); } catch(MathUnsupportedOperationException e) { // // unsupported operation // verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e); } }
public void test09() throws Throwable { double[] doubleArray0 = new double[3]; Well1024a well1024a0 = new Well1024a((-9)); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-9)); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1420, well1024a0); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 1026, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MAXIMIZE; // Undeclared exception! try { cMAESOptimizer0.optimize((-9), (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, (double[]) null); fail("Expecting exception: MathUnsupportedOperationException"); } catch(MathUnsupportedOperationException e) { // // unsupported operation // verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e); } }
public void test10() throws Throwable { double[] doubleArray0 = new double[3]; Well1024a well1024a0 = new Well1024a(1415); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1415, doubleArray0, 1415, 0.0, true, 1415, 1415, well1024a0, true); double[][] doubleArray1 = new double[3][8]; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, (-825), 693, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MINIMIZE; // Undeclared exception! try { cMAESOptimizer0.optimize(684, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray1[1], doubleArray1[1]); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // 3 != 8 // verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e); } }
public void test11() throws Throwable { double[] doubleArray0 = new double[3]; Well1024a well1024a0 = new Well1024a(1387); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1387, doubleArray0, 1387, 0.0, false, 1387, 1387, well1024a0, false); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MAXIMIZE; // Undeclared exception! cMAESOptimizer0.optimize(Integer.MAX_VALUE, microsphereInterpolatingFunction0, goalType0, doubleArray0); }
public void test12() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[0] = (double) 1420; Well1024a well1024a0 = new Well1024a((-9)); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1420, doubleArray0, (-9), 0.0, false, (-9), (-9), well1024a0, false); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1420); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 1062, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MINIMIZE; // Undeclared exception! try { cMAESOptimizer0.optimize(0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // 1,420 out of [0, 0] range // verifyException("org.apache.commons.math3.optimization.direct.CMAESOptimizer", e); } }
public void test13() throws Throwable { Random.setNextRandom(1420); double[] doubleArray0 = new double[3]; CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MAXIMIZE; // Undeclared exception! cMAESOptimizer0.optimize(1420, microsphereInterpolatingFunction0, goalType0, doubleArray0); }
public void test14() throws Throwable { double[] doubleArray0 = new double[3]; Well1024a well1024a0 = new Well1024a(); CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1393, doubleArray0, 1393, 0.0, true, 1393, 1393, well1024a0, true); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1393); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, unitSphereRandomVectorGenerator0); CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(0, doubleArray0, 1393, 0, true, 1393, 1393, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR, true); GoalType goalType0 = GoalType.MAXIMIZE; PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(54, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0); assertNotNull(pointValuePair0); }
public void test15() throws Throwable { double[] doubleArray0 = new double[3]; CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(); double[][] doubleArray1 = new double[3][8]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30000, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR); MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 30000, 0, unitSphereRandomVectorGenerator0); GoalType goalType0 = GoalType.MINIMIZE; // Undeclared exception! try { cMAESOptimizer0.optimize(30000, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0, doubleArray0, doubleArray0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // illegal state: convergence failed // verifyException("org.apache.commons.math3.linear.EigenDecomposition", e); } }
