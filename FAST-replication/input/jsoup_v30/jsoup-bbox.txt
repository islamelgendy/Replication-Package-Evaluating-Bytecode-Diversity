public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = whitelist1.addEnforcedAttribute("hi!", "#document", "hi!"); boolean boolean12 = org.jsoup.Jsoup.isValid("<html>\n <head></head>\n <body></body>\n</html>", whitelist1); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings13 = document6.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); // The following exception was thrown during execution in test generation try { java.lang.String str16 = org.jsoup.Jsoup.clean("", ".<html>\n <head></head>\n <body></body>\n</html>", whitelist2, outputSettings15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(outputSettings15); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(":matchesOwn(null", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str27 = document26.ownText(); org.jsoup.nodes.Node node30 = document26.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); org.jsoup.select.Elements elements43 = document34.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element45 = document34.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element47 = document34.createElement(" hi!"); org.jsoup.select.Elements elements49 = document34.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean50 = indexLessThan23.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document51 = cleaner3.clean(document34); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element59 = document55.text(""); org.jsoup.nodes.Element element61 = document55.tagName("[hi!$=  ]"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node62 = document51.before((org.jsoup.nodes.Node) element61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element61); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining8 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document10 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document14, "hi!"); org.jsoup.nodes.Element element18 = document14.tagName("hi!"); org.jsoup.nodes.Element element20 = document14.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings21 = document14.outputSettings(); boolean boolean22 = attributeWithValueContaining8.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document document23 = cleaner5.clean(document14); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document27, "hi!"); org.jsoup.nodes.Element element31 = document27.tagName("hi!"); org.jsoup.nodes.Element element33 = document27.append(""); java.lang.String str34 = document27.toString(); java.lang.String str35 = document27.id(); org.jsoup.nodes.Node node36 = document27.parent(); org.jsoup.nodes.Document document37 = cleaner5.clean(document27); org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); // The following exception was thrown during execution in test generation try { boolean boolean41 = matches1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document40); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str34, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNull(node36); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document40); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); boolean boolean8 = whitelist3.isSafeTag("\n<!--hi!-->"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj3 = objList0.peekFirst(); objList0.addFirst((java.lang.Object) ":gt(100)"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist14 = whitelist8.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist18 = whitelist8.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str19 = org.jsoup.Jsoup.clean("#document", "<html>\n <head></head>\n <body></body>\n</html>", whitelist18); objList0.addLast((java.lang.Object) whitelist18); java.util.regex.Pattern pattern23 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching24 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); java.lang.String str35 = document28.toString(); org.jsoup.nodes.Element element37 = document28.prependElement("\nhi!"); org.jsoup.select.Elements elements39 = document28.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document43, "hi!"); org.jsoup.nodes.Element element47 = document43.tagName("hi!"); org.jsoup.nodes.Element element49 = document43.append(""); boolean boolean50 = attributeWithValueMatching24.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document43); org.jsoup.nodes.Document document51 = document43.normalise(); org.jsoup.nodes.Element element52 = document51.empty(); // The following exception was thrown during execution in test generation try { java.lang.Object obj53 = objList0.set((int) (byte) 100, (java.lang.Object) document51); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(obj3); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#document" + "'", str19, "#document"); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str35, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(elements39); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(element52); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.safety.Whitelist whitelist8 = whitelist3.preserveRelativeLinks(false); java.lang.String str9 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[^hi!]" + "'", str9, "[^hi!]"); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Element element23 = document21.html("#comment"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node25 = element23.after(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str14 = org.jsoup.Jsoup.clean(":lt(32)", whitelist13); org.jsoup.safety.Whitelist whitelist18 = whitelist13.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray25 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist26 = whitelist13.addTags(strArray25); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addProtocols(":matchesOwn(null", "hi!", strArray25); java.lang.String[] strArray36 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean37 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray36); org.jsoup.safety.Whitelist whitelist38 = whitelist27.addProtocols("\n<!--hi!-->", "#document", strArray36); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray36); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray36); org.jsoup.safety.Whitelist whitelist41 = whitelist2.addAttributes("*", strArray36); org.jsoup.safety.Whitelist whitelist43 = whitelist2.preserveRelativeLinks(false); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + ":lt(32)" + "'", str14, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); int int9 = objList0.lastIndexOf((java.lang.Object) document4); objList0.clear(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner15 = new org.jsoup.safety.Cleaner(whitelist14); // The following exception was thrown during execution in test generation try { objList0.add((int) (short) 10, (java.lang.Object) cleaner15); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str10 = org.jsoup.Jsoup.clean(":lt(32)", whitelist9); org.jsoup.safety.Whitelist whitelist14 = whitelist9.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray21 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist22 = whitelist9.addTags(strArray21); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addProtocols(":matchesOwn(null", "hi!", strArray21); java.lang.String[] strArray32 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean33 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist23.addProtocols("\n<!--hi!-->", "#document", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32); boolean boolean36 = org.jsoup.helper.StringUtil.in("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", strArray32); org.jsoup.helper.Validate.notNull((java.lang.Object) boolean36); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + ":lt(32)" + "'", str10, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements37 = document25.getElementsByAttributeStarting(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str11 = org.jsoup.Jsoup.clean(":lt(32)", whitelist10); org.jsoup.safety.Whitelist whitelist15 = whitelist10.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray22 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist23 = whitelist10.addTags(strArray22); org.jsoup.safety.Whitelist whitelist24 = whitelist6.addProtocols(":matchesOwn(null", "hi!", strArray22); java.lang.String[] strArray33 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean34 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray33); org.jsoup.safety.Whitelist whitelist35 = whitelist24.addProtocols("\n<!--hi!-->", "#document", strArray33); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray33); boolean boolean37 = org.jsoup.helper.StringUtil.in("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", strArray33); org.jsoup.safety.Whitelist whitelist38 = whitelist0.addTags(strArray33); org.jsoup.safety.Whitelist whitelist42 = whitelist38.addEnforcedAttribute(".\n<!---->", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "[null]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + ":lt(32)" + "'", str11, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str27 = document26.ownText(); org.jsoup.nodes.Node node30 = document26.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); org.jsoup.select.Elements elements43 = document34.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element45 = document34.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element47 = document34.createElement(" hi!"); org.jsoup.select.Elements elements49 = document34.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean50 = indexLessThan23.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document51 = cleaner3.clean(document34); boolean boolean53 = document34.hasAttr(""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes4 = whitelist2.getEnforcedAttributes("#text"); java.lang.String str5 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", "<html>\n <head></head>\n <body>  \n </body>\n</html>", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[^hi!]" + "'", str5, "[^hi!]"); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str27 = document26.ownText(); org.jsoup.nodes.Node node30 = document26.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); org.jsoup.select.Elements elements43 = document34.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element45 = document34.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element47 = document34.createElement(" hi!"); org.jsoup.select.Elements elements49 = document34.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean50 = indexLessThan23.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document51 = cleaner3.clean(document34); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element58 = document55.empty(); org.jsoup.nodes.Element element60 = document55.removeClass("hi!"); org.jsoup.select.Elements elements63 = document55.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.nodes.Element element64 = document55.empty(); org.jsoup.nodes.Document document65 = document55.clone(); org.jsoup.nodes.Document document66 = cleaner3.clean(document65); org.jsoup.nodes.Document document67 = null; // The following exception was thrown during execution in test generation try { boolean boolean68 = cleaner3.isValid(document67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document66); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.select.Evaluator.Class class11 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); org.jsoup.select.Elements elements24 = document15.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element26 = document15.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes27 = document15.attributes(); org.jsoup.nodes.Element element29 = document15.prepend("[^hi!]"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); org.jsoup.nodes.Element element42 = document33.attr("#document", "#document"); org.jsoup.nodes.Element element43 = document33.body(); boolean boolean44 = class11.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Attribute attribute47 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean48 = whitelist4.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document15, attribute47); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element50 = document15.before("<html> <head></head> <body> </body> </html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNull(element26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str27 = document26.ownText(); org.jsoup.nodes.Node node30 = document26.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); org.jsoup.select.Elements elements43 = document34.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element45 = document34.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element47 = document34.createElement(" hi!"); org.jsoup.select.Elements elements49 = document34.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean50 = indexLessThan23.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document51 = cleaner3.clean(document34); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element59 = document55.text(""); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList65 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document63, "hi!"); org.jsoup.nodes.Element element67 = document63.tagName("hi!"); org.jsoup.nodes.Element element69 = document63.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings70 = document63.outputSettings(); org.jsoup.nodes.Document document71 = document55.outputSettings(outputSettings70); java.lang.String str73 = document55.attr("\nhi!"); org.jsoup.nodes.Element element74 = document55.body(); boolean boolean75 = cleaner3.isValid(document55); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document79, "hi!"); org.jsoup.nodes.Element element82 = document79.empty(); org.jsoup.nodes.Element element84 = document79.removeClass("hi!"); org.jsoup.nodes.Element element86 = element84.toggleClass(""); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node87 = document55.after((org.jsoup.nodes.Node) element86); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(nodeList65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, ""); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element86); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.select.Evaluator.Class class11 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); org.jsoup.select.Elements elements24 = document15.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element26 = document15.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes27 = document15.attributes(); org.jsoup.nodes.Element element29 = document15.prepend("[^hi!]"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); org.jsoup.nodes.Element element42 = document33.attr("#document", "#document"); org.jsoup.nodes.Element element43 = document33.body(); boolean boolean44 = class11.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Attribute attribute47 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean48 = whitelist4.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document15, attribute47); org.jsoup.helper.Validate.notNull((java.lang.Object) ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", " "); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNull(element26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)", whitelist8); org.jsoup.safety.Whitelist whitelist13 = whitelist8.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray20 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist21 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist4.addAttributes(":gt(100)", strArray20); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str29 = org.jsoup.Jsoup.clean(":lt(32)", whitelist28); boolean boolean31 = whitelist28.isSafeTag(""); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element38 = document35.empty(); org.jsoup.nodes.Element element40 = document35.removeClass("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList46 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document44, "hi!"); org.jsoup.nodes.Element element48 = document44.tagName("hi!"); org.jsoup.nodes.Element element50 = document44.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document44.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.prettyPrint(false); org.jsoup.nodes.Document document54 = document35.outputSettings(outputSettings53); java.lang.String str55 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist28, outputSettings53); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist59 = whitelist57.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist65 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str66 = org.jsoup.Jsoup.clean(":lt(32)", whitelist65); org.jsoup.safety.Whitelist whitelist70 = whitelist65.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray77 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist78 = whitelist65.addTags(strArray77); org.jsoup.safety.Whitelist whitelist79 = whitelist61.addProtocols(":matchesOwn(null", "hi!", strArray77); org.jsoup.safety.Whitelist whitelist80 = whitelist28.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray77); org.jsoup.safety.Whitelist whitelist81 = whitelist22.addProtocols("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", "[hi!$=<html> <head></head> <body></body> </html>]", strArray77); java.lang.String str82 = org.jsoup.Jsoup.clean("", "[^hi!]", whitelist22); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)" + "'", str9, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + ":lt(32)" + "'", str29, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(nodeList46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[:lt(32)]" + "'", str55, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + ":lt(32)" + "'", str66, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, ""); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); boolean boolean9 = whitelist7.isSafeTag("[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("*", "#doctype", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings13 = document6.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings13.indentAmount(100); org.jsoup.nodes.Entities.EscapeMode escapeMode18 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.escapeMode(escapeMode18); // The following exception was thrown during execution in test generation try { java.lang.String str20 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", whitelist2, outputSettings19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings19); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); org.jsoup.safety.Whitelist whitelist6 = whitelist1.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray13 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist14 = whitelist1.addTags(strArray13); org.jsoup.safety.Cleaner cleaner15 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.safety.Cleaner cleaner16 = new org.jsoup.safety.Cleaner(whitelist1); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.select.Elements elements28 = document23.select("[[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]$=[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(elements28); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.select.Elements elements76 = document74.parents(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(elements76); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element13 = document10.empty(); org.jsoup.nodes.Element element15 = document10.removeClass("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.prettyPrint(false); org.jsoup.nodes.Document document29 = document10.outputSettings(outputSettings28); java.lang.String str30 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist3, outputSettings28); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings28.clone(); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)" + "'", str4, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[:lt(32)]" + "'", str30, "[:lt(32)]"); org.junit.Assert.assertNotNull(outputSettings31); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = whitelist1.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str12 = org.jsoup.Jsoup.clean("hi!", whitelist1); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining20 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document22 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element30 = document26.tagName("hi!"); org.jsoup.nodes.Element element32 = document26.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings33 = document26.outputSettings(); boolean boolean34 = attributeWithValueContaining20.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document35 = cleaner17.clean(document26); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document39, "hi!"); org.jsoup.nodes.Element element43 = document39.tagName("hi!"); org.jsoup.nodes.Element element45 = document39.append(""); java.lang.String str46 = document39.toString(); java.lang.String str47 = document39.id(); org.jsoup.nodes.Node node48 = document39.parent(); org.jsoup.nodes.Document document49 = cleaner17.clean(document39); org.jsoup.parser.Tag tag50 = document39.tag(); org.jsoup.nodes.Element element52 = document39.appendText(".[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]"); org.jsoup.nodes.Attribute attribute55 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); boolean boolean56 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document39, attribute55); java.lang.String str57 = attribute55.getKey(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNull(node48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(tag50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(attribute55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#comment" + "'", str57, "#comment"); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str8 = org.jsoup.Jsoup.clean("\nhi!", whitelist7); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str15 = org.jsoup.Jsoup.clean(":lt(32)", whitelist14); boolean boolean17 = whitelist14.isSafeTag(""); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = document21.removeClass("hi!"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Element element36 = document30.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document30.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.prettyPrint(false); org.jsoup.nodes.Document document40 = document21.outputSettings(outputSettings39); java.lang.String str41 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist14, outputSettings39); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist45 = whitelist43.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str52 = org.jsoup.Jsoup.clean(":lt(32)", whitelist51); org.jsoup.safety.Whitelist whitelist56 = whitelist51.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray63 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist64 = whitelist51.addTags(strArray63); org.jsoup.safety.Whitelist whitelist65 = whitelist47.addProtocols(":matchesOwn(null", "hi!", strArray63); org.jsoup.safety.Whitelist whitelist66 = whitelist14.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray63); org.jsoup.safety.Whitelist whitelist67 = whitelist7.addProtocols("#doctype", "[]", strArray63); org.jsoup.safety.Whitelist whitelist71 = whitelist67.addEnforcedAttribute(".[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", ":contains(:gt(100)", "[<html>\n <head></head>\n <body>\n </body>\n</html>]"); java.lang.String[] strArray73 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist74 = whitelist71.addAttributes("", strArray73); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ":lt(32)" + "'", str15, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[:lt(32)]" + "'", str41, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + ":lt(32)" + "'", str52, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist71); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.jsoup.select.Evaluator.AttributeStarting attributeStarting1 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); java.lang.String str2 = attributeStarting1.toString(); org.jsoup.nodes.Element element3 = null; org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element10 = document7.empty(); org.jsoup.nodes.Element element12 = document7.removeClass("hi!"); java.lang.String str13 = document7.nodeName(); boolean boolean14 = attributeStarting1.matches(element3, (org.jsoup.nodes.Element) document7); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner18 = new org.jsoup.safety.Cleaner(whitelist17); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining21 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document27, "hi!"); org.jsoup.nodes.Element element31 = document27.tagName("hi!"); org.jsoup.nodes.Element element33 = document27.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings34 = document27.outputSettings(); boolean boolean35 = attributeWithValueContaining21.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document27); org.jsoup.nodes.Document document36 = cleaner18.clean(document27); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str39 = document38.toString(); java.lang.String str40 = document38.baseUri(); org.jsoup.nodes.Document document41 = cleaner18.clean(document38); org.jsoup.nodes.Document.QuirksMode quirksMode42 = document41.quirksMode(); org.jsoup.nodes.Document document44 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element45 = document44.parent(); // The following exception was thrown during execution in test generation try { boolean boolean46 = attributeStarting1.matches((org.jsoup.nodes.Element) document41, element45); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^hi!]" + "'", str2, "[^hi!]"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#document" + "'", str13, "#document"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str39, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + quirksMode42 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode42.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNull(element45); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean(":gt(100)", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)=\"[.]\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)", whitelist8); org.jsoup.safety.Whitelist whitelist13 = whitelist8.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray20 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist21 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist4.addProtocols(":matchesOwn(null", "hi!", strArray20); java.lang.Class<?> wildcardClass23 = whitelist4.getClass(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)" + "'", str9, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(wildcardClass23); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist6); java.lang.String str10 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist6); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str17 = org.jsoup.Jsoup.clean(":lt(32)", whitelist16); boolean boolean19 = whitelist16.isSafeTag(""); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document23, "hi!"); org.jsoup.nodes.Element element26 = document23.empty(); org.jsoup.nodes.Element element28 = document23.removeClass("hi!"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.prettyPrint(false); org.jsoup.nodes.Document document42 = document23.outputSettings(outputSettings41); java.lang.String str43 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist16, outputSettings41); org.jsoup.safety.Whitelist whitelist46 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str47 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist46); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist53 = whitelist51.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str58 = org.jsoup.Jsoup.clean(":lt(32)", whitelist57); org.jsoup.safety.Whitelist whitelist62 = whitelist57.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray69 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist70 = whitelist57.addTags(strArray69); org.jsoup.safety.Whitelist whitelist71 = whitelist53.addProtocols(":matchesOwn(null", "hi!", strArray69); java.lang.String[] strArray80 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean81 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray80); org.jsoup.safety.Whitelist whitelist82 = whitelist71.addProtocols("\n<!--hi!-->", "#document", strArray80); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray80); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray80); org.jsoup.safety.Whitelist whitelist85 = whitelist46.addAttributes("*", strArray80); org.jsoup.safety.Whitelist whitelist86 = whitelist16.addTags(strArray80); boolean boolean87 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray80); org.jsoup.safety.Whitelist whitelist88 = whitelist6.addAttributes(":matchesOwn(null", strArray80); org.jsoup.nodes.Attributes attributes90 = whitelist6.getEnforcedAttributes("<html>\n <head></head>\n <body>\n </body>\n</html>"); java.lang.String str91 = org.jsoup.Jsoup.clean("[^\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->]", ".", whitelist6); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[  ^=hi!]" + "'", str10, "[  ^=hi!]"); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + ":lt(32)" + "'", str17, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[:lt(32)]" + "'", str43, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[hi!$=  ]" + "'", str47, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + ":lt(32)" + "'", str58, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(strArray80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertNotNull(attributes90); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[^ ]" + "'", str91, "[^ ]"); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); java.lang.String[] strArray27 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist28 = whitelist25.addAttributes("[!=hi!]", strArray27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); java.util.regex.Pattern pattern36 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements37 = document25.getElementsMatchingText(pattern36); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); java.lang.String str5 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist4); boolean boolean7 = whitelist4.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); boolean boolean19 = org.jsoup.helper.StringUtil.in(" hi!", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist4.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray17); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray17, "     "); boolean boolean23 = org.jsoup.helper.StringUtil.in(".", strArray17); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "." + "'", str5, "."); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); java.lang.String str5 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist4); boolean boolean7 = whitelist4.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); boolean boolean19 = org.jsoup.helper.StringUtil.in(" hi!", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist4.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray17); boolean boolean22 = whitelist20.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist26 = whitelist20.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); java.lang.String str29 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist28); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "." + "'", str5, "."); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "." + "'", str29, "."); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag(""); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str27 = org.jsoup.Jsoup.clean(":lt(32)", whitelist26); boolean boolean29 = whitelist26.isSafeTag(""); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element36 = document33.empty(); org.jsoup.nodes.Element element38 = document33.removeClass("hi!"); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.prettyPrint(false); org.jsoup.nodes.Document document52 = document33.outputSettings(outputSettings51); java.lang.String str53 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist26, outputSettings51); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str57 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist56); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str68 = org.jsoup.Jsoup.clean(":lt(32)", whitelist67); org.jsoup.safety.Whitelist whitelist72 = whitelist67.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray79 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist80 = whitelist67.addTags(strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist63.addProtocols(":matchesOwn(null", "hi!", strArray79); java.lang.String[] strArray90 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean91 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray90); org.jsoup.safety.Whitelist whitelist92 = whitelist81.addProtocols("\n<!--hi!-->", "#document", strArray90); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray90); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray90); org.jsoup.safety.Whitelist whitelist95 = whitelist56.addAttributes("*", strArray90); org.jsoup.safety.Whitelist whitelist96 = whitelist26.addTags(strArray90); boolean boolean97 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray90); org.jsoup.safety.Whitelist whitelist98 = whitelist19.addTags(strArray90); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + ":lt(32)" + "'", str27, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[:lt(32)]" + "'", str53, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[hi!$=  ]" + "'", str57, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + ":lt(32)" + "'", str68, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true); org.junit.Assert.assertNotNull(whitelist92); org.junit.Assert.assertNotNull(whitelist95); org.junit.Assert.assertNotNull(whitelist96); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false); org.junit.Assert.assertNotNull(whitelist98); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes(""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist15 = whitelist9.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist19 = whitelist9.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str20 = org.jsoup.Jsoup.clean("hi!", whitelist9); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); org.jsoup.safety.Whitelist whitelist35 = whitelist30.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray42 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist43 = whitelist30.addTags(strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist26.addProtocols(":matchesOwn(null", "hi!", strArray42); java.lang.String[] strArray53 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean54 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist44.addProtocols("\n<!--hi!-->", "#document", strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.safety.Whitelist whitelist58 = whitelist9.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray53); org.jsoup.safety.Whitelist whitelist59 = whitelist4.addAttributes("*", strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.text(""); int int8 = element7.siblingIndex(); org.jsoup.nodes.Element element9 = element7.parent(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting12 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("<html>\n <head></head>\n <body></body>\n</html>", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList18 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document16, "hi!"); org.jsoup.nodes.Element element19 = document16.empty(); org.jsoup.nodes.Element element21 = element19.toggleClass("#document"); org.jsoup.nodes.Element element23 = element21.tagName("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment(""); boolean boolean26 = attributeWithValueStarting12.matches(element21, (org.jsoup.nodes.Element) document25); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes33 = whitelist31.getEnforcedAttributes("#text"); java.lang.String str34 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist31); java.lang.String str35 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist31); org.jsoup.select.Evaluator.Class class38 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); org.jsoup.select.Elements elements51 = document42.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element53 = document42.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes54 = document42.attributes(); org.jsoup.nodes.Element element56 = document42.prepend("[^hi!]"); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList62 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document60, "hi!"); org.jsoup.nodes.Element element64 = document60.tagName("hi!"); org.jsoup.nodes.Element element66 = document60.append(""); org.jsoup.nodes.Element element69 = document60.attr("#document", "#document"); org.jsoup.nodes.Element element70 = document60.body(); boolean boolean71 = class38.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document60); org.jsoup.nodes.Attribute attribute74 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean75 = whitelist31.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document42, attribute74); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document79, "hi!"); org.jsoup.nodes.Element element83 = document79.text(""); org.jsoup.select.Elements elements86 = document79.getElementsByAttributeValueEnding("[^hi!]", "#document"); org.jsoup.nodes.Element element88 = document79.prependText("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); java.util.Map<java.lang.String, java.lang.String> strMap89 = element88.dataset(); boolean boolean90 = attributeWithValueStarting12.matches((org.jsoup.nodes.Element) document42, element88); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node91 = element9.after((org.jsoup.nodes.Node) document42); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(element9); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(nodeList18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(attributes33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[  ^=hi!]" + "'", str35, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(elements51); org.junit.Assert.assertNull(element53); org.junit.Assert.assertNotNull(attributes54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(nodeList62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertNotNull(attribute74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertNotNull(elements86); org.junit.Assert.assertNotNull(element88); org.junit.Assert.assertNotNull(strMap89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str39 = org.jsoup.Jsoup.clean(":lt(32)", whitelist38); org.jsoup.safety.Whitelist whitelist43 = whitelist38.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray50 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist51 = whitelist38.addTags(strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist34.addProtocols(":matchesOwn(null", "hi!", strArray50); java.lang.String[] strArray61 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean62 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist52.addProtocols("\n<!--hi!-->", "#document", strArray61); org.jsoup.safety.Whitelist whitelist64 = whitelist27.addProtocols(".\n<!---->", "[:gt(100)]", strArray61); org.jsoup.safety.Whitelist whitelist66 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist68 = whitelist66.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner69 = new org.jsoup.safety.Cleaner(whitelist68); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining72 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document74 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList80 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document78, "hi!"); org.jsoup.nodes.Element element82 = document78.tagName("hi!"); org.jsoup.nodes.Element element84 = document78.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings85 = document78.outputSettings(); boolean boolean86 = attributeWithValueContaining72.matches((org.jsoup.nodes.Element) document74, (org.jsoup.nodes.Element) document78); org.jsoup.nodes.Document document87 = cleaner69.clean(document78); org.jsoup.nodes.Document document89 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str90 = document89.toString(); java.lang.String str91 = document89.baseUri(); org.jsoup.nodes.Document document92 = cleaner69.clean(document89); org.jsoup.nodes.Attribute attribute95 = new org.jsoup.nodes.Attribute(":lt(32)", ""); java.lang.String str96 = attribute95.getKey(); attribute95.setKey(":contains(<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>"); boolean boolean99 = whitelist64.isSafeAttribute("#data", (org.jsoup.nodes.Element) document92, attribute95); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + ":lt(32)" + "'", str39, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(nodeList80); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str90, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(document92); org.junit.Assert.assertEquals("'" + str96 + "' != '" + ":lt(32)" + "'", str96, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("\n<!--hi!-->[:lt(32)]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)", whitelist8); org.jsoup.safety.Whitelist whitelist13 = whitelist8.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray20 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist21 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist4.addProtocols(":matchesOwn(null", "hi!", strArray20); boolean boolean24 = whitelist4.isSafeTag(":eq(0)"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)" + "'", str9, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist11 = whitelist7.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>  \n </body>\n</html>", "#comment"); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str16 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist15); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str27 = org.jsoup.Jsoup.clean(":lt(32)", whitelist26); org.jsoup.safety.Whitelist whitelist31 = whitelist26.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray38 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist39 = whitelist26.addTags(strArray38); org.jsoup.safety.Whitelist whitelist40 = whitelist22.addProtocols(":matchesOwn(null", "hi!", strArray38); org.jsoup.safety.Whitelist whitelist41 = whitelist15.addAttributes("[^hi!]", strArray38); org.jsoup.safety.Whitelist whitelist45 = whitelist15.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist48 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist50 = whitelist48.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str57 = org.jsoup.Jsoup.clean(":lt(32)", whitelist56); org.jsoup.safety.Whitelist whitelist61 = whitelist56.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray68 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist69 = whitelist56.addTags(strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist52.addProtocols(":matchesOwn(null", "hi!", strArray68); java.lang.String[] strArray79 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean80 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist70.addProtocols("\n<!--hi!-->", "#document", strArray79); org.jsoup.safety.Whitelist whitelist82 = whitelist15.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray79); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray79, "<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray79); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist86 = whitelist7.addAttributes("", strArray79); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[hi!$=  ]" + "'", str16, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + ":lt(32)" + "'", str27, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + ":lt(32)" + "'", str57, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str7 = org.jsoup.Jsoup.clean(":lt(32)", whitelist6); org.jsoup.safety.Whitelist whitelist11 = whitelist6.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray18 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist19 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addAttributes(":gt(100)", strArray18); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str27 = org.jsoup.Jsoup.clean(":lt(32)", whitelist26); boolean boolean29 = whitelist26.isSafeTag(""); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element36 = document33.empty(); org.jsoup.nodes.Element element38 = document33.removeClass("hi!"); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.prettyPrint(false); org.jsoup.nodes.Document document52 = document33.outputSettings(outputSettings51); java.lang.String str53 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist26, outputSettings51); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist59 = whitelist57.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist63 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str64 = org.jsoup.Jsoup.clean(":lt(32)", whitelist63); org.jsoup.safety.Whitelist whitelist68 = whitelist63.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray75 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist76 = whitelist63.addTags(strArray75); org.jsoup.safety.Whitelist whitelist77 = whitelist59.addProtocols(":matchesOwn(null", "hi!", strArray75); org.jsoup.safety.Whitelist whitelist78 = whitelist26.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray75); org.jsoup.safety.Whitelist whitelist79 = whitelist20.addProtocols("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", "[hi!$=<html> <head></head> <body></body> </html>]", strArray75); org.jsoup.safety.Cleaner cleaner80 = new org.jsoup.safety.Cleaner(whitelist20); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ":lt(32)" + "'", str7, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + ":lt(32)" + "'", str27, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[:lt(32)]" + "'", str53, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + ":lt(32)" + "'", str64, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(strArray75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist79); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str7 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist6); boolean boolean9 = whitelist6.isSafeTag(""); org.jsoup.safety.Whitelist whitelist11 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist13.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = whitelist13.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!", whitelist13); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str35 = org.jsoup.Jsoup.clean(":lt(32)", whitelist34); org.jsoup.safety.Whitelist whitelist39 = whitelist34.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray46 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist47 = whitelist34.addTags(strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist30.addProtocols(":matchesOwn(null", "hi!", strArray46); java.lang.String[] strArray57 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean58 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist48.addProtocols("\n<!--hi!-->", "#document", strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.safety.Whitelist whitelist62 = whitelist13.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray57); org.jsoup.safety.Whitelist whitelist63 = whitelist6.addTags(strArray57); org.jsoup.safety.Whitelist whitelist64 = whitelist2.addAttributes("[  ^=hi!]", strArray57); boolean boolean65 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body>\n </body>\n</html>]", strArray57); boolean boolean66 = org.jsoup.helper.StringUtil.in("<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">", strArray57); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[hi!$=  ]" + "'", str7, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + ":lt(32)" + "'", str35, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist23 = whitelist19.preserveRelativeLinks(false); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str15 = org.jsoup.Jsoup.clean(":lt(32)", whitelist14); boolean boolean17 = whitelist14.isSafeTag(""); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = document21.removeClass("hi!"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Element element36 = document30.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document30.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.prettyPrint(false); org.jsoup.nodes.Document document40 = document21.outputSettings(outputSettings39); java.lang.String str41 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist14, outputSettings39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str45 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist44); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str56 = org.jsoup.Jsoup.clean(":lt(32)", whitelist55); org.jsoup.safety.Whitelist whitelist60 = whitelist55.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray67 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist68 = whitelist55.addTags(strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist51.addProtocols(":matchesOwn(null", "hi!", strArray67); java.lang.String[] strArray78 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean79 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray78); org.jsoup.safety.Whitelist whitelist80 = whitelist69.addProtocols("\n<!--hi!-->", "#document", strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78); org.jsoup.safety.Whitelist whitelist83 = whitelist44.addAttributes("*", strArray78); org.jsoup.safety.Whitelist whitelist84 = whitelist14.addTags(strArray78); boolean boolean85 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray78); org.jsoup.safety.Whitelist whitelist86 = whitelist4.addAttributes(":matchesOwn(null", strArray78); org.jsoup.nodes.Attributes attributes88 = whitelist4.getEnforcedAttributes("<html>\n <head></head>\n <body>\n </body>\n</html>"); org.jsoup.nodes.Attributes attributes90 = whitelist4.getEnforcedAttributes(":eq(1)"); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ":lt(32)" + "'", str15, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[:lt(32)]" + "'", str41, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[hi!$=  ]" + "'", str45, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + ":lt(32)" + "'", str56, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(strArray78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(attributes88); org.junit.Assert.assertNotNull(attributes90); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str12 = org.jsoup.Jsoup.clean(":lt(32)", whitelist11); org.jsoup.safety.Whitelist whitelist16 = whitelist11.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray23 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist24 = whitelist11.addTags(strArray23); org.jsoup.safety.Whitelist whitelist25 = whitelist7.addProtocols(":matchesOwn(null", "hi!", strArray23); java.lang.String[] strArray34 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean35 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist25.addProtocols("\n<!--hi!-->", "#document", strArray34); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray34); boolean boolean38 = org.jsoup.helper.StringUtil.in("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", strArray34); org.jsoup.safety.Whitelist whitelist39 = whitelist1.addTags(strArray34); boolean boolean40 = org.jsoup.helper.StringUtil.in("", strArray34); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ":lt(32)" + "'", str12, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.util.Spliterator<java.lang.Object> objSpliterator24 = objList0.spliterator(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); java.lang.String str32 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList30, "#document"); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList30); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining40 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); boolean boolean54 = attributeWithValueContaining40.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Document document55 = cleaner37.clean(document46); boolean boolean56 = objList0.contains((java.lang.Object) document46); java.lang.Object obj57 = objList0.peekLast(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(objSpliterator24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\nhi!" + "'", str32, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(obj57); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); java.util.regex.Pattern pattern38 = null; org.jsoup.select.Elements elements39 = document25.getElementsByAttributeValueMatching("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", pattern38); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertNotNull(elements39); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)", whitelist8); org.jsoup.safety.Whitelist whitelist13 = whitelist8.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray20 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist21 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist4.addAttributes(":gt(100)", strArray20); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element30 = document26.tagName("hi!"); org.jsoup.nodes.Element element32 = document26.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings33 = document26.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings33.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings33.indentAmount(0); int int40 = outputSettings33.indentAmount(); java.lang.String str41 = org.jsoup.Jsoup.clean(" :lt(32)=\"\"=\".\"", "\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->", whitelist4, outputSettings33); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)" + "'", str9, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertEquals("'" + str41 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str41, ":lt(32)=&quot;&quot;=&quot;.&quot;"); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("#document=\"\"", "<!---->", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str29 = document28.toString(); java.lang.String str30 = document28.baseUri(); org.jsoup.nodes.Document.QuirksMode quirksMode31 = document28.quirksMode(); boolean boolean33 = document28.hasClass(":lt(32)=\"[.]\""); boolean boolean34 = cleaner3.isValid(document28); java.util.regex.Pattern pattern35 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements36 = document28.getElementsMatchingOwnText(pattern35); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str29, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertTrue("'" + quirksMode31 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode31.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); java.lang.String str5 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist4); boolean boolean7 = whitelist4.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); boolean boolean19 = org.jsoup.helper.StringUtil.in(" hi!", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist4.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str32 = org.jsoup.Jsoup.clean(":lt(32)", whitelist31); org.jsoup.safety.Whitelist whitelist36 = whitelist31.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray43 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist44 = whitelist31.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addProtocols(":matchesOwn(null", "hi!", strArray43); java.lang.String[] strArray54 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean55 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist45.addProtocols("\n<!--hi!-->", "#document", strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54, "hi!"); org.jsoup.safety.Whitelist whitelist59 = whitelist20.addProtocols(":lt(32)", "[<html>\n <head></head>\n <body>\n </body>\n</html>]", strArray54); java.lang.String str60 = org.jsoup.Jsoup.clean("[[:gt(100)]$=:gt(100)]", whitelist59); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "." + "'", str5, "."); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":lt(32)" + "'", str32, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[[:gt(100)]$=:gt(100)]" + "'", str60, "[[:gt(100)]$=:gt(100)]"); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("", "#[:lt(32)*=.\n \n \n]", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basic(); java.lang.String str5 = org.jsoup.Jsoup.clean("\nhi!", ".<html>\n <head></head>\n <body></body>\n</html>", whitelist4); boolean boolean6 = org.jsoup.Jsoup.isValid("[:lt(32)]", whitelist4); java.lang.String str7 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[  *=:lt(32)]" + "'", str7, "[  *=:lt(32)]"); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist3); boolean boolean6 = whitelist3.isSafeTag("#document"); java.lang.String str7 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]", whitelist3); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[  =hi!]" + "'", str7, "[  =hi!]"); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.select.Evaluator.Class class11 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); org.jsoup.select.Elements elements24 = document15.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element26 = document15.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes27 = document15.attributes(); org.jsoup.nodes.Element element29 = document15.prepend("[^hi!]"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); org.jsoup.nodes.Element element42 = document33.attr("#document", "#document"); org.jsoup.nodes.Element element43 = document33.body(); boolean boolean44 = class11.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Attribute attribute47 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean48 = whitelist4.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document15, attribute47); attribute47.setKey("[:gt(100)]"); java.lang.String str51 = attribute47.html(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNull(element26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[:gt(100)]=\"\"" + "'", str51, "[:gt(100)]=\"\""); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str10 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist9); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str21 = org.jsoup.Jsoup.clean(":lt(32)", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray32 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist33 = whitelist20.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist16.addProtocols(":matchesOwn(null", "hi!", strArray32); java.lang.String[] strArray43 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean44 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist34.addProtocols("\n<!--hi!-->", "#document", strArray43); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray43); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray43); org.jsoup.safety.Whitelist whitelist48 = whitelist9.addAttributes("*", strArray43); org.jsoup.safety.Whitelist whitelist49 = whitelist3.addTags(strArray43); java.lang.String str50 = org.jsoup.Jsoup.clean("[:gt(100)]", whitelist49); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!$=  ]" + "'", str10, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + ":lt(32)" + "'", str21, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[:gt(100)]" + "'", str50, "[:gt(100)]"); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str14 = org.jsoup.Jsoup.clean(":lt(32)", whitelist13); org.jsoup.safety.Whitelist whitelist18 = whitelist13.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray25 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist26 = whitelist13.addTags(strArray25); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addProtocols(":matchesOwn(null", "hi!", strArray25); org.jsoup.safety.Whitelist whitelist28 = whitelist2.addAttributes("[^hi!]", strArray25); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + ":lt(32)" + "'", str14, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str9 = org.jsoup.Jsoup.clean("\nhi!", whitelist8); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str16 = org.jsoup.Jsoup.clean(":lt(32)", whitelist15); boolean boolean18 = whitelist15.isSafeTag(""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document22, "hi!"); org.jsoup.nodes.Element element25 = document22.empty(); org.jsoup.nodes.Element element27 = document22.removeClass("hi!"); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList33 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document31, "hi!"); org.jsoup.nodes.Element element35 = document31.tagName("hi!"); org.jsoup.nodes.Element element37 = document31.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); org.jsoup.nodes.Document document41 = document22.outputSettings(outputSettings40); java.lang.String str42 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist15, outputSettings40); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist46 = whitelist44.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist48 = whitelist46.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str53 = org.jsoup.Jsoup.clean(":lt(32)", whitelist52); org.jsoup.safety.Whitelist whitelist57 = whitelist52.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray64 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist65 = whitelist52.addTags(strArray64); org.jsoup.safety.Whitelist whitelist66 = whitelist48.addProtocols(":matchesOwn(null", "hi!", strArray64); org.jsoup.safety.Whitelist whitelist67 = whitelist15.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray64); org.jsoup.safety.Whitelist whitelist68 = whitelist8.addProtocols("#doctype", "[]", strArray64); boolean boolean69 = org.jsoup.Jsoup.isValid("", whitelist68); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + ":lt(32)" + "'", str16, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(nodeList24); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(nodeList33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[:lt(32)]" + "'", str42, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + ":lt(32)" + "'", str53, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.nodes.Element element77 = document8.text(":lt(32)=\"\"=\".\""); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(element77); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist10 = whitelist2.preserveRelativeLinks(false); java.lang.String str11 = org.jsoup.Jsoup.clean("#root", "[[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]$=[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]]", whitelist10); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#root" + "'", str11, "#root"); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = whitelist1.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str12 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist11); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[  *=:lt(32)]" + "'", str12, "[  *=:lt(32)]"); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("#text"); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str12 = org.jsoup.Jsoup.clean(":lt(32)", whitelist11); org.jsoup.safety.Whitelist whitelist16 = whitelist11.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray23 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist24 = whitelist11.addTags(strArray23); org.jsoup.safety.Whitelist whitelist25 = whitelist7.addAttributes(":gt(100)", strArray23); org.jsoup.safety.Whitelist whitelist26 = whitelist1.addTags(strArray23); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str4, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ":lt(32)" + "'", str12, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); java.lang.String str5 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist4); boolean boolean7 = whitelist4.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); boolean boolean19 = org.jsoup.helper.StringUtil.in(" hi!", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist4.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str32 = org.jsoup.Jsoup.clean(":lt(32)", whitelist31); org.jsoup.safety.Whitelist whitelist36 = whitelist31.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray43 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist44 = whitelist31.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addProtocols(":matchesOwn(null", "hi!", strArray43); java.lang.String[] strArray54 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean55 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist45.addProtocols("\n<!--hi!-->", "#document", strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54, "hi!"); org.jsoup.safety.Whitelist whitelist59 = whitelist20.addProtocols(":lt(32)", "[<html>\n <head></head>\n <body>\n </body>\n</html>]", strArray54); java.lang.String str60 = org.jsoup.Jsoup.clean("\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->", whitelist59); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "." + "'", str5, "."); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":lt(32)" + "'", str32, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.safety.Whitelist whitelist27 = whitelist19.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.safety.Whitelist whitelist8 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist16 = whitelist10.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist20 = whitelist10.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str21 = org.jsoup.Jsoup.clean("hi!", whitelist10); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str32 = org.jsoup.Jsoup.clean(":lt(32)", whitelist31); org.jsoup.safety.Whitelist whitelist36 = whitelist31.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray43 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist44 = whitelist31.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addProtocols(":matchesOwn(null", "hi!", strArray43); java.lang.String[] strArray54 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean55 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist45.addProtocols("\n<!--hi!-->", "#document", strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.safety.Whitelist whitelist59 = whitelist10.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray54); org.jsoup.safety.Whitelist whitelist60 = whitelist3.addTags(strArray54); java.lang.String str61 = org.jsoup.Jsoup.clean("#root", whitelist60); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":lt(32)" + "'", str32, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "#root" + "'", str61, "#root"); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes9 = whitelist7.getEnforcedAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); attributes9.remove(" text=\"[:gt(100)]\" #document=\"#document\""); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(attributes9); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str15 = org.jsoup.Jsoup.clean(":lt(32)", whitelist14); org.jsoup.safety.Whitelist whitelist19 = whitelist14.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray26 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist27 = whitelist14.addTags(strArray26); org.jsoup.safety.Whitelist whitelist28 = whitelist10.addProtocols(":matchesOwn(null", "hi!", strArray26); org.jsoup.safety.Whitelist whitelist29 = whitelist3.addAttributes("[^hi!]", strArray26); org.jsoup.safety.Whitelist whitelist33 = whitelist3.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str45 = org.jsoup.Jsoup.clean(":lt(32)", whitelist44); org.jsoup.safety.Whitelist whitelist49 = whitelist44.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray56 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist57 = whitelist44.addTags(strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist40.addProtocols(":matchesOwn(null", "hi!", strArray56); java.lang.String[] strArray67 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean68 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist58.addProtocols("\n<!--hi!-->", "#document", strArray67); org.jsoup.safety.Whitelist whitelist70 = whitelist3.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray67); boolean boolean71 = org.jsoup.helper.StringUtil.in("[^ <!--[hi!$=<html> <head></head> <body></body> </html>]-->]", strArray67); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ":lt(32)" + "'", str15, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + ":lt(32)" + "'", str45, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("[^ ]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining9 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document11 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); boolean boolean23 = attributeWithValueContaining9.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15); org.jsoup.nodes.Document document24 = cleaner6.clean(document15); org.jsoup.nodes.Element element26 = document24.html("#comment"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Element element36 = document30.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList37 = document30.dataNodes(); org.jsoup.nodes.Node node38 = document30.previousSibling(); java.lang.String str39 = document30.nodeName(); java.lang.String str40 = document30.text(); // The following exception was thrown during execution in test generation try { boolean boolean41 = matchesOwn1.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document30); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(dataNodeList37); org.junit.Assert.assertNull(node38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#document" + "'", str39, "#document"); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[:lt(32)]" + "'", str40, "[:lt(32)]"); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", ":lt(32)"); boolean boolean26 = objList0.offerFirst((java.lang.Object) ""); java.lang.Object obj27 = objList0.pop(); org.jsoup.nodes.DocumentType documentType32 = new org.jsoup.nodes.DocumentType("<hi!>\n [^hi!]\n</hi!>", ":gt(100)", "[<html>\n <head></head>\n <body>\n </body>\n</html>]", "\n<!--hi!-->"); objList0.addFirst((java.lang.Object) "<hi!>\n [^hi!]\n</hi!>"); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist42 = whitelist36.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist46 = whitelist36.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str47 = org.jsoup.Jsoup.clean("hi!", whitelist36); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist53 = whitelist51.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str58 = org.jsoup.Jsoup.clean(":lt(32)", whitelist57); org.jsoup.safety.Whitelist whitelist62 = whitelist57.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray69 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist70 = whitelist57.addTags(strArray69); org.jsoup.safety.Whitelist whitelist71 = whitelist53.addProtocols(":matchesOwn(null", "hi!", strArray69); java.lang.String[] strArray80 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean81 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray80); org.jsoup.safety.Whitelist whitelist82 = whitelist71.addProtocols("\n<!--hi!-->", "#document", strArray80); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray80); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray80); org.jsoup.safety.Whitelist whitelist85 = whitelist36.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray80); java.lang.Object obj86 = objList0.set(0, (java.lang.Object) "[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "" + "'", obj27, ""); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!"); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + ":lt(32)" + "'", str58, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(strArray80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "<hi!>\n [^hi!]\n</hi!>" + "'", obj86, "<hi!>\n [^hi!]\n</hi!>"); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("[^hi!]"); java.lang.String str2 = tag1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); java.lang.String str13 = element12.toString(); boolean boolean15 = element12.hasAttr(""); element12.setBaseUri("[hi!$=  ]"); org.jsoup.nodes.Element element19 = element12.html(":lt(1)"); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining26 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document28 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); boolean boolean40 = attributeWithValueContaining26.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document32); org.jsoup.nodes.Document document41 = cleaner23.clean(document32); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str44 = document43.toString(); java.lang.String str45 = document43.baseUri(); org.jsoup.nodes.Document document46 = cleaner23.clean(document43); org.jsoup.nodes.Document.QuirksMode quirksMode47 = document46.quirksMode(); boolean boolean48 = tag1.matches(element19, (org.jsoup.nodes.Element) document46); java.lang.String str49 = tag1.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^hi!]" + "'", str2, "[^hi!]"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertTrue("'" + quirksMode47 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode47.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[^hi!]" + "'", str49, "[^hi!]"); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); java.lang.String[] strArray15 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean16 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist6.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray15); boolean boolean18 = org.jsoup.Jsoup.isValid("", whitelist17); java.lang.String str19 = org.jsoup.Jsoup.clean("<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>", whitelist17); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); org.jsoup.safety.Whitelist whitelist6 = whitelist1.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist6); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist6); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.safety.Whitelist whitelist7 = whitelist4.preserveRelativeLinks(false); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str3 = org.jsoup.Jsoup.clean(":lt(32)", whitelist2); org.jsoup.safety.Whitelist whitelist7 = whitelist2.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes9 = whitelist7.getEnforcedAttributes("#text"); boolean boolean10 = org.jsoup.Jsoup.isValid(".", whitelist7); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(32)" + "'", str3, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); java.lang.String[] strArray13 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean14 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist4.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist23 = whitelist17.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = org.jsoup.Jsoup.clean("\nhi!", whitelist23); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); boolean boolean33 = whitelist30.isSafeTag(""); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element40 = document37.empty(); org.jsoup.nodes.Element element42 = document37.removeClass("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); org.jsoup.nodes.Document document56 = document37.outputSettings(outputSettings55); java.lang.String str57 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist30, outputSettings55); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str68 = org.jsoup.Jsoup.clean(":lt(32)", whitelist67); org.jsoup.safety.Whitelist whitelist72 = whitelist67.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray79 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist80 = whitelist67.addTags(strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist63.addProtocols(":matchesOwn(null", "hi!", strArray79); org.jsoup.safety.Whitelist whitelist82 = whitelist30.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray79); org.jsoup.safety.Whitelist whitelist83 = whitelist23.addProtocols("#doctype", "[]", strArray79); org.jsoup.safety.Whitelist whitelist84 = whitelist4.addTags(strArray79); org.jsoup.nodes.Attributes attributes86 = whitelist84.getEnforcedAttributes(":gt(100)"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[:lt(32)]" + "'", str57, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + ":lt(32)" + "'", str68, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(attributes86); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str11 = org.jsoup.Jsoup.clean(":lt(32)", whitelist10); org.jsoup.safety.Whitelist whitelist15 = whitelist10.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray22 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist23 = whitelist10.addTags(strArray22); org.jsoup.safety.Whitelist whitelist24 = whitelist6.addProtocols(":matchesOwn(null", "hi!", strArray22); java.lang.String[] strArray33 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean34 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray33); org.jsoup.safety.Whitelist whitelist35 = whitelist24.addProtocols("\n<!--hi!-->", "#document", strArray33); java.lang.String str36 = org.jsoup.Jsoup.clean(".hi!", "html", whitelist35); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + ":lt(32)" + "'", str11, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + ".hi!" + "'", str36, ".hi!"); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.lang.Object obj24 = objList0.peek(); objList0.clear(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList26 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.text(""); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document38, "hi!"); org.jsoup.nodes.Element element42 = document38.tagName("hi!"); org.jsoup.nodes.Element element44 = document38.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings45 = document38.outputSettings(); org.jsoup.nodes.Document document46 = document30.outputSettings(outputSettings45); org.jsoup.nodes.Document document47 = document30.normalise(); objList26.addLast((java.lang.Object) document47); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("", ":lt(32)"); boolean boolean52 = objList26.offerFirst((java.lang.Object) ""); boolean boolean53 = objList0.offerLast((java.lang.Object) boolean52); java.lang.Object obj54 = null; int int55 = objList0.indexOf(obj54); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList61 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document59, "hi!"); org.jsoup.nodes.Element element63 = document59.tagName("hi!"); org.jsoup.nodes.Element element65 = document59.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings66 = document59.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode70 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.escapeMode(escapeMode70); org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode(); boolean boolean73 = objList0.contains((java.lang.Object) outputSettings71); java.util.Iterator<java.lang.Object> objItor74 = objList0.descendingIterator(); java.lang.Object[] objArray75 = objList0.toArray(); org.jsoup.safety.Whitelist whitelist77 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str78 = org.jsoup.Jsoup.clean(":lt(32)", whitelist77); org.jsoup.safety.Whitelist whitelist82 = whitelist77.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray89 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist90 = whitelist77.addTags(strArray89); org.jsoup.safety.Cleaner cleaner91 = new org.jsoup.safety.Cleaner(whitelist77); boolean boolean92 = objList0.offerLast((java.lang.Object) cleaner91); org.jsoup.helper.Validate.notNull((java.lang.Object) cleaner91); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(obj24); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(nodeList40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1)); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(nodeList61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertNotNull(outputSettings67); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(objItor74); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[true]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[true]"); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + ":lt(32)" + "'", str78, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = element11.toString(); boolean boolean14 = element11.hasAttr(""); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Element element26 = element24.removeClass("hi!"); org.jsoup.select.Elements elements29 = element24.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element31 = element24.prependElement("hi!"); boolean boolean32 = element31.hasText(); element31.remove(); boolean boolean34 = id1.matches(element11, element31); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining41 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); boolean boolean55 = attributeWithValueContaining41.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document56 = cleaner38.clean(document47); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str59 = document58.toString(); java.lang.String str60 = document58.baseUri(); org.jsoup.nodes.Document document61 = cleaner38.clean(document58); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element69 = document66.empty(); org.jsoup.nodes.Element element71 = document66.removeClass("hi!"); org.jsoup.nodes.Element element73 = element71.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList74 = element73.siblingNodes(); org.jsoup.nodes.Element element76 = element73.addClass(":gt(100)"); org.jsoup.nodes.Node node77 = element73.parent(); java.lang.String str79 = element73.absUrl("[^hi!]"); org.jsoup.select.Elements elements81 = element73.getElementsByIndexGreaterThan((int) 'a'); boolean boolean82 = id1.matches((org.jsoup.nodes.Element) document62, element73); java.lang.Class<?> wildcardClass83 = id1.getClass(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNull(node77); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(wildcardClass83); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); objList0.push((java.lang.Object) "\nhi!"); java.lang.Object obj3 = null; int int4 = objList0.indexOf(obj3); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList5 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean7 = objList5.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj8 = objList5.peekFirst(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList9 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); java.lang.Object obj10 = objList9.poll(); java.util.ListIterator<java.lang.Object> objItor11 = objList9.listIterator(); objList5.addFirst((java.lang.Object) objItor11); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element16 = document15.body(); org.jsoup.nodes.Element element18 = element16.append("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); int int19 = objList5.lastIndexOf((java.lang.Object) "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document23, "hi!"); java.util.stream.Stream<org.jsoup.nodes.Node> nodeStream26 = nodeList25.stream(); boolean boolean27 = objList5.addAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList25); objList0.addLast((java.lang.Object) objList5); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str32 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist31); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str43 = org.jsoup.Jsoup.clean(":lt(32)", whitelist42); org.jsoup.safety.Whitelist whitelist47 = whitelist42.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray54 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist55 = whitelist42.addTags(strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist38.addProtocols(":matchesOwn(null", "hi!", strArray54); org.jsoup.safety.Whitelist whitelist57 = whitelist31.addAttributes("[^hi!]", strArray54); boolean boolean58 = objList5.equals((java.lang.Object) strArray54); // The following exception was thrown during execution in test generation try { java.lang.Object obj60 = objList5.remove((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(obj8); org.junit.Assert.assertNull(obj10); org.junit.Assert.assertNotNull(objItor11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertNotNull(nodeStream26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!$=  ]" + "'", str32, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + ":lt(32)" + "'", str43, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList3 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element11 = document7.text(""); int int12 = objList3.lastIndexOf((java.lang.Object) document7); objList0.addFirst((java.lang.Object) document7); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element20 = document17.empty(); org.jsoup.nodes.Element element22 = document17.removeClass("hi!"); boolean boolean23 = objList0.equals((java.lang.Object) "hi!"); java.util.Iterator<java.lang.Object> objItor24 = objList0.iterator(); objList0.clear(); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist33 = whitelist27.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str34 = org.jsoup.Jsoup.clean("\nhi!", whitelist33); objList0.addLast((java.lang.Object) "\nhi!"); java.lang.Object obj37 = objList0.get(0); // The following exception was thrown during execution in test generation try { java.lang.Object obj39 = objList0.get(1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(objItor24); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "\nhi!" + "'", obj37, "\nhi!"); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist9 = whitelist3.addEnforcedAttribute(":eq(1)", "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); java.lang.String str10 = org.jsoup.Jsoup.clean(":matches(null", whitelist3); java.lang.String str11 = org.jsoup.Jsoup.clean(".<html> <head></head> <body></body> </html>", "#:lt(32)=\"\"", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + ":matches(null" + "'", str10, ":matches(null"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "." + "'", str11, "."); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = element11.toString(); boolean boolean14 = element11.hasAttr(""); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Element element26 = element24.removeClass("hi!"); org.jsoup.select.Elements elements29 = element24.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element31 = element24.prependElement("hi!"); boolean boolean32 = element31.hasText(); element31.remove(); boolean boolean34 = id1.matches(element11, element31); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining41 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); boolean boolean55 = attributeWithValueContaining41.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document56 = cleaner38.clean(document47); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str59 = document58.toString(); java.lang.String str60 = document58.baseUri(); org.jsoup.nodes.Document document61 = cleaner38.clean(document58); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element69 = document66.empty(); org.jsoup.nodes.Element element71 = document66.removeClass("hi!"); org.jsoup.nodes.Element element73 = element71.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList74 = element73.siblingNodes(); org.jsoup.nodes.Element element76 = element73.addClass(":gt(100)"); org.jsoup.nodes.Node node77 = element73.parent(); java.lang.String str79 = element73.absUrl("[^hi!]"); org.jsoup.select.Elements elements81 = element73.getElementsByIndexGreaterThan((int) 'a'); boolean boolean82 = id1.matches((org.jsoup.nodes.Element) document62, element73); org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document86 = parser83.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document89 = parser83.parseInput("hi!", "#comment"); org.jsoup.nodes.Document document91 = org.jsoup.nodes.Document.createShell("hi!"); java.util.regex.Pattern pattern92 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn93 = new org.jsoup.select.Evaluator.MatchesOwn(pattern92); boolean boolean94 = document91.equals((java.lang.Object) pattern92); org.jsoup.nodes.Element element97 = document91.attr("[.]", ".<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean98 = id1.matches((org.jsoup.nodes.Element) document89, element97); java.lang.String str99 = element97.tagName(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNull(node77); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(parser83); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(element97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertEquals("'" + str99 + "' != '" + "#root" + "'", str99, "#root"); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.select.Elements elements13 = element11.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements15 = element11.getElementsByClass("[:lt(32)]"); boolean boolean16 = tag1.equals((java.lang.Object) elements15); boolean boolean17 = tag1.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str22 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist21); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str33 = org.jsoup.Jsoup.clean(":lt(32)", whitelist32); org.jsoup.safety.Whitelist whitelist37 = whitelist32.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray44 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist45 = whitelist32.addTags(strArray44); org.jsoup.safety.Whitelist whitelist46 = whitelist28.addProtocols(":matchesOwn(null", "hi!", strArray44); org.jsoup.safety.Whitelist whitelist47 = whitelist21.addAttributes("[^hi!]", strArray44); org.jsoup.safety.Whitelist whitelist51 = whitelist21.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes53 = whitelist21.getEnforcedAttributes(""); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag1, " hi!", attributes53); org.jsoup.nodes.Attributes attributes55 = attributes53.clone(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor56 = attributes55.iterator(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!$=  ]" + "'", str22, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ":lt(32)" + "'", str33, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertNotNull(attributeItor56); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Elements elements24 = document21.getElementsByAttributeValueStarting(".hi!", "[^:containsOwn([:lt(32)*=. ]]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(elements24); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.util.Spliterator<java.lang.Object> objSpliterator24 = objList0.spliterator(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); java.lang.String str32 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList30, "#document"); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList30); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining40 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); boolean boolean54 = attributeWithValueContaining40.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Document document55 = cleaner37.clean(document46); boolean boolean56 = objList0.contains((java.lang.Object) document46); java.lang.Object obj57 = objList0.element(); org.jsoup.nodes.Document document61 = org.jsoup.parser.Parser.parseBodyFragment("hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Element element63 = document61.text(""); java.util.List<org.jsoup.nodes.Node> nodeList65 = org.jsoup.parser.Parser.parseFragment("", element63, "[^[^hi!]]"); java.util.stream.Stream<org.jsoup.nodes.Node> nodeStream66 = nodeList65.parallelStream(); boolean boolean67 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList65); java.util.function.UnaryOperator<org.jsoup.nodes.Node> nodeUnaryOperator68 = null; // The following exception was thrown during execution in test generation try { nodeList65.replaceAll(nodeUnaryOperator68); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(objSpliterator24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\nhi!" + "'", str32, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(obj57); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(nodeList65); org.junit.Assert.assertNotNull(nodeStream66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("#text"); boolean boolean6 = org.jsoup.Jsoup.isValid("[^[^hi!]]", whitelist3); java.lang.String str7 = org.jsoup.Jsoup.clean("[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]", ".body", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[#data=[  =hi!]]" + "'", str7, "[#data=[  =hi!]]"); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); java.lang.String str36 = document25.title(); org.jsoup.nodes.Element element38 = document25.removeClass(":eq(1)"); org.jsoup.nodes.Element element39 = document25.clone(); org.jsoup.nodes.Element element41 = document25.prependText("<html>\n <head></head>\n <body></body>\n</html>:containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]<html>\n <head></head>\n <body></body>\n</html>"); document25.title("[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings13 = document6.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings13.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount(10); // The following exception was thrown during execution in test generation try { java.lang.String str19 = org.jsoup.Jsoup.clean("#document=\"\"", "", whitelist2, outputSettings16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(outputSettings14); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(outputSettings18); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); org.jsoup.safety.Whitelist whitelist8 = whitelist3.addEnforcedAttribute("<html> <head></head> <body> . &lt;!----&gt; </body> </html>[&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;^=&lt;hi!&gt;&lt;/hi!&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;]", "<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertNotNull(whitelist8); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining11 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document13 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element21 = document17.tagName("hi!"); org.jsoup.nodes.Element element23 = document17.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); boolean boolean25 = attributeWithValueContaining11.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document17); org.jsoup.nodes.Document document26 = cleaner8.clean(document17); org.jsoup.select.Evaluator.IndexLessThan indexLessThan28 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str32 = document31.ownText(); org.jsoup.nodes.Node node35 = document31.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document39, "hi!"); org.jsoup.nodes.Element element43 = document39.tagName("hi!"); org.jsoup.nodes.Element element45 = document39.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings46 = document39.outputSettings(); org.jsoup.select.Elements elements48 = document39.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element50 = document39.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element52 = document39.createElement(" hi!"); org.jsoup.select.Elements elements54 = document39.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean55 = indexLessThan28.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document39); org.jsoup.nodes.Document document56 = cleaner8.clean(document39); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList62 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document60, "hi!"); org.jsoup.nodes.Element element63 = document60.empty(); org.jsoup.nodes.Element element65 = document60.removeClass("hi!"); org.jsoup.select.Elements elements68 = document60.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.nodes.Element element69 = document60.empty(); org.jsoup.nodes.Document document70 = document60.clone(); org.jsoup.nodes.Document document71 = cleaner8.clean(document70); org.jsoup.select.Elements elements73 = document71.getElementsByAttribute("[[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]$=#text]"); boolean boolean74 = tag1.equals((java.lang.Object) document71); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(node35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(elements54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(nodeList62); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(elements68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(elements73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element13 = document10.empty(); org.jsoup.nodes.Element element15 = document10.removeClass("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.prettyPrint(false); org.jsoup.nodes.Document document29 = document10.outputSettings(outputSettings28); java.lang.String str30 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist3, outputSettings28); java.nio.charset.Charset charset31 = outputSettings28.charset(); boolean boolean32 = outputSettings28.prettyPrint(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings28.charset("<html>\n <head></head>\n <body></body>\n</html><hi!>\n [^hi!]\n</hi!><html>\n <head></head>\n <body></body>\n</html><hi!>\n [^hi!]\n</hi!><head></head><hi!>\n [^hi!]\n</hi!><body></body>"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: <html>? <head></head>? <body></body>?</html><hi!>? [^hi!]?</hi!><html>? <head></head>? <body></body>?</html><hi!>? [^hi!]?</hi!><head></head><hi!>? [^hi!]?</hi!><body></body>"); } catch (java.nio.charset.IllegalCharsetNameException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)" + "'", str4, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[:lt(32)]" + "'", str30, "[:lt(32)]"); org.junit.Assert.assertNotNull(charset31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("[^hi!]"); java.lang.String str2 = tag1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); java.lang.String str13 = element12.toString(); boolean boolean15 = element12.hasAttr(""); element12.setBaseUri("[hi!$=  ]"); org.jsoup.nodes.Element element19 = element12.html(":lt(1)"); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining26 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document28 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); boolean boolean40 = attributeWithValueContaining26.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document32); org.jsoup.nodes.Document document41 = cleaner23.clean(document32); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str44 = document43.toString(); java.lang.String str45 = document43.baseUri(); org.jsoup.nodes.Document document46 = cleaner23.clean(document43); org.jsoup.nodes.Document.QuirksMode quirksMode47 = document46.quirksMode(); boolean boolean48 = tag1.matches(element19, (org.jsoup.nodes.Element) document46); org.jsoup.select.Elements elements51 = element19.getElementsByAttributeValueContaining("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body>\n .&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^hi!]" + "'", str2, "[^hi!]"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertTrue("'" + quirksMode47 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode47.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(elements51); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Node node35 = element34.parent(); org.jsoup.select.Elements elements37 = element34.getElementsMatchingText("[[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]$=[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]]"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document41, "hi!"); org.jsoup.nodes.Element element45 = document41.tagName("hi!"); org.jsoup.nodes.Element element47 = document41.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings48 = document41.outputSettings(); org.jsoup.select.Elements elements50 = document41.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element52 = document41.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes53 = document41.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap54 = attributes53.dataset(); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList60 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document58, "hi!"); org.jsoup.nodes.Element element62 = document58.tagName("hi!"); org.jsoup.nodes.Element element64 = document58.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings65 = document58.outputSettings(); org.jsoup.select.Elements elements67 = document58.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element69 = document58.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes70 = document58.attributes(); attributes53.addAll(attributes70); org.jsoup.nodes.Attribute attribute74 = new org.jsoup.nodes.Attribute(":lt(32)", ""); attributes70.put(attribute74); org.jsoup.nodes.Document document77 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element79 = document77.appendElement("#document"); org.jsoup.nodes.Element element80 = element79.lastElementSibling(); org.jsoup.nodes.Element element81 = element80.lastElementSibling(); boolean boolean82 = attribute74.equals((java.lang.Object) element81); attribute74.setKey("\n<!--[hi!$=  ]-->"); boolean boolean85 = whitelist25.isSafeAttribute("<html> <head></head> <body> </body> </html>", element34, attribute74); org.jsoup.nodes.Attributes attributes87 = whitelist25.getEnforcedAttributes("[  *=:lt(32)]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNull(node35); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNull(element52); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(strMap54); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(nodeList60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(outputSettings65); org.junit.Assert.assertNotNull(elements67); org.junit.Assert.assertNull(element69); org.junit.Assert.assertNotNull(attributes70); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(attributes87); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("#text"); java.lang.String str8 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist5); java.lang.String str9 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist5); boolean boolean10 = org.jsoup.Jsoup.isValid("[^  ]", whitelist5); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[  ^=hi!]" + "'", str9, "[  ^=hi!]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element6 = document3.empty(); org.jsoup.nodes.Element element8 = document3.removeClass("hi!"); java.lang.String str9 = document3.id(); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList15 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document13, "hi!"); org.jsoup.nodes.Element element16 = document13.empty(); org.jsoup.nodes.Element element18 = document13.removeClass("hi!"); java.lang.String str19 = document13.nodeName(); org.jsoup.nodes.Document.QuirksMode quirksMode20 = document13.quirksMode(); org.jsoup.nodes.Document document21 = document3.quirksMode(quirksMode20); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist24); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining28 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document30 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); boolean boolean42 = attributeWithValueContaining28.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document43 = cleaner25.clean(document34); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str46 = document45.toString(); java.lang.String str47 = document45.baseUri(); org.jsoup.nodes.Document document48 = cleaner25.clean(document45); org.jsoup.nodes.Document.QuirksMode quirksMode49 = document48.quirksMode(); org.jsoup.nodes.Document document50 = document3.quirksMode(quirksMode49); org.jsoup.nodes.Document document51 = document3.clone(); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(nodeList15); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#document" + "'", str19, "#document"); org.junit.Assert.assertTrue("'" + quirksMode20 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode20.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertTrue("'" + quirksMode49 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode49.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document51); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining8 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document10 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document14, "hi!"); org.jsoup.nodes.Element element18 = document14.tagName("hi!"); org.jsoup.nodes.Element element20 = document14.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings21 = document14.outputSettings(); boolean boolean22 = attributeWithValueContaining8.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document document23 = cleaner5.clean(document14); org.jsoup.nodes.Element element25 = document23.html("#comment"); org.jsoup.nodes.Document document26 = document23.normalise(); org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parseBodyFragment("hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Element element31 = document29.text(""); org.jsoup.nodes.Element element33 = document29.child((int) (short) 0); boolean boolean34 = tag1.matches((org.jsoup.nodes.Element) document26, element33); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.select.Elements elements78 = document8.getElementsByAttributeValueMatching("#*", "<html>\n <head></head>\n <body></body>\n</html>\n<[<!--[hi!$=<html> <head></head> <body></body> </html>]-->!=hi!]></[<!--[hi!$=<html> <head></head> <body></body> </html>]-->!=hi!]>"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(elements78); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = whitelist1.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str12 = org.jsoup.Jsoup.clean("hi!", whitelist1); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str23 = org.jsoup.Jsoup.clean(":lt(32)", whitelist22); org.jsoup.safety.Whitelist whitelist27 = whitelist22.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray34 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist35 = whitelist22.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist18.addProtocols(":matchesOwn(null", "hi!", strArray34); java.lang.String[] strArray45 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean46 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist36.addProtocols("\n<!--hi!-->", "#document", strArray45); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray45); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray45); org.jsoup.safety.Whitelist whitelist50 = whitelist1.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray45); org.jsoup.select.Evaluator.Class class53 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element68 = document57.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes69 = document57.attributes(); org.jsoup.nodes.Element element71 = document57.prepend("[^hi!]"); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList77 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document75, "hi!"); org.jsoup.nodes.Element element79 = document75.tagName("hi!"); org.jsoup.nodes.Element element81 = document75.append(""); org.jsoup.nodes.Element element84 = document75.attr("#document", "#document"); org.jsoup.nodes.Element element85 = document75.body(); boolean boolean86 = class53.matches((org.jsoup.nodes.Element) document57, (org.jsoup.nodes.Element) document75); org.jsoup.nodes.Node node87 = document75.clone(); org.jsoup.nodes.Element element89 = document75.text(".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attribute attribute92 = new org.jsoup.nodes.Attribute("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "<html>\n <head></head>\n <body>\n </body>\n</html>"); boolean boolean93 = whitelist1.isSafeAttribute("#document", (org.jsoup.nodes.Element) document75, attribute92); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + ":lt(32)" + "'", str23, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNull(element68); org.junit.Assert.assertNotNull(attributes69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(nodeList77); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertNotNull(node87); org.junit.Assert.assertNotNull(element89); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.select.Elements elements13 = element11.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements15 = element11.getElementsByClass("[:lt(32)]"); boolean boolean16 = tag1.equals((java.lang.Object) elements15); boolean boolean17 = tag1.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str22 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist21); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str33 = org.jsoup.Jsoup.clean(":lt(32)", whitelist32); org.jsoup.safety.Whitelist whitelist37 = whitelist32.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray44 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist45 = whitelist32.addTags(strArray44); org.jsoup.safety.Whitelist whitelist46 = whitelist28.addProtocols(":matchesOwn(null", "hi!", strArray44); org.jsoup.safety.Whitelist whitelist47 = whitelist21.addAttributes("[^hi!]", strArray44); org.jsoup.safety.Whitelist whitelist51 = whitelist21.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes53 = whitelist21.getEnforcedAttributes(""); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag1, " hi!", attributes53); org.jsoup.nodes.Attributes attributes55 = attributes53.clone(); java.lang.String str57 = attributes53.get(".\n<!---->"); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!$=  ]" + "'", str22, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ":lt(32)" + "'", str33, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); java.lang.String[] strArray14 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean15 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist5.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray14); boolean boolean18 = whitelist5.isSafeTag("#text"); java.lang.String str19 = org.jsoup.Jsoup.clean("[^<html> <head></head> <body> </body> </html>]", whitelist5); boolean boolean21 = whitelist5.isSafeTag("[<!---->!=:contains(:matchesown(null]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[^  ]" + "'", str19, "[^  ]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText5 = new org.jsoup.select.Evaluator.ContainsOwnText("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String str6 = containsOwnText5.toString(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList7 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean9 = objList7.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList10 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document14, "hi!"); org.jsoup.nodes.Element element18 = document14.text(""); int int19 = objList10.lastIndexOf((java.lang.Object) document14); objList7.addFirst((java.lang.Object) document14); java.util.Spliterator<java.lang.Object> objSpliterator21 = objList7.spliterator(); java.util.regex.Pattern pattern23 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching24 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); java.lang.String str35 = document28.toString(); org.jsoup.nodes.Element element37 = document28.prependElement("\nhi!"); org.jsoup.select.Elements elements39 = document28.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document43, "hi!"); org.jsoup.nodes.Element element47 = document43.tagName("hi!"); org.jsoup.nodes.Element element49 = document43.append(""); boolean boolean50 = attributeWithValueMatching24.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document43); org.jsoup.nodes.Document document51 = document43.normalise(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = document51.outputSettings(); boolean boolean53 = objList7.offerLast((java.lang.Object) document51); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element58 = document56.text(".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan60 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); boolean boolean61 = document56.equals((java.lang.Object) (-1)); boolean boolean62 = document56.isBlock(); boolean boolean63 = containsOwnText5.matches((org.jsoup.nodes.Element) document51, (org.jsoup.nodes.Element) document56); org.jsoup.nodes.Document document64 = cleaner3.clean(document56); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node66 = document64.childNode((int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]" + "'", str6, ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertNotNull(objSpliterator21); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str35, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(elements39); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(document64); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Element element23 = document21.html("#comment"); org.jsoup.nodes.Document document24 = document21.normalise(); java.lang.String str25 = document24.toString(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n <head></head>\n <body>\n #comment \n </body>\n</html>" + "'", str25, "<html>\n <head></head>\n <body>\n #comment \n </body>\n</html>"); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Element element28 = document23.prepend("[:lt(32)=<!--hi!-->]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("#text"); java.lang.String str8 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist5); java.lang.String str9 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist5); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str16 = org.jsoup.Jsoup.clean(":lt(32)", whitelist15); boolean boolean18 = whitelist15.isSafeTag(""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document22, "hi!"); org.jsoup.nodes.Element element25 = document22.empty(); org.jsoup.nodes.Element element27 = document22.removeClass("hi!"); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList33 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document31, "hi!"); org.jsoup.nodes.Element element35 = document31.tagName("hi!"); org.jsoup.nodes.Element element37 = document31.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); org.jsoup.nodes.Document document41 = document22.outputSettings(outputSettings40); java.lang.String str42 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist15, outputSettings40); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str46 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist45); org.jsoup.safety.Whitelist whitelist48 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist50 = whitelist48.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str57 = org.jsoup.Jsoup.clean(":lt(32)", whitelist56); org.jsoup.safety.Whitelist whitelist61 = whitelist56.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray68 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist69 = whitelist56.addTags(strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist52.addProtocols(":matchesOwn(null", "hi!", strArray68); java.lang.String[] strArray79 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean80 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist70.addProtocols("\n<!--hi!-->", "#document", strArray79); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray79); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray79); org.jsoup.safety.Whitelist whitelist84 = whitelist45.addAttributes("*", strArray79); org.jsoup.safety.Whitelist whitelist85 = whitelist15.addTags(strArray79); boolean boolean86 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray79); org.jsoup.safety.Whitelist whitelist87 = whitelist5.addAttributes(":matchesOwn(null", strArray79); org.jsoup.nodes.Attributes attributes89 = whitelist5.getEnforcedAttributes("<html>\n <head></head>\n <body>\n </body>\n</html>"); org.jsoup.safety.Cleaner cleaner90 = new org.jsoup.safety.Cleaner(whitelist5); boolean boolean91 = org.jsoup.Jsoup.isValid("<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">", whitelist5); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[  ^=hi!]" + "'", str9, "[  ^=hi!]"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + ":lt(32)" + "'", str16, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(nodeList24); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(nodeList33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[:lt(32)]" + "'", str42, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!$=  ]" + "'", str46, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + ":lt(32)" + "'", str57, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertNotNull(whitelist87); org.junit.Assert.assertNotNull(attributes89); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\nhi!", pattern1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = document6.removeClass("hi!"); java.lang.String str12 = document6.id(); org.jsoup.nodes.Node node13 = document6.previousSibling(); org.jsoup.nodes.Node node14 = document6.clone(); java.lang.String str15 = document6.id(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining22 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document24 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); boolean boolean36 = attributeWithValueContaining22.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document28); org.jsoup.nodes.Document document37 = cleaner19.clean(document28); org.jsoup.helper.Validate.notNull((java.lang.Object) document28, ""); boolean boolean40 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document6, (org.jsoup.nodes.Element) document28); org.jsoup.select.Elements elements42 = document6.getElementsByAttributeStarting("[^[hi!$=<html>\n <head></head>\n <body></body>\n</html>]]"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNull(node13); org.junit.Assert.assertNotNull(node14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(elements42); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings10 = document3.outputSettings(); org.jsoup.select.Elements elements12 = document3.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element14 = document3.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes15 = document3.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap16 = attributes15.dataset(); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList22 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document20, "hi!"); org.jsoup.nodes.Element element24 = document20.tagName("hi!"); org.jsoup.nodes.Element element26 = document20.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings27 = document20.outputSettings(); org.jsoup.select.Elements elements29 = document20.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element31 = document20.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes32 = document20.attributes(); attributes15.addAll(attributes32); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":lt(32)", ""); attributes32.put(attribute36); org.jsoup.nodes.Document document39 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element41 = document39.appendElement("#document"); org.jsoup.nodes.Element element42 = element41.lastElementSibling(); org.jsoup.nodes.Element element43 = element42.lastElementSibling(); boolean boolean44 = attribute36.equals((java.lang.Object) element43); java.lang.String str46 = attribute36.setValue("\nhi!"); java.lang.String str47 = attribute36.toString(); java.lang.String str48 = attribute36.getKey(); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(false); java.lang.String[] strArray63 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean64 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray63); org.jsoup.safety.Whitelist whitelist65 = whitelist54.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray63); boolean boolean67 = whitelist54.isSafeTag("#text"); java.lang.String str68 = org.jsoup.Jsoup.clean("[^<html> <head></head> <body> </body> </html>]", whitelist54); boolean boolean69 = attribute36.equals((java.lang.Object) "[^<html> <head></head> <body> </body> </html>]"); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(strMap16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(nodeList22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNull(element31); org.junit.Assert.assertNotNull(attributes32); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertEquals("'" + str47 + "' != '" + ":lt(32)=\"\nhi!\"" + "'", str47, ":lt(32)=\"\nhi!\""); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(32)" + "'", str48, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[^  ]" + "'", str68, "[^  ]"); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Element element23 = document21.html("#comment"); org.jsoup.nodes.Document document24 = document21.normalise(); org.jsoup.select.Elements elements26 = document21.getElementsContainingOwnText("[[:lt(32)*=]*=hi!]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(elements26); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("#.\n<!---->", pattern1); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining9 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document11 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); boolean boolean23 = attributeWithValueContaining9.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15); org.jsoup.nodes.Document document24 = cleaner6.clean(document15); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); document28.title("hi!"); org.jsoup.select.Elements elements36 = document28.getElementsByAttributeStarting("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]"); boolean boolean37 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document28); // The following exception was thrown during execution in test generation try { java.lang.String str38 = attributeWithValueMatching2.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("#text"); java.lang.String str6 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist3); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element14 = document10.tagName("hi!"); org.jsoup.nodes.Element element16 = document10.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings18.indentAmount((int) (short) 0); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings18.indentAmount((int) (byte) 1); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings18.prettyPrint(true); int int27 = outputSettings26.indentAmount(); int int28 = outputSettings26.indentAmount(); java.lang.String str29 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "[[:gt(100)]$=:gt(100)]", whitelist3, outputSettings26); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.prettyPrint(true); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str6, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[!=hi!]" + "'", str29, "[!=hi!]"); org.junit.Assert.assertNotNull(outputSettings31); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str27 = document26.ownText(); org.jsoup.nodes.Node node30 = document26.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); org.jsoup.select.Elements elements43 = document34.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element45 = document34.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element47 = document34.createElement(" hi!"); org.jsoup.select.Elements elements49 = document34.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean50 = indexLessThan23.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document51 = cleaner3.clean(document34); org.jsoup.parser.Tag tag52 = document34.tag(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(tag52); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes29 = whitelist27.getEnforcedAttributes(".<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(attributes29); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("", ":contains(:matchesown(null"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist6); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList15 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document13, "hi!"); org.jsoup.nodes.Element element17 = document13.tagName("hi!"); org.jsoup.nodes.Element element19 = document13.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings20 = document13.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings20.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings21.indentAmount((int) (short) 0); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.indentAmount((int) (byte) 1); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings21.prettyPrint(true); int int30 = outputSettings29.indentAmount(); int int31 = outputSettings29.indentAmount(); java.lang.String str32 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "[[:gt(100)]$=:gt(100)]", whitelist6, outputSettings29); org.jsoup.nodes.Document document33 = document2.outputSettings(outputSettings29); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element41 = document37.tagName("hi!"); org.jsoup.nodes.Element element43 = document37.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings44 = document37.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings44.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); org.jsoup.nodes.Entities.EscapeMode escapeMode50 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.escapeMode(escapeMode50); java.util.Map<java.lang.Character, java.lang.String> charMap52 = escapeMode50.getMap(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings29.escapeMode(escapeMode50); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str9, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(nodeList15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[!=hi!]" + "'", str32, "[!=hi!]"); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charMap52); org.junit.Assert.assertNotNull(outputSettings53); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str7 = org.jsoup.Jsoup.clean(":lt(32)", whitelist6); org.jsoup.safety.Whitelist whitelist11 = whitelist6.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray18 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist19 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addAttributes(":gt(100)", strArray18); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str27 = org.jsoup.Jsoup.clean(":lt(32)", whitelist26); boolean boolean29 = whitelist26.isSafeTag(""); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element36 = document33.empty(); org.jsoup.nodes.Element element38 = document33.removeClass("hi!"); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.prettyPrint(false); org.jsoup.nodes.Document document52 = document33.outputSettings(outputSettings51); java.lang.String str53 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist26, outputSettings51); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist59 = whitelist57.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist63 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str64 = org.jsoup.Jsoup.clean(":lt(32)", whitelist63); org.jsoup.safety.Whitelist whitelist68 = whitelist63.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray75 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist76 = whitelist63.addTags(strArray75); org.jsoup.safety.Whitelist whitelist77 = whitelist59.addProtocols(":matchesOwn(null", "hi!", strArray75); org.jsoup.safety.Whitelist whitelist78 = whitelist26.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray75); org.jsoup.safety.Whitelist whitelist79 = whitelist20.addProtocols("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", "[hi!$=<html> <head></head> <body></body> </html>]", strArray75); org.jsoup.safety.Cleaner cleaner80 = new org.jsoup.safety.Cleaner(whitelist79); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ":lt(32)" + "'", str7, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + ":lt(32)" + "'", str27, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[:lt(32)]" + "'", str53, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + ":lt(32)" + "'", str64, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(strArray75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist79); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Element element31 = document26.removeClass("hi!"); org.jsoup.select.Elements elements34 = document26.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); objList0.push((java.lang.Object) "[:lt(32)]"); org.jsoup.select.Evaluator.Attribute attribute37 = new org.jsoup.select.Evaluator.Attribute(":lt(32)"); org.jsoup.nodes.Element element38 = null; org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", ":lt(32)"); java.util.Map<java.lang.String, java.lang.String> strMap42 = document41.dataset(); java.lang.String str43 = document41.outerHtml(); boolean boolean44 = attribute37.matches(element38, (org.jsoup.nodes.Element) document41); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner48 = new org.jsoup.safety.Cleaner(whitelist47); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining51 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document53 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); boolean boolean65 = attributeWithValueContaining51.matches((org.jsoup.nodes.Element) document53, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document66 = cleaner48.clean(document57); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList72 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document70, "hi!"); org.jsoup.nodes.Element element74 = document70.tagName("hi!"); org.jsoup.nodes.Element element76 = document70.append(""); java.lang.String str77 = document70.toString(); java.lang.String str78 = document70.id(); org.jsoup.nodes.Node node79 = document70.parent(); org.jsoup.nodes.Document document80 = cleaner48.clean(document70); org.jsoup.nodes.Document document84 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList86 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document84, "hi!"); org.jsoup.nodes.Element element88 = document84.text(""); boolean boolean89 = attribute37.matches((org.jsoup.nodes.Element) document70, (org.jsoup.nodes.Element) document84); boolean boolean90 = objList0.offerLast((java.lang.Object) document70); org.jsoup.safety.Whitelist.AttributeKey attributeKey92 = new org.jsoup.safety.Whitelist.AttributeKey(":lt(1)"); boolean boolean93 = objList0.offerLast((java.lang.Object) attributeKey92); java.lang.String str94 = attributeKey92.toString(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str43, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(nodeList72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); org.junit.Assert.assertNull(node79); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertNotNull(nodeList86); org.junit.Assert.assertNotNull(element88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true); org.junit.Assert.assertEquals("'" + str94 + "' != '" + ":lt(1)" + "'", str94, ":lt(1)"); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList42 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document40, "hi!"); org.jsoup.nodes.Element element44 = document40.tagName("hi!"); org.jsoup.nodes.Element element46 = document40.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings47 = document40.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.prettyPrint(false); boolean boolean50 = outputSettings49.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings49.prettyPrint(false); boolean boolean53 = tag36.equals((java.lang.Object) outputSettings52); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(nodeList42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.safety.Whitelist whitelist8 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist16 = whitelist10.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist20 = whitelist10.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str21 = org.jsoup.Jsoup.clean("hi!", whitelist10); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str32 = org.jsoup.Jsoup.clean(":lt(32)", whitelist31); org.jsoup.safety.Whitelist whitelist36 = whitelist31.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray43 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist44 = whitelist31.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addProtocols(":matchesOwn(null", "hi!", strArray43); java.lang.String[] strArray54 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean55 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist45.addProtocols("\n<!--hi!-->", "#document", strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.safety.Whitelist whitelist59 = whitelist10.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray54); org.jsoup.safety.Whitelist whitelist60 = whitelist3.addTags(strArray54); boolean boolean61 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.safety.Whitelist whitelist63 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist65 = whitelist63.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner66 = new org.jsoup.safety.Cleaner(whitelist65); org.jsoup.safety.Whitelist whitelist69 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str70 = org.jsoup.Jsoup.clean(":lt(32)", whitelist69); org.jsoup.safety.Whitelist whitelist74 = whitelist69.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray81 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist82 = whitelist69.addTags(strArray81); org.jsoup.safety.Whitelist whitelist83 = whitelist65.addAttributes(":gt(100)", strArray81); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray81); org.jsoup.safety.Whitelist whitelist85 = whitelist3.addAttributes("<!DOCTYPE [hi!=.<html> <head></head> <body></body> </html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">", strArray81); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":lt(32)" + "'", str32, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + ":lt(32)" + "'", str70, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(strArray81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist85); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str14 = org.jsoup.Jsoup.clean(":lt(32)", whitelist13); org.jsoup.safety.Whitelist whitelist18 = whitelist13.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray25 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist26 = whitelist13.addTags(strArray25); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addProtocols(":matchesOwn(null", "hi!", strArray25); org.jsoup.safety.Whitelist whitelist28 = whitelist2.addAttributes("[^hi!]", strArray25); org.jsoup.safety.Whitelist whitelist32 = whitelist2.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes34 = whitelist2.getEnforcedAttributes(""); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist38 = whitelist2.addEnforcedAttribute("", "[:gt(100)]=\"\"", "<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + ":lt(32)" + "'", str14, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(attributes34); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("hi!", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); boolean boolean2 = org.jsoup.Jsoup.isValid("#[:lt(32)*=.\n \n \n]", whitelist1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str12 = org.jsoup.Jsoup.clean(":lt(32)", whitelist11); org.jsoup.safety.Whitelist whitelist16 = whitelist11.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray23 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist24 = whitelist11.addTags(strArray23); org.jsoup.safety.Whitelist whitelist25 = whitelist7.addAttributes(":gt(100)", strArray23); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23); org.jsoup.safety.Whitelist whitelist28 = whitelist1.addProtocols("#comment", "[^<html> <head></head> <body> </body> </html>]", strArray23); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ":lt(32)" + "'", str12, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist28); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str9 = org.jsoup.Jsoup.clean("#comment", "*", whitelist8); org.jsoup.nodes.Attributes attributes11 = whitelist8.getEnforcedAttributes("[!=hi!]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#comment" + "'", str9, "#comment"); org.junit.Assert.assertNotNull(attributes11); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = element11.toString(); boolean boolean14 = element11.hasAttr(""); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Element element26 = element24.removeClass("hi!"); org.jsoup.select.Elements elements29 = element24.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element31 = element24.prependElement("hi!"); boolean boolean32 = element31.hasText(); element31.remove(); boolean boolean34 = id1.matches(element11, element31); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining41 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); boolean boolean55 = attributeWithValueContaining41.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document56 = cleaner38.clean(document47); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str59 = document58.toString(); java.lang.String str60 = document58.baseUri(); org.jsoup.nodes.Document document61 = cleaner38.clean(document58); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element69 = document66.empty(); org.jsoup.nodes.Element element71 = document66.removeClass("hi!"); org.jsoup.nodes.Element element73 = element71.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList74 = element73.siblingNodes(); org.jsoup.nodes.Element element76 = element73.addClass(":gt(100)"); org.jsoup.nodes.Node node77 = element73.parent(); java.lang.String str79 = element73.absUrl("[^hi!]"); org.jsoup.select.Elements elements81 = element73.getElementsByIndexGreaterThan((int) 'a'); boolean boolean82 = id1.matches((org.jsoup.nodes.Element) document62, element73); org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document86 = parser83.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document89 = parser83.parseInput("hi!", "#comment"); org.jsoup.nodes.Document document91 = org.jsoup.nodes.Document.createShell("hi!"); java.util.regex.Pattern pattern92 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn93 = new org.jsoup.select.Evaluator.MatchesOwn(pattern92); boolean boolean94 = document91.equals((java.lang.Object) pattern92); org.jsoup.nodes.Element element97 = document91.attr("[.]", ".<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean98 = id1.matches((org.jsoup.nodes.Element) document89, element97); java.lang.String str99 = document89.title(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNull(node77); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(parser83); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(element97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, ""); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList10 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); java.lang.Object obj11 = objList10.poll(); java.util.ListIterator<java.lang.Object> objItor12 = objList10.listIterator(); java.lang.Object obj13 = null; int int14 = objList10.lastIndexOf(obj13); java.lang.Object obj15 = null; boolean boolean16 = objList10.offerLast(obj15); java.lang.Object[] objArray17 = objList10.toArray(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str27 = org.jsoup.Jsoup.clean(":lt(32)", whitelist26); org.jsoup.safety.Whitelist whitelist31 = whitelist26.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray38 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist39 = whitelist26.addTags(strArray38); org.jsoup.safety.Whitelist whitelist40 = whitelist22.addProtocols(":matchesOwn(null", "hi!", strArray38); java.lang.String[] strArray49 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean50 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist40.addProtocols("\n<!--hi!-->", "#document", strArray49); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray49); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray49); boolean boolean54 = objList10.offerLast((java.lang.Object) strArray49); org.jsoup.safety.Whitelist whitelist55 = whitelist7.addProtocols(" text=\"hi!\" #document=\"#document\"", ":matchesOwn(null", strArray49); boolean boolean56 = org.jsoup.helper.StringUtil.in("\n<!--hi!-->", strArray49); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNull(obj11); org.junit.Assert.assertNotNull(objItor12); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(objArray17); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[null]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[null]"); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + ":lt(32)" + "'", str27, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist8.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray17, "[[^hi!]]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist12 = whitelist2.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str13 = org.jsoup.Jsoup.clean("#document", "<html>\n <head></head>\n <body></body>\n</html>", whitelist12); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist17 = whitelist12.addEnforcedAttribute("[:gt(100)]=\"\"", "[^<html> <head></head> <body> </body> </html>]", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#document" + "'", str13, "#document"); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element13 = document10.empty(); org.jsoup.nodes.Element element15 = document10.removeClass("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.prettyPrint(false); org.jsoup.nodes.Document document29 = document10.outputSettings(outputSettings28); java.lang.String str30 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist3, outputSettings28); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str34 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist33); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str45 = org.jsoup.Jsoup.clean(":lt(32)", whitelist44); org.jsoup.safety.Whitelist whitelist49 = whitelist44.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray56 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist57 = whitelist44.addTags(strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist40.addProtocols(":matchesOwn(null", "hi!", strArray56); java.lang.String[] strArray67 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean68 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist58.addProtocols("\n<!--hi!-->", "#document", strArray67); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray67); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray67); org.jsoup.safety.Whitelist whitelist72 = whitelist33.addAttributes("*", strArray67); org.jsoup.safety.Whitelist whitelist73 = whitelist3.addTags(strArray67); boolean boolean75 = whitelist3.isSafeTag("<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)" + "'", str4, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[:lt(32)]" + "'", str30, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[hi!$=  ]" + "'", str34, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + ":lt(32)" + "'", str45, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str10 = org.jsoup.Jsoup.clean(":lt(32)", whitelist9); org.jsoup.safety.Whitelist whitelist14 = whitelist9.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray21 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist22 = whitelist9.addTags(strArray21); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addProtocols(":matchesOwn(null", "hi!", strArray21); boolean boolean24 = org.jsoup.Jsoup.isValid(":contains(<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>", whitelist23); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + ":lt(32)" + "'", str10, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = element11.toString(); boolean boolean14 = element11.hasAttr(""); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Element element26 = element24.removeClass("hi!"); org.jsoup.select.Elements elements29 = element24.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element31 = element24.prependElement("hi!"); boolean boolean32 = element31.hasText(); element31.remove(); boolean boolean34 = id1.matches(element11, element31); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining41 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); boolean boolean55 = attributeWithValueContaining41.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document56 = cleaner38.clean(document47); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str59 = document58.toString(); java.lang.String str60 = document58.baseUri(); org.jsoup.nodes.Document document61 = cleaner38.clean(document58); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element69 = document66.empty(); org.jsoup.nodes.Element element71 = document66.removeClass("hi!"); org.jsoup.nodes.Element element73 = element71.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList74 = element73.siblingNodes(); org.jsoup.nodes.Element element76 = element73.addClass(":gt(100)"); org.jsoup.nodes.Node node77 = element73.parent(); java.lang.String str79 = element73.absUrl("[^hi!]"); org.jsoup.select.Elements elements81 = element73.getElementsByIndexGreaterThan((int) 'a'); boolean boolean82 = id1.matches((org.jsoup.nodes.Element) document62, element73); org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document86 = parser83.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document89 = parser83.parseInput("hi!", "#comment"); org.jsoup.nodes.Document document91 = org.jsoup.nodes.Document.createShell("hi!"); java.util.regex.Pattern pattern92 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn93 = new org.jsoup.select.Evaluator.MatchesOwn(pattern92); boolean boolean94 = document91.equals((java.lang.Object) pattern92); org.jsoup.nodes.Element element97 = document91.attr("[.]", ".<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean98 = id1.matches((org.jsoup.nodes.Element) document89, element97); org.jsoup.select.Elements elements99 = document89.parents(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNull(node77); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(parser83); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(element97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertNotNull(elements99); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); java.lang.Object obj1 = objList0.poll(); java.util.ListIterator<java.lang.Object> objItor2 = objList0.listIterator(); objList0.clear(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str7 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist6); boolean boolean9 = whitelist6.isSafeTag(""); org.jsoup.safety.Whitelist whitelist11 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist13.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = whitelist13.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!", whitelist13); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str35 = org.jsoup.Jsoup.clean(":lt(32)", whitelist34); org.jsoup.safety.Whitelist whitelist39 = whitelist34.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray46 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist47 = whitelist34.addTags(strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist30.addProtocols(":matchesOwn(null", "hi!", strArray46); java.lang.String[] strArray57 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean58 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist48.addProtocols("\n<!--hi!-->", "#document", strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.safety.Whitelist whitelist62 = whitelist13.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray57); org.jsoup.safety.Whitelist whitelist63 = whitelist6.addTags(strArray57); java.lang.CharSequence[] charSequenceArray64 = objList0.toArray((java.lang.CharSequence[]) strArray57); java.lang.Object obj65 = null; objList0.addFirst(obj65); java.lang.Object obj67 = objList0.getFirst(); org.junit.Assert.assertNull(obj1); org.junit.Assert.assertNotNull(objItor2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[hi!$=  ]" + "'", str7, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + ":lt(32)" + "'", str35, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(charSequenceArray64); org.junit.Assert.assertNull(obj67); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.select.Elements elements37 = document25.getElementsByIndexEquals((int) (short) 10); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node38 = document25.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(elements37); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str15 = org.jsoup.Jsoup.clean(":lt(32)", whitelist14); boolean boolean17 = whitelist14.isSafeTag(""); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = document21.removeClass("hi!"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Element element36 = document30.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document30.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.prettyPrint(false); org.jsoup.nodes.Document document40 = document21.outputSettings(outputSettings39); java.lang.String str41 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist14, outputSettings39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str45 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist44); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str56 = org.jsoup.Jsoup.clean(":lt(32)", whitelist55); org.jsoup.safety.Whitelist whitelist60 = whitelist55.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray67 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist68 = whitelist55.addTags(strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist51.addProtocols(":matchesOwn(null", "hi!", strArray67); java.lang.String[] strArray78 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean79 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray78); org.jsoup.safety.Whitelist whitelist80 = whitelist69.addProtocols("\n<!--hi!-->", "#document", strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78); org.jsoup.safety.Whitelist whitelist83 = whitelist44.addAttributes("*", strArray78); org.jsoup.safety.Whitelist whitelist84 = whitelist14.addTags(strArray78); boolean boolean85 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray78); org.jsoup.safety.Whitelist whitelist86 = whitelist4.addAttributes(":matchesOwn(null", strArray78); org.jsoup.nodes.Attributes attributes88 = whitelist4.getEnforcedAttributes("<html>\n <head></head>\n <body>\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap89 = attributes88.dataset(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ":lt(32)" + "'", str15, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[:lt(32)]" + "'", str41, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[hi!$=  ]" + "'", str45, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + ":lt(32)" + "'", str56, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(strArray78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(attributes88); org.junit.Assert.assertNotNull(strMap89); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist3); boolean boolean6 = whitelist3.isSafeTag("#document"); org.jsoup.safety.Whitelist whitelist10 = whitelist3.addEnforcedAttribute("     ", "\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); boolean boolean11 = org.jsoup.Jsoup.isValid(":lt(32)=\"\"=\".\"", whitelist3); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList3 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element11 = document7.text(""); int int12 = objList3.lastIndexOf((java.lang.Object) document7); objList0.addFirst((java.lang.Object) document7); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element20 = document17.empty(); org.jsoup.nodes.Element element22 = document17.removeClass("hi!"); boolean boolean23 = objList0.equals((java.lang.Object) "hi!"); java.util.ListIterator<java.lang.Object> objItor25 = objList0.listIterator(1); java.lang.Object obj26 = objList0.getLast(); java.lang.Object obj27 = objList0.getLast(); java.lang.Object obj29 = objList0.remove(0); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist32); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining36 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document38 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); boolean boolean50 = attributeWithValueContaining36.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document42); org.jsoup.nodes.Document document51 = cleaner33.clean(document42); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element59 = document55.tagName("hi!"); org.jsoup.nodes.Element element61 = document55.append(""); java.lang.String str62 = document55.toString(); java.lang.String str63 = document55.id(); org.jsoup.nodes.Node node64 = document55.parent(); org.jsoup.nodes.Document document65 = cleaner33.clean(document55); java.lang.String str66 = document55.title(); org.jsoup.nodes.Element element68 = document55.removeClass(":eq(1)"); objList0.addLast((java.lang.Object) element68); java.lang.String str70 = objList0.toString(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(objItor25); org.junit.Assert.assertNotNull(obj26); org.junit.Assert.assertEquals(obj26.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(obj27); org.junit.Assert.assertEquals(obj27.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(obj29); org.junit.Assert.assertEquals(obj29.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNull(node64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[<html>\n <head></head>\n <body></body>\n</html>]" + "'", str70, "[<html>\n <head></head>\n <body></body>\n</html>]"); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes(""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist15 = whitelist9.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist19 = whitelist9.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str20 = org.jsoup.Jsoup.clean("hi!", whitelist9); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); org.jsoup.safety.Whitelist whitelist35 = whitelist30.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray42 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist43 = whitelist30.addTags(strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist26.addProtocols(":matchesOwn(null", "hi!", strArray42); java.lang.String[] strArray53 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean54 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist44.addProtocols("\n<!--hi!-->", "#document", strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.safety.Whitelist whitelist58 = whitelist9.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray53); org.jsoup.safety.Whitelist whitelist59 = whitelist4.addAttributes("*", strArray53); boolean boolean61 = whitelist4.isSafeTag("[.]"); org.jsoup.safety.Whitelist whitelist63 = whitelist4.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(whitelist63); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)", whitelist8); org.jsoup.safety.Whitelist whitelist13 = whitelist8.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray20 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist21 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist4.addProtocols(":matchesOwn(null", "hi!", strArray20); java.lang.String[] strArray31 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean32 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray31); org.jsoup.safety.Whitelist whitelist33 = whitelist22.addProtocols("\n<!--hi!-->", "#document", strArray31); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray31); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray31); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray31, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)" + "'", str9, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(whitelist33); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist11 = whitelist7.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>  \n </body>\n</html>", "#comment"); org.jsoup.nodes.Attributes attributes13 = whitelist7.getEnforcedAttributes("[^hi!]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(attributes13); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str7 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist6); boolean boolean9 = whitelist6.isSafeTag(""); org.jsoup.safety.Whitelist whitelist11 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist13.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = whitelist13.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!", whitelist13); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str35 = org.jsoup.Jsoup.clean(":lt(32)", whitelist34); org.jsoup.safety.Whitelist whitelist39 = whitelist34.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray46 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist47 = whitelist34.addTags(strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist30.addProtocols(":matchesOwn(null", "hi!", strArray46); java.lang.String[] strArray57 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean58 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist48.addProtocols("\n<!--hi!-->", "#document", strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.safety.Whitelist whitelist62 = whitelist13.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray57); org.jsoup.safety.Whitelist whitelist63 = whitelist6.addTags(strArray57); org.jsoup.safety.Whitelist whitelist64 = whitelist2.addAttributes("[  ^=hi!]", strArray57); boolean boolean66 = whitelist64.isSafeTag(" "); org.jsoup.nodes.Document.OutputSettings outputSettings67 = null; // The following exception was thrown during execution in test generation try { java.lang.String str68 = org.jsoup.Jsoup.clean("[[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]!=#document]", ":matchesOwn(null", whitelist64, outputSettings67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[hi!$=  ]" + "'", str7, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + ":lt(32)" + "'", str35, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist11 = whitelist7.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>  \n </body>\n</html>", "#comment"); org.jsoup.parser.Parser parser13 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document16 = parser13.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document19 = parser13.parseInput("hi!", "#comment"); org.jsoup.nodes.Element element21 = document19.appendElement("#doctype"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings32 = document25.outputSettings(); org.jsoup.select.Elements elements34 = document25.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element36 = document25.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes37 = document25.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap38 = attributes37.dataset(); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); org.jsoup.select.Elements elements51 = document42.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element53 = document42.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes54 = document42.attributes(); attributes37.addAll(attributes54); org.jsoup.nodes.Attribute attribute58 = new org.jsoup.nodes.Attribute(":lt(32)", ""); attributes54.put(attribute58); java.lang.String str60 = attribute58.getValue(); boolean boolean61 = whitelist7.isSafeAttribute("#[:lt(32)*=.\n \n \n]", (org.jsoup.nodes.Element) document19, attribute58); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(parser13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNull(element36); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertNotNull(strMap38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(elements51); org.junit.Assert.assertNull(element53); org.junit.Assert.assertNotNull(attributes54); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Element element31 = element29.toggleClass("#document"); org.jsoup.select.Elements elements33 = element31.getElementsByAttributeStarting(":lt(32)"); java.util.List<org.jsoup.nodes.Node> nodeList34 = element31.siblingNodes(); boolean boolean35 = objList0.retainAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList34); org.jsoup.select.Evaluator.IndexLessThan indexLessThan37 = new org.jsoup.select.Evaluator.IndexLessThan((int) ' '); java.lang.String str38 = indexLessThan37.toString(); boolean boolean39 = objList0.equals((java.lang.Object) str38); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist42); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining46 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document48 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList54 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document52, "hi!"); org.jsoup.nodes.Element element56 = document52.tagName("hi!"); org.jsoup.nodes.Element element58 = document52.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings59 = document52.outputSettings(); boolean boolean60 = attributeWithValueContaining46.matches((org.jsoup.nodes.Element) document48, (org.jsoup.nodes.Element) document52); org.jsoup.nodes.Document document61 = cleaner43.clean(document52); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str64 = document63.toString(); java.lang.String str65 = document63.baseUri(); org.jsoup.nodes.Document document66 = cleaner43.clean(document63); boolean boolean67 = objList0.offerLast((java.lang.Object) document63); java.util.Iterator<java.lang.Object> objItor68 = objList0.descendingIterator(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + ":lt(32)" + "'", str38, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(nodeList54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str64, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(objItor68); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\nhi!", pattern1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = document6.removeClass("hi!"); java.lang.String str12 = document6.id(); org.jsoup.nodes.Node node13 = document6.previousSibling(); org.jsoup.nodes.Node node14 = document6.clone(); java.lang.String str15 = document6.id(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining22 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document24 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); boolean boolean36 = attributeWithValueContaining22.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document28); org.jsoup.nodes.Document document37 = cleaner19.clean(document28); org.jsoup.helper.Validate.notNull((java.lang.Object) document28, ""); boolean boolean40 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document6, (org.jsoup.nodes.Element) document28); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element42 = document28.after("<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNull(node13); org.junit.Assert.assertNotNull(node14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); boolean boolean4 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str10 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist9); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str21 = org.jsoup.Jsoup.clean(":lt(32)", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray32 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist33 = whitelist20.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist16.addProtocols(":matchesOwn(null", "hi!", strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist9.addAttributes("[^hi!]", strArray32); org.jsoup.safety.Whitelist whitelist39 = whitelist9.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist46 = whitelist44.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str51 = org.jsoup.Jsoup.clean(":lt(32)", whitelist50); org.jsoup.safety.Whitelist whitelist55 = whitelist50.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray62 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist63 = whitelist50.addTags(strArray62); org.jsoup.safety.Whitelist whitelist64 = whitelist46.addProtocols(":matchesOwn(null", "hi!", strArray62); java.lang.String[] strArray73 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean74 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray73); org.jsoup.safety.Whitelist whitelist75 = whitelist64.addProtocols("\n<!--hi!-->", "#document", strArray73); org.jsoup.safety.Whitelist whitelist76 = whitelist9.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray73); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray73, "<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray73); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray73); org.jsoup.safety.Whitelist whitelist81 = whitelist1.addProtocols("<hi!>\n [^hi!]\n</hi!>", "\n<!---->", strArray73); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray73); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!$=  ]" + "'", str10, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + ":lt(32)" + "'", str21, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + ":lt(32)" + "'", str51, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist81); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); java.lang.String[] strArray15 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean16 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist6.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray15); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str30 = org.jsoup.Jsoup.clean(":lt(32)", whitelist29); org.jsoup.safety.Whitelist whitelist34 = whitelist29.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray41 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist42 = whitelist29.addTags(strArray41); org.jsoup.safety.Whitelist whitelist43 = whitelist25.addProtocols(":matchesOwn(null", "hi!", strArray41); java.lang.String[] strArray52 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean53 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist43.addProtocols("\n<!--hi!-->", "#document", strArray52); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray52); boolean boolean56 = org.jsoup.helper.StringUtil.in("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", strArray52); org.jsoup.safety.Whitelist whitelist57 = whitelist17.addProtocols(". <!---->", ":containsOwn(:containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray52); java.lang.String str58 = org.jsoup.Jsoup.clean("", "\nhi!", whitelist17); java.lang.String[] strArray61 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist62 = whitelist17.addProtocols("#*", "<hi!>\n [^hi!]\n</hi!>", strArray61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":lt(32)" + "'", str30, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.lang.Object obj24 = objList0.peek(); objList0.clear(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList26 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.text(""); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document38, "hi!"); org.jsoup.nodes.Element element42 = document38.tagName("hi!"); org.jsoup.nodes.Element element44 = document38.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings45 = document38.outputSettings(); org.jsoup.nodes.Document document46 = document30.outputSettings(outputSettings45); org.jsoup.nodes.Document document47 = document30.normalise(); objList26.addLast((java.lang.Object) document47); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("", ":lt(32)"); boolean boolean52 = objList26.offerFirst((java.lang.Object) ""); boolean boolean53 = objList0.offerLast((java.lang.Object) boolean52); java.lang.Object obj54 = null; int int55 = objList0.indexOf(obj54); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList61 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document59, "hi!"); org.jsoup.nodes.Element element63 = document59.tagName("hi!"); org.jsoup.nodes.Element element65 = document59.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings66 = document59.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode70 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.escapeMode(escapeMode70); org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode(); boolean boolean73 = objList0.contains((java.lang.Object) outputSettings71); java.util.Iterator<java.lang.Object> objItor74 = objList0.descendingIterator(); java.lang.Object[] objArray75 = objList0.toArray(); org.jsoup.safety.Whitelist whitelist77 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str78 = org.jsoup.Jsoup.clean(":lt(32)", whitelist77); org.jsoup.safety.Whitelist whitelist82 = whitelist77.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray89 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist90 = whitelist77.addTags(strArray89); org.jsoup.safety.Cleaner cleaner91 = new org.jsoup.safety.Cleaner(whitelist77); boolean boolean92 = objList0.offerLast((java.lang.Object) cleaner91); java.lang.Object obj93 = objList0.element(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(obj24); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(nodeList40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1)); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(nodeList61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertNotNull(outputSettings67); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(objItor74); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[true]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[true]"); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + ":lt(32)" + "'", str78, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); org.junit.Assert.assertEquals("'" + obj93 + "' != '" + true + "'", obj93, true); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Element element2 = null; org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining9 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document11 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); boolean boolean23 = attributeWithValueContaining9.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document15); org.jsoup.nodes.Document document24 = cleaner6.clean(document15); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); java.lang.String str35 = document28.toString(); java.lang.String str36 = document28.id(); org.jsoup.nodes.Node node37 = document28.parent(); org.jsoup.nodes.Document document38 = cleaner6.clean(document28); org.jsoup.select.Elements elements40 = document28.getElementsByIndexEquals((int) (short) 10); boolean boolean41 = indexGreaterThan1.matches(element2, (org.jsoup.nodes.Element) document28); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str35, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(elements40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList3 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element11 = document7.text(""); int int12 = objList3.lastIndexOf((java.lang.Object) document7); objList0.addFirst((java.lang.Object) document7); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element20 = document17.empty(); org.jsoup.nodes.Element element22 = document17.removeClass("hi!"); boolean boolean23 = objList0.equals((java.lang.Object) "hi!"); java.util.Iterator<java.lang.Object> objItor24 = objList0.iterator(); objList0.clear(); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist33 = whitelist27.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str34 = org.jsoup.Jsoup.clean("\nhi!", whitelist33); objList0.addLast((java.lang.Object) "\nhi!"); java.lang.Object obj37 = objList0.get(0); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList38 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.text(""); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.tagName("hi!"); org.jsoup.nodes.Element element56 = document50.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings57 = document50.outputSettings(); org.jsoup.nodes.Document document58 = document42.outputSettings(outputSettings57); org.jsoup.nodes.Document document59 = document42.normalise(); objList38.addLast((java.lang.Object) document59); org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList66 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document64, "hi!"); org.jsoup.nodes.Element element67 = document64.empty(); org.jsoup.nodes.Element element69 = element67.toggleClass("#document"); org.jsoup.select.Elements elements71 = element69.getElementsByAttributeStarting(":lt(32)"); java.util.List<org.jsoup.nodes.Node> nodeList72 = element69.siblingNodes(); boolean boolean73 = objList38.retainAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList72); org.jsoup.select.Evaluator.IndexLessThan indexLessThan75 = new org.jsoup.select.Evaluator.IndexLessThan((int) ' '); java.lang.String str76 = indexLessThan75.toString(); boolean boolean77 = objList38.equals((java.lang.Object) str76); boolean boolean79 = objList38.offerFirst((java.lang.Object) ":matchesOwn(null"); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean82 = objList38.equals((java.lang.Object) "<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean83 = objList0.offerLast((java.lang.Object) objList38); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(objItor24); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "\nhi!" + "'", obj37, "\nhi!"); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(nodeList66); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertNotNull(nodeList72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertEquals("'" + str76 + "' != '" + ":lt(32)" + "'", str76, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Element element28 = document23.text(":eq(0)"); org.jsoup.nodes.Element element30 = document23.addClass("[ =hi!]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element30); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str6 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist5); boolean boolean8 = whitelist5.isSafeTag(""); org.jsoup.safety.Whitelist whitelist10 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = whitelist12.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist22 = whitelist12.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str23 = org.jsoup.Jsoup.clean("hi!", whitelist12); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str34 = org.jsoup.Jsoup.clean(":lt(32)", whitelist33); org.jsoup.safety.Whitelist whitelist38 = whitelist33.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray45 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist46 = whitelist33.addTags(strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist29.addProtocols(":matchesOwn(null", "hi!", strArray45); java.lang.String[] strArray56 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean57 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist47.addProtocols("\n<!--hi!-->", "#document", strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56); org.jsoup.safety.Whitelist whitelist61 = whitelist12.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray56); org.jsoup.safety.Whitelist whitelist62 = whitelist5.addTags(strArray56); org.jsoup.safety.Whitelist whitelist63 = whitelist1.addAttributes("[  ^=hi!]", strArray56); boolean boolean64 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body>\n </body>\n</html>]", strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56, "<html>\n <head></head>\n <body></body>\n <#document></#document>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!$=  ]" + "'", str6, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!"); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + ":lt(32)" + "'", str34, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "#document"); org.jsoup.nodes.Node node5 = textNode2.attr("#document", "#document"); java.lang.String str6 = textNode2.getWholeText(); boolean boolean8 = textNode2.equals((java.lang.Object) 0); java.lang.String str9 = textNode2.nodeName(); java.lang.String str10 = textNode2.text(); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); java.lang.String str20 = org.jsoup.Jsoup.clean("[:lt(32)]", ":contains(:gt(100)", whitelist17); boolean boolean21 = textNode2.equals((java.lang.Object) whitelist17); org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertNotNull(node5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[:lt(32)]" + "'", str20, "[:lt(32)]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = whitelist1.addEnforcedAttribute("hi!", "#document", "hi!"); boolean boolean12 = org.jsoup.Jsoup.isValid("[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist11); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("                                                  "); org.jsoup.nodes.Document document29 = cleaner3.clean(document28); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.text(""); org.jsoup.select.Elements elements40 = document33.getElementsByAttributeValueEnding("[^hi!]", "#document"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList46 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document44, "hi!"); org.jsoup.nodes.Element element47 = document44.empty(); org.jsoup.nodes.Element element49 = document44.removeClass("hi!"); java.lang.String str50 = document44.nodeName(); org.jsoup.nodes.Document.QuirksMode quirksMode51 = document44.quirksMode(); org.jsoup.nodes.Document document52 = document33.quirksMode(quirksMode51); boolean boolean53 = cleaner3.isValid(document33); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element60 = document57.empty(); org.jsoup.nodes.Element element62 = document57.removeClass("hi!"); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element70 = document66.tagName("hi!"); org.jsoup.nodes.Element element72 = document66.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings73 = document66.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); org.jsoup.nodes.Document document76 = document57.outputSettings(outputSettings75); org.jsoup.select.Elements elements78 = document76.getElementsMatchingOwnText("#document"); boolean boolean79 = cleaner3.isValid(document76); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(elements40); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(nodeList46); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "#document" + "'", str50, "#document"); org.junit.Assert.assertTrue("'" + quirksMode51 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode51.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(elements78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str5 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist4); boolean boolean7 = whitelist4.isSafeTag(""); org.jsoup.safety.Whitelist whitelist9 = whitelist4.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes11 = whitelist9.getEnforcedAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String str12 = org.jsoup.Jsoup.clean("[[:gt(100)]$=:gt(100)]", "[hi!$=hi!]", whitelist9); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist16 = whitelist9.addEnforcedAttribute(" :lt(32)=\"\"", "", "[text=\"hi!\" #document=\"#document\"!=:eq(1)]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[hi!$=  ]" + "'", str5, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[[:gt(100)]$=:gt(100)]" + "'", str12, "[[:gt(100)]$=:gt(100)]"); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); int int9 = objList0.lastIndexOf((java.lang.Object) document4); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList15 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document13, "hi!"); java.lang.String str17 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList15, "#document"); boolean boolean18 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList15); java.lang.Object obj19 = objList0.clone(); java.util.ListIterator<java.lang.Object> objItor20 = objList0.listIterator(); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList26 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document24, "hi!"); org.jsoup.nodes.Element element27 = document24.empty(); org.jsoup.nodes.Element element29 = document24.removeClass("hi!"); org.jsoup.nodes.Element element31 = element29.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList32 = element31.siblingNodes(); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList32); java.lang.Object obj34 = null; boolean boolean35 = objList0.equals(obj34); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist46 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str47 = org.jsoup.Jsoup.clean(":lt(32)", whitelist46); org.jsoup.safety.Whitelist whitelist51 = whitelist46.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray58 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist59 = whitelist46.addTags(strArray58); org.jsoup.safety.Whitelist whitelist60 = whitelist42.addProtocols(":matchesOwn(null", "hi!", strArray58); org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList66 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document64, "hi!"); org.jsoup.nodes.Element element68 = document64.tagName("hi!"); org.jsoup.nodes.Element element70 = document64.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings71 = document64.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings71.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings72.indentAmount((int) (short) 0); org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode(); java.lang.String str78 = org.jsoup.Jsoup.clean("<<html>\n <head></head>\n <body></body>\n</html>></<html>\n <head></head>\n <body></body>\n</html>><html><head><title>hi&excl;</title></head><body></body></html>", "#root", whitelist60, outputSettings76); objList0.addLast((java.lang.Object) str78); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(nodeList15); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\nhi!" + "'", str17, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "[]"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]"); org.junit.Assert.assertNotNull(objItor20); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(nodeList26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + ":lt(32)" + "'", str47, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(nodeList66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings74); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "&lt;\n \n \n&gt;\n \n \n&gt;hi!" + "'", str78, "&lt;\n \n \n&gt;\n \n \n&gt;hi!"); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str29 = document28.toString(); java.lang.String str30 = document28.baseUri(); org.jsoup.nodes.Document.QuirksMode quirksMode31 = document28.quirksMode(); boolean boolean33 = document28.hasClass(":lt(32)=\"[.]\""); boolean boolean34 = cleaner3.isValid(document28); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList35 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean37 = objList35.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList38 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.text(""); int int47 = objList38.lastIndexOf((java.lang.Object) document42); objList35.addFirst((java.lang.Object) document42); boolean boolean49 = cleaner3.isValid(document42); org.jsoup.nodes.Document document51 = new org.jsoup.nodes.Document("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element58 = document55.empty(); org.jsoup.nodes.Element element60 = document55.removeClass("hi!"); java.lang.String str61 = document55.id(); org.jsoup.nodes.Document document65 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList67 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document65, "hi!"); org.jsoup.nodes.Element element68 = document65.empty(); org.jsoup.nodes.Element element70 = document65.removeClass("hi!"); java.lang.String str71 = document65.nodeName(); org.jsoup.nodes.Document.QuirksMode quirksMode72 = document65.quirksMode(); org.jsoup.nodes.Document document73 = document55.quirksMode(quirksMode72); java.lang.String str74 = document73.id(); org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList80 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document78, "hi!"); org.jsoup.nodes.Element element82 = document78.tagName("hi!"); org.jsoup.nodes.Element element84 = document78.append(""); java.lang.String str85 = document78.toString(); org.jsoup.nodes.Element element87 = document78.prependElement("\nhi!"); org.jsoup.select.Elements elements89 = document78.getElementsMatchingOwnText(""); org.jsoup.nodes.Document.QuirksMode quirksMode90 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document91 = document78.quirksMode(quirksMode90); org.jsoup.nodes.Document document92 = document73.quirksMode(quirksMode90); org.jsoup.nodes.Document document93 = document51.quirksMode(quirksMode90); org.jsoup.nodes.Element element94 = document51.body(); boolean boolean95 = cleaner3.isValid(document51); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str29, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertTrue("'" + quirksMode31 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode31.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(nodeList67); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "#document" + "'", str71, "#document"); org.junit.Assert.assertTrue("'" + quirksMode72 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode72.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(nodeList80); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str85, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertNotNull(elements89); org.junit.Assert.assertTrue("'" + quirksMode90 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode90.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertNotNull(document92); org.junit.Assert.assertNotNull(document93); org.junit.Assert.assertNull(element94); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.nodes.Element element76 = document8.nextElementSibling(); java.lang.String str77 = document8.title(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, ""); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str3 = org.jsoup.Jsoup.clean("", whitelist2); org.jsoup.safety.Whitelist whitelist7 = whitelist2.addEnforcedAttribute("#comment", "[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]", "[  =hi!]"); java.lang.String str8 = org.jsoup.Jsoup.clean("", whitelist2); org.jsoup.safety.Whitelist whitelist12 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":gt(100)", "[!=hi!]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(whitelist12); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str5 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str16 = org.jsoup.Jsoup.clean(":lt(32)", whitelist15); org.jsoup.safety.Whitelist whitelist20 = whitelist15.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray27 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist28 = whitelist15.addTags(strArray27); org.jsoup.safety.Whitelist whitelist29 = whitelist11.addProtocols(":matchesOwn(null", "hi!", strArray27); java.lang.String[] strArray38 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean39 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray38); org.jsoup.safety.Whitelist whitelist40 = whitelist29.addProtocols("\n<!--hi!-->", "#document", strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.safety.Whitelist whitelist43 = whitelist4.addAttributes("*", strArray38); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.prettyPrint(false); boolean boolean57 = outputSettings56.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings56.prettyPrint(false); java.lang.String str60 = org.jsoup.Jsoup.clean("", ":matchesOwn(null", whitelist43, outputSettings59); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[hi!$=  ]" + "'", str5, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + ":lt(32)" + "'", str16, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.select.Evaluator.Class class11 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); org.jsoup.select.Elements elements24 = document15.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element26 = document15.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes27 = document15.attributes(); org.jsoup.nodes.Element element29 = document15.prepend("[^hi!]"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); org.jsoup.nodes.Element element42 = document33.attr("#document", "#document"); org.jsoup.nodes.Element element43 = document33.body(); boolean boolean44 = class11.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Attribute attribute47 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean48 = whitelist4.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document15, attribute47); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist53 = whitelist51.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str60 = org.jsoup.Jsoup.clean(":lt(32)", whitelist59); org.jsoup.safety.Whitelist whitelist64 = whitelist59.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray71 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist72 = whitelist59.addTags(strArray71); org.jsoup.safety.Whitelist whitelist73 = whitelist55.addProtocols(":matchesOwn(null", "hi!", strArray71); org.jsoup.safety.Whitelist whitelist74 = whitelist4.addProtocols("[^\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->]", "<hi!>\n [^hi!]\n</hi!>", strArray71); org.jsoup.safety.Whitelist whitelist76 = whitelist4.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNull(element26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + ":lt(32)" + "'", str60, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(whitelist76); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); org.jsoup.safety.Whitelist whitelist6 = whitelist1.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str10 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist9); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str21 = org.jsoup.Jsoup.clean(":lt(32)", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray32 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist33 = whitelist20.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist16.addProtocols(":matchesOwn(null", "hi!", strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist9.addAttributes("[^hi!]", strArray32); org.jsoup.safety.Whitelist whitelist39 = whitelist9.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist46 = whitelist44.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str51 = org.jsoup.Jsoup.clean(":lt(32)", whitelist50); org.jsoup.safety.Whitelist whitelist55 = whitelist50.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray62 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist63 = whitelist50.addTags(strArray62); org.jsoup.safety.Whitelist whitelist64 = whitelist46.addProtocols(":matchesOwn(null", "hi!", strArray62); java.lang.String[] strArray73 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean74 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray73); org.jsoup.safety.Whitelist whitelist75 = whitelist64.addProtocols("\n<!--hi!-->", "#document", strArray73); org.jsoup.safety.Whitelist whitelist76 = whitelist9.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray73); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray73, "<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray73); org.jsoup.safety.Whitelist whitelist80 = whitelist6.addTags(strArray73); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!$=  ]" + "'", str10, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + ":lt(32)" + "'", str21, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + ":lt(32)" + "'", str51, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist80); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.text("[:lt(32)]"); org.jsoup.nodes.Element element11 = element9.removeClass("[^hi!]"); boolean boolean12 = element9.hasText(); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str16 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist15); boolean boolean18 = whitelist15.isSafeTag(""); org.jsoup.safety.Whitelist whitelist20 = whitelist15.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Attributes attributes24 = whitelist20.getEnforcedAttributes("\n<!--hi!-->"); boolean boolean25 = element9.equals((java.lang.Object) attributes24); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[hi!$=  ]" + "'", str16, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(attributes24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes9 = whitelist7.getEnforcedAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String str10 = attributes9.toString(); java.lang.String str12 = attributes9.get("<html>\n <head></head>\n <body>\n </body>\n</html>\n<hi! class=\" #document\">\n <html>\n <head></head>\n <body></body>\n </html>\n</hi!>"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes(""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist15 = whitelist9.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist19 = whitelist9.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str20 = org.jsoup.Jsoup.clean("hi!", whitelist9); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); org.jsoup.safety.Whitelist whitelist35 = whitelist30.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray42 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist43 = whitelist30.addTags(strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist26.addProtocols(":matchesOwn(null", "hi!", strArray42); java.lang.String[] strArray53 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean54 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist44.addProtocols("\n<!--hi!-->", "#document", strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.safety.Whitelist whitelist58 = whitelist9.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray53); org.jsoup.safety.Whitelist whitelist59 = whitelist4.addAttributes("*", strArray53); boolean boolean61 = whitelist4.isSafeTag("[.]"); org.jsoup.safety.Whitelist whitelist64 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes66 = whitelist64.getEnforcedAttributes("#text"); java.lang.String str67 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist64); org.jsoup.safety.Whitelist whitelist71 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist73 = whitelist71.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist75 = whitelist73.preserveRelativeLinks(false); java.lang.String[] strArray84 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean85 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray84); org.jsoup.safety.Whitelist whitelist86 = whitelist75.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray84); boolean boolean87 = org.jsoup.helper.StringUtil.in("#text", strArray84); boolean boolean88 = org.jsoup.helper.StringUtil.in("\n<!---->", strArray84); org.jsoup.safety.Whitelist whitelist89 = whitelist64.addAttributes("[:lt(32)]", strArray84); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray84); org.jsoup.safety.Whitelist whitelist91 = whitelist4.addTags(strArray84); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(attributes66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(strArray84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(whitelist89); org.junit.Assert.assertNotNull(whitelist91); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str15 = org.jsoup.Jsoup.clean(":lt(32)", whitelist14); boolean boolean17 = whitelist14.isSafeTag(""); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = document21.removeClass("hi!"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Element element36 = document30.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document30.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.prettyPrint(false); org.jsoup.nodes.Document document40 = document21.outputSettings(outputSettings39); java.lang.String str41 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist14, outputSettings39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str45 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist44); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str56 = org.jsoup.Jsoup.clean(":lt(32)", whitelist55); org.jsoup.safety.Whitelist whitelist60 = whitelist55.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray67 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist68 = whitelist55.addTags(strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist51.addProtocols(":matchesOwn(null", "hi!", strArray67); java.lang.String[] strArray78 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean79 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray78); org.jsoup.safety.Whitelist whitelist80 = whitelist69.addProtocols("\n<!--hi!-->", "#document", strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78); org.jsoup.safety.Whitelist whitelist83 = whitelist44.addAttributes("*", strArray78); org.jsoup.safety.Whitelist whitelist84 = whitelist14.addTags(strArray78); boolean boolean85 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray78); org.jsoup.safety.Whitelist whitelist86 = whitelist4.addAttributes(":matchesOwn(null", strArray78); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray78, "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ":lt(32)" + "'", str15, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[:lt(32)]" + "'", str41, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[hi!$=  ]" + "'", str45, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + ":lt(32)" + "'", str56, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(strArray78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(whitelist86); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->"); org.jsoup.nodes.Document document3 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element5 = document3.appendElement("#document"); org.jsoup.nodes.Element element6 = element5.lastElementSibling(); org.jsoup.nodes.Element element7 = element6.lastElementSibling(); org.jsoup.nodes.Element element9 = element7.appendText("     "); org.jsoup.select.Elements elements10 = element7.parents(); boolean boolean11 = tag1.equals((java.lang.Object) element7); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner15 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); java.lang.String[] strArray29 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean30 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray29); org.jsoup.safety.Whitelist whitelist31 = whitelist20.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray29); org.jsoup.safety.Whitelist whitelist32 = whitelist14.addTags(strArray29); boolean boolean33 = tag1.equals((java.lang.Object) whitelist14); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(element6); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); org.jsoup.safety.Whitelist whitelist5 = whitelist2.preserveRelativeLinks(false); boolean boolean7 = whitelist2.isSafeTag(""); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Node node22 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node23 = document21.before(node22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj3 = objList0.peekFirst(); objList0.addFirst((java.lang.Object) ":gt(100)"); java.lang.String str6 = objList0.toString(); java.lang.Object obj7 = objList0.removeFirst(); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document11, "hi!"); org.jsoup.nodes.Element element15 = document11.tagName("hi!"); org.jsoup.nodes.Element element17 = document11.append(""); org.jsoup.nodes.Element element20 = document11.attr("#document", "#document"); java.util.List<org.jsoup.nodes.Node> nodeList21 = element20.siblingNodes(); boolean boolean22 = objList0.removeAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList21); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList23 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean25 = objList23.equals((java.lang.Object) ":lt(32)"); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList31 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document29, "hi!"); org.jsoup.nodes.Element element33 = document29.tagName("hi!"); org.jsoup.nodes.Element element35 = document29.append(""); java.lang.String str36 = element35.toString(); int int37 = objList23.indexOf((java.lang.Object) element35); boolean boolean38 = objList0.remove((java.lang.Object) objList23); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner42 = new org.jsoup.safety.Cleaner(whitelist41); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining45 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document47 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList53 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document51, "hi!"); org.jsoup.nodes.Element element55 = document51.tagName("hi!"); org.jsoup.nodes.Element element57 = document51.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings58 = document51.outputSettings(); boolean boolean59 = attributeWithValueContaining45.matches((org.jsoup.nodes.Element) document47, (org.jsoup.nodes.Element) document51); org.jsoup.nodes.Document document60 = cleaner42.clean(document51); org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str63 = document62.toString(); java.lang.String str64 = document62.baseUri(); org.jsoup.nodes.Document document65 = cleaner42.clean(document62); org.jsoup.nodes.Document document66 = document65.clone(); boolean boolean67 = objList0.offer((java.lang.Object) document66); java.util.Iterator<java.lang.Object> objItor68 = objList0.iterator(); org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList74 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document72, "hi!"); org.jsoup.nodes.Element element76 = document72.text(""); org.jsoup.nodes.Document document80 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document80, "hi!"); org.jsoup.nodes.Element element84 = document80.tagName("hi!"); org.jsoup.nodes.Element element86 = document80.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings87 = document80.outputSettings(); org.jsoup.nodes.Document document88 = document72.outputSettings(outputSettings87); org.jsoup.nodes.Document document89 = document72.normalise(); org.jsoup.nodes.Element element91 = document89.createElement(":lt(32)"); org.jsoup.parser.Tag tag92 = element91.tag(); boolean boolean93 = objList0.removeFirstOccurrence((java.lang.Object) tag92); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(obj3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[:gt(100)]" + "'", str6, "[:gt(100)]"); org.junit.Assert.assertEquals("'" + obj7 + "' != '" + ":gt(100)" + "'", obj7, ":gt(100)"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(nodeList31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str36, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(objItor68); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertNotNull(document88); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertNotNull(tag92); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element13 = document10.empty(); org.jsoup.nodes.Element element15 = document10.removeClass("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.prettyPrint(false); org.jsoup.nodes.Document document29 = document10.outputSettings(outputSettings28); java.lang.String str30 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist3, outputSettings28); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings28.indentAmount((int) (short) 0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)" + "'", str4, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[:lt(32)]" + "'", str30, "[:lt(32)]"); org.junit.Assert.assertNotNull(outputSettings32); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute(":eq(1)", "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); java.lang.String str8 = org.jsoup.Jsoup.clean(":matches(null", whitelist1); org.jsoup.safety.Whitelist whitelist12 = whitelist1.addEnforcedAttribute("[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]", "[<hi!>\n [^hi!]\n</hi!>]", ":containsOwn("); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + ":matches(null" + "'", str8, ":matches(null"); org.junit.Assert.assertNotNull(whitelist12); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.nodes.Element element76 = document8.nextElementSibling(); java.lang.String str77 = document8.html(); org.jsoup.nodes.Node node78 = document8.parent(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNull(node78); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.util.Spliterator<java.lang.Object> objSpliterator24 = objList0.spliterator(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); java.lang.String str32 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList30, "#document"); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList30); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining40 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); boolean boolean54 = attributeWithValueContaining40.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Document document55 = cleaner37.clean(document46); boolean boolean56 = objList0.contains((java.lang.Object) document46); java.lang.Object obj57 = objList0.pollFirst(); java.util.ListIterator<java.lang.Object> objItor58 = objList0.listIterator(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(objSpliterator24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\nhi!" + "'", str32, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(obj57); org.junit.Assert.assertNotNull(objItor58); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); org.jsoup.nodes.Element element38 = document25.appendText(".[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]"); org.jsoup.nodes.Element element39 = document25.empty(); org.jsoup.nodes.Document document40 = element39.ownerDocument(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(document40); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings32 = document25.outputSettings(); org.jsoup.select.Elements elements34 = document25.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element36 = document25.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes37 = document25.attributes(); org.jsoup.nodes.Element element39 = document25.prepend("[^hi!]"); org.jsoup.nodes.Element element41 = document25.html("[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]"); org.jsoup.nodes.Document document42 = document25.normalise(); org.jsoup.nodes.Document document43 = cleaner3.clean(document42); org.jsoup.nodes.Document document44 = document43.ownerDocument(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNull(element36); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document44); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("<html>\n <head></head>\n <body></body>\n</html>", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.nodes.Element element13 = element11.tagName("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment(""); boolean boolean16 = attributeWithValueStarting2.matches(element11, (org.jsoup.nodes.Element) document15); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes23 = whitelist21.getEnforcedAttributes("#text"); java.lang.String str24 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist21); java.lang.String str25 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist21); org.jsoup.select.Evaluator.Class class28 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.select.Elements elements41 = document32.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element43 = document32.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes44 = document32.attributes(); org.jsoup.nodes.Element element46 = document32.prepend("[^hi!]"); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.tagName("hi!"); org.jsoup.nodes.Element element56 = document50.append(""); org.jsoup.nodes.Element element59 = document50.attr("#document", "#document"); org.jsoup.nodes.Element element60 = document50.body(); boolean boolean61 = class28.matches((org.jsoup.nodes.Element) document32, (org.jsoup.nodes.Element) document50); org.jsoup.nodes.Attribute attribute64 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean65 = whitelist21.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document32, attribute64); org.jsoup.nodes.Document document68 = org.jsoup.parser.Parser.parseBodyFragment(":gt(100)", ""); org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList74 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document72, "hi!"); org.jsoup.nodes.Element element76 = document72.tagName("hi!"); org.jsoup.nodes.Element element78 = document72.append(""); org.jsoup.nodes.Element element80 = document72.toggleClass("#document"); java.lang.String str81 = document72.title(); org.jsoup.nodes.Element element82 = document72.head(); org.jsoup.nodes.Element element83 = document68.appendChild((org.jsoup.nodes.Node) element82); boolean boolean84 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document32, element82); java.lang.String str85 = document32.title(); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(attributes23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  ^=hi!]" + "'", str25, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(elements41); org.junit.Assert.assertNull(element43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(attribute64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, ""); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, ""); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.prettyPrint(false); boolean boolean22 = outputSettings21.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.prettyPrint(false); java.nio.charset.Charset charset25 = outputSettings21.charset(); java.lang.String str26 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>^=.[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]]", ":lt(10)", whitelist8, outputSettings21); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(charset25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[\n \n \n [^hi!]\n \n^=.[\n\n \n \n^=hi!]]" + "'", str26, "[\n \n \n [^hi!]\n \n^=.[\n\n \n \n^=hi!]]"); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.select.Elements elements77 = document74.getElementsContainingOwnText("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(elements77); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist0.addEnforcedAttribute(":eq(1)", "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str13 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str24 = org.jsoup.Jsoup.clean(":lt(32)", whitelist23); org.jsoup.safety.Whitelist whitelist28 = whitelist23.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray35 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist36 = whitelist23.addTags(strArray35); org.jsoup.safety.Whitelist whitelist37 = whitelist19.addProtocols(":matchesOwn(null", "hi!", strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist12.addAttributes("[^hi!]", strArray35); org.jsoup.safety.Whitelist whitelist42 = whitelist12.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str54 = org.jsoup.Jsoup.clean(":lt(32)", whitelist53); org.jsoup.safety.Whitelist whitelist58 = whitelist53.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray65 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist66 = whitelist53.addTags(strArray65); org.jsoup.safety.Whitelist whitelist67 = whitelist49.addProtocols(":matchesOwn(null", "hi!", strArray65); java.lang.String[] strArray76 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean77 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray76); org.jsoup.safety.Whitelist whitelist78 = whitelist67.addProtocols("\n<!--hi!-->", "#document", strArray76); org.jsoup.safety.Whitelist whitelist79 = whitelist12.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray76); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray76, "[:gt(100)]=\"\""); boolean boolean82 = org.jsoup.helper.StringUtil.in("", strArray76); org.jsoup.safety.Whitelist whitelist83 = whitelist6.addProtocols("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[hi!$=hi!]", strArray76); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!$=  ]" + "'", str13, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + ":lt(32)" + "'", str24, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + ":lt(32)" + "'", str54, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist79); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(whitelist83); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str15 = org.jsoup.Jsoup.clean(":lt(32)", whitelist14); org.jsoup.safety.Whitelist whitelist19 = whitelist14.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray26 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist27 = whitelist14.addTags(strArray26); org.jsoup.safety.Whitelist whitelist28 = whitelist10.addProtocols(":matchesOwn(null", "hi!", strArray26); org.jsoup.safety.Whitelist whitelist29 = whitelist3.addAttributes("[^hi!]", strArray26); org.jsoup.safety.Whitelist whitelist33 = whitelist3.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); java.lang.String str34 = org.jsoup.Jsoup.clean("<<html>\n <head></head>\n <body></body>\n</html>></<html>\n <head></head>\n <body></body>\n</html>><html><head><title>hi&excl;</title></head><body></body></html>", whitelist33); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ":lt(32)" + "'", str15, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "&lt;  &gt;  &gt;hi!" + "'", str34, "&lt;  &gt;  &gt;hi!"); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.select.Elements elements13 = element11.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements15 = element11.getElementsByClass("[:lt(32)]"); boolean boolean16 = tag1.equals((java.lang.Object) elements15); boolean boolean17 = tag1.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str22 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist21); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str33 = org.jsoup.Jsoup.clean(":lt(32)", whitelist32); org.jsoup.safety.Whitelist whitelist37 = whitelist32.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray44 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist45 = whitelist32.addTags(strArray44); org.jsoup.safety.Whitelist whitelist46 = whitelist28.addProtocols(":matchesOwn(null", "hi!", strArray44); org.jsoup.safety.Whitelist whitelist47 = whitelist21.addAttributes("[^hi!]", strArray44); org.jsoup.safety.Whitelist whitelist51 = whitelist21.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes53 = whitelist21.getEnforcedAttributes(""); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag1, " hi!", attributes53); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator55 = attributes53.spliterator(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!$=  ]" + "'", str22, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ":lt(32)" + "'", str33, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(attributeSpliterator55); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("[^hi!]"); java.lang.String str2 = tag1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); java.lang.String str13 = element12.toString(); boolean boolean15 = element12.hasAttr(""); element12.setBaseUri("[hi!$=  ]"); org.jsoup.nodes.Element element19 = element12.html(":lt(1)"); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining26 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document28 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); boolean boolean40 = attributeWithValueContaining26.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document32); org.jsoup.nodes.Document document41 = cleaner23.clean(document32); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str44 = document43.toString(); java.lang.String str45 = document43.baseUri(); org.jsoup.nodes.Document document46 = cleaner23.clean(document43); org.jsoup.nodes.Document.QuirksMode quirksMode47 = document46.quirksMode(); boolean boolean48 = tag1.matches(element19, (org.jsoup.nodes.Element) document46); java.util.List<org.jsoup.nodes.DataNode> dataNodeList49 = document46.dataNodes(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^hi!]" + "'", str2, "[^hi!]"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertTrue("'" + quirksMode47 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode47.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(dataNodeList49); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); java.lang.String str36 = document25.title(); org.jsoup.nodes.Element element38 = document25.removeClass(":eq(1)"); org.jsoup.select.Evaluator.Class class40 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList46 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document44, "hi!"); org.jsoup.nodes.Element element48 = document44.tagName("hi!"); org.jsoup.nodes.Element element50 = document44.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document44.outputSettings(); org.jsoup.select.Elements elements53 = document44.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element55 = document44.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes56 = document44.attributes(); org.jsoup.nodes.Element element58 = document44.prepend("[^hi!]"); org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList64 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document62, "hi!"); org.jsoup.nodes.Element element66 = document62.tagName("hi!"); org.jsoup.nodes.Element element68 = document62.append(""); org.jsoup.nodes.Element element71 = document62.attr("#document", "#document"); org.jsoup.nodes.Element element72 = document62.body(); boolean boolean73 = class40.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document62); org.jsoup.nodes.Node node74 = document62.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode75 = document62.quirksMode(); org.jsoup.nodes.Document document76 = document25.quirksMode(quirksMode75); org.jsoup.nodes.Document document80 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document80, "hi!"); org.jsoup.nodes.Element element84 = document80.tagName("hi!"); org.jsoup.nodes.Element element86 = document80.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings87 = document80.outputSettings(); org.jsoup.select.Elements elements89 = document80.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element91 = document80.removeClass("[:lt(32)]"); org.jsoup.select.Elements elements94 = document80.getElementsByAttributeValueNot("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); document80.title("<html>\n <head></head>\n <body>\n </body>\n</html>"); org.jsoup.nodes.Document.QuirksMode quirksMode97 = document80.quirksMode(); org.jsoup.nodes.Document document98 = document25.quirksMode(quirksMode97); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(nodeList46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNull(element55); org.junit.Assert.assertNotNull(attributes56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(nodeList64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(node74); org.junit.Assert.assertTrue("'" + quirksMode75 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode75.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertNotNull(elements89); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertNotNull(elements94); org.junit.Assert.assertTrue("'" + quirksMode97 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode97.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document98); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); org.jsoup.safety.Whitelist whitelist6 = whitelist1.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); boolean boolean10 = whitelist6.isSafeTag("[<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>^=.[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList3 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element11 = document7.text(""); int int12 = objList3.lastIndexOf((java.lang.Object) document7); objList0.addFirst((java.lang.Object) document7); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element20 = document17.empty(); org.jsoup.nodes.Element element22 = document17.removeClass("hi!"); boolean boolean23 = objList0.equals((java.lang.Object) "hi!"); java.util.ListIterator<java.lang.Object> objItor25 = objList0.listIterator(1); java.lang.Object obj26 = objList0.getLast(); java.lang.Object obj27 = objList0.getLast(); java.lang.Object obj29 = objList0.remove(0); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist32); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining36 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document38 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document42, "hi!"); org.jsoup.nodes.Element element46 = document42.tagName("hi!"); org.jsoup.nodes.Element element48 = document42.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); boolean boolean50 = attributeWithValueContaining36.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document42); org.jsoup.nodes.Document document51 = cleaner33.clean(document42); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element59 = document55.tagName("hi!"); org.jsoup.nodes.Element element61 = document55.append(""); java.lang.String str62 = document55.toString(); java.lang.String str63 = document55.id(); org.jsoup.nodes.Node node64 = document55.parent(); org.jsoup.nodes.Document document65 = cleaner33.clean(document55); java.lang.String str66 = document55.title(); org.jsoup.nodes.Element element68 = document55.removeClass(":eq(1)"); objList0.addLast((java.lang.Object) element68); java.lang.Object obj70 = objList0.pollLast(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(objItor25); org.junit.Assert.assertNotNull(obj26); org.junit.Assert.assertEquals(obj26.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(obj27); org.junit.Assert.assertEquals(obj27.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(obj29); org.junit.Assert.assertEquals(obj29.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNull(node64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(obj70); org.junit.Assert.assertEquals(obj70.toString(), "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "<html>\n <head></head>\n <body></body>\n</html>"); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting38 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("<html>\n <head></head>\n <body></body>\n</html>", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str39 = attributeWithValueStarting38.toString(); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document43, "hi!"); org.jsoup.nodes.Element element47 = document43.tagName("hi!"); org.jsoup.nodes.Element element49 = document43.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document43.dataNodes(); org.jsoup.nodes.Node node51 = document43.previousSibling(); org.jsoup.select.Evaluator.Class class53 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element68 = document57.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes69 = document57.attributes(); org.jsoup.nodes.Element element71 = document57.prepend("[^hi!]"); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList77 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document75, "hi!"); org.jsoup.nodes.Element element79 = document75.tagName("hi!"); org.jsoup.nodes.Element element81 = document75.append(""); org.jsoup.nodes.Element element84 = document75.attr("#document", "#document"); org.jsoup.nodes.Element element85 = document75.body(); boolean boolean86 = class53.matches((org.jsoup.nodes.Element) document57, (org.jsoup.nodes.Element) document75); org.jsoup.nodes.Node node87 = document75.clone(); document75.setBaseUri("\nhi!"); boolean boolean90 = attributeWithValueStarting38.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document75); org.jsoup.nodes.Document document91 = cleaner3.clean(document75); org.jsoup.select.Elements elements93 = document91.getElementsMatchingText(" text=\"[:gt(100)]\" #document=\"#document\""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]" + "'", str39, "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNull(node51); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNull(element68); org.junit.Assert.assertNotNull(attributes69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(nodeList77); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertNotNull(node87); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertNotNull(elements93); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Element element31 = document26.removeClass("hi!"); org.jsoup.select.Elements elements34 = document26.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); objList0.push((java.lang.Object) "[:lt(32)]"); java.lang.Object obj36 = objList0.pollFirst(); java.lang.Object obj37 = objList0.pop(); java.lang.Object obj38 = objList0.pollFirst(); org.jsoup.nodes.Comment comment41 = new org.jsoup.nodes.Comment("", ""); java.lang.String str42 = comment41.getData(); boolean boolean43 = objList0.offerFirst((java.lang.Object) comment41); org.jsoup.select.Evaluator.Id id45 = new org.jsoup.select.Evaluator.Id("hi!"); boolean boolean46 = objList0.remove((java.lang.Object) id45); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.text(""); org.jsoup.nodes.Element element55 = document50.head(); boolean boolean56 = objList0.offerFirst((java.lang.Object) element55); org.jsoup.safety.Whitelist whitelist58 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist60 = whitelist58.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner61 = new org.jsoup.safety.Cleaner(whitelist60); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining64 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document66 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList72 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document70, "hi!"); org.jsoup.nodes.Element element74 = document70.tagName("hi!"); org.jsoup.nodes.Element element76 = document70.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings77 = document70.outputSettings(); boolean boolean78 = attributeWithValueContaining64.matches((org.jsoup.nodes.Element) document66, (org.jsoup.nodes.Element) document70); org.jsoup.nodes.Document document79 = cleaner61.clean(document70); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str82 = document81.toString(); java.lang.String str83 = document81.baseUri(); org.jsoup.nodes.Document document84 = cleaner61.clean(document81); org.jsoup.select.Elements elements85 = document84.siblingElements(); objList0.add((int) (byte) 1, (java.lang.Object) elements85); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "[:lt(32)]" + "'", obj36, "[:lt(32)]"); org.junit.Assert.assertNotNull(obj37); org.junit.Assert.assertEquals(obj37.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNull(obj38); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(nodeList72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(outputSettings77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str82, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, ""); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertNotNull(elements85); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); org.jsoup.parser.Parser parser2 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.parser.Parser parser4 = parser2.setTrackErrors(0); boolean boolean5 = parser2.isTrackErrors(); org.jsoup.parser.Parser parser7 = parser2.setTrackErrors((int) (byte) 0); org.jsoup.nodes.Document document10 = parser2.parseInput(":lt(10)", ":eq(1)"); org.jsoup.nodes.Element element11 = document10.clone(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner15 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining18 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document20 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList26 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document24, "hi!"); org.jsoup.nodes.Element element28 = document24.tagName("hi!"); org.jsoup.nodes.Element element30 = document24.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings31 = document24.outputSettings(); boolean boolean32 = attributeWithValueContaining18.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Document document33 = cleaner15.clean(document24); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element41 = document37.tagName("hi!"); org.jsoup.nodes.Element element43 = document37.append(""); java.lang.String str44 = document37.toString(); java.lang.String str45 = document37.id(); org.jsoup.nodes.Node node46 = document37.parent(); org.jsoup.nodes.Document document47 = cleaner15.clean(document37); java.lang.String str48 = document37.title(); org.jsoup.nodes.Element element50 = document37.removeClass(":eq(1)"); org.jsoup.nodes.Element element51 = document37.clone(); org.jsoup.nodes.Element element53 = document37.prependText("<html>\n <head></head>\n <body></body>\n</html>:containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean54 = document10.equals((java.lang.Object) document37); org.jsoup.nodes.Element element55 = null; // The following exception was thrown during execution in test generation try { boolean boolean56 = matches1.matches((org.jsoup.nodes.Element) document37, element55); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(parser2); org.junit.Assert.assertNotNull(parser4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(parser7); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(nodeList26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(outputSettings31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNull(node46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, ""); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Element element23 = document21.html("#comment"); org.jsoup.nodes.Element element26 = document21.attr("[:lt(32)*=]", "[[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]$=[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element26); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.util.Spliterator<java.lang.Object> objSpliterator24 = objList0.spliterator(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); java.lang.String str32 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList30, "#document"); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList30); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining40 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); boolean boolean54 = attributeWithValueContaining40.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Document document55 = cleaner37.clean(document46); boolean boolean56 = objList0.contains((java.lang.Object) document46); java.lang.Object obj57 = objList0.removeLast(); java.util.Iterator<java.lang.Object> objItor58 = objList0.descendingIterator(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(objSpliterator24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\nhi!" + "'", str32, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(obj57); org.junit.Assert.assertNotNull(objItor58); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Node node35 = element34.parent(); org.jsoup.select.Elements elements37 = element34.getElementsMatchingText("[[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]$=[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]]"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document41, "hi!"); org.jsoup.nodes.Element element45 = document41.tagName("hi!"); org.jsoup.nodes.Element element47 = document41.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings48 = document41.outputSettings(); org.jsoup.select.Elements elements50 = document41.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element52 = document41.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes53 = document41.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap54 = attributes53.dataset(); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList60 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document58, "hi!"); org.jsoup.nodes.Element element62 = document58.tagName("hi!"); org.jsoup.nodes.Element element64 = document58.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings65 = document58.outputSettings(); org.jsoup.select.Elements elements67 = document58.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element69 = document58.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes70 = document58.attributes(); attributes53.addAll(attributes70); org.jsoup.nodes.Attribute attribute74 = new org.jsoup.nodes.Attribute(":lt(32)", ""); attributes70.put(attribute74); org.jsoup.nodes.Document document77 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element79 = document77.appendElement("#document"); org.jsoup.nodes.Element element80 = element79.lastElementSibling(); org.jsoup.nodes.Element element81 = element80.lastElementSibling(); boolean boolean82 = attribute74.equals((java.lang.Object) element81); attribute74.setKey("\n<!--[hi!$=  ]-->"); boolean boolean85 = whitelist25.isSafeAttribute("<html> <head></head> <body> </body> </html>", element34, attribute74); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node86 = element34.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNull(node35); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNull(element52); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(strMap54); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(nodeList60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(outputSettings65); org.junit.Assert.assertNotNull(elements67); org.junit.Assert.assertNull(element69); org.junit.Assert.assertNotNull(attributes70); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.jsoup.select.Evaluator.AttributeStarting attributeStarting1 = new org.jsoup.select.Evaluator.AttributeStarting(":gt(100)"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining8 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document10 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document14, "hi!"); org.jsoup.nodes.Element element18 = document14.tagName("hi!"); org.jsoup.nodes.Element element20 = document14.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings21 = document14.outputSettings(); boolean boolean22 = attributeWithValueContaining8.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document document23 = cleaner5.clean(document14); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str26 = document25.toString(); java.lang.String str27 = document25.baseUri(); org.jsoup.nodes.Document document28 = cleaner5.clean(document25); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str31 = document30.toString(); java.lang.String str32 = document30.baseUri(); org.jsoup.nodes.Document.QuirksMode quirksMode33 = document30.quirksMode(); boolean boolean35 = document30.hasClass(":lt(32)=\"[.]\""); boolean boolean36 = cleaner5.isValid(document30); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList37 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean39 = objList37.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList40 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList46 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document44, "hi!"); org.jsoup.nodes.Element element48 = document44.text(""); int int49 = objList40.lastIndexOf((java.lang.Object) document44); objList37.addFirst((java.lang.Object) document44); boolean boolean51 = cleaner5.isValid(document44); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element55 = document54.body(); org.jsoup.select.Elements elements57 = document54.getElementsMatchingText(""); org.jsoup.nodes.TextNode textNode60 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "#document"); java.lang.String str61 = textNode60.text(); java.lang.String str62 = textNode60.toString(); org.jsoup.nodes.Node node63 = textNode60.parent(); org.jsoup.nodes.Node node66 = textNode60.attr(".<html>\n <head></head>\n <body></body>\n</html>", ""); boolean boolean68 = textNode60.hasAttr(":lt(32)"); org.jsoup.nodes.Element element69 = document54.prependChild((org.jsoup.nodes.Node) textNode60); org.jsoup.select.Elements elements70 = document54.parents(); boolean boolean71 = document54.isBlock(); org.jsoup.nodes.Document document72 = cleaner5.clean(document54); java.lang.String str73 = document54.ownText(); org.jsoup.nodes.Element element74 = null; // The following exception was thrown during execution in test generation try { boolean boolean75 = attributeStarting1.matches((org.jsoup.nodes.Element) document54, element74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str31, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertTrue("'" + quirksMode33 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode33.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(nodeList46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1)); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertNotNull(textNode60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!"); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!"); org.junit.Assert.assertNull(node63); org.junit.Assert.assertNotNull(node66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(elements70); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!"); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("#text"); java.lang.String str7 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist4); org.jsoup.select.Evaluator.Class class11 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document15, "hi!"); org.jsoup.nodes.Element element19 = document15.tagName("hi!"); org.jsoup.nodes.Element element21 = document15.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); org.jsoup.select.Elements elements24 = document15.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element26 = document15.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes27 = document15.attributes(); org.jsoup.nodes.Element element29 = document15.prepend("[^hi!]"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); org.jsoup.nodes.Element element42 = document33.attr("#document", "#document"); org.jsoup.nodes.Element element43 = document33.body(); boolean boolean44 = class11.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Attribute attribute47 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean48 = whitelist4.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document15, attribute47); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist53 = whitelist51.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str60 = org.jsoup.Jsoup.clean(":lt(32)", whitelist59); org.jsoup.safety.Whitelist whitelist64 = whitelist59.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray71 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist72 = whitelist59.addTags(strArray71); org.jsoup.safety.Whitelist whitelist73 = whitelist55.addProtocols(":matchesOwn(null", "hi!", strArray71); org.jsoup.safety.Whitelist whitelist74 = whitelist4.addProtocols("[^\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->]", "<hi!>\n [^hi!]\n</hi!>", strArray71); boolean boolean76 = whitelist4.isSafeTag(" .<html>\n <head></head>\n <body></body>\n</html>=\"\""); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[  ^=hi!]" + "'", str8, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNull(element26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + ":lt(32)" + "'", str60, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList3 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element11 = document7.text(""); int int12 = objList3.lastIndexOf((java.lang.Object) document7); objList0.addFirst((java.lang.Object) document7); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element20 = document17.empty(); org.jsoup.nodes.Element element22 = document17.removeClass("hi!"); boolean boolean23 = objList0.equals((java.lang.Object) "hi!"); java.util.Iterator<java.lang.Object> objItor24 = objList0.iterator(); objList0.clear(); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist33 = whitelist27.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str34 = org.jsoup.Jsoup.clean("\nhi!", whitelist33); objList0.addLast((java.lang.Object) "\nhi!"); java.lang.Object obj36 = objList0.pollFirst(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(objItor24); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "\nhi!" + "'", obj36, "\nhi!"); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute(":eq(1)", "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); org.jsoup.nodes.Attributes attributes10 = whitelist2.getEnforcedAttributes(" hi!"); java.lang.String str11 = org.jsoup.Jsoup.clean("<html> <head></head> <body> [:lt(32)] </body> </html>", "#[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(attributes10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[:lt(32)]" + "'", str11, "[:lt(32)]"); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj3 = objList0.peekFirst(); objList0.addFirst((java.lang.Object) ":gt(100)"); java.lang.String str6 = objList0.toString(); java.lang.Object obj7 = objList0.removeFirst(); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document11, "hi!"); org.jsoup.nodes.Element element15 = document11.tagName("hi!"); org.jsoup.nodes.Element element17 = document11.append(""); org.jsoup.nodes.Element element20 = document11.attr("#document", "#document"); java.util.List<org.jsoup.nodes.Node> nodeList21 = element20.siblingNodes(); boolean boolean22 = objList0.removeAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList21); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList23 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean25 = objList23.equals((java.lang.Object) ":lt(32)"); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList31 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document29, "hi!"); org.jsoup.nodes.Element element33 = document29.tagName("hi!"); org.jsoup.nodes.Element element35 = document29.append(""); java.lang.String str36 = element35.toString(); int int37 = objList23.indexOf((java.lang.Object) element35); boolean boolean38 = objList0.remove((java.lang.Object) objList23); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner42 = new org.jsoup.safety.Cleaner(whitelist41); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining45 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document47 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList53 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document51, "hi!"); org.jsoup.nodes.Element element55 = document51.tagName("hi!"); org.jsoup.nodes.Element element57 = document51.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings58 = document51.outputSettings(); boolean boolean59 = attributeWithValueContaining45.matches((org.jsoup.nodes.Element) document47, (org.jsoup.nodes.Element) document51); org.jsoup.nodes.Document document60 = cleaner42.clean(document51); org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str63 = document62.toString(); java.lang.String str64 = document62.baseUri(); org.jsoup.nodes.Document document65 = cleaner42.clean(document62); org.jsoup.nodes.Document document66 = document65.clone(); boolean boolean67 = objList0.offer((java.lang.Object) document66); java.lang.Object obj68 = objList0.pollLast(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(obj3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[:gt(100)]" + "'", str6, "[:gt(100)]"); org.junit.Assert.assertEquals("'" + obj7 + "' != '" + ":gt(100)" + "'", obj7, ":gt(100)"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(nodeList31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str36, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(obj68); org.junit.Assert.assertEquals(obj68.toString(), "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "<html>\n <head></head>\n <body>  \n </body>\n</html>"); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("#text"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); java.lang.String str8 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist7); boolean boolean10 = whitelist7.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray20 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean21 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray20); boolean boolean22 = org.jsoup.helper.StringUtil.in(" hi!", strArray20); org.jsoup.safety.Whitelist whitelist23 = whitelist7.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray20); org.jsoup.safety.Whitelist whitelist24 = whitelist0.addAttributes(":lt(32)=&quot;&quot;=&quot;.&quot;", strArray20); org.jsoup.helper.Validate.notNull((java.lang.Object) whitelist0, "[:gt(100)]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "." + "'", str8, "."); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings10 = document3.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.prettyPrint(false); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str18 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist17); boolean boolean20 = whitelist17.isSafeTag(""); org.jsoup.safety.Whitelist whitelist22 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist26 = whitelist22.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>  \n </body>\n</html>", "#comment"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.tagName("hi!"); org.jsoup.nodes.Element element36 = document30.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document30.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings37.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.escapeMode(escapeMode41); org.jsoup.nodes.Entities.EscapeMode escapeMode43 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.escapeMode(escapeMode43); boolean boolean45 = outputSettings42.prettyPrint(); java.lang.String str46 = org.jsoup.Jsoup.clean(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist22, outputSettings42); java.nio.charset.Charset charset47 = outputSettings42.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings10.charset(charset47); java.nio.charset.Charset charset49 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings10.charset(charset49); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[hi!$=  ]" + "'", str18, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "&colon;containsOwn&lpar;&lsqb;&colon;lt&lpar;32&rpar;&ast;&equals;&period;&NewLine; &NewLine; &NewLine;&rbrack;" + "'", str46, "&colon;containsOwn&lpar;&lsqb;&colon;lt&lpar;32&rpar;&ast;&equals;&period;&NewLine; &NewLine; &NewLine;&rbrack;"); org.junit.Assert.assertNotNull(charset47); org.junit.Assert.assertNotNull(outputSettings48); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Element element28 = document26.appendText("<html>\n <head></head>\n <body> \n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("#data", "[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]"); java.lang.String str3 = attributeWithValue2.toString(); java.lang.String str4 = attributeWithValue2.toString(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining11 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document13 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element21 = document17.tagName("hi!"); org.jsoup.nodes.Element element23 = document17.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); boolean boolean25 = attributeWithValueContaining11.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document17); org.jsoup.nodes.Document document26 = cleaner8.clean(document17); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str29 = document28.toString(); java.lang.String str30 = document28.baseUri(); org.jsoup.nodes.Document document31 = cleaner8.clean(document28); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("                                                  "); org.jsoup.nodes.Document document34 = cleaner8.clean(document33); org.jsoup.nodes.Document document36 = new org.jsoup.nodes.Document("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList42 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document40, "hi!"); org.jsoup.nodes.Element element43 = document40.empty(); org.jsoup.nodes.Element element45 = document40.removeClass("hi!"); java.lang.String str46 = document40.id(); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element53 = document50.empty(); org.jsoup.nodes.Element element55 = document50.removeClass("hi!"); java.lang.String str56 = document50.nodeName(); org.jsoup.nodes.Document.QuirksMode quirksMode57 = document50.quirksMode(); org.jsoup.nodes.Document document58 = document40.quirksMode(quirksMode57); java.lang.String str59 = document58.id(); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList65 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document63, "hi!"); org.jsoup.nodes.Element element67 = document63.tagName("hi!"); org.jsoup.nodes.Element element69 = document63.append(""); java.lang.String str70 = document63.toString(); org.jsoup.nodes.Element element72 = document63.prependElement("\nhi!"); org.jsoup.select.Elements elements74 = document63.getElementsMatchingOwnText(""); org.jsoup.nodes.Document.QuirksMode quirksMode75 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document76 = document63.quirksMode(quirksMode75); org.jsoup.nodes.Document document77 = document58.quirksMode(quirksMode75); org.jsoup.nodes.Document document78 = document36.quirksMode(quirksMode75); org.jsoup.select.Elements elements80 = document36.getElementsMatchingOwnText("[  =hi!]"); boolean boolean81 = attributeWithValue2.matches((org.jsoup.nodes.Element) document34, (org.jsoup.nodes.Element) document36); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element83 = document34.after("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]" + "'", str3, "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]" + "'", str4, "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str29, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(nodeList42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#document" + "'", str56, "#document"); org.junit.Assert.assertTrue("'" + quirksMode57 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode57.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(nodeList65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str70, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(elements74); org.junit.Assert.assertTrue("'" + quirksMode75 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode75.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); boolean boolean9 = whitelist7.isSafeTag(""); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.parser.Parser parser2 = parser0.setTrackErrors(0); boolean boolean3 = parser0.isTrackErrors(); org.jsoup.parser.Parser parser5 = parser0.setTrackErrors((int) (byte) 0); org.jsoup.nodes.Document document8 = parser0.parseInput(":lt(10)", ":eq(1)"); org.jsoup.nodes.Element element9 = document8.clone(); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist12); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining16 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document18 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document22, "hi!"); org.jsoup.nodes.Element element26 = document22.tagName("hi!"); org.jsoup.nodes.Element element28 = document22.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings29 = document22.outputSettings(); boolean boolean30 = attributeWithValueContaining16.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document22); org.jsoup.nodes.Document document31 = cleaner13.clean(document22); org.jsoup.select.Evaluator.Tag tag33 = new org.jsoup.select.Evaluator.Tag("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element41 = document37.tagName("hi!"); org.jsoup.nodes.Element element43 = document37.append(""); org.jsoup.nodes.Element element45 = element43.removeClass("hi!"); org.jsoup.select.Elements elements48 = element43.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList54 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document52, "hi!"); org.jsoup.nodes.Element element56 = document52.tagName("hi!"); boolean boolean57 = tag33.matches(element43, (org.jsoup.nodes.Element) document52); boolean boolean58 = document52.hasText(); org.jsoup.nodes.Document document59 = document52.clone(); org.jsoup.select.Elements elements62 = document52.getElementsByAttributeValueMatching("\nhi!", ":lt(32)=\"\""); org.jsoup.nodes.Document document63 = cleaner13.clean(document52); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element64 = element9.after((org.jsoup.nodes.Node) document63); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(parser0); org.junit.Assert.assertNotNull(parser2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(parser5); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(nodeList24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(nodeList54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(elements62); org.junit.Assert.assertNotNull(document63); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str4 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.safety.Whitelist whitelist8 = whitelist3.preserveRelativeLinks(false); java.lang.String str9 = org.jsoup.Jsoup.clean("#data", whitelist3); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist13 = whitelist3.addEnforcedAttribute("&lt;  &gt;  &gt;hi!", "<html>\n <head></head>\n <body>\n . &lt;!----&gt;\n </body>\n</html>[&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;^=&lt;hi!&gt;&lt;/hi!&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;]", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!$=  ]" + "'", str4, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#data" + "'", str9, "#data"); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.nodes.Attributes attributes7 = whitelist2.getEnforcedAttributes("\n<!--hi!-->"); boolean boolean9 = attributes7.hasKey("<html>\n <head></head>\n <body>\n #text\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str5 = org.jsoup.Jsoup.clean(":lt(32)", whitelist4); boolean boolean7 = whitelist4.isSafeTag(""); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document11, "hi!"); org.jsoup.nodes.Element element14 = document11.empty(); org.jsoup.nodes.Element element16 = document11.removeClass("hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList22 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document20, "hi!"); org.jsoup.nodes.Element element24 = document20.tagName("hi!"); org.jsoup.nodes.Element element26 = document20.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings27 = document20.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.prettyPrint(false); org.jsoup.nodes.Document document30 = document11.outputSettings(outputSettings29); java.lang.String str31 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist4, outputSettings29); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str42 = org.jsoup.Jsoup.clean(":lt(32)", whitelist41); org.jsoup.safety.Whitelist whitelist46 = whitelist41.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray53 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist54 = whitelist41.addTags(strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist37.addProtocols(":matchesOwn(null", "hi!", strArray53); org.jsoup.safety.Whitelist whitelist56 = whitelist4.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray53); java.lang.String str57 = org.jsoup.Jsoup.clean("[hi!$=<html> <head></head> <body></body> </html>]", whitelist4); boolean boolean59 = whitelist4.isSafeTag(":lt(32)=\"#[:lt(32)*=.&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;]\""); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":lt(32)" + "'", str5, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(nodeList22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[:lt(32)]" + "'", str31, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + ":lt(32)" + "'", str42, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[hi!$=  ]" + "'", str57, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist15 = whitelist9.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist19 = whitelist9.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str20 = org.jsoup.Jsoup.clean("hi!", whitelist9); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); org.jsoup.safety.Whitelist whitelist35 = whitelist30.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray42 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist43 = whitelist30.addTags(strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist26.addProtocols(":matchesOwn(null", "hi!", strArray42); java.lang.String[] strArray53 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean54 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist44.addProtocols("\n<!--hi!-->", "#document", strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray53); org.jsoup.safety.Whitelist whitelist58 = whitelist9.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray53); org.jsoup.safety.Whitelist whitelist59 = whitelist2.addTags(strArray53); org.jsoup.nodes.Attributes attributes61 = whitelist59.getEnforcedAttributes("[:matchesown(null!=[^[hi!$=<html>\n <head></head>\n <body></body>\n</html>]]]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(attributes61); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList42 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document40, "hi!"); org.jsoup.nodes.Element element44 = document40.tagName("hi!"); org.jsoup.nodes.Element element46 = document40.append(""); org.jsoup.nodes.Element element48 = element46.removeClass("hi!"); org.jsoup.select.Elements elements51 = element46.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.helper.Validate.notNull((java.lang.Object) element46, ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Element element55 = element46.html("#document"); java.util.Set<java.lang.String> strSet56 = element55.classNames(); org.jsoup.nodes.Element element57 = document25.classNames(strSet56); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(nodeList42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(elements51); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(strSet56); org.junit.Assert.assertNotNull(element57); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes(""); java.lang.String str9 = org.jsoup.Jsoup.clean("body", "[^:containsOwn([:lt(32)*=. ]]", whitelist6); org.jsoup.safety.Whitelist whitelist11 = whitelist6.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "body" + "'", str9, "body"); org.junit.Assert.assertNotNull(whitelist11); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.util.Spliterator<java.lang.Object> objSpliterator24 = objList0.spliterator(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); java.lang.String str32 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList30, "#document"); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList30); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining40 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); boolean boolean54 = attributeWithValueContaining40.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Document document55 = cleaner37.clean(document46); boolean boolean56 = objList0.contains((java.lang.Object) document46); java.lang.Object obj57 = objList0.pollFirst(); java.lang.Object obj58 = objList0.peekLast(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(objSpliterator24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\nhi!" + "'", str32, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(obj57); org.junit.Assert.assertNull(obj58); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str11 = org.jsoup.Jsoup.clean(":lt(32)", whitelist10); org.jsoup.safety.Whitelist whitelist15 = whitelist10.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray22 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist23 = whitelist10.addTags(strArray22); org.jsoup.safety.Whitelist whitelist24 = whitelist6.addProtocols(":matchesOwn(null", "hi!", strArray22); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings36.indentAmount((int) (short) 0); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode(); java.lang.String str42 = org.jsoup.Jsoup.clean("<<html>\n <head></head>\n <body></body>\n</html>></<html>\n <head></head>\n <body></body>\n</html>><html><head><title>hi&excl;</title></head><body></body></html>", "#root", whitelist24, outputSettings40); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings40.clone(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + ":lt(32)" + "'", str11, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "&lt;\n \n \n&gt;\n \n \n&gt;hi!" + "'", str42, "&lt;\n \n \n&gt;\n \n \n&gt;hi!"); org.junit.Assert.assertNotNull(outputSettings43); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist6); java.lang.String str10 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist6); org.jsoup.select.Evaluator.Class class13 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element21 = document17.tagName("hi!"); org.jsoup.nodes.Element element23 = document17.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); org.jsoup.select.Elements elements26 = document17.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element28 = document17.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes29 = document17.attributes(); org.jsoup.nodes.Element element31 = document17.prepend("[^hi!]"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Element element44 = document35.attr("#document", "#document"); org.jsoup.nodes.Element element45 = document35.body(); boolean boolean46 = class13.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Attribute attribute49 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean50 = whitelist6.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document17, attribute49); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist61 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str62 = org.jsoup.Jsoup.clean(":lt(32)", whitelist61); org.jsoup.safety.Whitelist whitelist66 = whitelist61.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray73 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist74 = whitelist61.addTags(strArray73); org.jsoup.safety.Whitelist whitelist75 = whitelist57.addProtocols(":matchesOwn(null", "hi!", strArray73); org.jsoup.safety.Whitelist whitelist76 = whitelist6.addProtocols("[^\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->]", "<hi!>\n [^hi!]\n</hi!>", strArray73); java.lang.String str77 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "hi!", whitelist76); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[  ^=hi!]" + "'", str10, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(elements26); org.junit.Assert.assertNull(element28); org.junit.Assert.assertNotNull(attributes29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(attribute49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + ":lt(32)" + "'", str62, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[!=hi!]" + "'", str77, "[!=hi!]"); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist7.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray16); boolean boolean20 = whitelist7.isSafeTag("#text"); java.lang.String str21 = org.jsoup.Jsoup.clean("[^<html> <head></head> <body> </body> </html>]", whitelist7); org.jsoup.nodes.Document.OutputSettings outputSettings22 = null; // The following exception was thrown during execution in test generation try { java.lang.String str23 = org.jsoup.Jsoup.clean(":contains(<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>", ".body", whitelist7, outputSettings22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[^  ]" + "'", str21, "[^  ]"); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes9 = whitelist7.getEnforcedAttributes("#text"); java.lang.String str10 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist7); java.lang.String str11 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist7); org.jsoup.select.Evaluator.Class class14 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document18.outputSettings(); org.jsoup.select.Elements elements27 = document18.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element29 = document18.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes30 = document18.attributes(); org.jsoup.nodes.Element element32 = document18.prepend("[^hi!]"); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList38 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document36, "hi!"); org.jsoup.nodes.Element element40 = document36.tagName("hi!"); org.jsoup.nodes.Element element42 = document36.append(""); org.jsoup.nodes.Element element45 = document36.attr("#document", "#document"); org.jsoup.nodes.Element element46 = document36.body(); boolean boolean47 = class14.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document36); org.jsoup.nodes.Attribute attribute50 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean51 = whitelist7.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document18, attribute50); org.jsoup.safety.Whitelist whitelist54 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist56 = whitelist54.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist58 = whitelist56.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist62 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str63 = org.jsoup.Jsoup.clean(":lt(32)", whitelist62); org.jsoup.safety.Whitelist whitelist67 = whitelist62.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray74 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist75 = whitelist62.addTags(strArray74); org.jsoup.safety.Whitelist whitelist76 = whitelist58.addProtocols(":matchesOwn(null", "hi!", strArray74); org.jsoup.safety.Whitelist whitelist77 = whitelist7.addProtocols("[^\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->]", "<hi!>\n [^hi!]\n</hi!>", strArray74); java.lang.String str78 = org.jsoup.Jsoup.clean("#[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist77); java.lang.String str79 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body></body>\n</html>#document", ":contains(:gt(100)", whitelist77); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[  ^=hi!]" + "'", str11, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNull(element29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(nodeList38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(attribute50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + ":lt(32)" + "'", str63, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(strArray74); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "#[:lt(32)*=.  ]" + "'", str78, "#[:lt(32)*=.  ]"); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "#document" + "'", str79, "#document"); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Element element31 = element29.toggleClass("#document"); org.jsoup.select.Elements elements33 = element31.getElementsByAttributeStarting(":lt(32)"); java.util.List<org.jsoup.nodes.Node> nodeList34 = element31.siblingNodes(); boolean boolean35 = objList0.retainAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList34); org.jsoup.select.Evaluator.IndexLessThan indexLessThan37 = new org.jsoup.select.Evaluator.IndexLessThan((int) ' '); java.lang.String str38 = indexLessThan37.toString(); boolean boolean39 = objList0.equals((java.lang.Object) str38); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist42); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining46 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document48 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList54 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document52, "hi!"); org.jsoup.nodes.Element element56 = document52.tagName("hi!"); org.jsoup.nodes.Element element58 = document52.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings59 = document52.outputSettings(); boolean boolean60 = attributeWithValueContaining46.matches((org.jsoup.nodes.Element) document48, (org.jsoup.nodes.Element) document52); org.jsoup.nodes.Document document61 = cleaner43.clean(document52); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str64 = document63.toString(); java.lang.String str65 = document63.baseUri(); org.jsoup.nodes.Document document66 = cleaner43.clean(document63); boolean boolean67 = objList0.offerLast((java.lang.Object) document63); org.jsoup.select.Elements elements70 = document63.getElementsByAttributeValueEnding("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", ":gt(100)"); java.lang.String str71 = document63.outerHtml(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + ":lt(32)" + "'", str38, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(nodeList54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str64, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(elements70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str71, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str6 = org.jsoup.Jsoup.clean(":lt(32)", whitelist5); boolean boolean8 = whitelist5.isSafeTag(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element15 = document12.empty(); org.jsoup.nodes.Element element17 = document12.removeClass("hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element25 = document21.tagName("hi!"); org.jsoup.nodes.Element element27 = document21.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings28 = document21.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.prettyPrint(false); org.jsoup.nodes.Document document31 = document12.outputSettings(outputSettings30); java.lang.String str32 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist5, outputSettings30); java.lang.String str33 = org.jsoup.Jsoup.clean("[.hi!=<!---->]", "<!---->", whitelist5); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":lt(32)" + "'", str6, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[:lt(32)]" + "'", str32, "[:lt(32)]"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[.hi!=]" + "'", str33, "[.hi!=]"); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document7, "hi!"); org.jsoup.nodes.Element element11 = document7.tagName("hi!"); org.jsoup.nodes.Element element13 = document7.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList14 = document7.dataNodes(); org.jsoup.parser.Tag tag15 = document7.tag(); java.lang.String str16 = document7.outerHtml(); org.jsoup.nodes.Document document17 = cleaner3.clean(document7); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = document21.removeClass("hi!"); org.jsoup.select.Elements elements29 = document21.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.select.Elements elements30 = document21.getAllElements(); java.util.List<org.jsoup.nodes.DataNode> dataNodeList31 = document21.dataNodes(); org.jsoup.nodes.Document document32 = cleaner3.clean(document21); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(nodeList9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(dataNodeList14); org.junit.Assert.assertNotNull(tag15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>" + "'", str16, "<html>\n <head></head>\n <body>\n [:lt(32)]\n </body>\n</html>"); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(elements30); org.junit.Assert.assertNotNull(dataNodeList31); org.junit.Assert.assertNotNull(document32); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); boolean boolean4 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist6 = whitelist1.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); java.lang.String str6 = org.jsoup.Jsoup.clean("\n<!--[hi!$=  ]-->", "[:gt(100)]=\"\"", whitelist5); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str12 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist11); boolean boolean14 = whitelist11.isSafeTag(""); org.jsoup.safety.Whitelist whitelist16 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist24 = whitelist18.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = whitelist18.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str29 = org.jsoup.Jsoup.clean("hi!", whitelist18); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist33 = whitelist31.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str40 = org.jsoup.Jsoup.clean(":lt(32)", whitelist39); org.jsoup.safety.Whitelist whitelist44 = whitelist39.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray51 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist52 = whitelist39.addTags(strArray51); org.jsoup.safety.Whitelist whitelist53 = whitelist35.addProtocols(":matchesOwn(null", "hi!", strArray51); java.lang.String[] strArray62 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean63 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray62); org.jsoup.safety.Whitelist whitelist64 = whitelist53.addProtocols("\n<!--hi!-->", "#document", strArray62); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray62); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray62); org.jsoup.safety.Whitelist whitelist67 = whitelist18.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray62); org.jsoup.safety.Whitelist whitelist68 = whitelist11.addTags(strArray62); org.jsoup.safety.Whitelist whitelist69 = whitelist7.addAttributes("[  ^=hi!]", strArray62); org.jsoup.safety.Whitelist whitelist70 = whitelist5.addTags(strArray62); java.lang.String str71 = org.jsoup.Jsoup.clean("#[:lt(32)*=.  ]", whitelist5); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!$=  ]" + "'", str12, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + ":lt(32)" + "'", str40, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "#[:lt(32)*=. ]" + "'", str71, "#[:lt(32)*=. ]"); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("#root", ":containsOwn(<html>\n <head></head>\n <body>  \n </body>\n</html>", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str10 = org.jsoup.Jsoup.clean(":lt(32)", whitelist9); org.jsoup.safety.Whitelist whitelist14 = whitelist9.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray21 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist22 = whitelist9.addTags(strArray21); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addProtocols(":matchesOwn(null", "hi!", strArray21); java.lang.String[] strArray32 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean33 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist23.addProtocols("\n<!--hi!-->", "#document", strArray32); boolean boolean35 = org.jsoup.helper.StringUtil.in(":eq(1)", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32, "<hi!>\n [^hi!]\n</hi!>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32, "                          "); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + ":lt(32)" + "'", str10, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); boolean boolean37 = tag36.isEmpty(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist6); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(false); java.lang.String[] strArray26 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean27 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray26); org.jsoup.safety.Whitelist whitelist28 = whitelist17.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray26); boolean boolean29 = org.jsoup.helper.StringUtil.in("#text", strArray26); boolean boolean30 = org.jsoup.helper.StringUtil.in("\n<!---->", strArray26); org.jsoup.safety.Whitelist whitelist31 = whitelist6.addAttributes("[:lt(32)]", strArray26); org.jsoup.safety.Whitelist whitelist32 = whitelist3.addTags(strArray26); boolean boolean33 = org.jsoup.Jsoup.isValid(" text=\"hi!\" #document=\"#document\"", whitelist32); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist32); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str28 = org.jsoup.Jsoup.clean(":lt(32)", whitelist27); boolean boolean30 = whitelist27.isSafeTag(""); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element37 = document34.empty(); org.jsoup.nodes.Element element39 = document34.removeClass("hi!"); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document43, "hi!"); org.jsoup.nodes.Element element47 = document43.tagName("hi!"); org.jsoup.nodes.Element element49 = document43.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings50 = document43.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.prettyPrint(false); org.jsoup.nodes.Document document53 = document34.outputSettings(outputSettings52); java.lang.String str54 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist27, outputSettings52); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str58 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist57); org.jsoup.safety.Whitelist whitelist60 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist62 = whitelist60.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist64 = whitelist62.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist68 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str69 = org.jsoup.Jsoup.clean(":lt(32)", whitelist68); org.jsoup.safety.Whitelist whitelist73 = whitelist68.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray80 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist81 = whitelist68.addTags(strArray80); org.jsoup.safety.Whitelist whitelist82 = whitelist64.addProtocols(":matchesOwn(null", "hi!", strArray80); java.lang.String[] strArray91 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean92 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray91); org.jsoup.safety.Whitelist whitelist93 = whitelist82.addProtocols("\n<!--hi!-->", "#document", strArray91); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray91); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray91); org.jsoup.safety.Whitelist whitelist96 = whitelist57.addAttributes("*", strArray91); org.jsoup.safety.Whitelist whitelist97 = whitelist27.addTags(strArray91); boolean boolean98 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", strArray91); org.jsoup.safety.Whitelist whitelist99 = whitelist21.addAttributes("<hi!></hi!>", strArray91); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + ":lt(32)" + "'", str28, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[:lt(32)]" + "'", str54, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[hi!$=  ]" + "'", str58, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + ":lt(32)" + "'", str69, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(strArray80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(strArray91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); org.junit.Assert.assertNotNull(whitelist93); org.junit.Assert.assertNotNull(whitelist96); org.junit.Assert.assertNotNull(whitelist97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertNotNull(whitelist99); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str10 = org.jsoup.Jsoup.clean(":lt(32)", whitelist9); org.jsoup.safety.Whitelist whitelist14 = whitelist9.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray21 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist22 = whitelist9.addTags(strArray21); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addProtocols(":matchesOwn(null", "hi!", strArray21); java.lang.String[] strArray32 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean33 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist23.addProtocols("\n<!--hi!-->", "#document", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32); boolean boolean37 = org.jsoup.helper.StringUtil.in("[hi!$=hi!]", strArray32); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + ":lt(32)" + "'", str10, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); java.lang.String[] strArray13 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean14 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist4.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist23 = whitelist17.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = org.jsoup.Jsoup.clean("\nhi!", whitelist23); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); boolean boolean33 = whitelist30.isSafeTag(""); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element40 = document37.empty(); org.jsoup.nodes.Element element42 = document37.removeClass("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); org.jsoup.nodes.Document document56 = document37.outputSettings(outputSettings55); java.lang.String str57 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist30, outputSettings55); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str68 = org.jsoup.Jsoup.clean(":lt(32)", whitelist67); org.jsoup.safety.Whitelist whitelist72 = whitelist67.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray79 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist80 = whitelist67.addTags(strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist63.addProtocols(":matchesOwn(null", "hi!", strArray79); org.jsoup.safety.Whitelist whitelist82 = whitelist30.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray79); org.jsoup.safety.Whitelist whitelist83 = whitelist23.addProtocols("#doctype", "[]", strArray79); org.jsoup.safety.Whitelist whitelist84 = whitelist4.addTags(strArray79); org.jsoup.safety.Cleaner cleaner85 = new org.jsoup.safety.Cleaner(whitelist4); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[:lt(32)]" + "'", str57, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + ":lt(32)" + "'", str68, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist12 = whitelist2.addEnforcedAttribute("hi!", "#document", "hi!"); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("[^hi!]", "[^[^hi!]]"); org.jsoup.nodes.Document.OutputSettings outputSettings16 = document15.outputSettings(); java.lang.String str17 = org.jsoup.Jsoup.clean("", "[!=hi!]", whitelist12, outputSettings16); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str29 = org.jsoup.Jsoup.clean(":lt(32)", whitelist28); org.jsoup.safety.Whitelist whitelist33 = whitelist28.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray40 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist41 = whitelist28.addTags(strArray40); org.jsoup.safety.Whitelist whitelist42 = whitelist24.addProtocols(":matchesOwn(null", "hi!", strArray40); java.lang.String[] strArray51 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean52 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray51); org.jsoup.safety.Whitelist whitelist53 = whitelist42.addProtocols("\n<!--hi!-->", "#document", strArray51); boolean boolean54 = org.jsoup.helper.StringUtil.in(":eq(1)", strArray51); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray51, "<hi!>\n [^hi!]\n</hi!>"); org.jsoup.safety.Whitelist whitelist57 = whitelist12.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray51); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + ":lt(32)" + "'", str29, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(whitelist57); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("[^hi!]"); java.lang.String str2 = tag1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); java.lang.String str13 = element12.toString(); boolean boolean15 = element12.hasAttr(""); element12.setBaseUri("[hi!$=  ]"); org.jsoup.nodes.Element element19 = element12.html(":lt(1)"); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining26 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document28 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); boolean boolean40 = attributeWithValueContaining26.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document32); org.jsoup.nodes.Document document41 = cleaner23.clean(document32); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str44 = document43.toString(); java.lang.String str45 = document43.baseUri(); org.jsoup.nodes.Document document46 = cleaner23.clean(document43); org.jsoup.nodes.Document.QuirksMode quirksMode47 = document46.quirksMode(); boolean boolean48 = tag1.matches(element19, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Element element50 = document46.html(" text=&quot;hi!&quot; #document=&quot;#document&quot;"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^hi!]" + "'", str2, "[^hi!]"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertTrue("'" + quirksMode47 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode47.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(element50); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); java.util.regex.Pattern pattern23 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching24 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\nhi!", pattern23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element31 = document28.empty(); org.jsoup.nodes.Element element33 = document28.removeClass("hi!"); java.lang.String str34 = document28.id(); org.jsoup.nodes.Node node35 = document28.previousSibling(); org.jsoup.nodes.Node node36 = document28.clone(); java.lang.String str37 = document28.id(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner41 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining44 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document46 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.tagName("hi!"); org.jsoup.nodes.Element element56 = document50.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings57 = document50.outputSettings(); boolean boolean58 = attributeWithValueContaining44.matches((org.jsoup.nodes.Element) document46, (org.jsoup.nodes.Element) document50); org.jsoup.nodes.Document document59 = cleaner41.clean(document50); org.jsoup.helper.Validate.notNull((java.lang.Object) document50, ""); boolean boolean62 = attributeWithValueMatching24.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document50); boolean boolean63 = cleaner3.isValid(document28); java.util.regex.Pattern pattern65 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching66 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern65); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList72 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document70, "hi!"); org.jsoup.nodes.Element element74 = document70.tagName("hi!"); org.jsoup.nodes.Element element76 = document70.append(""); java.lang.String str77 = document70.toString(); org.jsoup.nodes.Element element79 = document70.prependElement("\nhi!"); org.jsoup.select.Elements elements81 = document70.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document85 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList87 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document85, "hi!"); org.jsoup.nodes.Element element89 = document85.tagName("hi!"); org.jsoup.nodes.Element element91 = document85.append(""); boolean boolean92 = attributeWithValueMatching66.matches((org.jsoup.nodes.Element) document70, (org.jsoup.nodes.Element) document85); org.jsoup.nodes.Document document93 = document85.normalise(); org.jsoup.nodes.Document.OutputSettings outputSettings94 = document93.outputSettings(); org.jsoup.nodes.Document document95 = cleaner3.clean(document93); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(node35); org.junit.Assert.assertNotNull(node36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(nodeList72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertNotNull(document85); org.junit.Assert.assertNotNull(nodeList87); org.junit.Assert.assertNotNull(element89); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertNotNull(document93); org.junit.Assert.assertNotNull(outputSettings94); org.junit.Assert.assertNotNull(document95); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.util.Spliterator<java.lang.Object> objSpliterator24 = objList0.spliterator(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); java.lang.String str32 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList30, "#document"); boolean boolean33 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList30); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining40 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); boolean boolean54 = attributeWithValueContaining40.matches((org.jsoup.nodes.Element) document42, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Document document55 = cleaner37.clean(document46); boolean boolean56 = objList0.contains((java.lang.Object) document46); java.lang.Object obj57 = objList0.element(); org.jsoup.nodes.Document document61 = org.jsoup.parser.Parser.parseBodyFragment("hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Element element63 = document61.text(""); java.util.List<org.jsoup.nodes.Node> nodeList65 = org.jsoup.parser.Parser.parseFragment("", element63, "[^[^hi!]]"); java.util.stream.Stream<org.jsoup.nodes.Node> nodeStream66 = nodeList65.parallelStream(); boolean boolean67 = objList0.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList65); java.lang.Object obj68 = objList0.poll(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(objSpliterator24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\nhi!" + "'", str32, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(obj57); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(nodeList65); org.junit.Assert.assertNotNull(nodeStream66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(obj68); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList10 = document3.dataNodes(); org.jsoup.parser.Tag tag11 = document3.tag(); boolean boolean12 = tag11.isEmpty(); boolean boolean13 = tag11.isBlock(); org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean17 = tag16.isBlock(); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = element24.toggleClass("#document"); org.jsoup.select.Elements elements28 = element26.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements30 = element26.getElementsByClass("[:lt(32)]"); boolean boolean31 = tag16.equals((java.lang.Object) elements30); boolean boolean32 = tag16.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str37 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist36); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str48 = org.jsoup.Jsoup.clean(":lt(32)", whitelist47); org.jsoup.safety.Whitelist whitelist52 = whitelist47.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray59 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist60 = whitelist47.addTags(strArray59); org.jsoup.safety.Whitelist whitelist61 = whitelist43.addProtocols(":matchesOwn(null", "hi!", strArray59); org.jsoup.safety.Whitelist whitelist62 = whitelist36.addAttributes("[^hi!]", strArray59); org.jsoup.safety.Whitelist whitelist66 = whitelist36.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes68 = whitelist36.getEnforcedAttributes(""); org.jsoup.nodes.Element element69 = new org.jsoup.nodes.Element(tag16, " hi!", attributes68); org.jsoup.nodes.Attributes attributes70 = attributes68.clone(); org.jsoup.nodes.Element element71 = new org.jsoup.nodes.Element(tag11, "<html>\n <head></head>\n <body>  \n </body>\n</html>", attributes68); boolean boolean72 = tag11.preserveWhitespace(); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(dataNodeList10); org.junit.Assert.assertNotNull(tag11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(tag16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements28); org.junit.Assert.assertNotNull(elements30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[hi!$=  ]" + "'", str37, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(32)" + "'", str48, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(attributes68); org.junit.Assert.assertNotNull(attributes70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist12 = whitelist2.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str13 = org.jsoup.Jsoup.clean("#document", "<html>\n <head></head>\n <body></body>\n</html>", whitelist12); java.util.regex.Pattern pattern16 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching17 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element25 = document21.tagName("hi!"); org.jsoup.nodes.Element element27 = document21.append(""); java.lang.String str28 = document21.toString(); org.jsoup.nodes.Element element30 = document21.prependElement("\nhi!"); org.jsoup.select.Elements elements32 = document21.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList38 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document36, "hi!"); org.jsoup.nodes.Element element40 = document36.tagName("hi!"); org.jsoup.nodes.Element element42 = document36.append(""); boolean boolean43 = attributeWithValueMatching17.matches((org.jsoup.nodes.Element) document21, (org.jsoup.nodes.Element) document36); org.jsoup.nodes.Element element44 = null; org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element48 = document47.body(); java.util.Map<java.lang.String, java.lang.String> strMap49 = document47.dataset(); boolean boolean50 = attributeWithValueMatching17.matches(element44, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); boolean boolean56 = attributeWithValueMatching17.matches((org.jsoup.nodes.Element) document52, (org.jsoup.nodes.Element) document55); org.jsoup.nodes.Attribute attribute59 = new org.jsoup.nodes.Attribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); java.lang.String str60 = attribute59.getKey(); boolean boolean61 = whitelist12.isSafeAttribute("[ =hi!]", (org.jsoup.nodes.Element) document55, attribute59); org.jsoup.nodes.Element element63 = document55.toggleClass(".body"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#document" + "'", str13, "#document"); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(nodeList38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(strMap49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertEquals("'" + str60 + "' != '" + ":containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]" + "'", str60, ":containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(element63); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); java.lang.String[] strArray14 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean15 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist5.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray14); boolean boolean18 = whitelist5.isSafeTag("#text"); java.lang.String str19 = org.jsoup.Jsoup.clean("[^<html> <head></head> <body> </body> </html>]", whitelist5); org.jsoup.nodes.Attributes attributes21 = whitelist5.getEnforcedAttributes("&lt;\n \n \n&gt;\n \n \n&gt;hi!"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[^  ]" + "'", str19, "[^  ]"); org.junit.Assert.assertNotNull(attributes21); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Node node32 = element29.attr("[^hi!]", "#document"); int int33 = objList0.lastIndexOf((java.lang.Object) node32); java.util.ListIterator<java.lang.Object> objItor35 = objList0.listIterator(0); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document39, "hi!"); org.jsoup.nodes.Element element42 = document39.empty(); org.jsoup.nodes.Element element44 = document39.removeClass("hi!"); org.jsoup.nodes.Element element46 = element44.toggleClass(""); boolean boolean47 = objList0.removeFirstOccurrence((java.lang.Object) element46); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist56 = whitelist50.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str57 = org.jsoup.Jsoup.clean("#comment", "*", whitelist56); int int58 = objList0.indexOf((java.lang.Object) "*"); java.lang.Object obj59 = objList0.pollLast(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertNotNull(objItor35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#comment" + "'", str57, "#comment"); org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1)); org.junit.Assert.assertNotNull(obj59); org.junit.Assert.assertEquals(obj59.toString(), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "<html>\n <head></head>\n <body>\n </body>\n</html>"); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.tagName("hi!"); org.jsoup.nodes.Element element10 = document4.append(""); java.lang.String str11 = element10.toString(); objList0.push((java.lang.Object) element10); java.lang.Object obj13 = objList0.pollFirst(); objList0.clear(); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element21 = document18.empty(); org.jsoup.nodes.Element element23 = document18.removeClass("hi!"); java.lang.String str24 = document18.id(); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element31 = document28.empty(); org.jsoup.nodes.Element element33 = document28.removeClass("hi!"); java.lang.String str34 = document28.nodeName(); org.jsoup.nodes.Document.QuirksMode quirksMode35 = document28.quirksMode(); org.jsoup.nodes.Document document36 = document18.quirksMode(quirksMode35); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner40 = new org.jsoup.safety.Cleaner(whitelist39); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining43 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document45 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList51 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document49, "hi!"); org.jsoup.nodes.Element element53 = document49.tagName("hi!"); org.jsoup.nodes.Element element55 = document49.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings56 = document49.outputSettings(); boolean boolean57 = attributeWithValueContaining43.matches((org.jsoup.nodes.Element) document45, (org.jsoup.nodes.Element) document49); org.jsoup.nodes.Document document58 = cleaner40.clean(document49); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str61 = document60.toString(); java.lang.String str62 = document60.baseUri(); org.jsoup.nodes.Document document63 = cleaner40.clean(document60); org.jsoup.nodes.Document.QuirksMode quirksMode64 = document63.quirksMode(); org.jsoup.nodes.Document document65 = document18.quirksMode(quirksMode64); org.jsoup.nodes.Node node67 = document18.removeAttr("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]"); org.jsoup.nodes.Document document69 = org.jsoup.nodes.Document.createShell("<html>\n <head></head>\n <body></body>\n</html>\n<:lt(32)></:lt(32)>"); java.util.Map<java.lang.String, java.lang.String> strMap70 = document69.dataset(); org.jsoup.nodes.Element element72 = document69.text("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Element element73 = document18.appendChild((org.jsoup.nodes.Node) element72); boolean boolean74 = objList0.equals((java.lang.Object) element72); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(obj13); org.junit.Assert.assertEquals(obj13.toString(), "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "#document" + "'", str34, "#document"); org.junit.Assert.assertTrue("'" + quirksMode35 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode35.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(nodeList51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str61, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, ""); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertTrue("'" + quirksMode64 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode64.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(node67); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(strMap70); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.Id id8 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = element18.toString(); boolean boolean21 = element18.hasAttr(""); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); org.jsoup.nodes.Element element33 = element31.removeClass("hi!"); org.jsoup.select.Elements elements36 = element31.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element38 = element31.prependElement("hi!"); boolean boolean39 = element38.hasText(); element38.remove(); boolean boolean41 = id8.matches(element18, element38); java.lang.String str42 = element38.outerHtml(); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); org.jsoup.select.Elements elements55 = document46.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element57 = document46.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes58 = document46.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap59 = attributes58.dataset(); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList65 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document63, "hi!"); org.jsoup.nodes.Element element67 = document63.tagName("hi!"); org.jsoup.nodes.Element element69 = document63.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings70 = document63.outputSettings(); org.jsoup.select.Elements elements72 = document63.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element74 = document63.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes75 = document63.attributes(); attributes58.addAll(attributes75); int int77 = attributes75.size(); java.lang.String str78 = attributes75.toString(); org.jsoup.nodes.Attribute attribute81 = new org.jsoup.nodes.Attribute("#[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html><hi!>\n [^hi!]\n</hi!><html>\n <head></head>\n <body></body>\n</html><hi!>\n [^hi!]\n</hi!><head></head><hi!>\n [^hi!]\n</hi!><body></body>"); attributes75.put(attribute81); java.lang.String str83 = attribute81.getKey(); boolean boolean84 = whitelist4.isSafeAttribute("[hi!$=<html> <head></head> <body></body> </html>]", element38, attribute81); java.lang.String str85 = org.jsoup.Jsoup.clean(" .<html> <head></head> <body></body> </html>=\"\"", ".[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", whitelist4); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<hi!></hi!>" + "'", str42, "<hi!></hi!>"); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNull(element57); org.junit.Assert.assertNotNull(attributes58); org.junit.Assert.assertNotNull(strMap59); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(nodeList65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertNull(element74); org.junit.Assert.assertNotNull(attributes75); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "#[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]" + "'", str83, "#[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertEquals("'" + str85 + "' != '" + ".  =&quot;&quot;" + "'", str85, ".  =&quot;&quot;"); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\nhi!", pattern1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = document6.removeClass("hi!"); java.lang.String str12 = document6.id(); org.jsoup.nodes.Node node13 = document6.previousSibling(); org.jsoup.nodes.Node node14 = document6.clone(); java.lang.String str15 = document6.id(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining22 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document24 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); boolean boolean36 = attributeWithValueContaining22.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document28); org.jsoup.nodes.Document document37 = cleaner19.clean(document28); org.jsoup.helper.Validate.notNull((java.lang.Object) document28, ""); boolean boolean40 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document6, (org.jsoup.nodes.Element) document28); java.util.regex.Pattern pattern42 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching43 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern42); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); java.lang.String str54 = document47.toString(); org.jsoup.nodes.Element element56 = document47.prependElement("\nhi!"); org.jsoup.select.Elements elements58 = document47.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList64 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document62, "hi!"); org.jsoup.nodes.Element element66 = document62.tagName("hi!"); org.jsoup.nodes.Element element68 = document62.append(""); boolean boolean69 = attributeWithValueMatching43.matches((org.jsoup.nodes.Element) document47, (org.jsoup.nodes.Element) document62); org.jsoup.nodes.Element element70 = null; org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element74 = document73.body(); java.util.Map<java.lang.String, java.lang.String> strMap75 = document73.dataset(); boolean boolean76 = attributeWithValueMatching43.matches(element70, (org.jsoup.nodes.Element) document73); org.jsoup.nodes.Element element79 = document73.attr("[^ ]", ""); org.jsoup.nodes.Document document83 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList85 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document83, "hi!"); org.jsoup.nodes.Element element87 = document83.tagName("hi!"); org.jsoup.nodes.Element element89 = document83.append(""); org.jsoup.nodes.Element element91 = element89.removeClass("hi!"); org.jsoup.select.Elements elements94 = element89.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element96 = element89.prependElement("hi!"); org.jsoup.nodes.Element element98 = element96.appendText(""); boolean boolean99 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document73, element98); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNull(node13); org.junit.Assert.assertNotNull(node14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str54, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(nodeList64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(strMap75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertNotNull(nodeList85); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertNotNull(element89); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertNotNull(elements94); org.junit.Assert.assertNotNull(element96); org.junit.Assert.assertNotNull(element98); org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); java.lang.String str13 = element12.toString(); int int14 = objList0.indexOf((java.lang.Object) element12); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str17 = document16.toString(); java.lang.String str18 = document16.baseUri(); org.jsoup.nodes.Document.QuirksMode quirksMode19 = document16.quirksMode(); objList0.addLast((java.lang.Object) quirksMode19); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList22 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean24 = objList22.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj25 = objList22.peekFirst(); objList22.addFirst((java.lang.Object) ":gt(100)"); java.lang.String str28 = objList22.toString(); java.lang.Object obj29 = objList22.removeFirst(); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); org.jsoup.nodes.Element element42 = document33.attr("#document", "#document"); java.util.List<org.jsoup.nodes.Node> nodeList43 = element42.siblingNodes(); boolean boolean44 = objList22.removeAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList43); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList45 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean47 = objList45.equals((java.lang.Object) ":lt(32)"); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList53 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document51, "hi!"); org.jsoup.nodes.Element element55 = document51.tagName("hi!"); org.jsoup.nodes.Element element57 = document51.append(""); java.lang.String str58 = element57.toString(); int int59 = objList45.indexOf((java.lang.Object) element57); boolean boolean60 = objList22.remove((java.lang.Object) objList45); org.jsoup.safety.Whitelist whitelist61 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner64 = new org.jsoup.safety.Cleaner(whitelist63); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining67 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document69 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList75 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document73, "hi!"); org.jsoup.nodes.Element element77 = document73.tagName("hi!"); org.jsoup.nodes.Element element79 = document73.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings80 = document73.outputSettings(); boolean boolean81 = attributeWithValueContaining67.matches((org.jsoup.nodes.Element) document69, (org.jsoup.nodes.Element) document73); org.jsoup.nodes.Document document82 = cleaner64.clean(document73); org.jsoup.nodes.Document document84 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str85 = document84.toString(); java.lang.String str86 = document84.baseUri(); org.jsoup.nodes.Document document87 = cleaner64.clean(document84); org.jsoup.nodes.Document document88 = document87.clone(); boolean boolean89 = objList22.offer((java.lang.Object) document88); // The following exception was thrown during execution in test generation try { objList0.add((int) (byte) -1, (java.lang.Object) boolean89); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str17, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertTrue("'" + quirksMode19 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode19.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNull(obj25); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[:gt(100)]" + "'", str28, "[:gt(100)]"); org.junit.Assert.assertEquals("'" + obj29 + "' != '" + ":gt(100)" + "'", obj29, ":gt(100)"); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str58, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1)); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertNotNull(nodeList75); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str85, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, ""); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertNotNull(document88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); boolean boolean37 = tag36.preserveWhitespace(); boolean boolean38 = tag36.isInline(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Element element31 = element29.toggleClass("#document"); org.jsoup.select.Elements elements33 = element31.getElementsByAttributeStarting(":lt(32)"); java.util.List<org.jsoup.nodes.Node> nodeList34 = element31.siblingNodes(); boolean boolean35 = objList0.retainAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList34); org.jsoup.select.Evaluator.IndexLessThan indexLessThan37 = new org.jsoup.select.Evaluator.IndexLessThan((int) ' '); java.lang.String str38 = indexLessThan37.toString(); boolean boolean39 = objList0.equals((java.lang.Object) str38); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist42); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining46 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document48 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList54 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document52, "hi!"); org.jsoup.nodes.Element element56 = document52.tagName("hi!"); org.jsoup.nodes.Element element58 = document52.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings59 = document52.outputSettings(); boolean boolean60 = attributeWithValueContaining46.matches((org.jsoup.nodes.Element) document48, (org.jsoup.nodes.Element) document52); org.jsoup.nodes.Document document61 = cleaner43.clean(document52); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str64 = document63.toString(); java.lang.String str65 = document63.baseUri(); org.jsoup.nodes.Document document66 = cleaner43.clean(document63); boolean boolean67 = objList0.offerLast((java.lang.Object) document63); java.lang.Object obj68 = objList0.getFirst(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + ":lt(32)" + "'", str38, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(nodeList54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str64, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(obj68); org.junit.Assert.assertEquals(obj68.toString(), "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "<html>\n <head></head>\n <body>  \n </body>\n</html>"); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); java.lang.String str11 = org.jsoup.Jsoup.clean("[:lt(32)]", ":contains(:gt(100)", whitelist8); java.lang.String str12 = org.jsoup.Jsoup.clean(":contains(.hi!", "[^  ]", whitelist8); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[:lt(32)]" + "'", str11, "[:lt(32)]"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ":contains(.hi!" + "'", str12, ":contains(.hi!"); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element13 = document10.empty(); org.jsoup.nodes.Element element15 = document10.removeClass("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.prettyPrint(false); org.jsoup.nodes.Document document29 = document10.outputSettings(outputSettings28); java.lang.String str30 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist3, outputSettings28); org.jsoup.safety.Whitelist whitelist32 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); java.lang.String[] strArray49 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean50 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist40.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray49); boolean boolean52 = org.jsoup.helper.StringUtil.in(" text=\"hi!\" #document=\"#document\"", strArray49); org.jsoup.safety.Whitelist whitelist53 = whitelist32.addProtocols("*", "<html>\n <head></head>\n <body></body>\n</html>\n<[<!--[hi!$=<html> <head></head> <body></body> </html>]-->!=hi!]></[<!--[hi!$=<html> <head></head> <body></body> </html>]-->!=hi!]>", strArray49); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)" + "'", str4, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[:lt(32)]" + "'", str30, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(whitelist53); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText5 = new org.jsoup.select.Evaluator.ContainsOwnText("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String str6 = containsOwnText5.toString(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList7 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean9 = objList7.equals((java.lang.Object) ":lt(32)"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList10 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document14, "hi!"); org.jsoup.nodes.Element element18 = document14.text(""); int int19 = objList10.lastIndexOf((java.lang.Object) document14); objList7.addFirst((java.lang.Object) document14); java.util.Spliterator<java.lang.Object> objSpliterator21 = objList7.spliterator(); java.util.regex.Pattern pattern23 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching24 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); java.lang.String str35 = document28.toString(); org.jsoup.nodes.Element element37 = document28.prependElement("\nhi!"); org.jsoup.select.Elements elements39 = document28.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document43, "hi!"); org.jsoup.nodes.Element element47 = document43.tagName("hi!"); org.jsoup.nodes.Element element49 = document43.append(""); boolean boolean50 = attributeWithValueMatching24.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document43); org.jsoup.nodes.Document document51 = document43.normalise(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = document51.outputSettings(); boolean boolean53 = objList7.offerLast((java.lang.Object) document51); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element58 = document56.text(".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan60 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); boolean boolean61 = document56.equals((java.lang.Object) (-1)); boolean boolean62 = document56.isBlock(); boolean boolean63 = containsOwnText5.matches((org.jsoup.nodes.Element) document51, (org.jsoup.nodes.Element) document56); org.jsoup.nodes.Document document64 = cleaner3.clean(document56); document64.setBaseUri(":containsOwn("); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node68 = document64.childNode((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]" + "'", str6, ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertNotNull(objSpliterator21); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str35, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(elements39); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(document64); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList10 = document3.dataNodes(); org.jsoup.parser.Tag tag11 = document3.tag(); java.lang.String str12 = tag11.toString(); boolean boolean13 = tag11.formatAsBlock(); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str16 = org.jsoup.Jsoup.clean("", whitelist15); org.jsoup.safety.Whitelist whitelist20 = whitelist15.addEnforcedAttribute("#comment", "[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]", "[  =hi!]"); boolean boolean21 = tag11.equals((java.lang.Object) whitelist20); boolean boolean22 = tag11.isBlock(); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(dataNodeList10); org.junit.Assert.assertNotNull(tag11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); document3.title("hi!"); org.jsoup.nodes.Element element11 = document3.prependElement("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.select.Elements elements13 = document3.getElementsContainingText("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document.QuirksMode quirksMode14 = document3.quirksMode(); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner18 = new org.jsoup.safety.Cleaner(whitelist17); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining21 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document27, "hi!"); org.jsoup.nodes.Element element31 = document27.tagName("hi!"); org.jsoup.nodes.Element element33 = document27.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings34 = document27.outputSettings(); boolean boolean35 = attributeWithValueContaining21.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document27); org.jsoup.nodes.Document document36 = cleaner18.clean(document27); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str39 = document38.toString(); java.lang.String str40 = document38.baseUri(); org.jsoup.nodes.Document document41 = cleaner18.clean(document38); org.jsoup.nodes.Document.QuirksMode quirksMode42 = document41.quirksMode(); org.jsoup.nodes.Document document43 = document3.quirksMode(quirksMode42); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertTrue("'" + quirksMode14 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode14.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str39, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + quirksMode42 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode42.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document43); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); java.lang.String[] strArray13 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean14 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist4.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist23 = whitelist17.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = org.jsoup.Jsoup.clean("\nhi!", whitelist23); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); boolean boolean33 = whitelist30.isSafeTag(""); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element40 = document37.empty(); org.jsoup.nodes.Element element42 = document37.removeClass("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); org.jsoup.nodes.Document document56 = document37.outputSettings(outputSettings55); java.lang.String str57 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist30, outputSettings55); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str68 = org.jsoup.Jsoup.clean(":lt(32)", whitelist67); org.jsoup.safety.Whitelist whitelist72 = whitelist67.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray79 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist80 = whitelist67.addTags(strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist63.addProtocols(":matchesOwn(null", "hi!", strArray79); org.jsoup.safety.Whitelist whitelist82 = whitelist30.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray79); org.jsoup.safety.Whitelist whitelist83 = whitelist23.addProtocols("#doctype", "[]", strArray79); org.jsoup.safety.Whitelist whitelist84 = whitelist4.addTags(strArray79); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray79); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[:lt(32)]" + "'", str57, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + ":lt(32)" + "'", str68, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str5 = org.jsoup.Jsoup.clean(":lt(32)", whitelist4); boolean boolean7 = whitelist4.isSafeTag(""); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document11, "hi!"); org.jsoup.nodes.Element element14 = document11.empty(); org.jsoup.nodes.Element element16 = document11.removeClass("hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList22 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document20, "hi!"); org.jsoup.nodes.Element element24 = document20.tagName("hi!"); org.jsoup.nodes.Element element26 = document20.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings27 = document20.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.prettyPrint(false); org.jsoup.nodes.Document document30 = document11.outputSettings(outputSettings29); java.lang.String str31 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist4, outputSettings29); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str42 = org.jsoup.Jsoup.clean(":lt(32)", whitelist41); org.jsoup.safety.Whitelist whitelist46 = whitelist41.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray53 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist54 = whitelist41.addTags(strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist37.addProtocols(":matchesOwn(null", "hi!", strArray53); org.jsoup.safety.Whitelist whitelist56 = whitelist4.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray53); java.lang.String str57 = org.jsoup.Jsoup.clean("<html>\n <head></head> \n <body> \n </body>\n</html>", whitelist4); org.jsoup.nodes.Attributes attributes59 = whitelist4.getEnforcedAttributes("\n<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->"); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":lt(32)" + "'", str5, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(nodeList22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[:lt(32)]" + "'", str31, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + ":lt(32)" + "'", str42, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(attributes59); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings32 = document25.outputSettings(); org.jsoup.select.Elements elements34 = document25.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element36 = document25.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes37 = document25.attributes(); org.jsoup.nodes.Element element39 = document25.prepend("[^hi!]"); org.jsoup.nodes.Element element41 = document25.html("[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]"); org.jsoup.nodes.Document document42 = document25.normalise(); org.jsoup.nodes.Document document43 = cleaner3.clean(document42); java.lang.String str44 = document43.nodeName(); org.jsoup.nodes.Element element46 = document43.removeClass("#[:lt(32)*=.\n \n \n]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNull(element36); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "#document" + "'", str44, "#document"); org.junit.Assert.assertNotNull(element46); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings15.indentAmount(100); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document23, "hi!"); org.jsoup.nodes.Element element27 = document23.tagName("hi!"); org.jsoup.nodes.Element element29 = document23.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings30 = document23.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings30.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings30.indentAmount(0); java.nio.charset.Charset charset37 = outputSettings36.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings15.charset(charset37); java.lang.String str39 = org.jsoup.Jsoup.clean("#[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>", whitelist2, outputSettings38); java.nio.charset.Charset charset40 = outputSettings38.charset(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#[:lt(32)*=.\n \n \n]" + "'", str39, "#[:lt(32)*=.\n \n \n]"); org.junit.Assert.assertNotNull(charset40); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = whitelist1.addEnforcedAttribute("hi!", "#document", "hi!"); boolean boolean12 = org.jsoup.Jsoup.isValid(":lt(32)=&quot;&quot;=&quot;.&quot;", whitelist11); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); java.lang.Object obj1 = objList0.poll(); java.util.ListIterator<java.lang.Object> objItor2 = objList0.listIterator(); objList0.clear(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str7 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist6); boolean boolean9 = whitelist6.isSafeTag(""); org.jsoup.safety.Whitelist whitelist11 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist13.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = whitelist13.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!", whitelist13); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str35 = org.jsoup.Jsoup.clean(":lt(32)", whitelist34); org.jsoup.safety.Whitelist whitelist39 = whitelist34.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray46 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist47 = whitelist34.addTags(strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist30.addProtocols(":matchesOwn(null", "hi!", strArray46); java.lang.String[] strArray57 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean58 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist48.addProtocols("\n<!--hi!-->", "#document", strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.safety.Whitelist whitelist62 = whitelist13.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray57); org.jsoup.safety.Whitelist whitelist63 = whitelist6.addTags(strArray57); java.lang.CharSequence[] charSequenceArray64 = objList0.toArray((java.lang.CharSequence[]) strArray57); org.jsoup.nodes.Document document66 = org.jsoup.nodes.Document.createShell("<html>\n <head></head>\n <body></body>\n</html>\n<:lt(32)></:lt(32)>"); java.util.Map<java.lang.String, java.lang.String> strMap67 = document66.dataset(); org.jsoup.nodes.Element element69 = document66.text("<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Element element71 = element69.append("[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]"); java.util.Set<java.lang.String> strSet72 = element69.classNames(); boolean boolean73 = objList0.offer((java.lang.Object) element69); org.jsoup.select.Elements elements74 = element69.children(); org.junit.Assert.assertNull(obj1); org.junit.Assert.assertNotNull(objItor2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[hi!$=  ]" + "'", str7, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + ":lt(32)" + "'", str35, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(charSequenceArray64); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(strMap67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(strSet72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(elements74); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist10 = whitelist4.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist14 = whitelist4.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str15 = org.jsoup.Jsoup.clean("#document", "<html>\n <head></head>\n <body></body>\n</html>", whitelist14); java.util.regex.Pattern pattern18 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching19 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern18); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document23, "hi!"); org.jsoup.nodes.Element element27 = document23.tagName("hi!"); org.jsoup.nodes.Element element29 = document23.append(""); java.lang.String str30 = document23.toString(); org.jsoup.nodes.Element element32 = document23.prependElement("\nhi!"); org.jsoup.select.Elements elements34 = document23.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document38, "hi!"); org.jsoup.nodes.Element element42 = document38.tagName("hi!"); org.jsoup.nodes.Element element44 = document38.append(""); boolean boolean45 = attributeWithValueMatching19.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Element element46 = null; org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element50 = document49.body(); java.util.Map<java.lang.String, java.lang.String> strMap51 = document49.dataset(); boolean boolean52 = attributeWithValueMatching19.matches(element46, (org.jsoup.nodes.Element) document49); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); boolean boolean58 = attributeWithValueMatching19.matches((org.jsoup.nodes.Element) document54, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Attribute attribute61 = new org.jsoup.nodes.Attribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); java.lang.String str62 = attribute61.getKey(); boolean boolean63 = whitelist14.isSafeAttribute("[ =hi!]", (org.jsoup.nodes.Element) document57, attribute61); org.jsoup.safety.Whitelist whitelist67 = whitelist14.addEnforcedAttribute("<html> <head></head> <body> [:lt(32)] </body> </html>", "[<hi!>\n [^hi!]\n</hi!>]", " text=\"hi!\" .<html>\n <head></head>\n <body></body>\n</html>=\"\""); java.lang.String str68 = org.jsoup.Jsoup.clean("<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">", "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]", whitelist14); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str30, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(nodeList40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(strMap51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertEquals("'" + str62 + "' != '" + ":containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]" + "'", str62, ":containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "] PUBLIC &quot;:contains(:gt(100)&quot; &quot;:lt(32)=&quot;&quot;=&quot;.&quot;&quot;&gt;" + "'", str68, "] PUBLIC &quot;:contains(:gt(100)&quot; &quot;:lt(32)=&quot;&quot;=&quot;.&quot;&quot;&gt;"); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); objList0.push((java.lang.Object) "\nhi!"); java.lang.Object obj3 = null; int int4 = objList0.indexOf(obj3); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList5 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean7 = objList5.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj8 = objList5.peekFirst(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList9 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); java.lang.Object obj10 = objList9.poll(); java.util.ListIterator<java.lang.Object> objItor11 = objList9.listIterator(); objList5.addFirst((java.lang.Object) objItor11); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element16 = document15.body(); org.jsoup.nodes.Element element18 = element16.append("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); int int19 = objList5.lastIndexOf((java.lang.Object) "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document23, "hi!"); java.util.stream.Stream<org.jsoup.nodes.Node> nodeStream26 = nodeList25.stream(); boolean boolean27 = objList5.addAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList25); objList0.addLast((java.lang.Object) objList5); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str32 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist31); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str43 = org.jsoup.Jsoup.clean(":lt(32)", whitelist42); org.jsoup.safety.Whitelist whitelist47 = whitelist42.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray54 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist55 = whitelist42.addTags(strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist38.addProtocols(":matchesOwn(null", "hi!", strArray54); org.jsoup.safety.Whitelist whitelist57 = whitelist31.addAttributes("[^hi!]", strArray54); boolean boolean58 = objList5.equals((java.lang.Object) strArray54); java.lang.Object obj59 = objList5.pop(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(obj8); org.junit.Assert.assertNull(obj10); org.junit.Assert.assertNotNull(objItor11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertNotNull(nodeStream26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!$=  ]" + "'", str32, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + ":lt(32)" + "'", str43, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(obj59); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Node node32 = element29.attr("[^hi!]", "#document"); int int33 = objList0.lastIndexOf((java.lang.Object) node32); java.util.ListIterator<java.lang.Object> objItor35 = objList0.listIterator(0); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document39, "hi!"); org.jsoup.nodes.Element element42 = document39.empty(); org.jsoup.nodes.Element element44 = document39.removeClass("hi!"); org.jsoup.nodes.Element element46 = element44.toggleClass(""); boolean boolean47 = objList0.removeFirstOccurrence((java.lang.Object) element46); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist56 = whitelist50.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str57 = org.jsoup.Jsoup.clean("#comment", "*", whitelist56); int int58 = objList0.indexOf((java.lang.Object) "*"); org.jsoup.helper.Validate.notNull((java.lang.Object) "*", "<html>\n <head></head>\n <body>\n #comment \n </body>\n</html>"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertNotNull(objItor35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#comment" + "'", str57, "#comment"); org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1)); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.safety.Whitelist whitelist8 = whitelist3.addEnforcedAttribute("#comment", "[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]", "[  =hi!]"); java.lang.String str9 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str13 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str24 = org.jsoup.Jsoup.clean(":lt(32)", whitelist23); org.jsoup.safety.Whitelist whitelist28 = whitelist23.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray35 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist36 = whitelist23.addTags(strArray35); org.jsoup.safety.Whitelist whitelist37 = whitelist19.addProtocols(":matchesOwn(null", "hi!", strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist12.addAttributes("[^hi!]", strArray35); org.jsoup.safety.Whitelist whitelist42 = whitelist12.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str54 = org.jsoup.Jsoup.clean(":lt(32)", whitelist53); org.jsoup.safety.Whitelist whitelist58 = whitelist53.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray65 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist66 = whitelist53.addTags(strArray65); org.jsoup.safety.Whitelist whitelist67 = whitelist49.addProtocols(":matchesOwn(null", "hi!", strArray65); java.lang.String[] strArray76 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean77 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray76); org.jsoup.safety.Whitelist whitelist78 = whitelist67.addProtocols("\n<!--hi!-->", "#document", strArray76); org.jsoup.safety.Whitelist whitelist79 = whitelist12.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray76); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray76, "<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray76); org.jsoup.safety.Whitelist whitelist83 = whitelist3.addTags(strArray76); java.lang.String str84 = org.jsoup.Jsoup.clean("[:lt(32)]", whitelist83); java.lang.String[] strArray92 = new java.lang.String[] { "[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", "<html>\n <head></head>\n <body> \n </body>\n</html>", "<<html>\n <head></head>\n <body></body>\n</html>></<html>\n <head></head>\n <body></body>\n</html>><html><head><title>hi&excl;</title></head><body></body></html>", "\n<!--hi!-->[:lt(32)]", ":containsOwn(:containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "[:lt(32)*=]" }; org.jsoup.safety.Whitelist whitelist93 = whitelist83.addAttributes("body", strArray92); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!$=  ]" + "'", str13, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + ":lt(32)" + "'", str24, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + ":lt(32)" + "'", str54, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist79); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[:lt(32)]" + "'", str84, "[:lt(32)]"); org.junit.Assert.assertNotNull(strArray92); org.junit.Assert.assertNotNull(whitelist93); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist10 = whitelist4.addEnforcedAttribute(":eq(1)", "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]", ".\n<!---->"); java.lang.String str11 = org.jsoup.Jsoup.clean(":matches(null", whitelist4); java.util.regex.Pattern pattern13 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching14 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern13); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); java.lang.String str25 = document18.toString(); org.jsoup.nodes.Element element27 = document18.prependElement("\nhi!"); org.jsoup.select.Elements elements29 = document18.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.tagName("hi!"); org.jsoup.nodes.Element element39 = document33.append(""); boolean boolean40 = attributeWithValueMatching14.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document41 = document33.normalise(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document41.outputSettings(); java.lang.String str43 = org.jsoup.Jsoup.clean("#:lt(32)=\"\"", "#hi!", whitelist4, outputSettings42); java.lang.String str44 = org.jsoup.Jsoup.clean("<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + ":matches(null" + "'", str11, ":matches(null"); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str25, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#:lt(32)=&quot;&quot;" + "'", str43, "#:lt(32)=&quot;&quot;"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "] PUBLIC &quot;:contains(:gt(100)&quot; &quot;:lt(32)=&quot;&quot;=&quot;.&quot;&quot;&gt;" + "'", str44, "] PUBLIC &quot;:contains(:gt(100)&quot; &quot;:lt(32)=&quot;&quot;=&quot;.&quot;&quot;&gt;"); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); boolean boolean37 = tag36.canContainBlock(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element28 = document25.empty(); org.jsoup.nodes.Element element30 = document25.removeClass("hi!"); org.jsoup.select.Elements elements33 = document25.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.nodes.Element element34 = document25.empty(); org.jsoup.nodes.Element element36 = document25.html("body"); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document25.outputSettings(); org.jsoup.select.Elements elements39 = document25.getElementsContainingText("<html>\n <head></head>\n <body></body>\n</html>\n<:lt(32)></:lt(32)>"); org.jsoup.nodes.Document document40 = cleaner3.clean(document25); org.jsoup.nodes.Document document41 = document25.normalise(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(elements39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document41); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element10 = document6.tagName("hi!"); org.jsoup.nodes.Element element12 = document6.append(""); java.lang.String str13 = document6.toString(); org.jsoup.nodes.Element element15 = document6.append("[hi!$=  ]"); java.lang.String str16 = document6.data(); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner20 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining23 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document25 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList31 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document29, "hi!"); org.jsoup.nodes.Element element33 = document29.tagName("hi!"); org.jsoup.nodes.Element element35 = document29.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings36 = document29.outputSettings(); boolean boolean37 = attributeWithValueContaining23.matches((org.jsoup.nodes.Element) document25, (org.jsoup.nodes.Element) document29); org.jsoup.nodes.Document document38 = cleaner20.clean(document29); // The following exception was thrown during execution in test generation try { boolean boolean39 = matchesOwn1.matches((org.jsoup.nodes.Element) document6, (org.jsoup.nodes.Element) document29); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(nodeList31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("                                                  "); org.jsoup.nodes.Document document29 = cleaner3.clean(document28); org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse(" text=\"hi!\" #document=\"#document\"", ":containsOwn(<html>\n <head></head>\n <body>\n </body>\n</html>"); boolean boolean33 = cleaner3.isValid(document32); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.jsoup.select.Evaluator.Tag tag1 = new org.jsoup.select.Evaluator.Tag("<html> <head></head> <body> </body> </html>"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("\nhi!", "[hi!$=<html> <head></head> <body></body> </html>]"); org.jsoup.select.Elements elements6 = document4.getElementsContainingOwnText("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining13 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document15 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); boolean boolean27 = attributeWithValueContaining13.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document19); org.jsoup.nodes.Document document28 = cleaner10.clean(document19); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str31 = document30.toString(); java.lang.String str32 = document30.baseUri(); org.jsoup.nodes.Document document33 = cleaner10.clean(document30); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("                                                  "); org.jsoup.nodes.Document document36 = cleaner10.clean(document35); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList42 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document40, "hi!"); org.jsoup.nodes.Element element43 = document40.empty(); org.jsoup.nodes.Element element45 = document40.removeClass("hi!"); org.jsoup.select.Elements elements48 = document40.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.nodes.Element element49 = document40.empty(); org.jsoup.nodes.Document document50 = document40.clone(); org.jsoup.nodes.Document document51 = cleaner10.clean(document50); boolean boolean52 = tag1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document51); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements55 = document51.getElementsByAttributeValueStarting("[**=[:lt(32)]]", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(elements6); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str31, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(nodeList42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(":lt(32)"); org.jsoup.nodes.Element element2 = null; org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", ":lt(32)"); java.util.Map<java.lang.String, java.lang.String> strMap6 = document5.dataset(); java.lang.String str7 = document5.outerHtml(); boolean boolean8 = attribute1.matches(element2, (org.jsoup.nodes.Element) document5); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining15 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document17 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element25 = document21.tagName("hi!"); org.jsoup.nodes.Element element27 = document21.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings28 = document21.outputSettings(); boolean boolean29 = attributeWithValueContaining15.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document21); org.jsoup.nodes.Document document30 = cleaner12.clean(document21); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); java.lang.String str41 = document34.toString(); java.lang.String str42 = document34.id(); org.jsoup.nodes.Node node43 = document34.parent(); org.jsoup.nodes.Document document44 = cleaner12.clean(document34); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList50 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document48, "hi!"); org.jsoup.nodes.Element element52 = document48.text(""); boolean boolean53 = attribute1.matches((org.jsoup.nodes.Element) document34, (org.jsoup.nodes.Element) document48); org.jsoup.select.Elements elements55 = document48.getElementsByAttribute("[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]"); org.jsoup.nodes.Attributes attributes56 = document48.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator57 = attributes56.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap58 = attributes56.dataset(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str7, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str41, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNull(node43); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(nodeList50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(attributes56); org.junit.Assert.assertNotNull(attributeSpliterator57); org.junit.Assert.assertNotNull(strMap58); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.jsoup.safety.Whitelist whitelist0 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Cleaner cleaner1 = new org.jsoup.safety.Cleaner(whitelist0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj3 = objList0.peekFirst(); objList0.addFirst((java.lang.Object) ":gt(100)"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist14 = whitelist8.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist18 = whitelist8.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str19 = org.jsoup.Jsoup.clean("#document", "<html>\n <head></head>\n <body></body>\n</html>", whitelist18); objList0.addLast((java.lang.Object) whitelist18); java.lang.Object obj21 = objList0.peekLast(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(obj3); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#document" + "'", str19, "#document"); org.junit.Assert.assertNotNull(obj21); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("                                                  "); org.jsoup.nodes.Document document29 = cleaner3.clean(document28); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element36 = document33.empty(); org.jsoup.nodes.Element element38 = document33.removeClass("hi!"); org.jsoup.select.Elements elements41 = document33.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.nodes.Element element42 = document33.empty(); org.jsoup.nodes.Document document43 = document33.clone(); org.jsoup.nodes.Document document44 = cleaner3.clean(document43); java.util.regex.Pattern pattern46 = null; org.jsoup.select.Elements elements47 = document44.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n .&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;\n </body>\n</html>", pattern46); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(elements41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(elements47); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.preserveWhitespace(); boolean boolean5 = tag1.canContainBlock(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList7 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document11, "hi!"); org.jsoup.nodes.Element element15 = document11.text(""); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document document27 = document11.outputSettings(outputSettings26); org.jsoup.nodes.Document document28 = document11.normalise(); objList7.addLast((java.lang.Object) document28); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element36 = document33.empty(); org.jsoup.nodes.Element element38 = element36.toggleClass("#document"); org.jsoup.select.Elements elements40 = element38.getElementsByAttributeStarting(":lt(32)"); java.util.List<org.jsoup.nodes.Node> nodeList41 = element38.siblingNodes(); boolean boolean42 = objList7.retainAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList41); org.jsoup.select.Evaluator.IndexLessThan indexLessThan44 = new org.jsoup.select.Evaluator.IndexLessThan((int) ' '); java.lang.String str45 = indexLessThan44.toString(); boolean boolean46 = objList7.equals((java.lang.Object) str45); org.jsoup.select.Evaluator.AttributeWithValueEnding attributeWithValueEnding49 = new org.jsoup.select.Evaluator.AttributeWithValueEnding("\nhi!", "<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean50 = objList7.add((java.lang.Object) "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.Object obj51 = objList7.getFirst(); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes55 = whitelist53.getEnforcedAttributes("#text"); boolean boolean56 = org.jsoup.Jsoup.isValid("[^[^hi!]]", whitelist53); java.lang.String[] strArray63 = new java.lang.String[] { "[:lt(32)]", " text=\"hi!\" .<html>\n <head></head>\n <body></body>\n</html>=\"\"", "[hi!=.<html>\n <head></head>\n <body></body>\n</html>]", ".", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "<hi!></hi!>:contains(:gt(100)<html>\n <head></head>\n <body></body>\n</html>" }; org.jsoup.safety.Whitelist whitelist64 = whitelist53.addTags(strArray63); org.jsoup.nodes.Attributes attributes66 = whitelist53.getEnforcedAttributes("<!---->"); boolean boolean67 = objList7.equals((java.lang.Object) attributes66); org.jsoup.nodes.Element element68 = new org.jsoup.nodes.Element(tag1, ":lt(32)=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n [:lt(32)]\n &lt;/body&gt;\n&lt;/html&gt;\"", attributes66); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(elements40); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertEquals("'" + str45 + "' != '" + ":lt(32)" + "'", str45, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", obj51, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(attributes66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.select.Elements elements13 = element11.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements15 = element11.getElementsByClass("[:lt(32)]"); boolean boolean16 = tag1.equals((java.lang.Object) elements15); boolean boolean17 = tag1.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str22 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist21); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str33 = org.jsoup.Jsoup.clean(":lt(32)", whitelist32); org.jsoup.safety.Whitelist whitelist37 = whitelist32.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray44 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist45 = whitelist32.addTags(strArray44); org.jsoup.safety.Whitelist whitelist46 = whitelist28.addProtocols(":matchesOwn(null", "hi!", strArray44); org.jsoup.safety.Whitelist whitelist47 = whitelist21.addAttributes("[^hi!]", strArray44); org.jsoup.safety.Whitelist whitelist51 = whitelist21.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes53 = whitelist21.getEnforcedAttributes(""); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag1, " hi!", attributes53); org.jsoup.nodes.Attributes attributes55 = attributes53.clone(); java.util.Map<java.lang.String, java.lang.String> strMap56 = attributes55.dataset(); attributes55.put("<!---->", "<html>\n <head></head>\n <body></body>\n</html>\n<[<!--[hi!$=<html> <head></head> <body></body> </html>]-->!=hi!]></[<!--[hi!$=<html> <head></head> <body></body> </html>]-->!=hi!]>"); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!$=  ]" + "'", str22, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ":lt(32)" + "'", str33, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertNotNull(strMap56); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute(":lt(32)", ""); java.lang.String str3 = attribute2.toString(); java.lang.String str5 = attribute2.setValue(""); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document11, "hi!"); org.jsoup.nodes.Element element15 = document11.tagName("hi!"); org.jsoup.nodes.Element element17 = document11.append(""); org.jsoup.nodes.Element element19 = document11.toggleClass("#document"); java.lang.String str20 = document11.title(); org.jsoup.nodes.Element element21 = document11.head(); org.jsoup.nodes.Document.QuirksMode quirksMode22 = document11.quirksMode(); org.jsoup.nodes.Document document23 = document7.quirksMode(quirksMode22); boolean boolean24 = attribute2.equals((java.lang.Object) quirksMode22); java.lang.String str25 = attribute2.html(); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList31 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document29, "hi!"); org.jsoup.nodes.Element element33 = document29.tagName("hi!"); org.jsoup.nodes.Element element35 = document29.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList36 = document29.dataNodes(); org.jsoup.parser.Tag tag37 = document29.tag(); java.lang.String str38 = tag37.toString(); boolean boolean39 = tag37.formatAsBlock(); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str42 = org.jsoup.Jsoup.clean("", whitelist41); org.jsoup.safety.Whitelist whitelist46 = whitelist41.addEnforcedAttribute("#comment", "[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]", "[  =hi!]"); boolean boolean47 = tag37.equals((java.lang.Object) whitelist46); boolean boolean48 = attribute2.equals((java.lang.Object) tag37); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(32)=\"\"" + "'", str3, ":lt(32)=\"\""); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + ":lt(32)=\"\"" + "'", str25, ":lt(32)=\"\""); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(nodeList31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(dataNodeList36); org.junit.Assert.assertNotNull(tag37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); java.lang.String[] strArray13 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean14 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist4.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist23 = whitelist17.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = org.jsoup.Jsoup.clean("\nhi!", whitelist23); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str31 = org.jsoup.Jsoup.clean(":lt(32)", whitelist30); boolean boolean33 = whitelist30.isSafeTag(""); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document37, "hi!"); org.jsoup.nodes.Element element40 = document37.empty(); org.jsoup.nodes.Element element42 = document37.removeClass("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element50 = document46.tagName("hi!"); org.jsoup.nodes.Element element52 = document46.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); org.jsoup.nodes.Document document56 = document37.outputSettings(outputSettings55); java.lang.String str57 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist30, outputSettings55); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str68 = org.jsoup.Jsoup.clean(":lt(32)", whitelist67); org.jsoup.safety.Whitelist whitelist72 = whitelist67.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray79 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist80 = whitelist67.addTags(strArray79); org.jsoup.safety.Whitelist whitelist81 = whitelist63.addProtocols(":matchesOwn(null", "hi!", strArray79); org.jsoup.safety.Whitelist whitelist82 = whitelist30.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray79); org.jsoup.safety.Whitelist whitelist83 = whitelist23.addProtocols("#doctype", "[]", strArray79); org.jsoup.safety.Whitelist whitelist84 = whitelist4.addTags(strArray79); org.jsoup.safety.Whitelist whitelist86 = whitelist4.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + ":lt(32)" + "'", str31, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[:lt(32)]" + "'", str57, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + ":lt(32)" + "'", str68, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(whitelist86); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); boolean boolean37 = tag36.isInline(); boolean boolean38 = tag36.isEmpty(); org.jsoup.nodes.Element element40 = new org.jsoup.nodes.Element(tag36, ":matches(null"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("", ":contains(:matchesown(null"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist6); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList15 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document13, "hi!"); org.jsoup.nodes.Element element17 = document13.tagName("hi!"); org.jsoup.nodes.Element element19 = document13.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings20 = document13.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings20.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings21.indentAmount((int) (short) 0); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.indentAmount((int) (byte) 1); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings21.prettyPrint(true); int int30 = outputSettings29.indentAmount(); int int31 = outputSettings29.indentAmount(); java.lang.String str32 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "[[:gt(100)]$=:gt(100)]", whitelist6, outputSettings29); org.jsoup.nodes.Document document33 = document2.outputSettings(outputSettings29); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element35 = document33.before(":lt(32)=\"#[:lt(32)*=.&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;]\""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str9, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(nodeList15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[!=hi!]" + "'", str32, "[!=hi!]"); org.junit.Assert.assertNotNull(document33); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str7 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist6); boolean boolean9 = whitelist6.isSafeTag(""); org.jsoup.safety.Whitelist whitelist11 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = whitelist13.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = whitelist13.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!", whitelist13); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str35 = org.jsoup.Jsoup.clean(":lt(32)", whitelist34); org.jsoup.safety.Whitelist whitelist39 = whitelist34.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray46 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist47 = whitelist34.addTags(strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist30.addProtocols(":matchesOwn(null", "hi!", strArray46); java.lang.String[] strArray57 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean58 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist48.addProtocols("\n<!--hi!-->", "#document", strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.safety.Whitelist whitelist62 = whitelist13.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray57); org.jsoup.safety.Whitelist whitelist63 = whitelist6.addTags(strArray57); org.jsoup.safety.Whitelist whitelist64 = whitelist2.addAttributes("[  ^=hi!]", strArray57); boolean boolean65 = org.jsoup.helper.StringUtil.in("[<html>\n <head></head>\n <body>\n </body>\n</html>]", strArray57); boolean boolean66 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html><hi!>\n [^hi!]\n</hi!><html>\n <head></head>\n <body></body>\n</html><hi!>\n [^hi!]\n</hi!><head></head><hi!>\n [^hi!]\n</hi!><body></body>", strArray57); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[hi!$=  ]" + "'", str7, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + ":lt(32)" + "'", str35, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); org.jsoup.parser.Tag tag36 = document25.tag(); org.jsoup.nodes.Element element38 = document25.toggleClass("<!DOCTYPE [hi!=.<html> <head></head> <body></body> </html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">"); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements40 = element38.select("&lt;  &gt;  &gt;hi!"); org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query '&lt;  &gt;  &gt;hi!': unexpected token at '&lt;  &gt;  &gt;hi!'"); } catch (org.jsoup.select.Selector.SelectorParseException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertNotNull(element38); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes(""); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist16 = whitelist10.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist20 = whitelist10.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str21 = org.jsoup.Jsoup.clean("hi!", whitelist10); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str32 = org.jsoup.Jsoup.clean(":lt(32)", whitelist31); org.jsoup.safety.Whitelist whitelist36 = whitelist31.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray43 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist44 = whitelist31.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addProtocols(":matchesOwn(null", "hi!", strArray43); java.lang.String[] strArray54 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean55 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist45.addProtocols("\n<!--hi!-->", "#document", strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.safety.Whitelist whitelist59 = whitelist10.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray54); org.jsoup.safety.Whitelist whitelist60 = whitelist5.addAttributes("*", strArray54); boolean boolean62 = whitelist5.isSafeTag("[.]"); boolean boolean63 = org.jsoup.Jsoup.isValid(":lt(32)=&quot;&quot;", whitelist5); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":lt(32)" + "'", str32, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("", ":contains(:matchesown(null"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist6); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList15 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document13, "hi!"); org.jsoup.nodes.Element element17 = document13.tagName("hi!"); org.jsoup.nodes.Element element19 = document13.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings20 = document13.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings20.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings21.indentAmount((int) (short) 0); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.indentAmount((int) (byte) 1); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings21.prettyPrint(true); int int30 = outputSettings29.indentAmount(); int int31 = outputSettings29.indentAmount(); java.lang.String str32 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "[[:gt(100)]$=:gt(100)]", whitelist6, outputSettings29); org.jsoup.nodes.Document document33 = document2.outputSettings(outputSettings29); java.util.regex.Pattern pattern34 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements35 = document33.getElementsMatchingOwnText(pattern34); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str9, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(nodeList15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[!=hi!]" + "'", str32, "[!=hi!]"); org.junit.Assert.assertNotNull(document33); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str6 = org.jsoup.Jsoup.clean(":lt(32)", whitelist5); boolean boolean8 = whitelist5.isSafeTag(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element15 = document12.empty(); org.jsoup.nodes.Element element17 = document12.removeClass("hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element25 = document21.tagName("hi!"); org.jsoup.nodes.Element element27 = document21.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings28 = document21.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.prettyPrint(false); org.jsoup.nodes.Document document31 = document12.outputSettings(outputSettings30); java.lang.String str32 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist5, outputSettings30); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist5); boolean boolean35 = whitelist5.isSafeTag(""); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str46 = org.jsoup.Jsoup.clean(":lt(32)", whitelist45); org.jsoup.safety.Whitelist whitelist50 = whitelist45.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray57 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist58 = whitelist45.addTags(strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist41.addProtocols(":matchesOwn(null", "hi!", strArray57); java.lang.String[] strArray68 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean69 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist59.addProtocols("\n<!--hi!-->", "#document", strArray68); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray68); boolean boolean72 = org.jsoup.helper.StringUtil.in("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", strArray68); org.jsoup.safety.Whitelist whitelist73 = whitelist5.addTags(strArray68); boolean boolean74 = org.jsoup.helper.StringUtil.in("[^ ]", strArray68); boolean boolean75 = org.jsoup.helper.StringUtil.in("&lt;\n \n \n&gt;\n \n \n&gt;hi!", strArray68); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":lt(32)" + "'", str6, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[:lt(32)]" + "'", str32, "[:lt(32)]"); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + ":lt(32)" + "'", str46, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str8 = org.jsoup.Jsoup.clean(":lt(32)", whitelist7); org.jsoup.safety.Whitelist whitelist12 = whitelist7.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray19 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist20 = whitelist7.addTags(strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addAttributes(":gt(100)", strArray19); boolean boolean22 = org.jsoup.helper.StringUtil.in("\n<!--hi!-->", strArray19); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray19, ":eq(97)"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + ":lt(32)" + "'", str8, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.nodes.Attributes attributes7 = whitelist2.getEnforcedAttributes("\n<!--hi!-->"); org.jsoup.nodes.Attributes attributes9 = whitelist2.getEnforcedAttributes("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]"); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator10 = attributes9.spliterator(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertNotNull(attributeSpliterator10); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(""); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = document5.toString(); org.jsoup.nodes.Element element14 = document5.append("[hi!$=  ]"); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner18 = new org.jsoup.safety.Cleaner(whitelist17); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining21 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document27, "hi!"); org.jsoup.nodes.Element element31 = document27.tagName("hi!"); org.jsoup.nodes.Element element33 = document27.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings34 = document27.outputSettings(); boolean boolean35 = attributeWithValueContaining21.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document27); org.jsoup.nodes.Document document36 = cleaner18.clean(document27); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList42 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document40, "hi!"); org.jsoup.nodes.Element element44 = document40.tagName("hi!"); org.jsoup.nodes.Element element46 = document40.append(""); java.lang.String str47 = document40.toString(); java.lang.String str48 = document40.id(); org.jsoup.nodes.Node node49 = document40.parent(); org.jsoup.nodes.Document document50 = cleaner18.clean(document40); java.lang.String str51 = document40.title(); boolean boolean52 = attribute1.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document40); java.util.List<org.jsoup.nodes.Node> nodeList53 = document40.siblingNodes(); java.lang.String str54 = document40.nodeName(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(nodeList42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str47, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, ""); org.junit.Assert.assertNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, ""); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#document" + "'", str54, "#document"); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); org.jsoup.safety.Whitelist whitelist6 = whitelist1.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str12 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist11); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str23 = org.jsoup.Jsoup.clean(":lt(32)", whitelist22); org.jsoup.safety.Whitelist whitelist27 = whitelist22.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray34 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist35 = whitelist22.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist18.addProtocols(":matchesOwn(null", "hi!", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist11.addAttributes("[^hi!]", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist6.addTags(strArray34); org.jsoup.nodes.Attributes attributes40 = whitelist38.getEnforcedAttributes("[hi!$= ]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!$=  ]" + "'", str12, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + ":lt(32)" + "'", str23, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(attributes40); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist8.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist24.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist34 = whitelist24.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str35 = org.jsoup.Jsoup.clean("hi!", whitelist24); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str46 = org.jsoup.Jsoup.clean(":lt(32)", whitelist45); org.jsoup.safety.Whitelist whitelist50 = whitelist45.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray57 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist58 = whitelist45.addTags(strArray57); org.jsoup.safety.Whitelist whitelist59 = whitelist41.addProtocols(":matchesOwn(null", "hi!", strArray57); java.lang.String[] strArray68 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean69 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist59.addProtocols("\n<!--hi!-->", "#document", strArray68); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray68); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray68); org.jsoup.safety.Whitelist whitelist73 = whitelist24.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray68); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray68); org.jsoup.safety.Whitelist whitelist75 = whitelist2.addProtocols("#:lt(32)=\"\"", ":contains(:matchesown(null", strArray68); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + ":lt(32)" + "'", str46, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist75); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); java.lang.String str19 = document12.toString(); java.lang.Object[] objArray20 = new java.lang.Object[] { element8, str19 }; org.jsoup.helper.Validate.noNullElements(objArray20, ""); boolean boolean23 = objList0.offerLast((java.lang.Object) objArray20); java.lang.Object obj24 = objList0.peek(); objList0.clear(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList26 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document30, "hi!"); org.jsoup.nodes.Element element34 = document30.text(""); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document38, "hi!"); org.jsoup.nodes.Element element42 = document38.tagName("hi!"); org.jsoup.nodes.Element element44 = document38.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings45 = document38.outputSettings(); org.jsoup.nodes.Document document46 = document30.outputSettings(outputSettings45); org.jsoup.nodes.Document document47 = document30.normalise(); objList26.addLast((java.lang.Object) document47); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("", ":lt(32)"); boolean boolean52 = objList26.offerFirst((java.lang.Object) ""); boolean boolean53 = objList0.offerLast((java.lang.Object) boolean52); java.lang.Object obj54 = null; int int55 = objList0.indexOf(obj54); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList61 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document59, "hi!"); org.jsoup.nodes.Element element63 = document59.tagName("hi!"); org.jsoup.nodes.Element element65 = document59.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings66 = document59.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode70 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.escapeMode(escapeMode70); org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode(); boolean boolean73 = objList0.contains((java.lang.Object) outputSettings71); java.util.Iterator<java.lang.Object> objItor74 = objList0.descendingIterator(); java.lang.Object[] objArray75 = objList0.toArray(); org.jsoup.safety.Whitelist whitelist77 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str78 = org.jsoup.Jsoup.clean(":lt(32)", whitelist77); org.jsoup.safety.Whitelist whitelist82 = whitelist77.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray89 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist90 = whitelist77.addTags(strArray89); org.jsoup.safety.Cleaner cleaner91 = new org.jsoup.safety.Cleaner(whitelist77); boolean boolean92 = objList0.offerLast((java.lang.Object) cleaner91); java.lang.Object obj93 = objList0.removeFirst(); java.lang.Object obj94 = objList0.pollFirst(); java.lang.Object obj95 = objList0.poll(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(obj24); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(nodeList40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1)); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(nodeList61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertNotNull(outputSettings67); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(objItor74); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[true]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[true]"); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + ":lt(32)" + "'", str78, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); org.junit.Assert.assertEquals("'" + obj93 + "' != '" + true + "'", obj93, true); org.junit.Assert.assertNotNull(obj94); org.junit.Assert.assertNull(obj95); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Document document10 = document9.normalise(); java.lang.String str11 = document10.title(); org.jsoup.nodes.Element element13 = document10.text(":matchesOwn(null"); org.jsoup.nodes.Element element15 = document10.tagName(":eq(1)"); org.jsoup.nodes.Attribute attribute18 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); java.lang.String str19 = attribute18.getKey(); java.lang.String str20 = attribute18.getValue(); java.lang.String str22 = attribute18.setValue("<hi!></hi!>:contains(:gt(100)<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean23 = whitelist2.isSafeAttribute(".<html>\n <head></head>\n <body></body>\n</html>", element15, attribute18); java.lang.String str24 = attribute18.getKey(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(attribute18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#comment" + "'", str19, "#comment"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#comment" + "'", str24, "#comment"); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist0.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist10 = whitelist0.addEnforcedAttribute("hi!", "#document", "hi!"); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist21 = whitelist15.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str22 = org.jsoup.Jsoup.clean("\nhi!", whitelist21); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str29 = org.jsoup.Jsoup.clean(":lt(32)", whitelist28); boolean boolean31 = whitelist28.isSafeTag(""); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element38 = document35.empty(); org.jsoup.nodes.Element element40 = document35.removeClass("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList46 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document44, "hi!"); org.jsoup.nodes.Element element48 = document44.tagName("hi!"); org.jsoup.nodes.Element element50 = document44.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document44.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.prettyPrint(false); org.jsoup.nodes.Document document54 = document35.outputSettings(outputSettings53); java.lang.String str55 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist28, outputSettings53); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist59 = whitelist57.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist65 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str66 = org.jsoup.Jsoup.clean(":lt(32)", whitelist65); org.jsoup.safety.Whitelist whitelist70 = whitelist65.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray77 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist78 = whitelist65.addTags(strArray77); org.jsoup.safety.Whitelist whitelist79 = whitelist61.addProtocols(":matchesOwn(null", "hi!", strArray77); org.jsoup.safety.Whitelist whitelist80 = whitelist28.addAttributes("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", strArray77); org.jsoup.safety.Whitelist whitelist81 = whitelist21.addProtocols("#doctype", "[]", strArray77); boolean boolean82 = org.jsoup.helper.StringUtil.in("[:lt(10)!=[hi!=.<html>\n <head></head>\n <body></body>\n</html>]]", strArray77); org.jsoup.safety.Whitelist whitelist83 = whitelist0.addProtocols("hi!", "[^\n<!--hi!-->]", strArray77); org.jsoup.safety.Cleaner cleaner84 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document87 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str88 = document87.ownText(); org.jsoup.nodes.Element element90 = document87.createElement("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.select.Elements elements93 = document87.getElementsByAttributeValueNot("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "[^hi!]"); org.jsoup.nodes.Document document94 = cleaner84.clean(document87); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + ":lt(32)" + "'", str29, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(nodeList46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[:lt(32)]" + "'", str55, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + ":lt(32)" + "'", str66, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, ""); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertNotNull(elements93); org.junit.Assert.assertNotNull(document94); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.text("[:lt(32)]"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList10 = document3.dataNodes(); org.jsoup.parser.Tag tag11 = document3.tag(); boolean boolean12 = tag11.isEmpty(); boolean boolean13 = tag11.isBlock(); org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean17 = tag16.isBlock(); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document21, "hi!"); org.jsoup.nodes.Element element24 = document21.empty(); org.jsoup.nodes.Element element26 = element24.toggleClass("#document"); org.jsoup.select.Elements elements28 = element26.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements30 = element26.getElementsByClass("[:lt(32)]"); boolean boolean31 = tag16.equals((java.lang.Object) elements30); boolean boolean32 = tag16.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str37 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist36); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str48 = org.jsoup.Jsoup.clean(":lt(32)", whitelist47); org.jsoup.safety.Whitelist whitelist52 = whitelist47.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray59 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist60 = whitelist47.addTags(strArray59); org.jsoup.safety.Whitelist whitelist61 = whitelist43.addProtocols(":matchesOwn(null", "hi!", strArray59); org.jsoup.safety.Whitelist whitelist62 = whitelist36.addAttributes("[^hi!]", strArray59); org.jsoup.safety.Whitelist whitelist66 = whitelist36.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes68 = whitelist36.getEnforcedAttributes(""); org.jsoup.nodes.Element element69 = new org.jsoup.nodes.Element(tag16, " hi!", attributes68); org.jsoup.nodes.Attributes attributes70 = attributes68.clone(); org.jsoup.nodes.Element element71 = new org.jsoup.nodes.Element(tag11, "<html>\n <head></head>\n <body>  \n </body>\n</html>", attributes68); boolean boolean72 = tag11.isBlock(); boolean boolean73 = tag11.isBlock(); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(dataNodeList10); org.junit.Assert.assertNotNull(tag11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(tag16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements28); org.junit.Assert.assertNotNull(elements30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[hi!$=  ]" + "'", str37, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(32)" + "'", str48, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(attributes68); org.junit.Assert.assertNotNull(attributes70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); java.lang.String[] strArray17 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean18 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist8.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); java.lang.String str26 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist25); boolean boolean28 = whitelist25.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray38 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean39 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray38); boolean boolean40 = org.jsoup.helper.StringUtil.in(" hi!", strArray38); org.jsoup.safety.Whitelist whitelist41 = whitelist25.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray38); boolean boolean43 = whitelist41.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist47 = whitelist41.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist56 = whitelist54.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist60 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str61 = org.jsoup.Jsoup.clean(":lt(32)", whitelist60); org.jsoup.safety.Whitelist whitelist65 = whitelist60.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray72 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist73 = whitelist60.addTags(strArray72); org.jsoup.safety.Whitelist whitelist74 = whitelist56.addProtocols(":matchesOwn(null", "hi!", strArray72); java.lang.String[] strArray83 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean84 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray83); org.jsoup.safety.Whitelist whitelist85 = whitelist74.addProtocols("\n<!--hi!-->", "#document", strArray83); org.jsoup.safety.Whitelist whitelist86 = whitelist49.addProtocols(".\n<!---->", "[:gt(100)]", strArray83); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray83); org.jsoup.safety.Whitelist whitelist88 = whitelist20.addAttributes("[<html>\n <head></head>\n <body></body>\n</html>]", strArray83); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "." + "'", str26, "."); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + ":lt(32)" + "'", str61, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(strArray83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(whitelist88); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); java.lang.String str5 = org.jsoup.Jsoup.clean("\n<!--[hi!$=  ]-->", "[:gt(100)]=\"\"", whitelist4); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str11 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist10); boolean boolean13 = whitelist10.isSafeTag(""); org.jsoup.safety.Whitelist whitelist15 = whitelist10.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist23 = whitelist17.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist17.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str28 = org.jsoup.Jsoup.clean("hi!", whitelist17); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str39 = org.jsoup.Jsoup.clean(":lt(32)", whitelist38); org.jsoup.safety.Whitelist whitelist43 = whitelist38.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray50 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist51 = whitelist38.addTags(strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist34.addProtocols(":matchesOwn(null", "hi!", strArray50); java.lang.String[] strArray61 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean62 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist52.addProtocols("\n<!--hi!-->", "#document", strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61); org.jsoup.safety.Whitelist whitelist66 = whitelist17.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray61); org.jsoup.safety.Whitelist whitelist67 = whitelist10.addTags(strArray61); org.jsoup.safety.Whitelist whitelist68 = whitelist6.addAttributes("[  ^=hi!]", strArray61); org.jsoup.safety.Whitelist whitelist69 = whitelist4.addTags(strArray61); org.jsoup.nodes.Attributes attributes71 = whitelist4.getEnforcedAttributes(":containsOwn(:containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[hi!$=  ]" + "'", str11, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!"); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + ":lt(32)" + "'", str39, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(attributes71); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist7 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str11 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist10); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str22 = org.jsoup.Jsoup.clean(":lt(32)", whitelist21); org.jsoup.safety.Whitelist whitelist26 = whitelist21.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray33 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist34 = whitelist21.addTags(strArray33); org.jsoup.safety.Whitelist whitelist35 = whitelist17.addProtocols(":matchesOwn(null", "hi!", strArray33); org.jsoup.safety.Whitelist whitelist36 = whitelist10.addAttributes("[^hi!]", strArray33); org.jsoup.safety.Whitelist whitelist37 = whitelist2.addTags(strArray33); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[hi!$=  ]" + "'", str11, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(32)" + "'", str22, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("", ":contains(:matchesown(null"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("#text"); java.lang.String str9 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist6); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList15 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document13, "hi!"); org.jsoup.nodes.Element element17 = document13.tagName("hi!"); org.jsoup.nodes.Element element19 = document13.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings20 = document13.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings20.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings21.indentAmount((int) (short) 0); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.indentAmount((int) (byte) 1); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings21.prettyPrint(true); int int30 = outputSettings29.indentAmount(); int int31 = outputSettings29.indentAmount(); java.lang.String str32 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "[[:gt(100)]$=:gt(100)]", whitelist6, outputSettings29); org.jsoup.nodes.Document document33 = document2.outputSettings(outputSettings29); org.jsoup.parser.Parser parser34 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document37 = parser34.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); java.util.Set<java.lang.String> strSet38 = document37.classNames(); org.jsoup.nodes.Element element39 = document33.classNames(strSet38); java.lang.String str40 = element39.text(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str9, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(nodeList15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[!=hi!]" + "'", str32, "[!=hi!]"); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(parser34); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strSet38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); java.lang.String str4 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist3); boolean boolean6 = whitelist3.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray16 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean17 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean18 = org.jsoup.helper.StringUtil.in(" hi!", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray16); boolean boolean21 = whitelist19.isSafeTag("hi!"); org.jsoup.safety.Whitelist whitelist25 = whitelist19.addEnforcedAttribute(".", "     ", ":lt(32)=\"\nhi!\""); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str39 = org.jsoup.Jsoup.clean(":lt(32)", whitelist38); org.jsoup.safety.Whitelist whitelist43 = whitelist38.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray50 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist51 = whitelist38.addTags(strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist34.addProtocols(":matchesOwn(null", "hi!", strArray50); java.lang.String[] strArray61 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean62 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist52.addProtocols("\n<!--hi!-->", "#document", strArray61); org.jsoup.safety.Whitelist whitelist64 = whitelist27.addProtocols(".\n<!---->", "[:gt(100)]", strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61, "#root"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "." + "'", str4, "."); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + ":lt(32)" + "'", str39, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("<html>\n <head></head>\n <body></body>\n</html>", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.nodes.Element element13 = element11.tagName("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment(""); boolean boolean16 = attributeWithValueStarting2.matches(element11, (org.jsoup.nodes.Element) document15); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes23 = whitelist21.getEnforcedAttributes("#text"); java.lang.String str24 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist21); java.lang.String str25 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist21); org.jsoup.select.Evaluator.Class class28 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.select.Elements elements41 = document32.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element43 = document32.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes44 = document32.attributes(); org.jsoup.nodes.Element element46 = document32.prepend("[^hi!]"); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.tagName("hi!"); org.jsoup.nodes.Element element56 = document50.append(""); org.jsoup.nodes.Element element59 = document50.attr("#document", "#document"); org.jsoup.nodes.Element element60 = document50.body(); boolean boolean61 = class28.matches((org.jsoup.nodes.Element) document32, (org.jsoup.nodes.Element) document50); org.jsoup.nodes.Attribute attribute64 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean65 = whitelist21.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document32, attribute64); org.jsoup.nodes.Document document68 = org.jsoup.parser.Parser.parseBodyFragment(":gt(100)", ""); org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList74 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document72, "hi!"); org.jsoup.nodes.Element element76 = document72.tagName("hi!"); org.jsoup.nodes.Element element78 = document72.append(""); org.jsoup.nodes.Element element80 = document72.toggleClass("#document"); java.lang.String str81 = document72.title(); org.jsoup.nodes.Element element82 = document72.head(); org.jsoup.nodes.Element element83 = document68.appendChild((org.jsoup.nodes.Node) element82); boolean boolean84 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document32, element82); org.jsoup.nodes.Element element86 = element82.removeClass("                                                 "); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(attributes23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  ^=hi!]" + "'", str25, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(elements41); org.junit.Assert.assertNull(element43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(attribute64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, ""); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(element86); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str27 = document26.ownText(); org.jsoup.nodes.Node node30 = document26.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document34, "hi!"); org.jsoup.nodes.Element element38 = document34.tagName("hi!"); org.jsoup.nodes.Element element40 = document34.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings41 = document34.outputSettings(); org.jsoup.select.Elements elements43 = document34.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element45 = document34.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element47 = document34.createElement(" hi!"); org.jsoup.select.Elements elements49 = document34.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean50 = indexLessThan23.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document51 = cleaner3.clean(document34); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document55, "hi!"); org.jsoup.nodes.Element element58 = document55.empty(); org.jsoup.nodes.Element element60 = document55.removeClass("hi!"); org.jsoup.select.Elements elements63 = document55.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); org.jsoup.nodes.Element element64 = document55.empty(); org.jsoup.nodes.Document document65 = document55.clone(); org.jsoup.nodes.Document document66 = cleaner3.clean(document65); java.lang.String str67 = document66.id(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isBlock(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.select.Elements elements13 = element11.getElementsByAttributeStarting(":lt(32)"); org.jsoup.select.Elements elements15 = element11.getElementsByClass("[:lt(32)]"); boolean boolean16 = tag1.equals((java.lang.Object) elements15); boolean boolean17 = tag1.preserveWhitespace(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str22 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist21); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str33 = org.jsoup.Jsoup.clean(":lt(32)", whitelist32); org.jsoup.safety.Whitelist whitelist37 = whitelist32.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray44 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist45 = whitelist32.addTags(strArray44); org.jsoup.safety.Whitelist whitelist46 = whitelist28.addProtocols(":matchesOwn(null", "hi!", strArray44); org.jsoup.safety.Whitelist whitelist47 = whitelist21.addAttributes("[^hi!]", strArray44); org.jsoup.safety.Whitelist whitelist51 = whitelist21.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.nodes.Attributes attributes53 = whitelist21.getEnforcedAttributes(""); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag1, " hi!", attributes53); java.util.List<org.jsoup.nodes.TextNode> textNodeList55 = element54.textNodes(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!$=  ]" + "'", str22, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ":lt(32)" + "'", str33, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertNotNull(textNodeList55); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); java.lang.String str24 = org.jsoup.helper.StringUtil.join((java.util.Collection) objList0, "[hi!=.<html>\n <head></head>\n <body></body>\n</html>]"); objList0.clear(); java.lang.String str26 = objList0.toString(); java.util.ListIterator<java.lang.Object> objItor28 = objList0.listIterator((int) (byte) 0); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList29 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document33, "hi!"); org.jsoup.nodes.Element element37 = document33.text(""); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document41, "hi!"); org.jsoup.nodes.Element element45 = document41.tagName("hi!"); org.jsoup.nodes.Element element47 = document41.append(""); java.lang.String str48 = document41.toString(); java.lang.Object[] objArray49 = new java.lang.Object[] { element37, str48 }; org.jsoup.helper.Validate.noNullElements(objArray49, ""); boolean boolean52 = objList29.offerLast((java.lang.Object) objArray49); java.util.Spliterator<java.lang.Object> objSpliterator53 = objList29.spliterator(); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); java.lang.String str61 = org.jsoup.helper.StringUtil.join((java.util.Collection) nodeList59, "#document"); boolean boolean62 = objList29.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList59); org.jsoup.safety.Whitelist whitelist63 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist65 = whitelist63.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner66 = new org.jsoup.safety.Cleaner(whitelist65); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining69 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document71 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList77 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document75, "hi!"); org.jsoup.nodes.Element element79 = document75.tagName("hi!"); org.jsoup.nodes.Element element81 = document75.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings82 = document75.outputSettings(); boolean boolean83 = attributeWithValueContaining69.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document75); org.jsoup.nodes.Document document84 = cleaner66.clean(document75); boolean boolean85 = objList29.contains((java.lang.Object) document75); java.lang.Object obj86 = objList29.element(); org.jsoup.nodes.Document document90 = org.jsoup.parser.Parser.parseBodyFragment("hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Element element92 = document90.text(""); java.util.List<org.jsoup.nodes.Node> nodeList94 = org.jsoup.parser.Parser.parseFragment("", element92, "[^[^hi!]]"); java.util.stream.Stream<org.jsoup.nodes.Node> nodeStream95 = nodeList94.parallelStream(); boolean boolean96 = objList29.containsAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList94); boolean boolean97 = objList0.retainAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList94); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>\n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]"); org.junit.Assert.assertNotNull(objItor28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str48, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[<html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(objSpliterator53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\nhi!" + "'", str61, "\nhi!"); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(nodeList77); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertNotNull(outputSettings82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(obj86); org.junit.Assert.assertNotNull(document90); org.junit.Assert.assertNotNull(element92); org.junit.Assert.assertNotNull(nodeList94); org.junit.Assert.assertNotNull(nodeStream95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist8 = whitelist4.preserveRelativeLinks(false); java.lang.String str9 = org.jsoup.Jsoup.clean(".[[:lt(32)*=]*=hi!]", "[.hi!=<!---->]", whitelist4); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ".[[:lt(32)*=]*=hi!]" + "'", str9, ".[[:lt(32)*=]*=hi!]"); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str7 = org.jsoup.Jsoup.clean(":lt(32)", whitelist6); org.jsoup.safety.Whitelist whitelist11 = whitelist6.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray18 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist19 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addAttributes(":gt(100)", strArray18); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner28 = new org.jsoup.safety.Cleaner(whitelist27); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str32 = org.jsoup.Jsoup.clean(":lt(32)", whitelist31); org.jsoup.safety.Whitelist whitelist36 = whitelist31.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray43 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist44 = whitelist31.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addAttributes(":gt(100)", strArray43); boolean boolean46 = org.jsoup.helper.StringUtil.in("\n<!--hi!-->", strArray43); boolean boolean47 = org.jsoup.helper.StringUtil.in("[^[^hi!]]", strArray43); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist48 = whitelist20.addProtocols("", ". <!---->", strArray43); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ":lt(32)" + "'", str7, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":lt(32)" + "'", str32, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = whitelist1.preserveRelativeLinks(false); java.lang.String str10 = org.jsoup.Jsoup.clean("[hi!$=<html> <head></head> <body></body> </html>]", whitelist9); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str20 = org.jsoup.Jsoup.clean(":lt(32)", whitelist19); org.jsoup.safety.Whitelist whitelist24 = whitelist19.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray31 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist32 = whitelist19.addTags(strArray31); org.jsoup.safety.Whitelist whitelist33 = whitelist15.addProtocols(":matchesOwn(null", "hi!", strArray31); java.lang.String[] strArray42 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean43 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist33.addProtocols("\n<!--hi!-->", "#document", strArray42); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray42); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray42); org.jsoup.safety.Whitelist whitelist47 = whitelist9.addTags(strArray42); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!$=  ]" + "'", str10, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + ":lt(32)" + "'", str20, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist47); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("#text"); boolean boolean4 = org.jsoup.Jsoup.isValid("[^[^hi!]]", whitelist1); java.lang.String[] strArray11 = new java.lang.String[] { "[:lt(32)]", " text=\"hi!\" .<html>\n <head></head>\n <body></body>\n</html>=\"\"", "[hi!=.<html>\n <head></head>\n <body></body>\n</html>]", ".", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "<hi!></hi!>:contains(:gt(100)<html>\n <head></head>\n <body></body>\n</html>" }; org.jsoup.safety.Whitelist whitelist12 = whitelist1.addTags(strArray11); org.jsoup.nodes.Attributes attributes14 = whitelist1.getEnforcedAttributes("<!---->"); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); java.lang.String str21 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist20); boolean boolean23 = whitelist20.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray33 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean34 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray33); boolean boolean35 = org.jsoup.helper.StringUtil.in(" hi!", strArray33); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray33); org.jsoup.safety.Whitelist whitelist37 = whitelist1.addProtocols("#data", ".[[:lt(32)*=]*=hi!]", strArray33); org.jsoup.safety.Whitelist whitelist41 = whitelist37.addEnforcedAttribute("<html>\n <head></head>\n <body>\n </body>\n</html>\n<hi! class=\" #document\">\n <html>\n <head></head>\n <body></body>\n </html>\n</hi!>", ":lt(32)=\"\"", "[hi!$=<html> <head></head> <body></body> </html>]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(attributes14); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "." + "'", str21, "."); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist41); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); java.lang.String str32 = document25.toString(); java.lang.String str33 = document25.id(); org.jsoup.nodes.Node node34 = document25.parent(); org.jsoup.nodes.Document document35 = cleaner3.clean(document25); java.lang.String str36 = document25.title(); org.jsoup.nodes.Element element38 = document25.removeClass(":eq(1)"); org.jsoup.parser.Tag tag39 = element38.tag(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str32, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(tag39); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj3 = objList0.peekFirst(); objList0.addFirst((java.lang.Object) ":gt(100)"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist14 = whitelist8.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist18 = whitelist8.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str19 = org.jsoup.Jsoup.clean("#document", "<html>\n <head></head>\n <body></body>\n</html>", whitelist18); objList0.addLast((java.lang.Object) whitelist18); java.lang.Object obj21 = objList0.removeLast(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(obj3); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#document" + "'", str19, "#document"); org.junit.Assert.assertNotNull(obj21); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes4 = whitelist2.getEnforcedAttributes("#text"); boolean boolean5 = org.jsoup.Jsoup.isValid("[^[^hi!]]", whitelist2); java.lang.String[] strArray12 = new java.lang.String[] { "[:lt(32)]", " text=\"hi!\" .<html>\n <head></head>\n <body></body>\n</html>=\"\"", "[hi!=.<html>\n <head></head>\n <body></body>\n</html>]", ".", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "<hi!></hi!>:contains(:gt(100)<html>\n <head></head>\n <body></body>\n</html>" }; org.jsoup.safety.Whitelist whitelist13 = whitelist2.addTags(strArray12); boolean boolean14 = org.jsoup.Jsoup.isValid(".", whitelist13); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("#text"); boolean boolean4 = org.jsoup.Jsoup.isValid("[^[^hi!]]", whitelist1); java.lang.String[] strArray11 = new java.lang.String[] { "[:lt(32)]", " text=\"hi!\" .<html>\n <head></head>\n <body></body>\n</html>=\"\"", "[hi!=.<html>\n <head></head>\n <body></body>\n</html>]", ".", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "<hi!></hi!>:contains(:gt(100)<html>\n <head></head>\n <body></body>\n</html>" }; org.jsoup.safety.Whitelist whitelist12 = whitelist1.addTags(strArray11); org.jsoup.safety.Whitelist whitelist14 = whitelist12.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes16 = whitelist14.getEnforcedAttributes(".<html>\n <head></head>\n <body></body>\n</html>"); attributes16.remove("[[:lt(32)*=]*=hi!]"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document22, "hi!"); org.jsoup.nodes.Element element26 = document22.tagName("hi!"); org.jsoup.nodes.Element element28 = document22.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings29 = document22.outputSettings(); org.jsoup.select.Elements elements31 = document22.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element33 = document22.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes34 = document22.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap35 = attributes34.dataset(); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document39, "hi!"); org.jsoup.nodes.Element element43 = document39.tagName("hi!"); org.jsoup.nodes.Element element45 = document39.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings46 = document39.outputSettings(); org.jsoup.select.Elements elements48 = document39.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element50 = document39.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes51 = document39.attributes(); attributes34.addAll(attributes51); org.jsoup.nodes.Attribute attribute55 = new org.jsoup.nodes.Attribute(":lt(32)", ""); attributes51.put(attribute55); org.jsoup.nodes.Document document58 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element60 = document58.appendElement("#document"); org.jsoup.nodes.Element element61 = element60.lastElementSibling(); org.jsoup.nodes.Element element62 = element61.lastElementSibling(); boolean boolean63 = attribute55.equals((java.lang.Object) element62); java.lang.String str65 = attribute55.setValue("\nhi!"); java.lang.String str66 = attribute55.toString(); java.lang.String str68 = attribute55.setValue("[.]"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList69 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList75 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document73, "hi!"); org.jsoup.nodes.Element element77 = document73.text(""); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList83 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document81, "hi!"); org.jsoup.nodes.Element element85 = document81.tagName("hi!"); org.jsoup.nodes.Element element87 = document81.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings88 = document81.outputSettings(); org.jsoup.nodes.Document document89 = document73.outputSettings(outputSettings88); org.jsoup.nodes.Document document90 = document73.normalise(); objList69.addLast((java.lang.Object) document90); org.jsoup.nodes.Element element93 = document90.prepend("[^hi!]"); boolean boolean94 = attribute55.equals((java.lang.Object) element93); java.lang.String str95 = attribute55.html(); java.lang.String str96 = attribute55.getKey(); attributes16.put(attribute55); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(attributes16); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(nodeList24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNull(element33); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertNotNull(strMap35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNull(element50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertEquals("'" + str66 + "' != '" + ":lt(32)=\"\nhi!\"" + "'", str66, ":lt(32)=\"\nhi!\""); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\nhi!" + "'", str68, "\nhi!"); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertNotNull(nodeList75); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertNotNull(nodeList83); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertNotNull(outputSettings88); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(document90); org.junit.Assert.assertNotNull(element93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertEquals("'" + str95 + "' != '" + ":lt(32)=\"[.]\"" + "'", str95, ":lt(32)=\"[.]\""); org.junit.Assert.assertEquals("'" + str96 + "' != '" + ":lt(32)" + "'", str96, ":lt(32)"); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean(":lt(32)", whitelist1); org.jsoup.safety.Whitelist whitelist6 = whitelist1.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray13 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist14 = whitelist1.addTags(strArray13); org.jsoup.safety.Whitelist whitelist16 = whitelist1.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(32)" + "'", str2, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings10 = document3.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings10.prettyPrint(true); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str20 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist19); boolean boolean22 = whitelist19.isSafeTag(""); org.jsoup.safety.Whitelist whitelist24 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist28 = whitelist24.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>  \n </body>\n</html>", "#comment"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings39.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode43 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.escapeMode(escapeMode43); org.jsoup.nodes.Entities.EscapeMode escapeMode45 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.escapeMode(escapeMode45); boolean boolean47 = outputSettings44.prettyPrint(); java.lang.String str48 = org.jsoup.Jsoup.clean(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist24, outputSettings44); java.nio.charset.Charset charset49 = outputSettings44.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings10.charset(charset49); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.prettyPrint(false); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(outputSettings14); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!$=  ]" + "'", str20, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "&colon;containsOwn&lpar;&lsqb;&colon;lt&lpar;32&rpar;&ast;&equals;&period;&NewLine; &NewLine; &NewLine;&rbrack;" + "'", str48, "&colon;containsOwn&lpar;&lsqb;&colon;lt&lpar;32&rpar;&ast;&equals;&period;&NewLine; &NewLine; &NewLine;&rbrack;"); org.junit.Assert.assertNotNull(charset49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings52); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document4, "hi!"); org.jsoup.nodes.Element element8 = document4.text(""); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document document20 = document4.outputSettings(outputSettings19); org.jsoup.nodes.Document document21 = document4.normalise(); objList0.addLast((java.lang.Object) document21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element29 = document26.empty(); org.jsoup.nodes.Element element31 = document26.removeClass("hi!"); org.jsoup.select.Elements elements34 = document26.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body></body>\n</html>", "[:lt(32)]"); objList0.push((java.lang.Object) "[:lt(32)]"); org.jsoup.select.Evaluator.Attribute attribute37 = new org.jsoup.select.Evaluator.Attribute(":lt(32)"); org.jsoup.nodes.Element element38 = null; org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", ":lt(32)"); java.util.Map<java.lang.String, java.lang.String> strMap42 = document41.dataset(); java.lang.String str43 = document41.outerHtml(); boolean boolean44 = attribute37.matches(element38, (org.jsoup.nodes.Element) document41); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner48 = new org.jsoup.safety.Cleaner(whitelist47); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining51 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document53 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); boolean boolean65 = attributeWithValueContaining51.matches((org.jsoup.nodes.Element) document53, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document66 = cleaner48.clean(document57); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList72 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document70, "hi!"); org.jsoup.nodes.Element element74 = document70.tagName("hi!"); org.jsoup.nodes.Element element76 = document70.append(""); java.lang.String str77 = document70.toString(); java.lang.String str78 = document70.id(); org.jsoup.nodes.Node node79 = document70.parent(); org.jsoup.nodes.Document document80 = cleaner48.clean(document70); org.jsoup.nodes.Document document84 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList86 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document84, "hi!"); org.jsoup.nodes.Element element88 = document84.text(""); boolean boolean89 = attribute37.matches((org.jsoup.nodes.Element) document70, (org.jsoup.nodes.Element) document84); boolean boolean90 = objList0.offerLast((java.lang.Object) document70); org.jsoup.safety.Whitelist.AttributeKey attributeKey92 = new org.jsoup.safety.Whitelist.AttributeKey(":lt(1)"); boolean boolean93 = objList0.offerLast((java.lang.Object) attributeKey92); int int94 = objList0.size(); java.lang.String str95 = objList0.toString(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str43, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(nodeList72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); org.junit.Assert.assertNull(node79); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertNotNull(nodeList86); org.junit.Assert.assertNotNull(element88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true); org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[[:lt(32)], <html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>, :lt(1)]" + "'", str95, "[[:lt(32)], <html>\n <head></head>\n <body>\n </body>\n</html>, <html>\n <head></head>\n <body></body>\n</html>, :lt(1)]"); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str5 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist4); boolean boolean7 = whitelist4.isSafeTag(""); org.jsoup.safety.Whitelist whitelist9 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = whitelist9.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>  \n </body>\n</html>", "#comment"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList19 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document17, "hi!"); org.jsoup.nodes.Element element21 = document17.tagName("hi!"); org.jsoup.nodes.Element element23 = document17.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode28 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.escapeMode(escapeMode28); org.jsoup.nodes.Entities.EscapeMode escapeMode30 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.escapeMode(escapeMode30); boolean boolean32 = outputSettings29.prettyPrint(); java.lang.String str33 = org.jsoup.Jsoup.clean(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", "[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]", whitelist9, outputSettings29); java.nio.charset.Charset charset34 = outputSettings29.charset(); java.nio.charset.Charset charset35 = outputSettings29.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings29.clone(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[hi!$=  ]" + "'", str5, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(nodeList19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "&colon;containsOwn&lpar;&lsqb;&colon;lt&lpar;32&rpar;&ast;&equals;&period;&NewLine; &NewLine; &NewLine;&rbrack;" + "'", str33, "&colon;containsOwn&lpar;&lsqb;&colon;lt&lpar;32&rpar;&ast;&equals;&period;&NewLine; &NewLine; &NewLine;&rbrack;"); org.junit.Assert.assertNotNull(charset34); org.junit.Assert.assertNotNull(charset35); org.junit.Assert.assertNotNull(outputSettings36); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str2 = org.jsoup.Jsoup.clean("", whitelist1); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document4 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document document5 = cleaner3.clean(document4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:lt(32)]", pattern1); org.jsoup.select.Evaluator.Class class4 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); org.jsoup.select.Elements elements17 = document8.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element19 = document8.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes20 = document8.attributes(); org.jsoup.nodes.Element element22 = document8.prepend("[^hi!]"); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document26, "hi!"); org.jsoup.nodes.Element element30 = document26.tagName("hi!"); org.jsoup.nodes.Element element32 = document26.append(""); org.jsoup.nodes.Element element35 = document26.attr("#document", "#document"); org.jsoup.nodes.Element element36 = document26.body(); boolean boolean37 = class4.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document26); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner41 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining44 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document46 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.tagName("hi!"); org.jsoup.nodes.Element element56 = document50.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings57 = document50.outputSettings(); boolean boolean58 = attributeWithValueContaining44.matches((org.jsoup.nodes.Element) document46, (org.jsoup.nodes.Element) document50); org.jsoup.nodes.Document document59 = cleaner41.clean(document50); org.jsoup.nodes.Element element61 = document59.html("#comment"); org.jsoup.nodes.Document document62 = document59.normalise(); java.lang.String str63 = document62.toString(); org.jsoup.select.Elements elements65 = document62.getElementsByIndexEquals(4); boolean boolean66 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document62); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNull(element19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>\n #comment \n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>\n #comment \n </body>\n</html>"); org.junit.Assert.assertNotNull(elements65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); java.lang.String str2 = matches1.toString(); java.lang.String str3 = matches1.toString(); java.lang.String str4 = matches1.toString(); java.lang.String str5 = matches1.toString(); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue8 = new org.jsoup.select.Evaluator.AttributeWithValue("#data", "[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]"); java.lang.String str9 = attributeWithValue8.toString(); java.lang.String str10 = attributeWithValue8.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist13); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining17 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document19 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document23, "hi!"); org.jsoup.nodes.Element element27 = document23.tagName("hi!"); org.jsoup.nodes.Element element29 = document23.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings30 = document23.outputSettings(); boolean boolean31 = attributeWithValueContaining17.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document23); org.jsoup.nodes.Document document32 = cleaner14.clean(document23); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str35 = document34.toString(); java.lang.String str36 = document34.baseUri(); org.jsoup.nodes.Document document37 = cleaner14.clean(document34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("                                                  "); org.jsoup.nodes.Document document40 = cleaner14.clean(document39); org.jsoup.nodes.Document document42 = new org.jsoup.nodes.Document("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document46, "hi!"); org.jsoup.nodes.Element element49 = document46.empty(); org.jsoup.nodes.Element element51 = document46.removeClass("hi!"); java.lang.String str52 = document46.id(); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList58 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document56, "hi!"); org.jsoup.nodes.Element element59 = document56.empty(); org.jsoup.nodes.Element element61 = document56.removeClass("hi!"); java.lang.String str62 = document56.nodeName(); org.jsoup.nodes.Document.QuirksMode quirksMode63 = document56.quirksMode(); org.jsoup.nodes.Document document64 = document46.quirksMode(quirksMode63); java.lang.String str65 = document64.id(); org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList71 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document69, "hi!"); org.jsoup.nodes.Element element73 = document69.tagName("hi!"); org.jsoup.nodes.Element element75 = document69.append(""); java.lang.String str76 = document69.toString(); org.jsoup.nodes.Element element78 = document69.prependElement("\nhi!"); org.jsoup.select.Elements elements80 = document69.getElementsMatchingOwnText(""); org.jsoup.nodes.Document.QuirksMode quirksMode81 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document82 = document69.quirksMode(quirksMode81); org.jsoup.nodes.Document document83 = document64.quirksMode(quirksMode81); org.jsoup.nodes.Document document84 = document42.quirksMode(quirksMode81); org.jsoup.select.Elements elements86 = document42.getElementsMatchingOwnText("[  =hi!]"); boolean boolean87 = attributeWithValue8.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document42); org.jsoup.nodes.Document document88 = document42.normalise(); org.jsoup.nodes.Document document91 = org.jsoup.parser.Parser.parseBodyFragment(":gt(100)", ""); org.jsoup.select.Elements elements93 = document91.getElementsByTag("\n<!--hi!-->"); java.util.List<org.jsoup.nodes.DataNode> dataNodeList94 = document91.dataNodes(); org.jsoup.nodes.Document document95 = document91.clone(); // The following exception was thrown during execution in test generation try { boolean boolean96 = matches1.matches((org.jsoup.nodes.Element) document88, (org.jsoup.nodes.Element) document95); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matches(null" + "'", str2, ":matches(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matches(null" + "'", str3, ":matches(null"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":matches(null" + "'", str4, ":matches(null"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":matches(null" + "'", str5, ":matches(null"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]" + "'", str9, "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]" + "'", str10, "[#data=[<html>\n <head></head>\n <body>  \n </body>\n</html>=hi!]]"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str35, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, ""); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(nodeList58); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertTrue("'" + quirksMode63 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode63.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(nodeList71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str76, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertTrue("'" + quirksMode81 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode81.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertNotNull(elements86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertNotNull(document88); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertNotNull(elements93); org.junit.Assert.assertNotNull(dataNodeList94); org.junit.Assert.assertNotNull(document95); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList0 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); boolean boolean2 = objList0.equals((java.lang.Object) ":lt(32)"); java.lang.Object obj3 = objList0.peekFirst(); org.jsoup.helper.DescendableLinkedList<java.lang.Object> objList4 = new org.jsoup.helper.DescendableLinkedList<java.lang.Object>(); java.lang.Object obj5 = objList4.poll(); java.util.ListIterator<java.lang.Object> objItor6 = objList4.listIterator(); objList0.addFirst((java.lang.Object) objItor6); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element11 = document10.body(); org.jsoup.nodes.Element element13 = element11.append("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); int int14 = objList0.lastIndexOf((java.lang.Object) "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); java.util.stream.Stream<org.jsoup.nodes.Node> nodeStream21 = nodeList20.stream(); boolean boolean22 = objList0.addAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList20); java.util.ListIterator<java.lang.Object> objItor23 = objList0.listIterator(); objList0.addFirst((java.lang.Object) "[  ^=hi!]"); java.lang.Object obj26 = objList0.getLast(); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist29); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining33 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document35 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document39, "hi!"); org.jsoup.nodes.Element element43 = document39.tagName("hi!"); org.jsoup.nodes.Element element45 = document39.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings46 = document39.outputSettings(); boolean boolean47 = attributeWithValueContaining33.matches((org.jsoup.nodes.Element) document35, (org.jsoup.nodes.Element) document39); org.jsoup.nodes.Document document48 = cleaner30.clean(document39); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList54 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document52, "hi!"); org.jsoup.nodes.Element element56 = document52.tagName("hi!"); org.jsoup.nodes.Element element58 = document52.append(""); java.lang.String str59 = document52.toString(); java.lang.String str60 = document52.id(); org.jsoup.nodes.Node node61 = document52.parent(); org.jsoup.nodes.Document document62 = cleaner30.clean(document52); java.lang.String str63 = document52.title(); org.jsoup.nodes.Element element66 = document52.attr(":lt(32)=\"\nhi!\"", "[<html>\n <head></head>\n <body>  \n </body>\n</html>*=:lt(32)]"); boolean boolean67 = objList0.add((java.lang.Object) element66); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(obj3); org.junit.Assert.assertNull(obj5); org.junit.Assert.assertNotNull(objItor6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(nodeStream21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(objItor23); org.junit.Assert.assertNotNull(obj26); org.junit.Assert.assertEquals(obj26.toString(), "\nhi!"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "\nhi!"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "\nhi!"); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(nodeList54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNull(node61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str14 = org.jsoup.Jsoup.clean(":lt(32)", whitelist13); org.jsoup.safety.Whitelist whitelist18 = whitelist13.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray25 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist26 = whitelist13.addTags(strArray25); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addProtocols(":matchesOwn(null", "hi!", strArray25); org.jsoup.safety.Whitelist whitelist28 = whitelist2.addAttributes("[^hi!]", strArray25); org.jsoup.safety.Whitelist whitelist32 = whitelist2.addEnforcedAttribute("*", "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "\n<!---->"); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str44 = org.jsoup.Jsoup.clean(":lt(32)", whitelist43); org.jsoup.safety.Whitelist whitelist48 = whitelist43.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray55 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist56 = whitelist43.addTags(strArray55); org.jsoup.safety.Whitelist whitelist57 = whitelist39.addProtocols(":matchesOwn(null", "hi!", strArray55); java.lang.String[] strArray66 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean67 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray66); org.jsoup.safety.Whitelist whitelist68 = whitelist57.addProtocols("\n<!--hi!-->", "#document", strArray66); org.jsoup.safety.Whitelist whitelist69 = whitelist2.addProtocols("<html>\n <head></head>\n <body>\n </body>\n</html>", "[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]", strArray66); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray66, "<!DOCTYPE [hi!=.<html>\n <head></head>\n <body></body>\n</html>] PUBLIC \":contains(:gt(100)\" \":lt(32)=\"\"=\".\"\">"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray66); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray66); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray66); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray66, ":contains(:matchesown(null"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + ":lt(32)" + "'", str14, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + ":lt(32)" + "'", str44, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("<html>\n <head></head>\n <body></body>\n</html>", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = element9.toggleClass("#document"); org.jsoup.nodes.Element element13 = element11.tagName("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parseBodyFragment(""); boolean boolean16 = attributeWithValueStarting2.matches(element11, (org.jsoup.nodes.Element) document15); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes23 = whitelist21.getEnforcedAttributes("#text"); java.lang.String str24 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist21); java.lang.String str25 = org.jsoup.Jsoup.clean("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>^=hi!]", "[]", whitelist21); org.jsoup.select.Evaluator.Class class28 = new org.jsoup.select.Evaluator.Class("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document32, "hi!"); org.jsoup.nodes.Element element36 = document32.tagName("hi!"); org.jsoup.nodes.Element element38 = document32.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.select.Elements elements41 = document32.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Element element43 = document32.getElementById("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Attributes attributes44 = document32.attributes(); org.jsoup.nodes.Element element46 = document32.prepend("[^hi!]"); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document50, "hi!"); org.jsoup.nodes.Element element54 = document50.tagName("hi!"); org.jsoup.nodes.Element element56 = document50.append(""); org.jsoup.nodes.Element element59 = document50.attr("#document", "#document"); org.jsoup.nodes.Element element60 = document50.body(); boolean boolean61 = class28.matches((org.jsoup.nodes.Element) document32, (org.jsoup.nodes.Element) document50); org.jsoup.nodes.Attribute attribute64 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); boolean boolean65 = whitelist21.isSafeAttribute(":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", (org.jsoup.nodes.Element) document32, attribute64); org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList71 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document69, "hi!"); org.jsoup.nodes.Element element73 = document69.text(""); org.jsoup.select.Elements elements76 = document69.getElementsByAttributeValueEnding("[^hi!]", "#document"); org.jsoup.nodes.Element element78 = document69.prependText("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); java.util.Map<java.lang.String, java.lang.String> strMap79 = element78.dataset(); boolean boolean80 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document32, element78); org.jsoup.nodes.Element element81 = null; org.jsoup.nodes.Document document84 = org.jsoup.parser.Parser.parseBodyFragment("", ":contains(:matchesown(null"); boolean boolean85 = attributeWithValueStarting2.matches(element81, (org.jsoup.nodes.Element) document84); org.jsoup.nodes.Document document89 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList91 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document89, "hi!"); org.jsoup.select.Elements elements93 = document89.getElementsByAttribute("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document96 = org.jsoup.Jsoup.parseBodyFragment(":contains(:gt(100)", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); boolean boolean97 = document96.hasText(); boolean boolean98 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document89, (org.jsoup.nodes.Element) document96); java.lang.String str99 = attributeWithValueStarting2.toString(); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(attributes23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  ^=hi!]" + "'", str25, "[  ^=hi!]"); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(elements41); org.junit.Assert.assertNull(element43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(attribute64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(nodeList71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(elements76); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(strMap79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(nodeList91); org.junit.Assert.assertNotNull(elements93); org.junit.Assert.assertNotNull(document96); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]" + "'", str99, "[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str4 = org.jsoup.Jsoup.clean(":lt(32)", whitelist3); boolean boolean6 = whitelist3.isSafeTag(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element13 = document10.empty(); org.jsoup.nodes.Element element15 = document10.removeClass("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList21 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document19, "hi!"); org.jsoup.nodes.Element element23 = document19.tagName("hi!"); org.jsoup.nodes.Element element25 = document19.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.prettyPrint(false); org.jsoup.nodes.Document document29 = document10.outputSettings(outputSettings28); java.lang.String str30 = org.jsoup.Jsoup.clean("[:lt(32)]", "*", whitelist3, outputSettings28); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str34 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist33); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str45 = org.jsoup.Jsoup.clean(":lt(32)", whitelist44); org.jsoup.safety.Whitelist whitelist49 = whitelist44.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray56 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist57 = whitelist44.addTags(strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist40.addProtocols(":matchesOwn(null", "hi!", strArray56); java.lang.String[] strArray67 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean68 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist58.addProtocols("\n<!--hi!-->", "#document", strArray67); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray67); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray67); org.jsoup.safety.Whitelist whitelist72 = whitelist33.addAttributes("*", strArray67); org.jsoup.safety.Whitelist whitelist73 = whitelist3.addTags(strArray67); org.jsoup.safety.Cleaner cleaner74 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.safety.Whitelist whitelist78 = whitelist3.addEnforcedAttribute(":matches(null", "html", "[  *=:lt(32)]"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(32)" + "'", str4, ":lt(32)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(nodeList21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[:lt(32)]" + "'", str30, "[:lt(32)]"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[hi!$=  ]" + "'", str34, "[hi!$=  ]"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + ":lt(32)" + "'", str45, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist78); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str7 = org.jsoup.Jsoup.clean(":lt(32)", whitelist6); org.jsoup.safety.Whitelist whitelist11 = whitelist6.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray18 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist19 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addAttributes(":gt(100)", strArray18); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray18); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray18); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray18, "[  =hi!]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ":lt(32)" + "'", str7, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str3 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist2); boolean boolean5 = whitelist2.isSafeTag(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Document document10 = document9.normalise(); java.lang.String str11 = document10.title(); org.jsoup.nodes.Element element13 = document10.text(":matchesOwn(null"); org.jsoup.nodes.Element element15 = document10.tagName(":eq(1)"); org.jsoup.nodes.Attribute attribute18 = org.jsoup.nodes.Attribute.createFromEncoded("#comment", ""); java.lang.String str19 = attribute18.getKey(); java.lang.String str20 = attribute18.getValue(); java.lang.String str22 = attribute18.setValue("<hi!></hi!>:contains(:gt(100)<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean23 = whitelist2.isSafeAttribute(".<html>\n <head></head>\n <body></body>\n</html>", element15, attribute18); java.lang.String str24 = attribute18.html(); java.lang.String str25 = attribute18.getKey(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!$=  ]" + "'", str3, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(attribute18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#comment" + "'", str19, "#comment"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#comment=\"&lt;hi!&gt;&lt;/hi!&gt;:contains(:gt(100)&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\"" + "'", str24, "#comment=\"&lt;hi!&gt;&lt;/hi!&gt;:contains(:gt(100)&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\""); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#comment" + "'", str25, "#comment"); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = element11.toString(); boolean boolean14 = element11.hasAttr(""); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Element element26 = element24.removeClass("hi!"); org.jsoup.select.Elements elements29 = element24.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element31 = element24.prependElement("hi!"); boolean boolean32 = element31.hasText(); element31.remove(); boolean boolean34 = id1.matches(element11, element31); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining41 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); boolean boolean55 = attributeWithValueContaining41.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document56 = cleaner38.clean(document47); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str59 = document58.toString(); java.lang.String str60 = document58.baseUri(); org.jsoup.nodes.Document document61 = cleaner38.clean(document58); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element69 = document66.empty(); org.jsoup.nodes.Element element71 = document66.removeClass("hi!"); org.jsoup.nodes.Element element73 = element71.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList74 = element73.siblingNodes(); org.jsoup.nodes.Element element76 = element73.addClass(":gt(100)"); org.jsoup.nodes.Node node77 = element73.parent(); java.lang.String str79 = element73.absUrl("[^hi!]"); org.jsoup.select.Elements elements81 = element73.getElementsByIndexGreaterThan((int) 'a'); boolean boolean82 = id1.matches((org.jsoup.nodes.Element) document62, element73); org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document86 = parser83.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document89 = parser83.parseInput("hi!", "#comment"); org.jsoup.nodes.Document document91 = org.jsoup.nodes.Document.createShell("hi!"); java.util.regex.Pattern pattern92 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn93 = new org.jsoup.select.Evaluator.MatchesOwn(pattern92); boolean boolean94 = document91.equals((java.lang.Object) pattern92); org.jsoup.nodes.Element element97 = document91.attr("[.]", ".<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean98 = id1.matches((org.jsoup.nodes.Element) document89, element97); java.lang.String str99 = id1.toString(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNull(node77); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(parser83); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(element97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertEquals("'" + str99 + "' != '" + "#hi!" + "'", str99, "#hi!"); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList10 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document8, "hi!"); org.jsoup.nodes.Element element12 = document8.tagName("hi!"); org.jsoup.nodes.Element element14 = document8.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document8.outputSettings(); boolean boolean16 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element18 = document8.toggleClass("#doctype"); org.jsoup.nodes.Element element19 = document8.head(); org.jsoup.select.Elements elements21 = document8.getElementsByAttributeStarting(":gt(100)"); int int22 = document8.siblingIndex(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining29 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); boolean boolean43 = attributeWithValueContaining29.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document document44 = cleaner26.clean(document35); org.jsoup.select.Evaluator.IndexLessThan indexLessThan46 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str50 = document49.ownText(); org.jsoup.nodes.Node node53 = document49.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList59 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document57, "hi!"); org.jsoup.nodes.Element element61 = document57.tagName("hi!"); org.jsoup.nodes.Element element63 = document57.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings64 = document57.outputSettings(); org.jsoup.select.Elements elements66 = document57.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element68 = document57.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element70 = document57.createElement(" hi!"); org.jsoup.select.Elements elements72 = document57.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean73 = indexLessThan46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document57); org.jsoup.nodes.Document document74 = cleaner26.clean(document57); boolean boolean75 = document8.equals((java.lang.Object) document74); org.jsoup.nodes.Element element76 = document8.nextElementSibling(); java.lang.String str77 = document8.html(); org.jsoup.select.Elements elements79 = document8.getElementsByIndexEquals((int) '#'); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(nodeList10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(nodeList59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements79); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("#comment", "<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", ":contains(:matchesown(null"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes11 = whitelist9.getEnforcedAttributes("#text"); java.lang.String str12 = org.jsoup.Jsoup.clean(":lt(32)=\"\"=\".\"", whitelist9); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList18 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document16, "hi!"); org.jsoup.nodes.Element element20 = document16.tagName("hi!"); org.jsoup.nodes.Element element22 = document16.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings23 = document16.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings23.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.indentAmount((int) (short) 0); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings24.indentAmount((int) (byte) 1); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings24.prettyPrint(true); int int33 = outputSettings32.indentAmount(); int int34 = outputSettings32.indentAmount(); java.lang.String str35 = org.jsoup.Jsoup.clean("[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]", "[[:gt(100)]$=:gt(100)]", whitelist9, outputSettings32); org.jsoup.nodes.Document document36 = document5.outputSettings(outputSettings32); org.jsoup.parser.Parser parser37 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document40 = parser37.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); java.util.Set<java.lang.String> strSet41 = document40.classNames(); org.jsoup.nodes.Element element42 = document36.classNames(strSet41); boolean boolean43 = document2.equals((java.lang.Object) document36); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ":lt(32)=&quot;&quot;=&quot;.&quot;" + "'", str12, ":lt(32)=&quot;&quot;=&quot;.&quot;"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(nodeList18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[!=hi!]" + "'", str35, "[!=hi!]"); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(parser37); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(strSet41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\nhi!", pattern1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document6, "hi!"); org.jsoup.nodes.Element element9 = document6.empty(); org.jsoup.nodes.Element element11 = document6.removeClass("hi!"); java.lang.String str12 = document6.id(); org.jsoup.nodes.Node node13 = document6.previousSibling(); org.jsoup.nodes.Node node14 = document6.clone(); java.lang.String str15 = document6.id(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining22 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document24 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document28, "hi!"); org.jsoup.nodes.Element element32 = document28.tagName("hi!"); org.jsoup.nodes.Element element34 = document28.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); boolean boolean36 = attributeWithValueContaining22.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document28); org.jsoup.nodes.Document document37 = cleaner19.clean(document28); org.jsoup.helper.Validate.notNull((java.lang.Object) document28, ""); boolean boolean40 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document6, (org.jsoup.nodes.Element) document28); org.jsoup.select.Evaluator.IndexLessThan indexLessThan42 = new org.jsoup.select.Evaluator.IndexLessThan((-1)); org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); java.lang.String str46 = document45.ownText(); org.jsoup.nodes.Node node49 = document45.attr("<hi!>\n [^hi!]\n</hi!>", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList55 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document53, "hi!"); org.jsoup.nodes.Element element57 = document53.tagName("hi!"); org.jsoup.nodes.Element element59 = document53.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings60 = document53.outputSettings(); org.jsoup.select.Elements elements62 = document53.getElementsMatchingText("hi!"); org.jsoup.nodes.Element element64 = document53.removeClass("[:lt(32)]"); org.jsoup.nodes.Element element66 = document53.createElement(" hi!"); org.jsoup.select.Elements elements68 = document53.getElementsContainingOwnText(":matchesOwn(null"); boolean boolean69 = indexLessThan42.matches((org.jsoup.nodes.Element) document45, (org.jsoup.nodes.Element) document53); org.jsoup.nodes.Element element71 = document45.getElementById("<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining74 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document76 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document80 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document80, "hi!"); org.jsoup.nodes.Element element84 = document80.tagName("hi!"); org.jsoup.nodes.Element element86 = document80.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings87 = document80.outputSettings(); boolean boolean88 = attributeWithValueContaining74.matches((org.jsoup.nodes.Element) document76, (org.jsoup.nodes.Element) document80); org.jsoup.nodes.Element element90 = document80.toggleClass("#doctype"); org.jsoup.nodes.Element element91 = document80.head(); org.jsoup.nodes.Element element93 = element91.after("#:lt(32)=\"\""); org.jsoup.nodes.Element element95 = element91.prepend("[^  ]"); boolean boolean96 = attributeWithValueMatching2.matches(element71, element91); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNull(node13); org.junit.Assert.assertNotNull(node14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(nodeList55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(elements62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(elements68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNull(element71); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertNotNull(element93); org.junit.Assert.assertNotNull(element95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("hi!"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document5, "hi!"); org.jsoup.nodes.Element element9 = document5.tagName("hi!"); org.jsoup.nodes.Element element11 = document5.append(""); java.lang.String str12 = element11.toString(); boolean boolean14 = element11.hasAttr(""); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document18, "hi!"); org.jsoup.nodes.Element element22 = document18.tagName("hi!"); org.jsoup.nodes.Element element24 = document18.append(""); org.jsoup.nodes.Element element26 = element24.removeClass("hi!"); org.jsoup.select.Elements elements29 = element24.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.nodes.Element element31 = element24.prependElement("hi!"); boolean boolean32 = element31.hasText(); element31.remove(); boolean boolean34 = id1.matches(element11, element31); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining41 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document47, "hi!"); org.jsoup.nodes.Element element51 = document47.tagName("hi!"); org.jsoup.nodes.Element element53 = document47.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document47.outputSettings(); boolean boolean55 = attributeWithValueContaining41.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document47); org.jsoup.nodes.Document document56 = cleaner38.clean(document47); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str59 = document58.toString(); java.lang.String str60 = document58.baseUri(); org.jsoup.nodes.Document document61 = cleaner38.clean(document58); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element69 = document66.empty(); org.jsoup.nodes.Element element71 = document66.removeClass("hi!"); org.jsoup.nodes.Element element73 = element71.toggleClass(""); java.util.List<org.jsoup.nodes.Node> nodeList74 = element73.siblingNodes(); org.jsoup.nodes.Element element76 = element73.addClass(":gt(100)"); org.jsoup.nodes.Node node77 = element73.parent(); java.lang.String str79 = element73.absUrl("[^hi!]"); org.jsoup.select.Elements elements81 = element73.getElementsByIndexGreaterThan((int) 'a'); boolean boolean82 = id1.matches((org.jsoup.nodes.Element) document62, element73); org.jsoup.parser.Parser parser83 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document86 = parser83.parseInput("<html>\n <head></head>\n <body>  \n </body>\n</html>", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); org.jsoup.nodes.Document document89 = parser83.parseInput("hi!", "#comment"); org.jsoup.nodes.Document document91 = org.jsoup.nodes.Document.createShell("hi!"); java.util.regex.Pattern pattern92 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn93 = new org.jsoup.select.Evaluator.MatchesOwn(pattern92); boolean boolean94 = document91.equals((java.lang.Object) pattern92); org.jsoup.nodes.Element element97 = document91.attr("[.]", ".<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean98 = id1.matches((org.jsoup.nodes.Element) document89, element97); org.jsoup.nodes.Element element99 = element97.previousElementSibling(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str59, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(nodeList74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNull(node77); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(parser83); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(element97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertNull(element99); }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList5 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document3, "hi!"); org.jsoup.nodes.Element element7 = document3.tagName("hi!"); org.jsoup.nodes.Element element9 = document3.append(""); org.jsoup.nodes.Element element11 = element9.removeClass("hi!"); org.jsoup.select.Elements elements14 = element9.getElementsByAttributeValue("#text", "\nhi!"); org.jsoup.helper.Validate.notNull((java.lang.Object) element9, ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList22 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document20, "hi!"); org.jsoup.nodes.Element element23 = document20.empty(); org.jsoup.nodes.Element element25 = element23.toggleClass("#document"); org.jsoup.nodes.Element element27 = element25.tagName("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray31 = new java.lang.String[] { "\n<!--hi!-->", "", "[:lt(32)]" }; java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31); org.jsoup.nodes.Element element34 = element25.classNames((java.util.Set<java.lang.String>) strSet32); org.jsoup.nodes.Element element35 = element9.classNames((java.util.Set<java.lang.String>) strSet32); org.jsoup.select.Elements elements37 = element35.getElementsContainingText("#text"); java.util.regex.Pattern pattern39 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching40 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("#.\n<!---->", pattern39); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner44 = new org.jsoup.safety.Cleaner(whitelist43); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining47 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document49 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList55 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document53, "hi!"); org.jsoup.nodes.Element element57 = document53.tagName("hi!"); org.jsoup.nodes.Element element59 = document53.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings60 = document53.outputSettings(); boolean boolean61 = attributeWithValueContaining47.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document53); org.jsoup.nodes.Document document62 = cleaner44.clean(document53); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document66, "hi!"); org.jsoup.nodes.Element element70 = document66.tagName("hi!"); document66.title("hi!"); org.jsoup.select.Elements elements74 = document66.getElementsByAttributeStarting("[<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>!=[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]]"); boolean boolean75 = attributeWithValueMatching40.matches((org.jsoup.nodes.Element) document53, (org.jsoup.nodes.Element) document66); org.jsoup.nodes.Element element76 = element35.appendChild((org.jsoup.nodes.Node) document66); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element78 = element76.prependElement(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeList5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements14); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(nodeList22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(nodeList55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(element76); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.nodes.Attributes attributes4 = whitelist2.getEnforcedAttributes("#text"); java.lang.String str5 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n </body>\n</html>", whitelist2); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); java.lang.String[] strArray22 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean23 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray22); org.jsoup.safety.Whitelist whitelist24 = whitelist13.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray22); boolean boolean25 = org.jsoup.helper.StringUtil.in("#text", strArray22); boolean boolean26 = org.jsoup.helper.StringUtil.in("\n<!---->", strArray22); org.jsoup.safety.Whitelist whitelist27 = whitelist2.addAttributes("[:lt(32)]", strArray22); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist31 = whitelist27.addEnforcedAttribute("[<html>\n <head></head> \n <body> \n </body>\n</html>]", "", "[[<!---->!=:contains(:matchesown(null]^=:lt(32)=\"\"=\".\"]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(whitelist27); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); java.lang.String[] strArray13 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean14 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist4.addProtocols("\n<!---->", "<html>\n <head></head>\n <body>\n [^hi!]\n </body>\n</html>", strArray13); org.jsoup.safety.Whitelist whitelist19 = whitelist4.addEnforcedAttribute(":lt(100)", "[text=\"hi!\" #document=\"#document\"!=:eq(1)]", ". <!---->"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String str24 = org.jsoup.Jsoup.clean("[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", ":containsOwn([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", whitelist23); boolean boolean26 = whitelist23.isSafeTag(""); org.jsoup.safety.Whitelist whitelist28 = whitelist23.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist36 = whitelist30.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.safety.Whitelist whitelist40 = whitelist30.addEnforcedAttribute("hi!", "#document", "hi!"); java.lang.String str41 = org.jsoup.Jsoup.clean("hi!", whitelist30); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist45 = whitelist43.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.relaxed(); java.lang.String str52 = org.jsoup.Jsoup.clean(":lt(32)", whitelist51); org.jsoup.safety.Whitelist whitelist56 = whitelist51.addEnforcedAttribute(":lt(32)", "hi!", ".<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String[] strArray63 = new java.lang.String[] { "[hi!$=<html>\n <head></head>\n <body></body>\n</html>]", "<html>\n <head></head>\n <body></body>\n</html>", "#document", "[^hi!]", "hi!", "\n<!---->" }; org.jsoup.safety.Whitelist whitelist64 = whitelist51.addTags(strArray63); org.jsoup.safety.Whitelist whitelist65 = whitelist47.addProtocols(":matchesOwn(null", "hi!", strArray63); java.lang.String[] strArray74 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean75 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray74); org.jsoup.safety.Whitelist whitelist76 = whitelist65.addProtocols("\n<!--hi!-->", "#document", strArray74); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray74); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray74); org.jsoup.safety.Whitelist whitelist79 = whitelist30.addAttributes("[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]", strArray74); org.jsoup.safety.Whitelist whitelist80 = whitelist23.addTags(strArray74); boolean boolean81 = org.jsoup.helper.StringUtil.in(":lt(32)=\"[.]\"", strArray74); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray74); org.jsoup.safety.Whitelist whitelist83 = whitelist4.addTags(strArray74); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[hi!$=  ]" + "'", str24, "[hi!$=  ]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!"); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + ":lt(32)" + "'", str52, ":lt(32)"); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(strArray74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist79); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertNotNull(whitelist83); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.parser.Parser parser2 = parser0.setTrackErrors(0); boolean boolean3 = parser0.isTrackErrors(); org.jsoup.parser.Parser parser5 = parser0.setTrackErrors((int) (byte) 0); org.jsoup.nodes.Document document8 = parser0.parseInput(":lt(10)", ":eq(1)"); org.jsoup.nodes.Element element9 = document8.clone(); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist12); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining16 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document18 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document22, "hi!"); org.jsoup.nodes.Element element26 = document22.tagName("hi!"); org.jsoup.nodes.Element element28 = document22.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings29 = document22.outputSettings(); boolean boolean30 = attributeWithValueContaining16.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document22); org.jsoup.nodes.Document document31 = cleaner13.clean(document22); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document35, "hi!"); org.jsoup.nodes.Element element39 = document35.tagName("hi!"); org.jsoup.nodes.Element element41 = document35.append(""); java.lang.String str42 = document35.toString(); java.lang.String str43 = document35.id(); org.jsoup.nodes.Node node44 = document35.parent(); org.jsoup.nodes.Document document45 = cleaner13.clean(document35); java.lang.String str46 = document35.title(); org.jsoup.nodes.Element element48 = document35.removeClass(":eq(1)"); org.jsoup.nodes.Element element49 = document35.clone(); org.jsoup.nodes.Element element51 = document35.prependText("<html>\n <head></head>\n <body></body>\n</html>:containsown([:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean52 = document8.equals((java.lang.Object) document35); java.lang.String str53 = document35.outerHtml(); org.junit.Assert.assertNotNull(parser0); org.junit.Assert.assertNotNull(parser2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(parser5); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(nodeList24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str42, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNull(node44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;:containsown([:lt(32)*=.&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;]&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;\n<html>\n <head></head>\n <body></body>\n</html>" + "'", str53, "&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;:containsown([:lt(32)*=.&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;]&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;\n<html>\n <head></head>\n <body></body>\n</html>"); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining6 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(":lt(32)", ".<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document12, "hi!"); org.jsoup.nodes.Element element16 = document12.tagName("hi!"); org.jsoup.nodes.Element element18 = document12.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); boolean boolean20 = attributeWithValueContaining6.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Document document21 = cleaner3.clean(document12); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str24 = document23.toString(); java.lang.String str25 = document23.baseUri(); org.jsoup.nodes.Document document26 = cleaner3.clean(document23); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); java.lang.String str29 = document28.toString(); java.lang.String str30 = document28.baseUri(); org.jsoup.nodes.Document.QuirksMode quirksMode31 = document28.quirksMode(); boolean boolean33 = document28.hasClass(":lt(32)=\"[.]\""); boolean boolean34 = cleaner3.isValid(document28); org.jsoup.nodes.Document document35 = document28.ownerDocument(); org.jsoup.nodes.Element element37 = document28.toggleClass("[[hi!$=<html> <head></head> <body></body> </html>]^=]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>  \n </body>\n</html>" + "'", str29, "<html>\n <head></head>\n <body>  \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertTrue("'" + quirksMode31 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode31.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element37); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(true); java.lang.String str6 = org.jsoup.Jsoup.clean(".<html>\n <head></head>\n <body></body>\n</html>", whitelist5); boolean boolean8 = whitelist5.isSafeTag("[<html>\n <head></head>\n <body></body>\n</html>^=<hi!></hi!>\n<html>\n <head></head>\n <body></body>\n</html>]"); java.lang.String[] strArray18 = new java.lang.String[] { "#document", ".<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>", ":lt(32)", "[:lt(32)]" }; boolean boolean19 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body></body>\n</html>", strArray18); boolean boolean20 = org.jsoup.helper.StringUtil.in(" hi!", strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addProtocols(":lt(32)=\"\"", ".<html>\n <head></head>\n <body></body>\n</html>", strArray18); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(true); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document27, "hi!"); org.jsoup.nodes.Element element30 = document27.empty(); org.jsoup.nodes.Element element32 = document27.removeClass("hi!"); java.lang.String str33 = document27.id(); org.jsoup.nodes.Node node34 = document27.previousSibling(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document38, "hi!"); org.jsoup.nodes.Element element42 = document38.tagName("hi!"); org.jsoup.nodes.Element element44 = document38.append(""); org.jsoup.nodes.Document.OutputSettings outputSettings45 = document38.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.prettyPrint(false); boolean boolean48 = outputSettings47.prettyPrint(); boolean boolean49 = outputSettings47.prettyPrint(); org.jsoup.nodes.Document document50 = document27.outputSettings(outputSettings47); java.lang.String str51 = org.jsoup.Jsoup.clean("[[:lt(32)*=.<html>\n <head></head>\n <body></body>\n</html>]$=[<!--[hi!$=<html>\n <head></head>\n <body></body>\n</html>]-->!=hi!]]", "", whitelist23, outputSettings47); java.nio.charset.Charset charset52 = outputSettings47.charset(); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "." + "'", str6, "."); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(node34); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(nodeList40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[[:lt(32)*=.\n \n \n]$=[!=hi!]]" + "'", str51, "[[:lt(32)*=.\n \n \n]$=[!=hi!]]"); org.junit.Assert.assertNotNull(charset52); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist2); java.util.regex.Pattern pattern5 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching6 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document10, "hi!"); org.jsoup.nodes.Element element14 = document10.tagName("hi!"); org.jsoup.nodes.Element element16 = document10.append(""); java.lang.String str17 = document10.toString(); org.jsoup.nodes.Element element19 = document10.prependElement("\nhi!"); org.jsoup.select.Elements elements21 = document10.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment("hi!", (org.jsoup.nodes.Element) document25, "hi!"); org.jsoup.nodes.Element element29 = document25.tagName("hi!"); org.jsoup.nodes.Element element31 = document25.append(""); boolean boolean32 = attributeWithValueMatching6.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document25); org.jsoup.nodes.Element element33 = null; org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element37 = document36.body(); java.util.Map<java.lang.String, java.lang.String> strMap38 = document36.dataset(); boolean boolean39 = attributeWithValueMatching6.matches(element33, (org.jsoup.nodes.Element) document36); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragment("[^hi!]", "#text"); boolean boolean45 = attributeWithValueMatching6.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); org.jsoup.nodes.Document document46 = cleaner3.clean(document44); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str17, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(strMap38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(document46); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document.OutputSettings outputSettings3 = null; // The following exception was thrown during execution in test generation try { java.lang.String str4 = org.jsoup.Jsoup.clean("", " data=\"\"", whitelist2, outputSettings3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("data=\"\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("[data=\"\"=[hi!]]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); // The following exception was thrown during execution in test generation try { java.lang.String str26 = org.jsoup.Jsoup.clean("[data=\"\"=[hi!]]", "", whitelist2, outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("data=\"\"=\"\"", "hi!\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(" text=\"\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("data=\"\"=\"[hi!]\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document.OutputSettings outputSettings3 = null; // The following exception was thrown during execution in test generation try { java.lang.String str4 = org.jsoup.Jsoup.clean("[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", ":containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>", whitelist2, outputSettings3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean(":eq(10)", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("[data=\"\"=[hi!]]", " text=\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("[^hi!\n<html>\n <head></head>\n <body></body>\n</html>]", ":gt(52)", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.prettyPrint(true); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element33 = document31.val("hi!"); org.jsoup.nodes.Document document34 = document31.clone(); org.jsoup.select.Elements elements36 = document31.getElementsByIndexEquals((int) (byte) -1); java.lang.String str37 = document31.toString(); org.jsoup.select.Elements elements38 = document31.children(); org.jsoup.nodes.Element element39 = document31.parent(); org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element44 = document42.val("hi!"); org.jsoup.nodes.Document document45 = document42.clone(); org.jsoup.nodes.Document document46 = document42.clone(); java.lang.String str47 = document42.nodeName(); java.lang.String str49 = document42.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document42.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document document52 = document31.outputSettings(outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.clone(); org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element58 = document56.val("hi!"); org.jsoup.nodes.Document document59 = document56.clone(); org.jsoup.select.Elements elements61 = document56.getElementsByIndexEquals((int) (byte) -1); java.lang.String str62 = document56.toString(); org.jsoup.select.Elements elements63 = document56.children(); org.jsoup.nodes.Element element64 = document56.parent(); org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element69 = document67.val("hi!"); org.jsoup.nodes.Document document70 = document67.clone(); org.jsoup.nodes.Document document71 = document67.clone(); java.lang.String str72 = document67.nodeName(); java.lang.String str74 = document67.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList75 = document67.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings76 = document67.outputSettings(); org.jsoup.nodes.Document document77 = document56.outputSettings(outputSettings76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings51.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings24.escapeMode(escapeMode79); // The following exception was thrown during execution in test generation try { java.lang.String str82 = org.jsoup.Jsoup.clean("hi!\n<html>\n <head>\n <title> data=&quot;&quot;</title>\n </head>\n <body></body>\n</html>", "hi! <html> <head></head> <body></body> </html>", whitelist2, outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNull(element64); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "#document" + "'", str72, "#document"); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(dataNodeList75); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertNotNull(outputSettings81); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(".data=\"\"=\"[hi!]\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document5.getElementsByIndexEquals((int) (byte) -1); java.lang.String str11 = document5.toString(); org.jsoup.select.Elements elements12 = document5.children(); org.jsoup.nodes.Element element13 = document5.parent(); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element18 = document16.val("hi!"); org.jsoup.nodes.Document document19 = document16.clone(); org.jsoup.nodes.Document document20 = document16.clone(); java.lang.String str21 = document16.nodeName(); java.lang.String str23 = document16.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList24 = document16.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Document document26 = document5.outputSettings(outputSettings25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone(); // The following exception was thrown during execution in test generation try { java.lang.String str28 = org.jsoup.Jsoup.clean("[hi!]", "[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", whitelist2, outputSettings27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(dataNodeList24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(outputSettings27); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean(" data=\"\" hi!=\"\" text=\"\"=\"data=&quot;&quot;=&quot;&quot;\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(".hi!\n<html>\n <head></head>\n <body></body>\n</html>", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("<10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"></10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\">\n<html>\n <head></head>\n <body></body>\n</html>", "data=\"\"=\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.nodes.Document document9 = document5.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode10 = document9.quirksMode(); java.lang.String str11 = document9.title(); org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element16 = document14.val("hi!"); org.jsoup.nodes.Document document17 = document14.clone(); org.jsoup.select.Elements elements19 = document14.getElementsByIndexEquals((int) (byte) -1); org.jsoup.nodes.Attributes attributes20 = document14.attributes(); org.jsoup.nodes.Element element22 = document14.text("hi!\n<html>\n <head></head>\n <body></body>\n</html>"); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element27 = document25.val("hi!"); org.jsoup.nodes.Document document28 = document25.clone(); org.jsoup.select.Elements elements30 = document25.getElementsByIndexEquals((int) (byte) -1); java.lang.String str31 = document25.toString(); org.jsoup.select.Elements elements32 = document25.children(); org.jsoup.nodes.Element element33 = document25.parent(); org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element38 = document36.val("hi!"); org.jsoup.nodes.Document document39 = document36.clone(); org.jsoup.nodes.Document document40 = document36.clone(); java.lang.String str41 = document36.nodeName(); java.lang.String str43 = document36.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList44 = document36.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = document36.outputSettings(); org.jsoup.nodes.Document document46 = document25.outputSettings(outputSettings45); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.clone(); org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element52 = document50.val("hi!"); org.jsoup.nodes.Document document53 = document50.clone(); org.jsoup.select.Elements elements55 = document50.getElementsByIndexEquals((int) (byte) -1); java.lang.String str56 = document50.toString(); org.jsoup.select.Elements elements57 = document50.children(); org.jsoup.nodes.Element element58 = document50.parent(); org.jsoup.nodes.Document document61 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element63 = document61.val("hi!"); org.jsoup.nodes.Document document64 = document61.clone(); org.jsoup.nodes.Document document65 = document61.clone(); java.lang.String str66 = document61.nodeName(); java.lang.String str68 = document61.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList69 = document61.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = document61.outputSettings(); org.jsoup.nodes.Document document71 = document50.outputSettings(outputSettings70); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings70.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings45.escapeMode(escapeMode73); java.nio.charset.Charset charset75 = outputSettings45.charset(); org.jsoup.nodes.Document document76 = document14.outputSettings(outputSettings45); org.jsoup.nodes.Document document77 = document9.outputSettings(outputSettings45); // The following exception was thrown during execution in test generation try { java.lang.String str78 = org.jsoup.Jsoup.clean("", "[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", whitelist2, outputSettings45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertTrue("'" + quirksMode10 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode10.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(elements19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(elements30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str31, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertNull(element33); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "#document" + "'", str41, "#document"); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNotNull(dataNodeList44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str56, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertNull(element58); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "#document" + "'", str66, "#document"); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(dataNodeList69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings74); org.junit.Assert.assertNotNull(charset75); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(document77); }
public void test353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test353"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("[[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]]^=data=\"\" hi!=\"\" text=\"\"=\"data=&quot;&quot;=&quot;&quot;\"]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test354"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); // The following exception was thrown during execution in test generation try { java.lang.String str27 = org.jsoup.Jsoup.clean("hi!:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>10:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1.0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>10:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html> :containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>#:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html> :containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>false:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>100.0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html> :containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>10.0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>100:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>0.0", "            ", whitelist2, outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); }
public void test355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test355"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("", "[[data=\"\"=[hi!]]^=hi!]", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test356"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("text=\"\"=\"[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]]\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test357"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test358"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByIndexLessThan((int) (byte) -1); org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element15 = document13.val("hi!"); org.jsoup.nodes.Document document16 = document13.clone(); org.jsoup.select.Elements elements18 = document13.getElementsByIndexEquals((int) (byte) -1); java.lang.String str19 = document13.toString(); org.jsoup.select.Elements elements20 = document13.children(); org.jsoup.nodes.Element element21 = document13.parent(); org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element26 = document24.val("hi!"); org.jsoup.nodes.Document document27 = document24.clone(); org.jsoup.nodes.Document document28 = document24.clone(); java.lang.String str29 = document24.nodeName(); java.lang.String str31 = document24.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList32 = document24.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = document24.outputSettings(); org.jsoup.nodes.Document document34 = document13.outputSettings(outputSettings33); org.jsoup.nodes.Document document35 = document8.outputSettings(outputSettings33); boolean boolean36 = outputSettings33.prettyPrint(); // The following exception was thrown during execution in test generation try { java.lang.String str37 = org.jsoup.Jsoup.clean("[[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]*=:containsown(hi!]", "text=\"\"", whitelist2, outputSettings33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#document" + "'", str29, "#document"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(dataNodeList32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test359"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("[^hi!\n<html>\n <head></head>\n <body></body>\n</html>]", "hi!\n<html>\n <head></head>\n <body></body>\n</html>", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test360"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("hi!", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test361"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("hi!\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test362"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); // The following exception was thrown during execution in test generation try { java.lang.String str27 = org.jsoup.Jsoup.clean("[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]", "[", whitelist2, outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); }
public void test363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test363"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document5.getElementsByIndexEquals((int) (byte) -1); java.lang.String str11 = document5.toString(); org.jsoup.select.Elements elements12 = document5.children(); org.jsoup.nodes.Element element13 = document5.parent(); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element18 = document16.val("hi!"); org.jsoup.nodes.Document document19 = document16.clone(); org.jsoup.nodes.Document document20 = document16.clone(); java.lang.String str21 = document16.nodeName(); java.lang.String str23 = document16.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList24 = document16.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Document document26 = document5.outputSettings(outputSettings25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone(); // The following exception was thrown during execution in test generation try { java.lang.String str28 = org.jsoup.Jsoup.clean("hi!\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;", " data=\"\" data=\"\"=\"\"", whitelist2, outputSettings25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(dataNodeList24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(outputSettings27); }
public void test364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test364"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("[^hi!\n<html>\n <head></head>\n <body></body>\n</html>]", "<10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"></10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\">\n<html>\n <head></head>\n <body></body>\n</html>", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test365"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n [hi!]\n </body>\n</html>", ":gt(52)", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document5.getElementsByIndexEquals((int) (byte) -1); java.lang.String str11 = document5.toString(); org.jsoup.select.Elements elements12 = document5.children(); org.jsoup.nodes.Element element13 = document5.parent(); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element18 = document16.val("hi!"); org.jsoup.nodes.Document document19 = document16.clone(); org.jsoup.nodes.Document document20 = document16.clone(); java.lang.String str21 = document16.nodeName(); java.lang.String str23 = document16.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList24 = document16.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Document document26 = document5.outputSettings(outputSettings25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings25.clone(); // The following exception was thrown during execution in test generation try { java.lang.String str30 = org.jsoup.Jsoup.clean("[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=&quot;&quot;]\n<html>\n <head></head>\n <body></body>\n</html>", ".10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"", whitelist2, outputSettings29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(dataNodeList24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings29); }
public void test367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test367"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(" data=\"\" hi!=\"\" [10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]=\"[hi!]\"=\"[hi!]\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test368"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document5.getElementsByIndexEquals((int) (byte) -1); java.lang.String str11 = document5.toString(); org.jsoup.select.Elements elements12 = document5.children(); org.jsoup.nodes.Element element13 = document5.parent(); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element18 = document16.val("hi!"); org.jsoup.nodes.Document document19 = document16.clone(); org.jsoup.nodes.Document document20 = document16.clone(); java.lang.String str21 = document16.nodeName(); java.lang.String str23 = document16.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList24 = document16.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Document document26 = document5.outputSettings(outputSettings25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings25.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings25.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) (short) 1); // The following exception was thrown during execution in test generation try { java.lang.String str34 = org.jsoup.Jsoup.clean("[10.0, 0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", "1.010 -10.010010.010.01001.01001.0400100true-1100100.00110.010.0-10.0null", whitelist2, outputSettings33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(dataNodeList24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(outputSettings31); org.junit.Assert.assertNotNull(outputSettings33); }
public void test369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test369"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.prettyPrint(true); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element33 = document31.val("hi!"); org.jsoup.nodes.Document document34 = document31.clone(); org.jsoup.select.Elements elements36 = document31.getElementsByIndexEquals((int) (byte) -1); java.lang.String str37 = document31.toString(); org.jsoup.select.Elements elements38 = document31.children(); org.jsoup.nodes.Element element39 = document31.parent(); org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element44 = document42.val("hi!"); org.jsoup.nodes.Document document45 = document42.clone(); org.jsoup.nodes.Document document46 = document42.clone(); java.lang.String str47 = document42.nodeName(); java.lang.String str49 = document42.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document42.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document document52 = document31.outputSettings(outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.clone(); org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element58 = document56.val("hi!"); org.jsoup.nodes.Document document59 = document56.clone(); org.jsoup.select.Elements elements61 = document56.getElementsByIndexEquals((int) (byte) -1); java.lang.String str62 = document56.toString(); org.jsoup.select.Elements elements63 = document56.children(); org.jsoup.nodes.Element element64 = document56.parent(); org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element69 = document67.val("hi!"); org.jsoup.nodes.Document document70 = document67.clone(); org.jsoup.nodes.Document document71 = document67.clone(); java.lang.String str72 = document67.nodeName(); java.lang.String str74 = document67.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList75 = document67.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings76 = document67.outputSettings(); org.jsoup.nodes.Document document77 = document56.outputSettings(outputSettings76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings51.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings24.escapeMode(escapeMode79); // The following exception was thrown during execution in test generation try { java.lang.String str82 = org.jsoup.Jsoup.clean(".hi! <html> <head></head> <body></body> </html>", "[[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]*=:containsown(hi!]", whitelist2, outputSettings81); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNull(element64); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "#document" + "'", str72, "#document"); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(dataNodeList75); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertNotNull(outputSettings81); }
public void test370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test370"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("hi!:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>10:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1.0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>10:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html> :containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>-1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>#:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html> :containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>false:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>100.0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html> :containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>1:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>10.0:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>100:containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>0.0", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test371"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document5.getElementsByIndexEquals((int) (byte) -1); java.lang.String str11 = document5.toString(); org.jsoup.select.Elements elements12 = document5.children(); org.jsoup.nodes.Element element13 = document5.parent(); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element18 = document16.val("hi!"); org.jsoup.nodes.Document document19 = document16.clone(); org.jsoup.nodes.Document document20 = document16.clone(); java.lang.String str21 = document16.nodeName(); java.lang.String str23 = document16.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList24 = document16.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Document document26 = document5.outputSettings(outputSettings25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings25.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings25.prettyPrint(false); // The following exception was thrown during execution in test generation try { java.lang.String str32 = org.jsoup.Jsoup.clean("hi! <html> <head></head> <body></body> </html>", "[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]$=10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"]", whitelist2, outputSettings31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(dataNodeList24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(outputSettings31); }
public void test372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test372"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.select.Elements elements10 = document5.getElementsByIndexEquals((int) (byte) -1); java.lang.String str11 = document5.toString(); org.jsoup.select.Elements elements12 = document5.children(); org.jsoup.nodes.Element element13 = document5.parent(); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element18 = document16.val("hi!"); org.jsoup.nodes.Document document19 = document16.clone(); org.jsoup.nodes.Document document20 = document16.clone(); java.lang.String str21 = document16.nodeName(); java.lang.String str23 = document16.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList24 = document16.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Document document26 = document5.outputSettings(outputSettings25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings25.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings25.prettyPrint(false); org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element36 = document34.val("hi!"); org.jsoup.nodes.Document document37 = document34.clone(); org.jsoup.select.Elements elements39 = document34.getElementsByIndexEquals((int) (byte) -1); java.lang.String str40 = document34.toString(); org.jsoup.select.Elements elements41 = document34.children(); org.jsoup.nodes.Element element42 = document34.parent(); org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element47 = document45.val("hi!"); org.jsoup.nodes.Document document48 = document45.clone(); org.jsoup.nodes.Document document49 = document45.clone(); java.lang.String str50 = document45.nodeName(); java.lang.String str52 = document45.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList53 = document45.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings54 = document45.outputSettings(); org.jsoup.nodes.Document document55 = document34.outputSettings(outputSettings54); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings54.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings25.escapeMode(escapeMode57); // The following exception was thrown during execution in test generation try { java.lang.String str59 = org.jsoup.Jsoup.clean("[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]\n<html>\n <head></head>\n <body></body>\n</html>", "[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]]", whitelist2, outputSettings25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(dataNodeList24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(outputSettings31); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(elements39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str40, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements41); org.junit.Assert.assertNull(element42); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "#document" + "'", str50, "#document"); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, ""); org.junit.Assert.assertNotNull(dataNodeList53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings58); }
public void test373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test373"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean(" data=\"\"", "data=\"\"=\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test374"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean(":containsOwn(hi!\n<html>\n <head></head>\n <body></body>\n</html>", ":contains([hi!]", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test375"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("            ", "[0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test376"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("<data=\"\" data=\"\">\n [10.0, 0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]\n</data=\"\">", ":gt(52)", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test377"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("[10.0, 0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", "[", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test378"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("1.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"10 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\" data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"-1 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"0.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"100 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\" data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"10.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"10.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"100 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"1.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"100 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"1.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"4 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"100 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"true data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"-1 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"100 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"100.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"1 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"10.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"10.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"-1 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"0.0 data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"null", ":containsOwn( text=\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test379"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("[[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]*=:containsown(hi!]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test380"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.prettyPrint(true); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element33 = document31.val("hi!"); org.jsoup.nodes.Document document34 = document31.clone(); org.jsoup.select.Elements elements36 = document31.getElementsByIndexEquals((int) (byte) -1); java.lang.String str37 = document31.toString(); org.jsoup.select.Elements elements38 = document31.children(); org.jsoup.nodes.Element element39 = document31.parent(); org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element44 = document42.val("hi!"); org.jsoup.nodes.Document document45 = document42.clone(); org.jsoup.nodes.Document document46 = document42.clone(); java.lang.String str47 = document42.nodeName(); java.lang.String str49 = document42.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document42.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document document52 = document31.outputSettings(outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.clone(); org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element58 = document56.val("hi!"); org.jsoup.nodes.Document document59 = document56.clone(); org.jsoup.select.Elements elements61 = document56.getElementsByIndexEquals((int) (byte) -1); java.lang.String str62 = document56.toString(); org.jsoup.select.Elements elements63 = document56.children(); org.jsoup.nodes.Element element64 = document56.parent(); org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element69 = document67.val("hi!"); org.jsoup.nodes.Document document70 = document67.clone(); org.jsoup.nodes.Document document71 = document67.clone(); java.lang.String str72 = document67.nodeName(); java.lang.String str74 = document67.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList75 = document67.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings76 = document67.outputSettings(); org.jsoup.nodes.Document document77 = document56.outputSettings(outputSettings76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings51.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings24.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings81.clone(); // The following exception was thrown during execution in test generation try { java.lang.String str83 = org.jsoup.Jsoup.clean("", "[", whitelist2, outputSettings81); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNull(element64); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "#document" + "'", str72, "#document"); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(dataNodeList75); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertNotNull(outputSettings81); org.junit.Assert.assertNotNull(outputSettings82); }
public void test381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test381"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(".hi! <html> <head></head> <body></body> </html>", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test382"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.prettyPrint(true); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element33 = document31.val("hi!"); org.jsoup.nodes.Document document34 = document31.clone(); org.jsoup.select.Elements elements36 = document31.getElementsByIndexEquals((int) (byte) -1); java.lang.String str37 = document31.toString(); org.jsoup.select.Elements elements38 = document31.children(); org.jsoup.nodes.Element element39 = document31.parent(); org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element44 = document42.val("hi!"); org.jsoup.nodes.Document document45 = document42.clone(); org.jsoup.nodes.Document document46 = document42.clone(); java.lang.String str47 = document42.nodeName(); java.lang.String str49 = document42.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document42.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document document52 = document31.outputSettings(outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.clone(); org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element58 = document56.val("hi!"); org.jsoup.nodes.Document document59 = document56.clone(); org.jsoup.select.Elements elements61 = document56.getElementsByIndexEquals((int) (byte) -1); java.lang.String str62 = document56.toString(); org.jsoup.select.Elements elements63 = document56.children(); org.jsoup.nodes.Element element64 = document56.parent(); org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element69 = document67.val("hi!"); org.jsoup.nodes.Document document70 = document67.clone(); org.jsoup.nodes.Document document71 = document67.clone(); java.lang.String str72 = document67.nodeName(); java.lang.String str74 = document67.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList75 = document67.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings76 = document67.outputSettings(); org.jsoup.nodes.Document document77 = document56.outputSettings(outputSettings76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings51.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings24.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings81.indentAmount((int) (byte) 0); org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings81.escapeMode(); // The following exception was thrown during execution in test generation try { java.lang.String str85 = org.jsoup.Jsoup.clean(":containsOwn( text=\"\"", "hi!\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;", whitelist2, outputSettings81); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNull(element64); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "#document" + "'", str72, "#document"); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(dataNodeList75); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertNotNull(outputSettings81); org.junit.Assert.assertNotNull(outputSettings83); org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base)); }
public void test383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test383"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings24.escapeMode(); org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element32 = document30.val("hi!"); org.jsoup.nodes.Document document33 = document30.clone(); java.lang.String str34 = document33.ownText(); java.lang.String str35 = document33.className(); org.jsoup.select.Elements elements37 = document33.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element42 = document40.val("hi!"); org.jsoup.nodes.Document document43 = document40.clone(); org.jsoup.nodes.Document document44 = document40.clone(); java.lang.String str45 = document40.nodeName(); java.lang.String str47 = document40.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList48 = document40.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document40.outputSettings(); org.jsoup.nodes.Document document50 = document33.outputSettings(outputSettings49); org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings49.escapeMode(); org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings49.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings24.escapeMode(escapeMode52); int int54 = outputSettings24.indentAmount(); boolean boolean55 = outputSettings24.prettyPrint(); // The following exception was thrown during execution in test generation try { java.lang.String str56 = org.jsoup.Jsoup.clean("[[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]]=\"[hi!]\"", "10.0[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"][[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]-1[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]-1[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]-1[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]10[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]-1.0[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]1[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]0[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]10[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"] [[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"][[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]-1[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]#[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"] [[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]false[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]100.0[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"] [[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]1[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]10.0[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]100[[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]!=data=\"\"]0.0", whitelist2, outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#document" + "'", str45, "#document"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNotNull(dataNodeList48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); }
public void test384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test384"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); org.jsoup.nodes.Document document9 = document5.clone(); java.util.List<org.jsoup.nodes.TextNode> textNodeList10 = document9.textNodes(); org.jsoup.nodes.Element element12 = document9.getElementById(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.select.Elements elements20 = document15.getElementsByIndexEquals((int) (byte) -1); java.lang.String str21 = document15.toString(); org.jsoup.select.Elements elements22 = document15.children(); org.jsoup.nodes.Element element23 = document15.parent(); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element28 = document26.val("hi!"); org.jsoup.nodes.Document document29 = document26.clone(); org.jsoup.nodes.Document document30 = document26.clone(); java.lang.String str31 = document26.nodeName(); java.lang.String str33 = document26.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList34 = document26.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document26.outputSettings(); org.jsoup.nodes.Document document36 = document15.outputSettings(outputSettings35); org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.clone(); org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element42 = document40.val("hi!"); org.jsoup.nodes.Document document43 = document40.clone(); org.jsoup.select.Elements elements45 = document40.getElementsByIndexEquals((int) (byte) -1); java.lang.String str46 = document40.toString(); org.jsoup.select.Elements elements47 = document40.children(); org.jsoup.nodes.Element element48 = document40.parent(); org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element53 = document51.val("hi!"); org.jsoup.nodes.Document document54 = document51.clone(); org.jsoup.nodes.Document document55 = document51.clone(); java.lang.String str56 = document51.nodeName(); java.lang.String str58 = document51.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList59 = document51.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = document51.outputSettings(); org.jsoup.nodes.Document document61 = document40.outputSettings(outputSettings60); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings60.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings35.escapeMode(escapeMode63); java.nio.charset.Charset charset65 = outputSettings35.charset(); org.jsoup.nodes.Document document66 = document9.outputSettings(outputSettings35); // The following exception was thrown during execution in test generation try { java.lang.String str67 = org.jsoup.Jsoup.clean("[hi!]10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"", ":eq(10)\n<html>\n <head></head>\n <body></body>\n</html>", whitelist2, outputSettings35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(textNodeList10); org.junit.Assert.assertNull(element12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements22); org.junit.Assert.assertNull(element23); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "#document" + "'", str31, "#document"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(dataNodeList34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(elements45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertNull(element48); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#document" + "'", str56, "#document"); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(dataNodeList59); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(charset65); org.junit.Assert.assertNotNull(document66); }
public void test385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test385"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("<[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]></[10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]>\n<html>\n <head></head>\n <body></body>\n</html>", "text=\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean(":eq(26)", "hi! data=&quot;&quot;", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test387"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test388"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("1.010 -10.010010.010.01001.01001.0400100true-1100100.00110.010.0-10.0null", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test389"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("[data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"$=data=\"\" data=\"\"=\"\"]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test390"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean(".10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test391"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("[10.0, 0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test392"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("text=\"\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test393"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("[[[data=\"\"=[hi!]]^=hi!]!=hi!\n<html>\n <head></head>\n <body></body>\n</html>]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test394"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element30 = document28.val("hi!"); org.jsoup.nodes.Document document31 = document28.clone(); org.jsoup.select.Elements elements33 = document28.getElementsByIndexEquals((int) (byte) -1); java.lang.String str34 = document28.toString(); org.jsoup.select.Elements elements35 = document28.children(); org.jsoup.nodes.Element element36 = document28.parent(); org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element41 = document39.val("hi!"); org.jsoup.nodes.Document document42 = document39.clone(); org.jsoup.nodes.Document document43 = document39.clone(); java.lang.String str44 = document39.nodeName(); java.lang.String str46 = document39.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList47 = document39.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = document39.outputSettings(); org.jsoup.nodes.Document document49 = document28.outputSettings(outputSettings48); org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.clone(); java.nio.charset.Charset charset51 = outputSettings48.charset(); java.nio.charset.Charset charset52 = outputSettings48.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings24.charset(charset52); boolean boolean54 = outputSettings24.prettyPrint(); // The following exception was thrown during execution in test generation try { java.lang.String str55 = org.jsoup.Jsoup.clean("[data=\"\"=[hi!]]", "<!-- data=\"\"-->=\"[data=&quot;&quot;=[hi!]]\"", whitelist2, outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str34, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertNull(element36); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "#document" + "'", str44, "#document"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(dataNodeList47); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(charset51); org.junit.Assert.assertNotNull(charset52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); }
public void test395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test395"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("text=\"\"", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test396"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean(".data=\"\"=\"[hi!]\"", " data=\"\" hi!=\"\" text=\"\"=\"data=\"\"=\"\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test397"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid("<10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"></10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\">\n<html>\n <head></head>\n <body></body>\n</html>", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.prettyPrint(true); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element33 = document31.val("hi!"); org.jsoup.nodes.Document document34 = document31.clone(); org.jsoup.select.Elements elements36 = document31.getElementsByIndexEquals((int) (byte) -1); java.lang.String str37 = document31.toString(); org.jsoup.select.Elements elements38 = document31.children(); org.jsoup.nodes.Element element39 = document31.parent(); org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element44 = document42.val("hi!"); org.jsoup.nodes.Document document45 = document42.clone(); org.jsoup.nodes.Document document46 = document42.clone(); java.lang.String str47 = document42.nodeName(); java.lang.String str49 = document42.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document42.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document document52 = document31.outputSettings(outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.clone(); org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element58 = document56.val("hi!"); org.jsoup.nodes.Document document59 = document56.clone(); org.jsoup.select.Elements elements61 = document56.getElementsByIndexEquals((int) (byte) -1); java.lang.String str62 = document56.toString(); org.jsoup.select.Elements elements63 = document56.children(); org.jsoup.nodes.Element element64 = document56.parent(); org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element69 = document67.val("hi!"); org.jsoup.nodes.Document document70 = document67.clone(); org.jsoup.nodes.Document document71 = document67.clone(); java.lang.String str72 = document67.nodeName(); java.lang.String str74 = document67.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList75 = document67.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings76 = document67.outputSettings(); org.jsoup.nodes.Document document77 = document56.outputSettings(outputSettings76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings51.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings24.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings81.indentAmount((int) (byte) 0); org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings83.prettyPrint(false); org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings83.indentAmount((int) 'a'); // The following exception was thrown during execution in test generation try { java.lang.String str88 = org.jsoup.Jsoup.clean("[[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]]^=data=\"\" hi!=\"\" text=\"\"=\"data=&quot;&quot;=&quot;&quot;\"]", ":contains([hi!]10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"", whitelist2, outputSettings87); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str62, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNull(element64); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "#document" + "'", str72, "#document"); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(dataNodeList75); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertNotNull(outputSettings81); org.junit.Assert.assertNotNull(outputSettings83); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertNotNull(outputSettings87); }
public void test399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test399"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean(".10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"", "text=\"\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test400"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("[[=text=\"\"=\"[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]]\"]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test401"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("<head></head>", "[[1.0, 10, , -1, 0.0, 100, , 10.0, 10.0, 100, 1.0, 100, 1.0, 4, 0, 0, 100, true, 100, 100.0, 0, 1, 10.0, 10.0, -1, 0.0]$=10.0data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\"-1.0data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"0data=\"\"=\"[hi!]\"10data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"data=\"\"=\"[hi!]\"-1data=\"\"=\"[hi!]\"#data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"falsedata=\"\"=\"[hi!]\"100.0data=\"\"=\"[hi!]\" data=\"\"=\"[hi!]\"1data=\"\"=\"[hi!]\"10.0data=\"\"=\"[hi!]\"100data=\"\"=\"[hi!]\"0.0data=\"\"=\"[hi!]\"]", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.jsoup.safety.Whitelist whitelist2 = null; // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.jsoup.Jsoup.clean("1.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10:eq(10)\n<html>\n <head></head>\n <body></body>\n</html> :eq(10)\n<html>\n <head></head>\n <body></body>\n</html>-1:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>1.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>1.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>4:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>true:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>1:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>-1:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>hi!", " data=\"\" [hi!]=\"[hi!]\"", whitelist2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test403"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { boolean boolean2 = org.jsoup.Jsoup.isValid(":eq(3)", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test404"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("1.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10:eq(10)\n<html>\n <head></head>\n <body></body>\n</html> :eq(10)\n<html>\n <head></head>\n <body></body>\n</html>-1:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>1.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>1.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>4:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>true:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>100.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>1:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>10.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>-1:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>0.0:eq(10)\n<html>\n <head></head>\n <body></body>\n</html>hi!", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test405"); org.jsoup.safety.Whitelist whitelist1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.jsoup.Jsoup.clean("#[0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]", whitelist1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test406"); org.jsoup.safety.Whitelist whitelist2 = null; org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element7 = document5.val("hi!"); org.jsoup.nodes.Document document8 = document5.clone(); java.lang.String str9 = document8.ownText(); java.lang.String str10 = document8.className(); org.jsoup.select.Elements elements12 = document8.getElementsContainingOwnText(" data=\"\""); org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element17 = document15.val("hi!"); org.jsoup.nodes.Document document18 = document15.clone(); org.jsoup.nodes.Document document19 = document15.clone(); java.lang.String str20 = document15.nodeName(); java.lang.String str22 = document15.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList23 = document15.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document15.outputSettings(); org.jsoup.nodes.Document document25 = document8.outputSettings(outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings24.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.prettyPrint(true); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element33 = document31.val("hi!"); org.jsoup.nodes.Document document34 = document31.clone(); org.jsoup.select.Elements elements36 = document31.getElementsByIndexEquals((int) (byte) -1); java.lang.String str37 = document31.toString(); org.jsoup.select.Elements elements38 = document31.children(); org.jsoup.nodes.Element element39 = document31.parent(); org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("", ""); org.jsoup.nodes.Element element44 = document42.val("hi!"); org.jsoup.nodes.Document document45 = document42.clone(); org.jsoup.nodes.Document document46 = document42.clone(); java.lang.String str47 = document42.nodeName(); java.lang.String str49 = document42.attr(""); java.util.List<org.jsoup.nodes.DataNode> dataNodeList50 = document42.dataNodes(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document document52 = document31.outputSettings(outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.clone(); java.nio.charset.Charset charset54 = outputSettings51.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings24.charset(charset54); // The following exception was thrown during execution in test generation try { java.lang.String str56 = org.jsoup.Jsoup.clean("[#hi!\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;$=data=\"\" hi!=\"\" [10.0, , -1, -1, -1, 10, -1.0, 1, 0, 10, , , -1, #, , false, 100.0, , 1, 10.0, 100, 0.0]=\"[hi!]\"=\"[hi!]\"]", "[^ text=\"\"]", whitelist2, outputSettings55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(dataNodeList23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str37, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(dataNodeList50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(charset54); org.junit.Assert.assertNotNull(outputSettings55); }
@Test public void simpleBehaviourTest() { String h = "<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>"; String cleanHtml = Jsoup.clean(h, Whitelist.simpleText()); assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml)); }
@Test public void simpleBehaviourTest2() { String h = "Hello <b>there</b>!"; String cleanHtml = Jsoup.clean(h, Whitelist.simpleText()); assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml)); }
@Test public void basicBehaviourTest() { String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic()); assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void basicWithImagesTest() { String h = "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>"; String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\" /></p><p><img /></p>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void testRelaxed() { String h = "<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void testDropComments() { String h = "<p>Hello<!-- no --></p>"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<p>Hello</p>", cleanHtml); }
@Test public void testDropXmlProc() { String h = "<?import namespace=\"xss\"><p>Hello</p>"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<p>Hello</p>", cleanHtml); }
@Test public void testDropScript() { String h = "<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("", cleanHtml); }
@Test public void testDropImageScript() { String h = "<IMG SRC=\"javascript:alert('XSS')\">"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<img />", cleanHtml); }
@Test public void testCleanJavascriptHref() { String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<a>XSS</a>", cleanHtml); }
@Test public void testDropsUnknownTags() { String h = "<p><custom foo=true>Test</custom></p>"; String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<p>Test</p>", cleanHtml); }
@Test public void testHandlesEmptyAttributes() { String h = "<img alt=\"\" src= unknown=''>"; String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); assertEquals("<img alt=\"\" />", cleanHtml); }
@Test public void testIsValid() { String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; String nok1 = "<p><script></script>Not <b>OK</b></p>"; String nok2 = "<p align=right>Test Not <b>OK</b></p>"; String nok3 = "<!-- comment --><p>Not OK</p>"; // comments and the like will be cleaned assertTrue(Jsoup.isValid(ok, Whitelist.basic())); assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); assertFalse(Jsoup.isValid(nok3, Whitelist.basic())); }
@Test public void resolvesRelativeLinks() { String html = "<a href='/foo'>Link</a><img src='/bar'>"; String clean = Jsoup.clean(html, "http://example.com/", Whitelist.basicWithImages()); assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\" />", clean); }
@Test public void preservesRelativeLinksIfConfigured() { String html = "<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>"; String clean = Jsoup.clean(html, "http://example.com/", Whitelist.basicWithImages().preserveRelativeLinks(true)); assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a>\n<img src=\"/bar\" /> \n<img />", clean); }
@Test public void dropsUnresolvableRelativeLinks() { String html = "<a href='/foo'>Link</a>"; String clean = Jsoup.clean(html, Whitelist.basic()); assertEquals("<a rel=\"nofollow\">Link</a>", clean); }
@Test public void handlesCustomProtocols() { String html = "<img src='cid:12345' /> <img src='data:gzzt' />"; String dropped = Jsoup.clean(html, Whitelist.basicWithImages()); assertEquals("<img /> \n<img />", dropped); String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols("img", "src", "cid", "data")); assertEquals("<img src=\"cid:12345\" /> \n<img src=\"data:gzzt\" />", preserved); }
@Test public void handlesAllPseudoTag() { String html = "<p class='foo' src='bar'><a class='qux'>link</a></p>"; Whitelist whitelist = new Whitelist() .addAttributes(":all", "class") .addAttributes("p", "style") .addTags("p", "a"); String clean = Jsoup.clean(html, whitelist); assertEquals("<p class=\"foo\"><a class=\"qux\">link</a></p>", clean); }
@Test public void addsTagOnAttributesIfNotSet() { String html = "<p class='foo' src='bar'>One</p>"; Whitelist whitelist = new Whitelist() .addAttributes("p", "class"); // ^^ whitelist does not have explicit tag add for p, inferred from add attributes. String clean = Jsoup.clean(html, whitelist); assertEquals("<p class=\"foo\">One</p>", clean); }
@Test public void supplyOutputSettings() { // test that one can override the default document output settings Document.OutputSettings os = new Document.OutputSettings(); os.prettyPrint(false); os.escapeMode(Entities.EscapeMode.extended); String html = "<div><p>&bernou;</p></div>"; String customOut = Jsoup.clean(html, "http://foo.com/", Whitelist.relaxed(), os); String defaultOut = Jsoup.clean(html, "http://foo.com/", Whitelist.relaxed()); assertNotSame(defaultOut, customOut); assertEquals("<div><p>&bernou;</p></div>", customOut); assertEquals("<div>\n" + " <p>ℬ</p>\n" + "</div>", defaultOut); os.charset("ASCII"); os.escapeMode(Entities.EscapeMode.base); String customOut2 = Jsoup.clean(html, "http://foo.com/", Whitelist.relaxed(), os); assertEquals("<div><p>&#8492;</p></div>", customOut2); }
@Test public void handlesFramesets() { String dirty = "<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset></html>"; String clean = Jsoup.clean(dirty, Whitelist.basic()); assertEquals("", clean); // nothing good can come out of that Document dirtyDoc = Jsoup.parse(dirty); Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc); assertFalse(cleanDoc == null); assertEquals(0, cleanDoc.body().childNodes().size()); }
@Test public void cleansInternationalText() { assertEquals("привет", Jsoup.clean("привет", Whitelist.none())); }
public void test0() throws Throwable { Whitelist whitelist0 = Whitelist.simpleText(); Whitelist whitelist1 = whitelist0.addEnforcedAttribute("body", "body", "body"); Cleaner cleaner0 = new Cleaner(whitelist1); Document document0 = Document.createShell("body"); Document document1 = cleaner0.clean(document0); boolean boolean0 = cleaner0.isValid(document1); assertFalse(boolean0); }
public void test1() throws Throwable { Whitelist whitelist0 = Whitelist.simpleText(); Document document0 = new Document("sN6$F\"-5h_]DS"); Cleaner cleaner0 = new Cleaner(whitelist0); Document document1 = cleaner0.clean(document0); assertNotSame(document1, document0); }
public void test2() throws Throwable { Whitelist whitelist0 = Whitelist.basicWithImages(); Document document0 = Document.createShell("sN6$F\"-5h_]DS"); document0.text("sN6$F\"-5h_]DS"); Cleaner cleaner0 = new Cleaner(whitelist0); boolean boolean0 = cleaner0.isValid(document0); assertTrue(boolean0); }
public void test3() throws Throwable { Whitelist whitelist0 = Whitelist.simpleText(); Whitelist whitelist1 = Whitelist.relaxed(); Whitelist whitelist2 = whitelist1.addEnforcedAttribute("body", "body", "body"); Cleaner cleaner0 = new Cleaner(whitelist2); Document document0 = Document.createShell("body"); Document document1 = cleaner0.clean(document0); Cleaner cleaner1 = new Cleaner(whitelist0); boolean boolean0 = cleaner1.isValid(document1); assertFalse(boolean0); }
public void test4() throws Throwable { Whitelist whitelist0 = Whitelist.simpleText(); Whitelist whitelist1 = whitelist0.addEnforcedAttribute("body", "body", "body"); String[] stringArray0 = new String[4]; stringArray0[0] = "body"; stringArray0[1] = "body"; stringArray0[2] = "body"; stringArray0[3] = "body"; whitelist0.addAttributes("body", stringArray0); Cleaner cleaner0 = new Cleaner(whitelist1); Document document0 = Document.createShell("body"); Document document1 = cleaner0.clean(document0); boolean boolean0 = cleaner0.isValid(document1); assertNotSame(document1, document0); assertTrue(boolean0); }
