public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-0.0d), (double) 'a', univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -0 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) (-1), 0.0d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -1 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-1.0d), 0.0d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -1 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) (-1), 0.8414709825806044d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -1 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.0d, (-2.356194490192345d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction5 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction5, (double) 20L); org.apache.commons.math3.optimization.GoalType goalType8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair12 = brentOptimizer3.optimize((int) ' ', univariateFunction7, goalType8, 4.619848063268439E-25d, 2.2250738585072014E-308d, 0.9735361584457501d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(univariateFunction7); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair6 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(11014.0d, (double) (-100.0f), univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -100 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = sin9.derivative(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray13 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin8, sin9, sin11, sin12 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray13); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray33 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, univariateDifferentiable14, univariateDifferentiable21, sin22, sin24, univariateDifferentiable32 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray33); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker37 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer38 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker37); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray46 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin41, sin42, sin44, sin45 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray46); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray53 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin48, sin49, sin51, sin52 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable54 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray53); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = sin55.derivative(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction58 = sin57.derivative(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction61 = sin60.derivative(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray64 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin59, sin60, sin62, sin63 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable65 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray64); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, univariateDifferentiable47, univariateDifferentiable54, sin55, sin57, univariateDifferentiable65 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray66); org.apache.commons.math3.optimization.GoalType goalType68 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair71 = brentOptimizer38.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable67, goalType68, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable34, goalType68, (double) 97L, (double) 1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertNotNull(univariateDifferentiableArray13); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateDifferentiableArray33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateDifferentiableArray46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateDifferentiableArray53); org.junit.Assert.assertNotNull(univariateDifferentiable54); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertNotNull(univariateFunction58); org.junit.Assert.assertNotNull(univariateFunction61); org.junit.Assert.assertNotNull(univariateDifferentiableArray64); org.junit.Assert.assertNotNull(univariateDifferentiable65); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertTrue("'" + goalType68 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType68.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair71); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair6 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = sin6.derivative(); double double9 = sin6.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = sin6.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin6.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker14 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer15 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker14); int int16 = brentOptimizer15.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction20 = sin19.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray21 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable22 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray21); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray21); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray21); org.apache.commons.math3.optimization.GoalType goalType25 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair29 = brentOptimizer15.optimize(97, univariateFunction24, goalType25, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair33 = brentOptimizer3.optimize((-127), univariateFunction11, goalType25, 1.0205068250273364d, 36.40055311432538d, 6.6917246496340396E41d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-127) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction7); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8414709825806044d + "'", double9 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(univariateFunction20); org.junit.Assert.assertNotNull(univariateDifferentiableArray21); org.junit.Assert.assertNotNull(univariateDifferentiable22); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertTrue("'" + goalType25 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType25.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair29); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair7 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = sin6.derivative(); double double9 = sin6.value(0.9999999958776927d); double double11 = sin6.value((double) 0); org.apache.commons.math3.optimization.GoalType goalType12 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair15 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) sin6, goalType12, 36.40055311432538d, (double) ' '); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction7); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8414709825806044d + "'", double9 == 0.8414709825806044d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + goalType12 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType12.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray12 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, sin8, sin10, sin11 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable13 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray12); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray12); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker17 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer18 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker17); int int19 = brentOptimizer18.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray24); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray24); org.apache.commons.math3.optimization.GoalType goalType28 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer18.optimize(97, univariateFunction27, goalType28, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair33 = brentOptimizer18.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType34 = brentOptimizer18.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer3.optimize((int) (byte) 10, univariateFunction14, goalType34, (-2.812644285236262E-103d), 7.930067261567154E14d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (10) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertNotNull(univariateDifferentiableArray12); org.junit.Assert.assertNotNull(univariateDifferentiable13); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertTrue("'" + goalType28 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType28.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertNotNull(univariatePointValuePair33); org.junit.Assert.assertTrue("'" + goalType34 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType34.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray21 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateFunctionArray21); org.apache.commons.math3.optimization.GoalType goalType23 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize((int) (byte) 100, univariateFunction22, goalType23, (-100.0d), 0.0d, (double) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertTrue("'" + goalType23 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType23.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.exception.util.Localizable localizable21 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24, sin26, sin27 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable22, (java.lang.Object[]) univariateDifferentiableArray28); org.apache.commons.math3.exception.MathInternalError mathInternalError31 = new org.apache.commons.math3.exception.MathInternalError(localizable21, (java.lang.Object[]) univariateDifferentiableArray28); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray28); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker35 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer36 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker35); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin46, sin47, sin49, sin50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray51); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction54 = sin53.derivative(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = sin55.derivative(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray62 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58, sin60, sin61 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable63 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray62); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray64 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin38, univariateDifferentiable45, univariateDifferentiable52, sin53, sin55, univariateDifferentiable63 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable65 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray64); org.apache.commons.math3.optimization.GoalType goalType66 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer36.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable65, goalType66, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair72 = brentOptimizer3.optimize((int) (short) 1, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, goalType66, 54.58370209760676d, (double) 97.00001f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (1) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction54); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray62); org.junit.Assert.assertNotNull(univariateDifferentiable63); org.junit.Assert.assertNotNull(univariateDifferentiableArray64); org.junit.Assert.assertNotNull(univariateDifferentiable65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin22, sin23, sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer32 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker31); int int33 = brentOptimizer32.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin35, sin36 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray38); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray38); org.apache.commons.math3.optimization.GoalType goalType42 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer32.optimize(97, univariateFunction41, goalType42, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer32.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType48 = brentOptimizer32.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer32.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction52 = sin51.derivative(); org.apache.commons.math3.optimization.GoalType goalType53 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair56 = brentOptimizer32.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin51, goalType53, 3.141592653589793d, 0.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair60 = brentOptimizer3.optimize((int) (short) 0, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable28, goalType53, (double) 1.0f, 0.04991687205886359d, 1.248514024842681E14d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair46); org.junit.Assert.assertNotNull(univariatePointValuePair47); org.junit.Assert.assertTrue("'" + goalType48 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType48.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair49); org.junit.Assert.assertNotNull(univariateFunction52); org.junit.Assert.assertTrue("'" + goalType53 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType53.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair56); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair5 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray21 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction22 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray21); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction22); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker26 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer27 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker26); int int28 = brentOptimizer27.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray33 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin30, sin31 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray33); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray33); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray33); org.apache.commons.math3.optimization.GoalType goalType37 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer27.optimize(97, univariateFunction36, goalType37, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer3.optimize(6, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction22, goalType37, 201.71315737027922d, (double) (-49.999996f), 2.154434690031884d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (6) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray21); org.junit.Assert.assertNotNull(differentiableUnivariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateDifferentiableArray33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertTrue("'" + goalType37 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType37.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(bivariateFunction8, (double) 20L); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker13 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer14 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker13); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction19 = sin18.derivative(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray22 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin17, sin18, sin20, sin21 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray22); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray40 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin35, sin36, sin38, sin39 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable41 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray40); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray42 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin16, univariateDifferentiable23, univariateDifferentiable30, sin31, sin33, univariateDifferentiable41 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable43 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray42); org.apache.commons.math3.optimization.GoalType goalType44 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer14.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable43, goalType44, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer3.optimize(0, univariateFunction10, goalType44, (double) 100L, (double) (byte) 0, 52.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertNotNull(univariateFunction19); org.junit.Assert.assertNotNull(univariateDifferentiableArray22); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertNotNull(univariateDifferentiableArray40); org.junit.Assert.assertNotNull(univariateDifferentiable41); org.junit.Assert.assertNotNull(univariateDifferentiableArray42); org.junit.Assert.assertNotNull(univariateDifferentiable43); org.junit.Assert.assertTrue("'" + goalType44 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType44.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair47); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { double double8 = brentOptimizer3.computeObjectiveValue((double) 97); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction6 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction6, (-0.0874913248293193d)); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker11 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer12 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker11); int int13 = brentOptimizer12.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray18 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable19 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray18); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable20 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray18); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray18); org.apache.commons.math3.optimization.GoalType goalType22 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair26 = brentOptimizer12.optimize(97, univariateFunction21, goalType22, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer12.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType28 = brentOptimizer12.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer3.optimize((-127), univariateFunction8, goalType28, (double) (byte) 10, 0.35427054092435967d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-127) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray18); org.junit.Assert.assertNotNull(univariateDifferentiable19); org.junit.Assert.assertNotNull(univariateDifferentiable20); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertTrue("'" + goalType22 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType22.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair26); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + goalType28 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType28.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = null; org.apache.commons.math3.optimization.GoalType goalType8 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair12 = brentOptimizer3.optimize(100, univariateFunction7, goalType8, 0.04991687205886359d, 20.000000953674316d, 1010.0499987500625d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + goalType8 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType8.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction6 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer10 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker9); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin14.derivative(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray18 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin13, sin14, sin16, sin17 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable19 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray18); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray25 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin20, sin21, sin23, sin24 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray25); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin29.derivative(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = sin32.derivative(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray36 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin31, sin32, sin34, sin35 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable37 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray36); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin12, univariateDifferentiable19, univariateDifferentiable26, sin27, sin29, univariateDifferentiable37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray38); org.apache.commons.math3.optimization.GoalType goalType40 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair43 = brentOptimizer10.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable39, goalType40, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer3.optimize((int) 'a', univariateFunction6, goalType40, 2.0d, (double) 97.00001f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateDifferentiableArray18); org.junit.Assert.assertNotNull(univariateDifferentiable19); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiableArray25); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertNotNull(univariateDifferentiableArray36); org.junit.Assert.assertNotNull(univariateDifferentiable37); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair43); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray12 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, sin8, sin10, sin11 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable13 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray12); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray12); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker17 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer18 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker17); int int19 = brentOptimizer18.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray24); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray24); org.apache.commons.math3.optimization.GoalType goalType28 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer18.optimize(97, univariateFunction27, goalType28, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair33 = brentOptimizer18.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType34 = brentOptimizer18.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer3.optimize((int) ' ', univariateFunction14, goalType34, 4.000043427276863d, 1.3017526366697145d); double double38 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertNotNull(univariateDifferentiableArray12); org.junit.Assert.assertNotNull(univariateDifferentiable13); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertTrue("'" + goalType28 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType28.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertNotNull(univariatePointValuePair33); org.junit.Assert.assertTrue("'" + goalType34 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType34.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2.6508980319732887d + "'", double38 == 2.6508980319732887d); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, goalType20, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure26 = univariateDifferentiable17.value(derivativeStructure25); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(multivariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double[] doubleArray8 = new double[] { (-1L), 100.0d }; double[] doubleArray14 = new double[] { 4.9E-324d, 1.0d, 0.0d, (-1.0d), (short) -1 }; double double15 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray8, doubleArray14); double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8); double[] doubleArray19 = new double[] { (-1L), 100.0d }; double[] doubleArray25 = new double[] { 4.9E-324d, 1.0d, 0.0d, (-1.0d), (short) -1 }; double double26 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray19, doubleArray25); double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19); double[] doubleArray30 = new double[] { (-1L), 100.0d }; double[] doubleArray36 = new double[] { 4.9E-324d, 1.0d, 0.0d, (-1.0d), (short) -1 }; double double37 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray30, doubleArray36); double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30); boolean boolean39 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray30); double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30); double[] doubleArray43 = new double[] { (-1L), 100.0d }; double[] doubleArray49 = new double[] { 4.9E-324d, 1.0d, 0.0d, (-1.0d), (short) -1 }; double double50 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray43, doubleArray49); boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray30, doubleArray49); org.apache.commons.math3.analysis.function.StepFunction stepFunction52 = new org.apache.commons.math3.analysis.function.StepFunction(doubleArray8, doubleArray30); double double54 = stepFunction52.value(2.1544346900318834d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker57 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer58 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker57); org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin62.derivative(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin65 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin61, sin62, sin64, sin65 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.function.Sin sin68 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin69 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction70 = sin69.derivative(); org.apache.commons.math3.analysis.function.Sin sin71 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin72 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray73 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin68, sin69, sin71, sin72 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable74 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray73); org.apache.commons.math3.analysis.function.Sin sin75 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction76 = sin75.derivative(); org.apache.commons.math3.analysis.function.Sin sin77 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction78 = sin77.derivative(); org.apache.commons.math3.analysis.function.Sin sin79 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin80 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction81 = sin80.derivative(); org.apache.commons.math3.analysis.function.Sin sin82 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin83 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray84 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin79, sin80, sin82, sin83 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable85 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray84); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray86 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin60, univariateDifferentiable67, univariateDifferentiable74, sin75, sin77, univariateDifferentiable85 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable87 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray86); org.apache.commons.math3.optimization.GoalType goalType88 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer58.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable87, goalType88, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair95 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) stepFunction52, goalType88, 5729.5779513082325d, 5.916079783099616d, 4.041945072145264d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[4.9E-324, 1.0, 0.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 99.0d + "'", double15 == 99.0d); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[4.9E-324, 1.0, 0.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[4.9E-324, 1.0, 0.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 99.0d + "'", double37 == 99.0d); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[4.9E-324, 1.0, 0.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 99.0d + "'", double50 == 99.0d); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d)); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateFunction70); org.junit.Assert.assertNotNull(univariateDifferentiableArray73); org.junit.Assert.assertNotNull(univariateDifferentiable74); org.junit.Assert.assertNotNull(univariateFunction76); org.junit.Assert.assertNotNull(univariateFunction78); org.junit.Assert.assertNotNull(univariateFunction81); org.junit.Assert.assertNotNull(univariateDifferentiableArray84); org.junit.Assert.assertNotNull(univariateDifferentiable85); org.junit.Assert.assertNotNull(univariateDifferentiableArray86); org.junit.Assert.assertNotNull(univariateDifferentiable87); org.junit.Assert.assertTrue("'" + goalType88 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType88.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair91); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(2704.000238418579d, 2.1544346900318834d, univariatePointValuePairConvergenceChecker2); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair4 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker11 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer12 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker11); int int13 = brentOptimizer12.getMaxEvaluations(); double double14 = brentOptimizer12.getMax(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction18 = sin17.derivative(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray21 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin16, sin17, sin19, sin20 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable22 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray21); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray21); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker26 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer27 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker26); int int28 = brentOptimizer27.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray33 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin30, sin31 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray33); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray33); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray33); org.apache.commons.math3.optimization.GoalType goalType37 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer27.optimize(97, univariateFunction36, goalType37, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair42 = brentOptimizer27.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType43 = brentOptimizer27.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer12.optimize((int) ' ', univariateFunction23, goalType43, 4.000043427276863d, 1.3017526366697145d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer3.optimize((int) (short) 0, univariateFunction8, goalType43, (-120.00000095367432d), (-9.079985908828064E-5d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction18); org.junit.Assert.assertNotNull(univariateDifferentiableArray21); org.junit.Assert.assertNotNull(univariateDifferentiable22); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateDifferentiableArray33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertTrue("'" + goalType37 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType37.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertNotNull(univariatePointValuePair42); org.junit.Assert.assertTrue("'" + goalType43 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType43.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair46); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.analysis.function.Sin sin5 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray11 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7, sin9, sin10 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray11); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin14.derivative(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray18 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin13, sin14, sin16, sin17 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable19 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray18); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin5, univariateDifferentiable12, univariateDifferentiable19, sin20, sin22, univariateDifferentiable30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray31); org.apache.commons.math3.optimization.GoalType goalType33 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer3.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, goalType33, 0.0d, 0.17453292519943295d); double double37 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = sin39.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker43 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer44 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker43); int int45 = brentOptimizer44.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction49 = sin48.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray50 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable51 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray50); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray50); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray50); org.apache.commons.math3.optimization.GoalType goalType54 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer44.optimize(97, univariateFunction53, goalType54, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer44.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType60 = brentOptimizer44.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer44.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction64 = sin63.derivative(); org.apache.commons.math3.optimization.GoalType goalType65 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer44.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin63, goalType65, 3.141592653589793d, 0.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair72 = brentOptimizer3.optimize((int) (byte) 0, univariateFunction40, goalType65, 1.1368683772161603E-13d, 0.34574329181385116d, (-1.3017526366697145d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateDifferentiableArray18); org.junit.Assert.assertNotNull(univariateDifferentiable19); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.17453292519943295d + "'", double37 == 0.17453292519943295d); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(univariateFunction49); org.junit.Assert.assertNotNull(univariateDifferentiableArray50); org.junit.Assert.assertNotNull(univariateDifferentiable51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertTrue("'" + goalType54 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType54.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertNotNull(univariatePointValuePair59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair61); org.junit.Assert.assertNotNull(univariateFunction64); org.junit.Assert.assertTrue("'" + goalType65 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType65.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); double double7 = brentOptimizer3.getMin(); int int8 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair3 = brentOptimizer2.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-0.2720105554446849d), 1.2786363145140075E-4d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -0.272 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); // The following exception was thrown during execution in test generation try { double double4 = brentOptimizer2.computeObjectiveValue(2.6469779601696886E-23d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray10 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.NullArgumentException nullArgumentException13 = new org.apache.commons.math3.exception.NullArgumentException(localizable9, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.optimization.GoalType goalType15 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair19 = brentOptimizer3.optimize(12, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction14, goalType15, 5.916079783099616d, (double) (byte) 10, 0.9922682874719476d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray10); org.junit.Assert.assertNotNull(differentiableUnivariateFunction11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction12); org.junit.Assert.assertNotNull(differentiableUnivariateFunction14); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction9 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction9, 2.0d); org.apache.commons.math3.optimization.GoalType goalType12 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair15 = brentOptimizer3.optimize((int) ' ', univariateFunction11, goalType12, (double) 2.3841858E-7f, 3.948148009134034E13d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + goalType12 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType12.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(2.1544346900318834d, (double) (-0.9999999f)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); // The following exception was thrown during execution in test generation try { double double4 = brentOptimizer2.computeObjectiveValue(1.0000004817893995d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair7 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction8, (double) '#'); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker13 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer14 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker13); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction19 = sin18.derivative(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray22 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin17, sin18, sin20, sin21 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray22); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray40 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin35, sin36, sin38, sin39 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable41 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray40); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray42 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin16, univariateDifferentiable23, univariateDifferentiable30, sin31, sin33, univariateDifferentiable41 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable43 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray42); org.apache.commons.math3.optimization.GoalType goalType44 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer14.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable43, goalType44, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer3.optimize(0, univariateFunction10, goalType44, 0.04995839334370268d, (-2.225073858507201E-308d), (double) 35.000004f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertNotNull(univariateFunction19); org.junit.Assert.assertNotNull(univariateDifferentiableArray22); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertNotNull(univariateDifferentiableArray40); org.junit.Assert.assertNotNull(univariateDifferentiable41); org.junit.Assert.assertNotNull(univariateDifferentiableArray42); org.junit.Assert.assertNotNull(univariateDifferentiable43); org.junit.Assert.assertTrue("'" + goalType44 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType44.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair47); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { double double8 = brentOptimizer3.computeObjectiveValue((double) 1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray10 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException12 = new org.apache.commons.math3.exception.MathArithmeticException(localizable9, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable8, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction15 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.optimization.GoalType goalType17 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.optimize((-127), (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction16, goalType17, (-0.0015270116852034877d), 1.208662425748988d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray10); org.junit.Assert.assertNotNull(differentiableUnivariateFunction11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertNotNull(differentiableUnivariateFunction15); org.junit.Assert.assertNotNull(differentiableUnivariateFunction16); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); org.apache.commons.math3.analysis.function.Sin sin4 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin5 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction6 = sin5.derivative(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin4, sin5, sin7, sin8 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.compose(univariateDifferentiableArray9); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable12); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction13); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker17 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer18 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker17); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray26 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22, sin24, sin25 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin29.derivative(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray33 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin28, sin29, sin31, sin32 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray33); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction38 = sin37.derivative(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray46 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin20, univariateDifferentiable27, univariateDifferentiable34, sin35, sin37, univariateDifferentiable45 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray46); org.apache.commons.math3.optimization.GoalType goalType48 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer18.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType48, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair55 = brentOptimizer2.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable14, goalType48, 0.0d, 0.0d, 2704.000238418579d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertNotNull(univariateFunction6); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateDifferentiableArray33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateFunction38); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateDifferentiableArray46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertTrue("'" + goalType48 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType48.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair51); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = sin12.derivative(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray15 = new org.apache.commons.math3.analysis.UnivariateFunction[] { univariateFunction11, univariateFunction13, sin14 }; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateFunctionArray15); org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable9, (java.lang.Object[]) univariateFunctionArray15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction18 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateFunctionArray15); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker21 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer22 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker21); int int23 = brentOptimizer22.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin26.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray28); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray28); org.apache.commons.math3.optimization.GoalType goalType32 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer22.optimize(97, univariateFunction31, goalType32, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer22.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType38 = brentOptimizer22.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer22.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.optimization.GoalType goalType43 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer22.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin41, goalType43, 3.141592653589793d, 0.0d); double double47 = brentOptimizer22.getMax(); org.apache.commons.math3.optimization.GoalType goalType48 = brentOptimizer22.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer3.optimize((-45), univariateFunction18, goalType48, (double) (short) 10, 6.6917246496340396E41d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-45) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertNotNull(univariateFunctionArray15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateFunction18); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + goalType32 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType32.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertNotNull(univariatePointValuePair37); org.junit.Assert.assertTrue("'" + goalType38 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType38.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertTrue("'" + goalType43 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType43.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + goalType48 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType48.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); double double11 = sin8.value(0.9999999958776927d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin8); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = sin8.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = sin8.derivative(); org.apache.commons.math3.optimization.GoalType goalType15 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.optimize(5, (org.apache.commons.math3.analysis.UnivariateFunction) sin8, goalType15, 3.6757332503588205d, (double) (-127)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (5) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.8414709825806044d + "'", double11 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertTrue("'" + goalType15 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType15.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) (-127), 1.3617928857159403d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -127 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = null; org.apache.commons.math3.optimization.GoalType goalType8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair11 = brentOptimizer3.optimize((-127), univariateFunction7, goalType8, 1000.0d, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getMaxEvaluations(); int int20 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); double double22 = brentOptimizer3.getMin(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction24 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(bivariateFunction24, (double) '#'); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker29 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer30 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker29); int int31 = brentOptimizer30.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray36 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable37 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray36); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray36); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray36); org.apache.commons.math3.optimization.GoalType goalType40 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer30.optimize(97, univariateFunction39, goalType40, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer30.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType46 = brentOptimizer30.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair50 = brentOptimizer3.optimize((-1), univariateFunction26, goalType46, (double) Float.NaN, 1.1102230246251565E-16d, 1.2177655131703127d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-1) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray36); org.junit.Assert.assertNotNull(univariateDifferentiable37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateFunction39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair44); org.junit.Assert.assertNotNull(univariatePointValuePair45); org.junit.Assert.assertTrue("'" + goalType46 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType46.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-1.3017526366697145d), (-1.3017526366697145d), univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -1.302 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); int int21 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertNotNull(univariatePointValuePair77); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair7 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); double double21 = brentOptimizer3.computeObjectiveValue(20.000000953674316d); int int22 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7913081858681398d + "'", double21 == 0.7913081858681398d); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); org.apache.commons.math3.exception.util.Localizable localizable6 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray7 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction8 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray7); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException9 = new org.apache.commons.math3.exception.MathArithmeticException(localizable6, (java.lang.Object[]) differentiableUnivariateFunctionArray7); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray7); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray7); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray7); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable13 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction12); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker16 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer17 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker16); int int18 = brentOptimizer17.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray23 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin20, sin21 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray23); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray23); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray23); org.apache.commons.math3.optimization.GoalType goalType27 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer17.optimize(97, univariateFunction26, goalType27, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer17.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType33 = brentOptimizer17.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable13, goalType33, (double) (byte) 0, 89009.0d, (-0.903690571697673d)); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray7); org.junit.Assert.assertNotNull(differentiableUnivariateFunction8); org.junit.Assert.assertNotNull(differentiableUnivariateFunction10); org.junit.Assert.assertNotNull(differentiableUnivariateFunction11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction12); org.junit.Assert.assertNotNull(univariateDifferentiable13); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiableArray23); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + goalType27 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType27.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair31); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker30); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, goalType20, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair25 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray27 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction28 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray27); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction29 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction29, (double) '#'); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin51, sin52, sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray58 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, univariateDifferentiable39, univariateDifferentiable46, sin47, sin49, univariateDifferentiable57 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray58); org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction61 = sin60.derivative(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin62.derivative(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray66 = new org.apache.commons.math3.analysis.UnivariateFunction[] { differentiableUnivariateFunction28, univariateFunction31, univariateDifferentiable59, sin60, univariateFunction63, sin64 }; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction67 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateFunctionArray66); org.apache.commons.math3.optimization.GoalType goalType68 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair71 = brentOptimizer3.optimize((int) (byte) 100, univariateFunction67, goalType68, 1.4916681462400413E-154d, 4.041945072145264d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(multivariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertNotNull(univariatePointValuePair25); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray27); org.junit.Assert.assertNotNull(differentiableUnivariateFunction28); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiableArray58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertNotNull(univariateFunction61); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateFunctionArray66); org.junit.Assert.assertNotNull(univariateFunction67); org.junit.Assert.assertTrue("'" + goalType68 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType68.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 2, (double) 4L); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair7 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); int int21 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction9 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(bivariateFunction9, 0.0d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker14 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer15 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker14); int int16 = brentOptimizer15.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction20 = sin19.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray21 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable22 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray21); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray21); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray21); org.apache.commons.math3.optimization.GoalType goalType25 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair29 = brentOptimizer15.optimize(97, univariateFunction24, goalType25, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer15.doOptimize(); int int31 = brentOptimizer15.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable33 = null; org.apache.commons.math3.exception.util.Localizable localizable34 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray35 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray35); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException37 = new org.apache.commons.math3.exception.MathArithmeticException(localizable34, (java.lang.Object[]) differentiableUnivariateFunctionArray35); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction38 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray35); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException39 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable33, (java.lang.Object[]) differentiableUnivariateFunctionArray35); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray35); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray35); org.apache.commons.math3.optimization.GoalType goalType42 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer15.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction41, goalType42, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer3.optimize(0, univariateFunction11, goalType42, 2.154434690031884d, (double) 10.0f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(univariateFunction20); org.junit.Assert.assertNotNull(univariateDifferentiableArray21); org.junit.Assert.assertNotNull(univariateDifferentiable22); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertTrue("'" + goalType25 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType25.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair29); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray35); org.junit.Assert.assertNotNull(differentiableUnivariateFunction36); org.junit.Assert.assertNotNull(differentiableUnivariateFunction38); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertNotNull(differentiableUnivariateFunction41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair45); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); double double78 = brentOptimizer3.computeObjectiveValue((double) 9.999998f); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.08759068068109035d + "'", double78 == 0.08759068068109035d); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair4 = brentOptimizer2.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); int int8 = brentOptimizer3.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair9 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker25 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer26 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker25); int int27 = brentOptimizer26.getEvaluations(); int int28 = brentOptimizer26.getEvaluations(); int int29 = brentOptimizer26.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction31 = null; org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray37 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, sin33, sin35, sin36 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray37); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray37); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray37); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction42 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction31, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable40, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType43 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer26.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable40, goalType43, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer3.optimize((int) (short) 0, univariateFunction22, goalType43, (-0.88966182231646d), (-0.8687261884639957d), 81377.39571257407d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertNotNull(univariateDifferentiableArray37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateFunction39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(multivariateFunction42); org.junit.Assert.assertTrue("'" + goalType43 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType43.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair47); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); double double11 = sin8.value(0.8414709825806044d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker14 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer15 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker14); int int16 = brentOptimizer15.getEvaluations(); int int17 = brentOptimizer15.getEvaluations(); int int18 = brentOptimizer15.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction20 = null; org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray26 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22, sin24, sin25 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray26); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray26); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction20, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType32 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer15.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, goalType32, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair40 = brentOptimizer3.optimize((int) (short) -1, (org.apache.commons.math3.analysis.UnivariateFunction) sin8, goalType32, 4.641666190203543d, (-0.8687261884639957d), (double) (-126.99999f)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-1) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.7456241401813645d + "'", double11 == 0.7456241401813645d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(multivariateFunction31); org.junit.Assert.assertTrue("'" + goalType32 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType32.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); double double6 = brentOptimizer3.getMax(); double double7 = brentOptimizer3.getMin(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction9 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker12 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer13 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker12); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction18 = sin17.derivative(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray21 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin16, sin17, sin19, sin20 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable22 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray21); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24, sin26, sin27 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = sin32.derivative(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray39 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin34, sin35, sin37, sin38 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray39); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray41 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, univariateDifferentiable22, univariateDifferentiable29, sin30, sin32, univariateDifferentiable40 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable42 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray41); org.apache.commons.math3.optimization.GoalType goalType43 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer13.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable42, goalType43, 0.0d, 0.17453292519943295d); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction48 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction9, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable42, (double) 51.999996f); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker51 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer52 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker51); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin56 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = sin56.derivative(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin55, sin56, sin58, sin59 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction64 = sin63.derivative(); org.apache.commons.math3.analysis.function.Sin sin65 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray67 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin62, sin63, sin65, sin66 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray67); org.apache.commons.math3.analysis.function.Sin sin69 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction70 = sin69.derivative(); org.apache.commons.math3.analysis.function.Sin sin71 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = sin71.derivative(); org.apache.commons.math3.analysis.function.Sin sin73 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin74 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction75 = sin74.derivative(); org.apache.commons.math3.analysis.function.Sin sin76 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin77 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray78 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin73, sin74, sin76, sin77 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable79 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray78); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray80 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin54, univariateDifferentiable61, univariateDifferentiable68, sin69, sin71, univariateDifferentiable79 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable81 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray80); org.apache.commons.math3.optimization.GoalType goalType82 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer52.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable81, goalType82, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair88 = brentOptimizer3.optimize((-45), (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable42, goalType82, 0.8414709825806044d, (double) 0L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-45) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction18); org.junit.Assert.assertNotNull(univariateDifferentiableArray21); org.junit.Assert.assertNotNull(univariateDifferentiable22); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateDifferentiableArray39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateDifferentiableArray41); org.junit.Assert.assertNotNull(univariateDifferentiable42); org.junit.Assert.assertTrue("'" + goalType43 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType43.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair46); org.junit.Assert.assertNotNull(multivariateFunction48); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateFunction64); org.junit.Assert.assertNotNull(univariateDifferentiableArray67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateFunction70); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertNotNull(univariateFunction75); org.junit.Assert.assertNotNull(univariateDifferentiableArray78); org.junit.Assert.assertNotNull(univariateDifferentiable79); org.junit.Assert.assertNotNull(univariateDifferentiableArray80); org.junit.Assert.assertNotNull(univariateDifferentiable81); org.junit.Assert.assertTrue("'" + goalType82 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType82.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair85); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); double double6 = brentOptimizer3.getMax(); double double7 = brentOptimizer3.getMin(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = sin13.derivative(); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray17 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin12, sin13, sin15, sin16 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray17); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin19, sin20, sin22, sin23 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin26.derivative(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = sin28.derivative(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray35 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin30, sin31, sin33, sin34 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable36 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray35); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray37 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin11, univariateDifferentiable18, univariateDifferentiable25, sin26, sin28, univariateDifferentiable36 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray37); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException39 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable9, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray37); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray37); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker43 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer44 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker43); int int45 = brentOptimizer44.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction49 = sin48.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray50 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable51 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray50); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray50); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray50); org.apache.commons.math3.optimization.GoalType goalType54 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer44.optimize(97, univariateFunction53, goalType54, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer44.doOptimize(); int int60 = brentOptimizer44.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable62 = null; org.apache.commons.math3.exception.util.Localizable localizable63 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray64 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction65 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray64); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException66 = new org.apache.commons.math3.exception.MathArithmeticException(localizable63, (java.lang.Object[]) differentiableUnivariateFunctionArray64); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray64); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException68 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable62, (java.lang.Object[]) differentiableUnivariateFunctionArray64); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray64); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction70 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray64); org.apache.commons.math3.optimization.GoalType goalType71 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer44.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction70, goalType71, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable40, goalType71, 0.009998666886625245d, (-0.08738008713805967d), (double) (byte) 1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertNotNull(univariateDifferentiableArray17); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateDifferentiableArray35); org.junit.Assert.assertNotNull(univariateDifferentiable36); org.junit.Assert.assertNotNull(univariateDifferentiableArray37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(univariateFunction49); org.junit.Assert.assertNotNull(univariateDifferentiableArray50); org.junit.Assert.assertNotNull(univariateDifferentiable51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertTrue("'" + goalType54 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType54.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertNotNull(univariatePointValuePair59); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray64); org.junit.Assert.assertNotNull(differentiableUnivariateFunction65); org.junit.Assert.assertNotNull(differentiableUnivariateFunction67); org.junit.Assert.assertNotNull(univariateFunction69); org.junit.Assert.assertNotNull(differentiableUnivariateFunction70); org.junit.Assert.assertTrue("'" + goalType71 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType71.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair74); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray10 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, sin8 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray10); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray10); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker16 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer17 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker16); int int18 = brentOptimizer17.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray23 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin20, sin21 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray23); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray23); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray23); org.apache.commons.math3.optimization.GoalType goalType27 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer17.optimize(97, univariateFunction26, goalType27, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer17.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType33 = brentOptimizer17.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair34 = brentOptimizer17.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); org.apache.commons.math3.optimization.GoalType goalType38 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer17.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin36, goalType38, 3.141592653589793d, 0.0d); double double42 = brentOptimizer17.getMax(); org.apache.commons.math3.optimization.GoalType goalType43 = brentOptimizer17.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer3.optimize(3, univariateFunction13, goalType43, (double) 0, 1.695228608386943d, 5729.57829566771d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (3) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertNotNull(univariateDifferentiableArray10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiableArray23); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + goalType27 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType27.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair31); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair34); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertTrue("'" + goalType38 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType38.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + goalType43 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType43.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker11 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer12 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker11); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin22, sin23, sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin29.derivative(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray40 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin14, univariateDifferentiable21, univariateDifferentiable28, sin29, sin31, univariateDifferentiable39 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable41 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray40); org.apache.commons.math3.optimization.GoalType goalType42 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer12.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable41, goalType42, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer3.optimize(0, univariateFunction8, goalType42, 0.021453837029642757d, 100.00499987500625d, (-0.02403739749259852d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateDifferentiableArray40); org.junit.Assert.assertNotNull(univariateDifferentiable41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair45); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair8 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 3.8146973E-6f, 5729.57829566771d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair3 = brentOptimizer2.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable21 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray23 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction24 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray23); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException25 = new org.apache.commons.math3.exception.MathArithmeticException(localizable22, (java.lang.Object[]) differentiableUnivariateFunctionArray23); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray23); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException27 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable21, (java.lang.Object[]) differentiableUnivariateFunctionArray23); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray23); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer32 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker31); int int33 = brentOptimizer32.getEvaluations(); int int34 = brentOptimizer32.getEvaluations(); int int35 = brentOptimizer32.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction37 = null; org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = sin39.derivative(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray43 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin38, sin39, sin41, sin42 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable44 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray43); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray43); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray43); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction48 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction37, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable46, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType49 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair53 = brentOptimizer32.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable46, goalType49, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair57 = brentOptimizer3.optimize(0, univariateFunction28, goalType49, 0.04991687205886359d, 4.000043427276863d, 0.5149900333324824d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker19); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray23); org.junit.Assert.assertNotNull(differentiableUnivariateFunction24); org.junit.Assert.assertNotNull(differentiableUnivariateFunction26); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertNotNull(univariateDifferentiableArray43); org.junit.Assert.assertNotNull(univariateDifferentiable44); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(multivariateFunction48); org.junit.Assert.assertTrue("'" + goalType49 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType49.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair53); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); double double11 = sin8.value(0.9999999958776927d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin8); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable13 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin8); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker17 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer18 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker17); int int19 = brentOptimizer18.getEvaluations(); int int20 = brentOptimizer18.getEvaluations(); int int21 = brentOptimizer18.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction34 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction23, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType35 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer18.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, goalType35, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair42 = brentOptimizer3.optimize((int) (byte) -1, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction14, goalType35, 0.4332456533524551d, 0.4663073293037834d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-1) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.8414709825806044d + "'", double11 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateDifferentiable13); org.junit.Assert.assertNotNull(differentiableUnivariateFunction14); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(multivariateFunction34); org.junit.Assert.assertTrue("'" + goalType35 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType35.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair39); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = sin11.derivative(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray15 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin10, sin11, sin13, sin14 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray15); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable9, (java.lang.Object[]) univariateDifferentiableArray15); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray15); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable8, (java.lang.Object[]) univariateDifferentiableArray15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction20 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray15); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer24 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker23); int int25 = brentOptimizer24.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = sin28.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray30 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable31 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray30); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray30); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray30); org.apache.commons.math3.optimization.GoalType goalType34 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer24.optimize(97, univariateFunction33, goalType34, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer24.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType40 = brentOptimizer24.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer24.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.optimization.GoalType goalType45 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer24.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin43, goalType45, 3.141592653589793d, 0.0d); double double49 = brentOptimizer24.getMax(); int int50 = brentOptimizer24.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer24.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType52 = brentOptimizer24.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair55 = brentOptimizer3.optimize((int) (byte) 1, univariateFunction20, goalType52, 2.6469779601696886E-23d, 1.7391304347826086d); int int56 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertNotNull(univariateDifferentiableArray15); org.junit.Assert.assertNotNull(univariateDifferentiable16); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateFunction20); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateDifferentiableArray30); org.junit.Assert.assertNotNull(univariateDifferentiable31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertTrue("'" + goalType34 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType34.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertTrue("'" + goalType45 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType45.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair51); org.junit.Assert.assertTrue("'" + goalType52 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType52.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = sin12.derivative(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray15 = new org.apache.commons.math3.analysis.UnivariateFunction[] { univariateFunction11, univariateFunction13, sin14 }; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateFunctionArray15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = org.apache.commons.math3.analysis.FunctionUtils.compose(univariateFunctionArray15); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker20 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer21 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker20); int int22 = brentOptimizer21.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray27); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray27); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer21.optimize(97, univariateFunction30, goalType31, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int36 = brentOptimizer21.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable38 = null; org.apache.commons.math3.exception.util.Localizable localizable40 = null; org.apache.commons.math3.exception.util.Localizable localizable41 = null; org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray47 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin42, sin43, sin45, sin46 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray47); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException49 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable41, (java.lang.Object[]) univariateDifferentiableArray47); org.apache.commons.math3.exception.MathInternalError mathInternalError50 = new org.apache.commons.math3.exception.MathInternalError(localizable40, (java.lang.Object[]) univariateDifferentiableArray47); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable51 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray47); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException52 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable38, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray47); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable53 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray47); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker56 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer57 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker56); int int58 = brentOptimizer57.getMaxEvaluations(); double double59 = brentOptimizer57.getMax(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin62.derivative(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin65 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin61, sin62, sin64, sin65 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction68 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray66); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker71 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer72 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker71); int int73 = brentOptimizer72.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin75 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin76 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction77 = sin76.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray78 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin75, sin76 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable79 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray78); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable80 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray78); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction81 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray78); org.apache.commons.math3.optimization.GoalType goalType82 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair86 = brentOptimizer72.optimize(97, univariateFunction81, goalType82, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair87 = brentOptimizer72.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType88 = brentOptimizer72.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer57.optimize((int) ' ', univariateFunction68, goalType88, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair94 = brentOptimizer21.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable53, goalType88, (-1.5707963267948912d), (double) (-0.9999999f)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair98 = brentOptimizer3.optimize(0, univariateFunction17, goalType88, 1.208662425748988d, 0.0d, 0.7456241401813645d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertNotNull(univariateFunctionArray15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertNotNull(univariateDifferentiableArray47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(univariateDifferentiable51); org.junit.Assert.assertNotNull(univariateDifferentiable53); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateFunction68); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertNotNull(univariateFunction77); org.junit.Assert.assertNotNull(univariateDifferentiableArray78); org.junit.Assert.assertNotNull(univariateDifferentiable79); org.junit.Assert.assertNotNull(univariateDifferentiable80); org.junit.Assert.assertNotNull(univariateFunction81); org.junit.Assert.assertTrue("'" + goalType82 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType82.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair86); org.junit.Assert.assertNotNull(univariatePointValuePair87); org.junit.Assert.assertTrue("'" + goalType88 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType88.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair91); org.junit.Assert.assertNotNull(univariatePointValuePair94); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction0 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer4 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker3); int int5 = brentOptimizer4.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray10 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, sin8 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray10); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray10); org.apache.commons.math3.optimization.GoalType goalType14 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer4.optimize(97, univariateFunction13, goalType14, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair19 = brentOptimizer4.doOptimize(); double double20 = brentOptimizer4.getMax(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24, sin26, sin27 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable22, (java.lang.Object[]) univariateDifferentiableArray28); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray28); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getEvaluations(); int int37 = brentOptimizer35.getEvaluations(); int int38 = brentOptimizer35.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction40 = null; org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray46 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin41, sin42, sin44, sin45 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray46); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray46); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray46); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction51 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction40, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable49, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType52 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair56 = brentOptimizer35.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable49, goalType52, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair60 = brentOptimizer4.optimize((int) (byte) 100, univariateFunction31, goalType52, 1.2786363145140075E-4d, (-1.5596856728972892d), 2.2227587494850775E-162d); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction61 = null; org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin62.derivative(); double double65 = sin62.value((double) (short) 10); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction67 = sin66.derivative(); double double69 = sin66.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction70 = sin66.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction71 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction61, (org.apache.commons.math3.analysis.UnivariateFunction) sin62, (org.apache.commons.math3.analysis.UnivariateFunction) sin66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = sin62.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction73 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction0, univariateFunction31, (org.apache.commons.math3.analysis.UnivariateFunction) sin62); org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure74 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure75 = sin62.value(derivativeStructure74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertNotNull(univariateDifferentiableArray10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertTrue("'" + goalType14 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType14.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertNotNull(univariatePointValuePair19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4210854715202004E-14d + "'", double20 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateDifferentiableArray46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(multivariateFunction51); org.junit.Assert.assertTrue("'" + goalType52 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType52.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair56); org.junit.Assert.assertNotNull(univariatePointValuePair60); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.5440211108893698d) + "'", double65 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(univariateFunction67); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.8414709825806044d + "'", double69 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction70); org.junit.Assert.assertNotNull(univariateFunction71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertNotNull(univariateFunction73); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = sin32.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray34 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin31, sin32 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray34); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable36 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray34); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction37 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable36); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction38 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable36); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker41 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer42 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker41); double double43 = brentOptimizer42.getMax(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); double double48 = sin45.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction49 = sin45.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin45.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getMaxEvaluations(); double double56 = brentOptimizer54.getMax(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = sin59.derivative(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray63 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin58, sin59, sin61, sin62 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable64 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray63); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray63); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker68 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer69 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker68); int int70 = brentOptimizer69.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin72 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin73 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction74 = sin73.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray75 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin72, sin73 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable76 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray75); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable77 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray75); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction78 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray75); org.apache.commons.math3.optimization.GoalType goalType79 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer69.optimize(97, univariateFunction78, goalType79, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair84 = brentOptimizer69.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType85 = brentOptimizer69.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair88 = brentOptimizer54.optimize((int) ' ', univariateFunction65, goalType85, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer42.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin45, goalType85, 2.7182818284590446d, (double) 100); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair94 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable36, goalType85, (double) Float.NaN, (-2.2250738585072014E-308d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (32) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertNotNull(univariateDifferentiableArray34); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertNotNull(univariateDifferentiable36); org.junit.Assert.assertNotNull(differentiableUnivariateFunction37); org.junit.Assert.assertNotNull(differentiableUnivariateFunction38); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.8414709825806044d + "'", double48 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction60); org.junit.Assert.assertNotNull(univariateDifferentiableArray63); org.junit.Assert.assertNotNull(univariateDifferentiable64); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0); org.junit.Assert.assertNotNull(univariateFunction74); org.junit.Assert.assertNotNull(univariateDifferentiableArray75); org.junit.Assert.assertNotNull(univariateDifferentiable76); org.junit.Assert.assertNotNull(univariateDifferentiable77); org.junit.Assert.assertNotNull(univariateFunction78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertNotNull(univariatePointValuePair84); org.junit.Assert.assertTrue("'" + goalType85 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType85.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair88); org.junit.Assert.assertNotNull(univariatePointValuePair91); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(2704.000238418579d, 2.1544346900318834d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker5 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker5); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); double double30 = brentOptimizer3.getMin(); int int31 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); // The following exception was thrown during execution in test generation try { double double9 = brentOptimizer3.computeObjectiveValue((double) 10); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker77 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker77); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); int int30 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker31); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); double double8 = brentOptimizer3.getMax(); double double9 = brentOptimizer3.getMax(); int int10 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction12 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction12, (-0.0874913248293193d)); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker17 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer18 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker17); int int19 = brentOptimizer18.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray24); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray24); org.apache.commons.math3.optimization.GoalType goalType28 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer18.optimize(97, univariateFunction27, goalType28, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair33 = brentOptimizer18.doOptimize(); int int34 = brentOptimizer18.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable36 = null; org.apache.commons.math3.exception.util.Localizable localizable37 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray38 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray38); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException40 = new org.apache.commons.math3.exception.MathArithmeticException(localizable37, (java.lang.Object[]) differentiableUnivariateFunctionArray38); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray38); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable36, (java.lang.Object[]) differentiableUnivariateFunctionArray38); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray38); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction44 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray38); org.apache.commons.math3.optimization.GoalType goalType45 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer18.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction44, goalType45, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair52 = brentOptimizer3.optimize(4, univariateFunction14, goalType45, 0.8342233605065102d, (double) 524L, 80372.16322833701d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertTrue("'" + goalType28 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType28.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertNotNull(univariatePointValuePair33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray38); org.junit.Assert.assertNotNull(differentiableUnivariateFunction39); org.junit.Assert.assertNotNull(differentiableUnivariateFunction41); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(differentiableUnivariateFunction44); org.junit.Assert.assertTrue("'" + goalType45 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType45.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair48); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 10, (double) 0L, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin51, sin52, sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray58 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, univariateDifferentiable39, univariateDifferentiable46, sin47, sin49, univariateDifferentiable57 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray58); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker62 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer63 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker62); int int64 = brentOptimizer63.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin67 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction68 = sin67.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray69 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin66, sin67 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable70 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray69); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable71 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray69); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray69); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer63.optimize(97, univariateFunction72, goalType73, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer63.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType79 = brentOptimizer63.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable59, goalType79, 0.0d, (double) (-127L), (-0.017453292519943295d)); int int84 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker30); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiableArray58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(univariateFunction68); org.junit.Assert.assertNotNull(univariateDifferentiableArray69); org.junit.Assert.assertNotNull(univariateDifferentiable70); org.junit.Assert.assertNotNull(univariateDifferentiable71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32); org.junit.Assert.assertNotNull(univariatePointValuePair85); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(22.248715438260383d, 7.85555250883871E7d, univariatePointValuePairConvergenceChecker2); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin22.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin22); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiable29); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); double double13 = sin10.value(0.9999999958776927d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin10.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = sin10.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer20 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker19); int int21 = brentOptimizer20.getEvaluations(); int int22 = brentOptimizer20.getEvaluations(); int int23 = brentOptimizer20.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction25 = null; org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray31); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray31); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction25, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable34, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType37 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer20.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable34, goalType37, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer3.optimize(0, univariateFunction16, goalType37, (-9.079985908828064E-5d), 1.7391304347826086d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.8414709825806044d + "'", double13 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(multivariateFunction36); org.junit.Assert.assertTrue("'" + goalType37 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType37.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.7904227392038957d, 0.0d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin22); double double30 = univariateDifferentiable28.value(2.154434758519516d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.8344631700193664d + "'", double30 == 0.8344631700193664d); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(6.6917246496340396E41d, Double.NaN); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = brentOptimizer2.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer2.getConvergenceChecker(); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker3); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(6.6917246496340396E41d, Double.NaN); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = brentOptimizer2.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { double double5 = brentOptimizer2.computeObjectiveValue(81377.39571257407d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker3); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer9 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker8); int int10 = brentOptimizer9.getEvaluations(); int int11 = brentOptimizer9.getEvaluations(); int int12 = brentOptimizer9.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction14 = null; org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction25 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction14, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable23, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType26 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer9.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable23, goalType26, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.GoalType goalType31 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair34 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable23, goalType31, 9.999999046325684d, (double) (-0.0f)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(multivariateFunction25); org.junit.Assert.assertTrue("'" + goalType26 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType26.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair30); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getStartValue(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair6 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); double double10 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(1.2177655131703127d, (-5698.384124911726d), univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -5,698.384 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 10L, 3.7581226324091723d, univariatePointValuePairConvergenceChecker2); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(2704.000238418579d, 2.1544346900318834d, univariatePointValuePairConvergenceChecker2); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair4 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.GoalType goalType10 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker11 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertNull(goalType10); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker11); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType5 = brentOptimizer3.getGoalType(); double double6 = brentOptimizer3.getMin(); int int7 = brentOptimizer3.getMaxEvaluations(); int int8 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(goalType5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-2.356194490192345d), (double) 5.0000005f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -2.356 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); double double6 = brentOptimizer3.getMax(); double double7 = brentOptimizer3.getMin(); int int8 = brentOptimizer3.getMaxEvaluations(); double double9 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); double double20 = brentOptimizer3.getStartValue(); double double21 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.4210854715202004E-14d + "'", double21 == 1.4210854715202004E-14d); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); double double8 = brentOptimizer3.getMax(); int int9 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { double double11 = brentOptimizer3.computeObjectiveValue((double) 'a'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double74 = brentOptimizer3.getMin(); int int75 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin77 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin78 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction79 = sin78.derivative(); org.apache.commons.math3.analysis.function.Sin sin80 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin81 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray82 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin77, sin78, sin80, sin81 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable83 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray82); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction84 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray82); double double86 = univariateFunction84.value((double) (short) 1); org.apache.commons.math3.optimization.GoalType goalType87 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer3.optimize((int) (byte) 100, univariateFunction84, goalType87, (-36.04365338911715d), 0.0d, 9.223372036854776E18d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.22766967171598d + "'", double74 == 5.22766967171598d); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7); org.junit.Assert.assertNotNull(univariateFunction79); org.junit.Assert.assertNotNull(univariateDifferentiableArray82); org.junit.Assert.assertNotNull(univariateDifferentiable83); org.junit.Assert.assertNotNull(univariateFunction84); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 3.365883939231586d + "'", double86 == 3.365883939231586d); org.junit.Assert.assertTrue("'" + goalType87 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType87.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair91); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); double double78 = brentOptimizer3.computeObjectiveValue((-0.88966182231646d)); int int79 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.3642239251822542d + "'", double78 == 0.3642239251822542d); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); int int21 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.analysis.function.Sin sin5 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray11 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7, sin9, sin10 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray11); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin14.derivative(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray18 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin13, sin14, sin16, sin17 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable19 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray18); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin5, univariateDifferentiable12, univariateDifferentiable19, sin20, sin22, univariateDifferentiable30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray31); org.apache.commons.math3.optimization.GoalType goalType33 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer3.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, goalType33, 0.0d, 0.17453292519943295d); double double37 = brentOptimizer3.getMax(); double double38 = brentOptimizer3.getMax(); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateDifferentiableArray18); org.junit.Assert.assertNotNull(univariateDifferentiable19); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.17453292519943295d + "'", double37 == 0.17453292519943295d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.17453292519943295d + "'", double38 == 0.17453292519943295d); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); double double8 = brentOptimizer3.getMax(); double double9 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker14 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer15 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker14); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction20 = sin19.derivative(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray23 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin18, sin19, sin21, sin22 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray23); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin26.derivative(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray30 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, sin26, sin28, sin29 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable31 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray30); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = sin32.derivative(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction38 = sin37.derivative(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray41 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin36, sin37, sin39, sin40 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable42 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray41); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray43 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin17, univariateDifferentiable24, univariateDifferentiable31, sin32, sin34, univariateDifferentiable42 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable44 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray43); org.apache.commons.math3.optimization.GoalType goalType45 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer15.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable44, goalType45, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair52 = brentOptimizer3.optimize((-22), univariateFunction11, goalType45, 0.0d, 1.5707963267948895d, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction20); org.junit.Assert.assertNotNull(univariateDifferentiableArray23); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateDifferentiableArray30); org.junit.Assert.assertNotNull(univariateDifferentiable31); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateFunction38); org.junit.Assert.assertNotNull(univariateDifferentiableArray41); org.junit.Assert.assertNotNull(univariateDifferentiable42); org.junit.Assert.assertNotNull(univariateDifferentiableArray43); org.junit.Assert.assertNotNull(univariateDifferentiable44); org.junit.Assert.assertTrue("'" + goalType45 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType45.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair48); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction21 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction21, (-0.0874913248293193d)); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(12, univariateFunction23, goalType24, (double) 1.0141205E31f, 4.644483415289244d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); double double24 = sin21.value(0.9999999958776927d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin21); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin21.derivative(); org.apache.commons.math3.optimization.GoalType goalType27 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer3.optimize(52, (org.apache.commons.math3.analysis.UnivariateFunction) sin21, goalType27, (double) 89009L, (-0.88966182231646d), 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.8414709825806044d + "'", double24 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction26); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.exception.util.Localizable localizable12 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray13 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray13); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException15 = new org.apache.commons.math3.exception.MathArithmeticException(localizable12, (java.lang.Object[]) differentiableUnivariateFunctionArray13); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray13); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction17 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray13); org.apache.commons.math3.exception.MathInternalError mathInternalError18 = new org.apache.commons.math3.exception.MathInternalError(localizable11, (java.lang.Object[]) differentiableUnivariateFunctionArray13); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException19 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable9, (java.lang.Number) 89009.0d, (java.lang.Object[]) differentiableUnivariateFunctionArray13); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction20 = org.apache.commons.math3.analysis.FunctionUtils.add(differentiableUnivariateFunctionArray13); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer24 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker23); int int25 = brentOptimizer24.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = sin28.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray30 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable31 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray30); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray30); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray30); org.apache.commons.math3.optimization.GoalType goalType34 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer24.optimize(97, univariateFunction33, goalType34, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer24.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType40 = brentOptimizer24.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer24.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.optimization.GoalType goalType45 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer24.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin43, goalType45, 3.141592653589793d, 0.0d); double double49 = brentOptimizer24.getMax(); int int50 = brentOptimizer24.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer24.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType52 = brentOptimizer24.getGoalType(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); double double57 = sin54.value((double) (short) 10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction58 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin54); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker61 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer62 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker61); int int63 = brentOptimizer62.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin65 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction67 = sin66.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray68 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin65, sin66 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable69 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray68); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable70 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray68); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction71 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray68); org.apache.commons.math3.optimization.GoalType goalType72 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer62.optimize(97, univariateFunction71, goalType72, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer62.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType78 = brentOptimizer62.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair79 = brentOptimizer62.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin81 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction82 = sin81.derivative(); org.apache.commons.math3.optimization.GoalType goalType83 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair86 = brentOptimizer62.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin81, goalType83, 3.141592653589793d, 0.0d); double double87 = brentOptimizer62.getMax(); org.apache.commons.math3.optimization.GoalType goalType88 = brentOptimizer62.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer24.optimize(11, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction58, goalType88, 0.0d, 1.6929693744344998d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair94 = brentOptimizer3.optimize((int) (byte) 100, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction20, goalType88, (double) 52, 1.9612661109026501d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray13); org.junit.Assert.assertNotNull(differentiableUnivariateFunction14); org.junit.Assert.assertNotNull(differentiableUnivariateFunction16); org.junit.Assert.assertNotNull(differentiableUnivariateFunction17); org.junit.Assert.assertNotNull(differentiableUnivariateFunction20); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateDifferentiableArray30); org.junit.Assert.assertNotNull(univariateDifferentiable31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertTrue("'" + goalType34 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType34.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertTrue("'" + goalType45 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType45.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair51); org.junit.Assert.assertTrue("'" + goalType52 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType52.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-0.5440211108893698d) + "'", double57 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(differentiableUnivariateFunction58); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0); org.junit.Assert.assertNotNull(univariateFunction67); org.junit.Assert.assertNotNull(univariateDifferentiableArray68); org.junit.Assert.assertNotNull(univariateDifferentiable69); org.junit.Assert.assertNotNull(univariateDifferentiable70); org.junit.Assert.assertNotNull(univariateFunction71); org.junit.Assert.assertTrue("'" + goalType72 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType72.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertTrue("'" + goalType78 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType78.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair79); org.junit.Assert.assertNotNull(univariateFunction82); org.junit.Assert.assertTrue("'" + goalType83 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType83.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + goalType88 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType88.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair91); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, goalType20, (double) 6.0f, 7.544137102816975d, (double) 12); double double25 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(multivariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12.0d + "'", double25 == 12.0d); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction7 = null; org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.exception.util.Localizable localizable10 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = sin13.derivative(); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray17 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin12, sin13, sin15, sin16 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray17); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable11, (java.lang.Object[]) univariateDifferentiableArray17); org.apache.commons.math3.exception.MathInternalError mathInternalError20 = new org.apache.commons.math3.exception.MathInternalError(localizable10, (java.lang.Object[]) univariateDifferentiableArray17); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray17); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException22 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable8, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray17); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray17); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin26.derivative(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray29 = new org.apache.commons.math3.analysis.UnivariateFunction[] { univariateFunction25, univariateFunction27, sin28 }; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateFunctionArray29); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction7, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable23, univariateFunction30); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction32 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable23); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker35 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer36 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker35); int int37 = brentOptimizer36.getEvaluations(); int int38 = brentOptimizer36.getEvaluations(); int int39 = brentOptimizer36.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction41 = null; org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray47 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin42, sin43, sin45, sin46 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray47); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray47); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray47); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction52 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction41, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable50, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType53 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair57 = brentOptimizer36.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable50, goalType53, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction32, goalType53, 12.000000000000002d, (double) 35.000004f, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertNotNull(univariateDifferentiableArray17); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateFunctionArray29); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(differentiableUnivariateFunction32); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertNotNull(univariateDifferentiableArray47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(univariateFunction49); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertNotNull(multivariateFunction52); org.junit.Assert.assertTrue("'" + goalType53 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType53.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair57); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray49 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin44, sin45, sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray49); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, univariateDifferentiable32, univariateDifferentiable39, sin40, sin42, univariateDifferentiable50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException53 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable23, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.exception.NullArgumentException nullArgumentException54 = new org.apache.commons.math3.exception.NullArgumentException(localizable22, (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker59 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer60 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker59); int int61 = brentOptimizer60.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin63, sin64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray66); org.apache.commons.math3.optimization.GoalType goalType70 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer60.optimize(97, univariateFunction69, goalType70, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.optimize(17, univariateFunction56, goalType70, 99.99999999999999d, 2.238693057170856d, 0.8687261884639957d); double double79 = univariatePointValuePair78.getPoint(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiableArray49); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateFunction69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair74); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.966151356677d + "'", double79 == 35.966151356677d); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); double double8 = brentOptimizer3.getMax(); double double9 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 3.8146973E-6f, 5729.57829566771d); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction4 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction6 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction4, 0.0d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer10 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker9); int int11 = brentOptimizer10.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin14.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray16 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin13, sin14 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray16); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray16); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray16); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer10.optimize(97, univariateFunction19, goalType20, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair25 = brentOptimizer10.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType26 = brentOptimizer10.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer10.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin29.derivative(); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair34 = brentOptimizer10.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin29, goalType31, 3.141592653589793d, 0.0d); double double35 = brentOptimizer10.getMax(); int int36 = brentOptimizer10.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker37 = brentOptimizer10.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction49 = sin48.derivative(); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray52 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin47, sin48, sin50, sin51 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable53 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray52); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.function.Sin sin56 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = sin56.derivative(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = sin59.derivative(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray63 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin58, sin59, sin61, sin62 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable64 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray63); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray65 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, univariateDifferentiable46, univariateDifferentiable53, sin54, sin56, univariateDifferentiable64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable66 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray65); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker69 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer70 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker69); int int71 = brentOptimizer70.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin73 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin74 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction75 = sin74.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray76 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin73, sin74 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable77 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray76); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable78 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray76); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction79 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray76); org.apache.commons.math3.optimization.GoalType goalType80 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair84 = brentOptimizer70.optimize(97, univariateFunction79, goalType80, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer70.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType86 = brentOptimizer70.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair90 = brentOptimizer10.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable66, goalType86, 0.0d, (double) (-127L), (-0.017453292519943295d)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair93 = brentOptimizer2.optimize((int) (byte) 100, univariateFunction6, goalType86, (-0.7014315007859525d), 0.9735361584457501d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(univariateFunction6); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateDifferentiableArray16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertNotNull(univariatePointValuePair25); org.junit.Assert.assertTrue("'" + goalType26 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType26.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker37); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction49); org.junit.Assert.assertNotNull(univariateDifferentiableArray52); org.junit.Assert.assertNotNull(univariateDifferentiable53); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertNotNull(univariateFunction60); org.junit.Assert.assertNotNull(univariateDifferentiableArray63); org.junit.Assert.assertNotNull(univariateDifferentiable64); org.junit.Assert.assertNotNull(univariateDifferentiableArray65); org.junit.Assert.assertNotNull(univariateDifferentiable66); org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0); org.junit.Assert.assertNotNull(univariateFunction75); org.junit.Assert.assertNotNull(univariateDifferentiableArray76); org.junit.Assert.assertNotNull(univariateDifferentiable77); org.junit.Assert.assertNotNull(univariateDifferentiable78); org.junit.Assert.assertNotNull(univariateFunction79); org.junit.Assert.assertTrue("'" + goalType80 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType80.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair84); org.junit.Assert.assertNotNull(univariatePointValuePair85); org.junit.Assert.assertTrue("'" + goalType86 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType86.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair90); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = brentOptimizer3.getConvergenceChecker(); int int9 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer2.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { double double6 = brentOptimizer2.computeObjectiveValue(0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(8.832347764255917E-17d, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = sin6.derivative(); double double9 = sin6.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = sin6.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin6.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker14 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer15 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker14); int int16 = brentOptimizer15.getMaxEvaluations(); double double17 = brentOptimizer15.getMax(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin19, sin20, sin22, sin23 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray24); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker29 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer30 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker29); int int31 = brentOptimizer30.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray36 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable37 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray36); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray36); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray36); org.apache.commons.math3.optimization.GoalType goalType40 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer30.optimize(97, univariateFunction39, goalType40, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer30.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType46 = brentOptimizer30.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer15.optimize((int) ' ', univariateFunction26, goalType46, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair52 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin6, goalType46, 2.7182818284590446d, (double) 100); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair53 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (10) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction7); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8414709825806044d + "'", double9 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray36); org.junit.Assert.assertNotNull(univariateDifferentiable37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateFunction39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair44); org.junit.Assert.assertNotNull(univariatePointValuePair45); org.junit.Assert.assertTrue("'" + goalType46 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType46.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair49); org.junit.Assert.assertNotNull(univariatePointValuePair52); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker18 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker18); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker19); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.exception.util.Localizable localizable21 = null; org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin22, sin23, sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException29 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable21, (java.lang.Object[]) univariateDifferentiableArray27); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray27); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker33 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer34 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker33); int int35 = brentOptimizer34.getEvaluations(); int int36 = brentOptimizer34.getEvaluations(); int int37 = brentOptimizer34.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction39 = null; org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction47 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray45); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray45); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction39, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable48, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType51 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair55 = brentOptimizer34.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable48, goalType51, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer3.optimize((int) (byte) 100, univariateFunction30, goalType51, 1.2786363145140075E-4d, (-1.5596856728972892d), 2.2227587494850775E-162d); double double61 = brentOptimizer3.computeObjectiveValue(99.00505037623081d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker62 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); double double67 = sin64.value(1.208662425748988d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker70 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer71 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker70); int int72 = brentOptimizer71.getEvaluations(); int int73 = brentOptimizer71.getEvaluations(); int int74 = brentOptimizer71.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction76 = null; org.apache.commons.math3.analysis.function.Sin sin77 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin78 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction79 = sin78.derivative(); org.apache.commons.math3.analysis.function.Sin sin80 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin81 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray82 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin77, sin78, sin80, sin81 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable83 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray82); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction84 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray82); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable85 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray82); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction87 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction76, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable85, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType88 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair92 = brentOptimizer71.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable85, goalType88, (double) 6.0f, 7.544137102816975d, (double) 12); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair96 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) sin64, goalType88, 1.60978210179491616E17d, 1.1920928955078737E193d, 1.2786363075458198E-4d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(multivariateFunction50); org.junit.Assert.assertTrue("'" + goalType51 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType51.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair55); org.junit.Assert.assertNotNull(univariatePointValuePair59); org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-3.99597192642347d) + "'", double61 == (-3.99597192642347d)); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker62); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9351429750755559d + "'", double67 == 0.9351429750755559d); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0); org.junit.Assert.assertNotNull(univariateFunction79); org.junit.Assert.assertNotNull(univariateDifferentiableArray82); org.junit.Assert.assertNotNull(univariateDifferentiable83); org.junit.Assert.assertNotNull(univariateFunction84); org.junit.Assert.assertNotNull(univariateDifferentiable85); org.junit.Assert.assertNotNull(multivariateFunction87); org.junit.Assert.assertTrue("'" + goalType88 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType88.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair92); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getMaxEvaluations(); int int20 = brentOptimizer3.getMaxEvaluations(); double double21 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.GoalType goalType22 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d); org.junit.Assert.assertTrue("'" + goalType22 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType22.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker18 = brentOptimizer3.getConvergenceChecker(); int int19 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); int int28 = brentOptimizer3.getEvaluations(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); double double34 = sin31.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin31.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin31.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker39 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer40 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker39); int int41 = brentOptimizer40.getEvaluations(); int int42 = brentOptimizer40.getEvaluations(); int int43 = brentOptimizer40.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker44 = brentOptimizer40.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable46 = null; org.apache.commons.math3.exception.util.Localizable localizable48 = null; org.apache.commons.math3.exception.util.Localizable localizable50 = null; org.apache.commons.math3.exception.util.Localizable localizable51 = null; org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction54 = sin53.derivative(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin56 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray57 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin52, sin53, sin55, sin56 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray57); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException59 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable51, (java.lang.Object[]) univariateDifferentiableArray57); org.apache.commons.math3.exception.MathInternalError mathInternalError60 = new org.apache.commons.math3.exception.MathInternalError(localizable50, (java.lang.Object[]) univariateDifferentiableArray57); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray57); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException62 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable48, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray57); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable63 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray57); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable64 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray57); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException65 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable46, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray57); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable66 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray57); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker69 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer70 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker69); int int71 = brentOptimizer70.getEvaluations(); int int72 = brentOptimizer70.getEvaluations(); int int73 = brentOptimizer70.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction75 = null; org.apache.commons.math3.analysis.function.Sin sin76 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin77 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction78 = sin77.derivative(); org.apache.commons.math3.analysis.function.Sin sin79 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin80 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray81 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin76, sin77, sin79, sin80 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable82 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray81); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction83 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray81); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable84 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray81); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction86 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction75, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable84, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType87 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer70.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable84, goalType87, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair95 = brentOptimizer40.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable66, goalType87, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair99 = brentOptimizer3.optimize((-53), univariateFunction36, goalType87, (double) 12, 0.0d, 1.2177655131703127d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-53) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.8414709825806044d + "'", double34 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker44); org.junit.Assert.assertNotNull(univariateFunction54); org.junit.Assert.assertNotNull(univariateDifferentiableArray57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable63); org.junit.Assert.assertNotNull(univariateDifferentiable64); org.junit.Assert.assertNotNull(univariateDifferentiable66); org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertNotNull(univariateFunction78); org.junit.Assert.assertNotNull(univariateDifferentiableArray81); org.junit.Assert.assertNotNull(univariateDifferentiable82); org.junit.Assert.assertNotNull(univariateFunction83); org.junit.Assert.assertNotNull(univariateDifferentiable84); org.junit.Assert.assertNotNull(multivariateFunction86); org.junit.Assert.assertTrue("'" + goalType87 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType87.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair91); org.junit.Assert.assertNotNull(univariatePointValuePair95); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray21 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction22 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray21); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException23 = new org.apache.commons.math3.exception.MathArithmeticException(localizable20, (java.lang.Object[]) differentiableUnivariateFunctionArray21); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction24 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray21); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray21); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray21); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = differentiableUnivariateFunction26.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer31 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker30); int int32 = brentOptimizer31.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray37 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin34, sin35 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray37); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray37); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray37); org.apache.commons.math3.optimization.GoalType goalType41 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer31.optimize(97, univariateFunction40, goalType41, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction26, goalType41, 1.8184464592320668d, 0.0d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray21); org.junit.Assert.assertNotNull(differentiableUnivariateFunction22); org.junit.Assert.assertNotNull(differentiableUnivariateFunction24); org.junit.Assert.assertNotNull(differentiableUnivariateFunction25); org.junit.Assert.assertNotNull(differentiableUnivariateFunction26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateDifferentiableArray37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertTrue("'" + goalType41 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType41.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair45); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double29 = sin22.value(1.5707963267948895d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable7 = null; org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray10 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException12 = new org.apache.commons.math3.exception.MathArithmeticException(localizable9, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException15 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable7, (java.lang.Number) 8, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add(differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = differentiableUnivariateFunction16.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker20 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer21 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker20); int int22 = brentOptimizer21.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray27); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray27); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer21.optimize(97, univariateFunction30, goalType31, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer21.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType37 = brentOptimizer21.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer21.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.optimization.GoalType goalType42 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer21.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin40, goalType42, 3.141592653589793d, 0.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer3.optimize((int) (short) 1, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction16, goalType42, 1.5707963267948895d, 5.656854249492381d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray10); org.junit.Assert.assertNotNull(differentiableUnivariateFunction11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertNotNull(differentiableUnivariateFunction14); org.junit.Assert.assertNotNull(differentiableUnivariateFunction16); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertTrue("'" + goalType37 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType37.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair45); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double74 = brentOptimizer3.getMin(); org.apache.commons.math3.exception.util.Localizable localizable76 = null; org.apache.commons.math3.exception.util.Localizable localizable77 = null; org.apache.commons.math3.exception.util.Localizable localizable79 = null; org.apache.commons.math3.exception.util.Localizable localizable80 = null; org.apache.commons.math3.analysis.function.Sin sin81 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin82 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction83 = sin82.derivative(); org.apache.commons.math3.analysis.function.Sin sin84 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin85 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray86 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin81, sin82, sin84, sin85 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable87 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray86); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException88 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable80, (java.lang.Object[]) univariateDifferentiableArray86); org.apache.commons.math3.exception.MathInternalError mathInternalError89 = new org.apache.commons.math3.exception.MathInternalError(localizable79, (java.lang.Object[]) univariateDifferentiableArray86); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable90 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray86); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException91 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable77, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray86); org.apache.commons.math3.exception.NullArgumentException nullArgumentException92 = new org.apache.commons.math3.exception.NullArgumentException(localizable76, (java.lang.Object[]) univariateDifferentiableArray86); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction93 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray86); org.apache.commons.math3.optimization.GoalType goalType94 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair97 = brentOptimizer3.optimize(0, univariateFunction93, goalType94, 0.3642239251822542d, (double) 515); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.22766967171598d + "'", double74 == 5.22766967171598d); org.junit.Assert.assertNotNull(univariateFunction83); org.junit.Assert.assertNotNull(univariateDifferentiableArray86); org.junit.Assert.assertNotNull(univariateDifferentiable87); org.junit.Assert.assertNotNull(univariateDifferentiable90); org.junit.Assert.assertNotNull(univariateFunction93); org.junit.Assert.assertTrue("'" + goalType94 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType94.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 9.999999f, (-93.25555671231702d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -93.256 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); int int30 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker8); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); int int28 = brentOptimizer3.getEvaluations(); double double29 = brentOptimizer3.getMin(); double double30 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.141592653589793d + "'", double29 == 3.141592653589793d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.5707963267948966d + "'", double30 == 1.5707963267948966d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker31); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker8); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.exception.util.Localizable localizable13 = null; org.apache.commons.math3.exception.util.Localizable localizable14 = null; org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable14, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.exception.MathInternalError mathInternalError23 = new org.apache.commons.math3.exception.MathInternalError(localizable13, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException25 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable11, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException28 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable9, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker32 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer33 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker32); int int34 = brentOptimizer33.getEvaluations(); int int35 = brentOptimizer33.getEvaluations(); int int36 = brentOptimizer33.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction38 = null; org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction38, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType50 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer33.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType50, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, goalType50, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable29); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(multivariateFunction49); org.junit.Assert.assertTrue("'" + goalType50 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType50.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertNotNull(differentiableUnivariateFunction59); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); double double20 = brentOptimizer3.getMin(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker22 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker22); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.exception.util.Localizable localizable21 = null; org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin22, sin23, sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException29 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable21, (java.lang.Object[]) univariateDifferentiableArray27); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray27); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker33 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer34 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker33); int int35 = brentOptimizer34.getEvaluations(); int int36 = brentOptimizer34.getEvaluations(); int int37 = brentOptimizer34.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction39 = null; org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction47 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray45); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray45); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction39, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable48, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType51 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair55 = brentOptimizer34.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable48, goalType51, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer3.optimize((int) (byte) 100, univariateFunction30, goalType51, 1.2786363145140075E-4d, (-1.5596856728972892d), 2.2227587494850775E-162d); double double60 = univariatePointValuePair59.getPoint(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(multivariateFunction50); org.junit.Assert.assertTrue("'" + goalType51 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType51.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair55); org.junit.Assert.assertNotNull(univariatePointValuePair59); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2.2227587494850775E-162d + "'", double60 == 2.2227587494850775E-162d); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin22); org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure29 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure30 = univariateDifferentiable28.value(derivativeStructure29); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNotNull(univariateDifferentiable28); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable7 = null; org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable8, (java.lang.Object[]) univariateDifferentiableArray14); org.apache.commons.math3.exception.MathInternalError mathInternalError17 = new org.apache.commons.math3.exception.MathInternalError(localizable7, (java.lang.Object[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker22 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer23 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker22); int int24 = brentOptimizer23.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable31 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray29); org.apache.commons.math3.optimization.GoalType goalType33 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer23.optimize(97, univariateFunction32, goalType33, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer23.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType39 = brentOptimizer23.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair42 = brentOptimizer3.optimize(63, univariateFunction19, goalType39, 3.1622776601683795d, (double) 1L); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker43 = brentOptimizer3.getConvergenceChecker(); double double44 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker45 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateFunction19); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable31); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair37); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertTrue("'" + goalType39 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType39.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair42); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker45); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); int int21 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); double double21 = brentOptimizer3.getMin(); double double22 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.GoalType goalType9 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(goalType9); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer2.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker5 = brentOptimizer2.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { double double7 = brentOptimizer2.computeObjectiveValue(10.017874927409903d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker5); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); double double8 = brentOptimizer3.getMax(); double double9 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker10 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker10); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); double double18 = univariatePointValuePair17.getPoint(); double double19 = univariatePointValuePair17.getPoint(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 7.701198589366694d + "'", double18 == 7.701198589366694d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 7.701198589366694d + "'", double19 == 7.701198589366694d); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(1.0102013784525026d, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = sin11.derivative(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray15 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin10, sin11, sin13, sin14 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray15); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable9, (java.lang.Object[]) univariateDifferentiableArray15); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray15); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable8, (java.lang.Object[]) univariateDifferentiableArray15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction20 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray15); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer24 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker23); int int25 = brentOptimizer24.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = sin28.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray30 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable31 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray30); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray30); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray30); org.apache.commons.math3.optimization.GoalType goalType34 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer24.optimize(97, univariateFunction33, goalType34, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer24.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType40 = brentOptimizer24.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer24.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.optimization.GoalType goalType45 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer24.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin43, goalType45, 3.141592653589793d, 0.0d); double double49 = brentOptimizer24.getMax(); int int50 = brentOptimizer24.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer24.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType52 = brentOptimizer24.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair55 = brentOptimizer3.optimize((int) (byte) 1, univariateFunction20, goalType52, 2.6469779601696886E-23d, 1.7391304347826086d); double double56 = univariatePointValuePair55.getPoint(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertNotNull(univariateDifferentiableArray15); org.junit.Assert.assertNotNull(univariateDifferentiable16); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateFunction20); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateDifferentiableArray30); org.junit.Assert.assertNotNull(univariateDifferentiable31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertTrue("'" + goalType34 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType34.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertTrue("'" + goalType45 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType45.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair51); org.junit.Assert.assertTrue("'" + goalType52 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType52.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.8695652173913043d + "'", double56 == 0.8695652173913043d); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker28 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker28); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); int int30 = brentOptimizer3.getMaxEvaluations(); int int31 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 8L, 1.5707963267948968d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair5 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.0d, 0.3681988726455053d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double74 = brentOptimizer3.getMin(); int int75 = brentOptimizer3.getEvaluations(); double double76 = brentOptimizer3.getStartValue(); double double77 = brentOptimizer3.getMax(); double double78 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.22766967171598d + "'", double74 == 5.22766967171598d); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.4210854715202004E-14d + "'", double77 == 1.4210854715202004E-14d); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.4210854715202004E-14d + "'", double78 == 1.4210854715202004E-14d); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction75 = null; org.apache.commons.math3.optimization.GoalType goalType76 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair80 = brentOptimizer3.optimize(0, univariateFunction75, goalType76, 0.8687261884639957d, (double) 2.3841858E-7f, 0.5149900333324824d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + goalType76 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType76.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-1362.4112920855202d), 5557.690612768985d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -1,362.411 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); double double8 = brentOptimizer3.getMax(); double double9 = brentOptimizer3.getMax(); double double10 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = brentOptimizer3.getConvergenceChecker(); int int20 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-0.5440211108893698d), 2.154434690031884d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -0.544 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); double double23 = sin20.value((double) (short) 10); double double25 = sin20.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin20.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin20.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin20.derivative(); double double30 = sin20.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer3.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin20, goalType31, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); double double36 = univariatePointValuePair35.getValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.5440211108893698d) + "'", double23 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9922682874719476d + "'", double25 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.01745240643728351d) + "'", double30 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.9999760721196276d) + "'", double36 == (-0.9999760721196276d)); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray49 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin44, sin45, sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray49); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, univariateDifferentiable32, univariateDifferentiable39, sin40, sin42, univariateDifferentiable50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException53 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable23, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.exception.NullArgumentException nullArgumentException54 = new org.apache.commons.math3.exception.NullArgumentException(localizable22, (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker59 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer60 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker59); int int61 = brentOptimizer60.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin63, sin64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray66); org.apache.commons.math3.optimization.GoalType goalType70 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer60.optimize(97, univariateFunction69, goalType70, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.optimize(17, univariateFunction56, goalType70, 99.99999999999999d, 2.238693057170856d, 0.8687261884639957d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair79 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiableArray49); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateFunction69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair74); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertNotNull(univariatePointValuePair79); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); double double78 = brentOptimizer3.computeObjectiveValue((-0.88966182231646d)); int int79 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.3642239251822542d + "'", double78 == 0.3642239251822542d); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair7 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.analysis.function.Sin sin5 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray11 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7, sin9, sin10 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray11); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin14.derivative(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray18 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin13, sin14, sin16, sin17 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable19 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray18); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin5, univariateDifferentiable12, univariateDifferentiable19, sin20, sin22, univariateDifferentiable30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray31); org.apache.commons.math3.optimization.GoalType goalType33 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer3.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, goalType33, 0.0d, 0.17453292519943295d); double double37 = brentOptimizer3.getStartValue(); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateDifferentiableArray18); org.junit.Assert.assertNotNull(univariateDifferentiable19); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.08726646259971647d + "'", double37 == 0.08726646259971647d); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer2.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker5 = brentOptimizer2.getConvergenceChecker(); double double6 = brentOptimizer2.getStartValue(); int int7 = brentOptimizer2.getEvaluations(); double double8 = brentOptimizer2.getStartValue(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-0.35891532187732544d), (double) 12.0f, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -0.359 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); double double6 = brentOptimizer3.getMax(); double double7 = brentOptimizer3.getMin(); int int8 = brentOptimizer3.getEvaluations(); double double9 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 8L, 1.5707963267948968d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.GoalType goalType5 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(goalType5); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType31 = brentOptimizer3.getGoalType(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); double double36 = sin33.value((double) (short) 10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction37 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin33); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker40 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer41 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker40); int int42 = brentOptimizer41.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray47 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin44, sin45 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray47); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray47); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray47); org.apache.commons.math3.optimization.GoalType goalType51 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair55 = brentOptimizer41.optimize(97, univariateFunction50, goalType51, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair56 = brentOptimizer41.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType57 = brentOptimizer41.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer41.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction61 = sin60.derivative(); org.apache.commons.math3.optimization.GoalType goalType62 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer41.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin60, goalType62, 3.141592653589793d, 0.0d); double double66 = brentOptimizer41.getMax(); org.apache.commons.math3.optimization.GoalType goalType67 = brentOptimizer41.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair70 = brentOptimizer3.optimize(11, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction37, goalType67, 0.0d, 1.6929693744344998d); double double72 = brentOptimizer3.computeObjectiveValue(99.0d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.5440211108893698d) + "'", double36 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(differentiableUnivariateFunction37); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiableArray47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + goalType51 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType51.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair55); org.junit.Assert.assertNotNull(univariatePointValuePair56); org.junit.Assert.assertTrue("'" + goalType57 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType57.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertNotNull(univariateFunction61); org.junit.Assert.assertTrue("'" + goalType62 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType62.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + goalType67 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType67.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair70); org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-0.9992068341863537d) + "'", double72 == (-0.9992068341863537d)); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(10.049874720119332d, 0.35427054092435967d); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); double double7 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); double double31 = brentOptimizer3.computeObjectiveValue(0.3457432918138511d); double double32 = brentOptimizer3.getMin(); int int33 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.33889607743961436d + "'", double31 == 0.33889607743961436d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.141592653589793d + "'", double32 == 3.141592653589793d); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = sin6.derivative(); double double9 = sin6.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = sin6.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin6.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker14 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer15 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker14); int int16 = brentOptimizer15.getMaxEvaluations(); double double17 = brentOptimizer15.getMax(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin19, sin20, sin22, sin23 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray24); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker29 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer30 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker29); int int31 = brentOptimizer30.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray36 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable37 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray36); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray36); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray36); org.apache.commons.math3.optimization.GoalType goalType40 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer30.optimize(97, univariateFunction39, goalType40, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer30.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType46 = brentOptimizer30.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer15.optimize((int) ' ', univariateFunction26, goalType46, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair52 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin6, goalType46, 2.7182818284590446d, (double) 100); int int53 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker54 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction7); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8414709825806044d + "'", double9 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray36); org.junit.Assert.assertNotNull(univariateDifferentiable37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateFunction39); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair44); org.junit.Assert.assertNotNull(univariatePointValuePair45); org.junit.Assert.assertTrue("'" + goalType46 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType46.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair49); org.junit.Assert.assertNotNull(univariatePointValuePair52); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker54); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); double double8 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); double double10 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType4 = brentOptimizer2.getGoalType(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNull(goalType4); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); int int8 = brentOptimizer3.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { double double10 = brentOptimizer3.computeObjectiveValue(0.7904227392038957d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(6.6917246496340396E41d, Double.NaN); int int3 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction5 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer9 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker8); int int10 = brentOptimizer9.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = sin13.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray15 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray15); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction18 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray15); org.apache.commons.math3.optimization.GoalType goalType19 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair23 = brentOptimizer9.optimize(97, univariateFunction18, goalType19, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer9.doOptimize(); double double25 = brentOptimizer9.getMax(); org.apache.commons.math3.exception.util.Localizable localizable27 = null; org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin29.derivative(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray33 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin28, sin29, sin31, sin32 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray33); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException35 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable27, (java.lang.Object[]) univariateDifferentiableArray33); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray33); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker39 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer40 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker39); int int41 = brentOptimizer40.getEvaluations(); int int42 = brentOptimizer40.getEvaluations(); int int43 = brentOptimizer40.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction45 = null; org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin46, sin47, sin49, sin50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable54 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction45, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable54, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType57 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer40.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable54, goalType57, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer9.optimize((int) (byte) 100, univariateFunction36, goalType57, 1.2786363145140075E-4d, (-1.5596856728972892d), 2.2227587494850775E-162d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer2.optimize(12, univariateFunction5, goalType57, 4501.6451872627495d, 1.7320508075688772d, 4.2482910979143895d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertNotNull(univariateDifferentiableArray15); org.junit.Assert.assertNotNull(univariateDifferentiable16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(univariateFunction18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair23); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.4210854715202004E-14d + "'", double25 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateDifferentiableArray33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiable54); org.junit.Assert.assertNotNull(multivariateFunction56); org.junit.Assert.assertTrue("'" + goalType57 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType57.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair61); org.junit.Assert.assertNotNull(univariatePointValuePair65); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariatePointValuePair20); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray49 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin44, sin45, sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray49); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, univariateDifferentiable32, univariateDifferentiable39, sin40, sin42, univariateDifferentiable50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException53 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable23, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.exception.NullArgumentException nullArgumentException54 = new org.apache.commons.math3.exception.NullArgumentException(localizable22, (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker59 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer60 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker59); int int61 = brentOptimizer60.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin63, sin64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray66); org.apache.commons.math3.optimization.GoalType goalType70 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer60.optimize(97, univariateFunction69, goalType70, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.optimize(17, univariateFunction56, goalType70, 99.99999999999999d, 2.238693057170856d, 0.8687261884639957d); int int79 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiableArray49); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateFunction69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair74); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 17 + "'", int79 == 17); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); int int21 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); double double26 = sin23.value((double) (short) 10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction27 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin23); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer31 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker30); int int32 = brentOptimizer31.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType33 = brentOptimizer31.getGoalType(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); double double38 = sin35.value(0.9999999958776927d); org.apache.commons.math3.optimization.GoalType goalType39 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair43 = brentOptimizer31.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin35, goalType39, 4.248291315986092d, 2.154434690031884d, (-0.0015270116852033055d)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) sin23, goalType39, (double) (byte) 100, 0.013067598221937501d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-0.5440211108893698d) + "'", double26 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(differentiableUnivariateFunction27); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNull(goalType33); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.8414709825806044d + "'", double38 == 0.8414709825806044d); org.junit.Assert.assertTrue("'" + goalType39 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType39.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair43); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 8L, 1.5707963267948968d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { double double6 = brentOptimizer3.computeObjectiveValue(0.04580610375292024d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray49 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin44, sin45, sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray49); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, univariateDifferentiable32, univariateDifferentiable39, sin40, sin42, univariateDifferentiable50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException53 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable23, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.exception.NullArgumentException nullArgumentException54 = new org.apache.commons.math3.exception.NullArgumentException(localizable22, (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker59 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer60 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker59); int int61 = brentOptimizer60.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin63, sin64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray66); org.apache.commons.math3.optimization.GoalType goalType70 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer60.optimize(97, univariateFunction69, goalType70, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.optimize(17, univariateFunction56, goalType70, 99.99999999999999d, 2.238693057170856d, 0.8687261884639957d); int int79 = brentOptimizer3.getEvaluations(); double double80 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiableArray49); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateFunction69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair74); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2.238693057170856d + "'", double80 == 2.238693057170856d); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { double double7 = brentOptimizer3.computeObjectiveValue(5.656854249492381d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.7029154395420767d, 0.0d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair21); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(6.6917246496340396E41d, Double.NaN); int int3 = brentOptimizer2.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.9893582466233818d, 0.4738240626447961d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction4 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer8 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker7); int int9 = brentOptimizer8.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = sin12.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin11, sin12 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable16 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.optimization.GoalType goalType18 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair22 = brentOptimizer8.optimize(97, univariateFunction17, goalType18, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair26 = brentOptimizer2.optimize(97, univariateFunction4, goalType18, 0.0d, (-0.8942257319186149d), 2470318.2474673553d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateDifferentiable16); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertTrue("'" + goalType18 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType18.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair22); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(49.313902756532976d, 69.77282434124179d); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.9893582466233818d, 0.4738240626447961d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = brentOptimizer2.getConvergenceChecker(); org.apache.commons.math3.exception.NumberIsTooLargeException numberIsTooLargeException8 = new org.apache.commons.math3.exception.NumberIsTooLargeException((java.lang.Number) (short) -1, (java.lang.Number) 1, true); java.lang.Number number9 = numberIsTooLargeException8.getMax(); java.lang.Number number10 = numberIsTooLargeException8.getArgument(); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException12 = new org.apache.commons.math3.exception.MaxCountExceededException((java.lang.Number) 100.0d); numberIsTooLargeException8.addSuppressed((java.lang.Throwable) maxCountExceededException12); java.lang.Number number14 = numberIsTooLargeException8.getMax(); org.apache.commons.math3.exception.util.Localizable localizable15 = null; org.apache.commons.math3.exception.util.Localizable localizable16 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray17 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction18 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray17); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction19 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction19, (double) '#'); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24, sin26, sin27 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray35 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin30, sin31, sin33, sin34 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable36 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray35); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction38 = sin37.derivative(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = sin39.derivative(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray46 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin41, sin42, sin44, sin45 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray46); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin22, univariateDifferentiable29, univariateDifferentiable36, sin37, sin39, univariateDifferentiable47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray48); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction51 = sin50.derivative(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray56 = new org.apache.commons.math3.analysis.UnivariateFunction[] { differentiableUnivariateFunction18, univariateFunction21, univariateDifferentiable49, sin50, univariateFunction53, sin54 }; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateFunctionArray56); org.apache.commons.math3.exception.MathInternalError mathInternalError58 = new org.apache.commons.math3.exception.MathInternalError(localizable16, (java.lang.Object[]) univariateFunctionArray56); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException59 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooLargeException8, localizable15, (java.lang.Object[]) univariateFunctionArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateFunctionArray56); org.apache.commons.math3.optimization.GoalType goalType61 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer2.optimize(7, univariateFunction60, goalType61, 0.02644543720403748d, (-0.0015270116852033055d), 2.802596928649634E-45d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker3); org.junit.Assert.assertEquals("'" + number9 + "' != '" + 1 + "'", number9, 1); org.junit.Assert.assertEquals("'" + number10 + "' != '" + (short) -1 + "'", number10, (short) -1); org.junit.Assert.assertEquals("'" + number14 + "' != '" + 1 + "'", number14, 1); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray17); org.junit.Assert.assertNotNull(differentiableUnivariateFunction18); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertNotNull(univariateDifferentiableArray35); org.junit.Assert.assertNotNull(univariateDifferentiable36); org.junit.Assert.assertNotNull(univariateFunction38); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateDifferentiableArray46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction51); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunctionArray56); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertNotNull(univariateFunction60); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getMaxEvaluations(); int int20 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); int int22 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker23); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); int int8 = brentOptimizer3.getMaxEvaluations(); int int9 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker10 = brentOptimizer3.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair11 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker10); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); double double7 = brentOptimizer3.getMin(); int int8 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin51, sin52, sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray58 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, univariateDifferentiable39, univariateDifferentiable46, sin47, sin49, univariateDifferentiable57 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray58); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker62 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer63 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker62); int int64 = brentOptimizer63.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin67 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction68 = sin67.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray69 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin66, sin67 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable70 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray69); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable71 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray69); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray69); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer63.optimize(97, univariateFunction72, goalType73, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer63.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType79 = brentOptimizer63.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable59, goalType79, 0.0d, (double) (-127L), (-0.017453292519943295d)); int int84 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.GoalType goalType85 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker30); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiableArray58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(univariateFunction68); org.junit.Assert.assertNotNull(univariateDifferentiableArray69); org.junit.Assert.assertNotNull(univariateDifferentiable70); org.junit.Assert.assertNotNull(univariateDifferentiable71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32); org.junit.Assert.assertTrue("'" + goalType85 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType85.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertNotNull(univariatePointValuePair31); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker20 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker19); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker20); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); double double8 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction10 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(bivariateFunction10, 5.000000000000001d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker15 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer16 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker15); int int17 = brentOptimizer16.getMaxEvaluations(); double double18 = brentOptimizer16.getMax(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray25 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin20, sin21, sin23, sin24 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray25); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray25); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer31 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker30); int int32 = brentOptimizer31.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray37 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin34, sin35 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray37); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray37); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray37); org.apache.commons.math3.optimization.GoalType goalType41 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer31.optimize(97, univariateFunction40, goalType41, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer31.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType47 = brentOptimizer31.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair50 = brentOptimizer16.optimize((int) ' ', univariateFunction27, goalType47, 4.000043427276863d, 1.3017526366697145d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer3.optimize((-45), univariateFunction12, goalType47, 1.7391304347826086d, (double) 515.0f, 0.3678794850260918d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-45) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiableArray25); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateDifferentiableArray37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertTrue("'" + goalType41 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType41.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair45); org.junit.Assert.assertNotNull(univariatePointValuePair46); org.junit.Assert.assertTrue("'" + goalType47 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType47.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair50); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); double double31 = univariatePointValuePair30.getValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer24 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker23); int int25 = brentOptimizer24.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = sin28.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray30 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable31 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray30); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray30); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction33 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray30); org.apache.commons.math3.optimization.GoalType goalType34 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer24.optimize(97, univariateFunction33, goalType34, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer24.doOptimize(); int int40 = brentOptimizer24.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable42 = null; org.apache.commons.math3.exception.util.Localizable localizable43 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray44 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction45 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray44); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException46 = new org.apache.commons.math3.exception.MathArithmeticException(localizable43, (java.lang.Object[]) differentiableUnivariateFunctionArray44); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray44); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException48 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable42, (java.lang.Object[]) differentiableUnivariateFunctionArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray44); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray44); org.apache.commons.math3.optimization.GoalType goalType51 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer24.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction50, goalType51, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable55 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction50); org.apache.commons.math3.optimization.GoalType goalType56 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer3.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable55, goalType56, (double) (-11.999999f), 11014.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateDifferentiableArray30); org.junit.Assert.assertNotNull(univariateDifferentiable31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction33); org.junit.Assert.assertTrue("'" + goalType34 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType34.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray44); org.junit.Assert.assertNotNull(differentiableUnivariateFunction45); org.junit.Assert.assertNotNull(differentiableUnivariateFunction47); org.junit.Assert.assertNotNull(univariateFunction49); org.junit.Assert.assertNotNull(differentiableUnivariateFunction50); org.junit.Assert.assertTrue("'" + goalType51 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType51.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariateDifferentiable55); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getEvaluations(); int int8 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(192.23056381465545d, 0.9999999999999999d); int int3 = brentOptimizer2.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-2864794.7735337033d), 1.7274287871510856d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -2,864,794.774 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double74 = brentOptimizer3.getMin(); int int75 = brentOptimizer3.getEvaluations(); double double76 = brentOptimizer3.getStartValue(); double double77 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.doOptimize(); int int79 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.22766967171598d + "'", double74 == 5.22766967171598d); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.4210854715202004E-14d + "'", double77 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 14 + "'", int79 == 14); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); org.apache.commons.math3.exception.util.Localizable localizable78 = null; org.apache.commons.math3.exception.util.Localizable localizable79 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray80 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction81 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray80); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException82 = new org.apache.commons.math3.exception.MathArithmeticException(localizable79, (java.lang.Object[]) differentiableUnivariateFunctionArray80); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction83 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray80); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException84 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable78, (java.lang.Object[]) differentiableUnivariateFunctionArray80); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction85 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray80); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction86 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray80); org.apache.commons.math3.optimization.GoalType goalType87 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair90 = brentOptimizer3.optimize(97, univariateFunction86, goalType87, 101.0d, 1833.4649444186343d); double double91 = univariatePointValuePair90.getValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray80); org.junit.Assert.assertNotNull(differentiableUnivariateFunction81); org.junit.Assert.assertNotNull(differentiableUnivariateFunction83); org.junit.Assert.assertNotNull(differentiableUnivariateFunction85); org.junit.Assert.assertNotNull(univariateFunction86); org.junit.Assert.assertTrue("'" + goalType87 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType87.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1830.7747555151752d + "'", double91 == 1830.7747555151752d); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = brentOptimizer2.getConvergenceChecker(); int int4 = brentOptimizer2.getMaxEvaluations(); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 4, (-1.5807959934815619d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1.581 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); double double21 = brentOptimizer3.computeObjectiveValue(20.000000953674316d); int int22 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction24 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(bivariateFunction24, 1.695228608386943d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker29 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer30 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker29); int int31 = brentOptimizer30.getMaxEvaluations(); double double32 = brentOptimizer30.getMax(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray39 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin34, sin35, sin37, sin38 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray39); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray39); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker44 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer45 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker44); int int46 = brentOptimizer45.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin48, sin49 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray51); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable53 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction54 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.GoalType goalType55 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer45.optimize(97, univariateFunction54, goalType55, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair60 = brentOptimizer45.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType61 = brentOptimizer45.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer30.optimize((int) ' ', univariateFunction41, goalType61, 4.000043427276863d, 1.3017526366697145d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair67 = brentOptimizer3.optimize(524, univariateFunction26, goalType61, (double) (-45), (double) 1.0f); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7913081858681398d + "'", double21 == 0.7913081858681398d); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateDifferentiableArray39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateDifferentiable53); org.junit.Assert.assertNotNull(univariateFunction54); org.junit.Assert.assertTrue("'" + goalType55 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType55.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair59); org.junit.Assert.assertNotNull(univariatePointValuePair60); org.junit.Assert.assertTrue("'" + goalType61 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType61.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer2.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker5 = brentOptimizer2.getConvergenceChecker(); int int6 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType7 = brentOptimizer2.getGoalType(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(goalType7); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, goalType20, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair25 = brentOptimizer3.doOptimize(); int int26 = brentOptimizer3.getMaxEvaluations(); int int27 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker28 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(multivariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertNotNull(univariatePointValuePair25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker28); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); double double23 = sin20.value((double) (short) 10); double double25 = sin20.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin20.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin20.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin20.derivative(); double double30 = sin20.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer3.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin20, goalType31, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin20); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin20.derivative(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.5440211108893698d) + "'", double23 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9922682874719476d + "'", double25 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.01745240643728351d) + "'", double30 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertNotNull(differentiableUnivariateFunction36); org.junit.Assert.assertNotNull(univariateFunction37); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 1.0f, 0.0d, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair8 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); double double8 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin51, sin52, sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray58 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, univariateDifferentiable39, univariateDifferentiable46, sin47, sin49, univariateDifferentiable57 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray58); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker62 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer63 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker62); int int64 = brentOptimizer63.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin67 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction68 = sin67.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray69 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin66, sin67 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable70 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray69); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable71 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray69); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray69); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer63.optimize(97, univariateFunction72, goalType73, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer63.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType79 = brentOptimizer63.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable59, goalType79, 0.0d, (double) (-127L), (-0.017453292519943295d)); int int84 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer3.doOptimize(); int int86 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker30); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiableArray58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(univariateFunction68); org.junit.Assert.assertNotNull(univariateDifferentiableArray69); org.junit.Assert.assertNotNull(univariateDifferentiable70); org.junit.Assert.assertNotNull(univariateDifferentiable71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32); org.junit.Assert.assertNotNull(univariatePointValuePair85); org.junit.Assert.assertTrue("'" + int86 + "' != '" + 32 + "'", int86 == 32); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); org.apache.commons.math3.exception.util.Localizable localizable78 = null; org.apache.commons.math3.exception.util.Localizable localizable79 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray80 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction81 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray80); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException82 = new org.apache.commons.math3.exception.MathArithmeticException(localizable79, (java.lang.Object[]) differentiableUnivariateFunctionArray80); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction83 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray80); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException84 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable78, (java.lang.Object[]) differentiableUnivariateFunctionArray80); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction85 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray80); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction86 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray80); org.apache.commons.math3.optimization.GoalType goalType87 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair90 = brentOptimizer3.optimize(97, univariateFunction86, goalType87, 101.0d, 1833.4649444186343d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker91 = brentOptimizer3.getConvergenceChecker(); double double93 = brentOptimizer3.computeObjectiveValue((double) (byte) -1); int int94 = brentOptimizer3.getMaxEvaluations(); int int95 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair96 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray80); org.junit.Assert.assertNotNull(differentiableUnivariateFunction81); org.junit.Assert.assertNotNull(differentiableUnivariateFunction83); org.junit.Assert.assertNotNull(differentiableUnivariateFunction85); org.junit.Assert.assertNotNull(univariateFunction86); org.junit.Assert.assertTrue("'" + goalType87 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType87.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair90); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker91); org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d)); org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97); org.junit.Assert.assertTrue("'" + int95 + "' != '" + 97 + "'", int95 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair96); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker8); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); org.apache.commons.math3.optimization.GoalType goalType20 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.GoalType goalType10 = brentOptimizer3.getGoalType(); int int11 = brentOptimizer3.getEvaluations(); double double12 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertNull(goalType10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin51, sin52, sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray58 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, univariateDifferentiable39, univariateDifferentiable46, sin47, sin49, univariateDifferentiable57 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray58); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker62 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer63 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker62); int int64 = brentOptimizer63.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin67 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction68 = sin67.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray69 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin66, sin67 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable70 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray69); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable71 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray69); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray69); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer63.optimize(97, univariateFunction72, goalType73, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer63.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType79 = brentOptimizer63.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable59, goalType79, 0.0d, (double) (-127L), (-0.017453292519943295d)); int int84 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer3.doOptimize(); double double86 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker30); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiableArray58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(univariateFunction68); org.junit.Assert.assertNotNull(univariateDifferentiableArray69); org.junit.Assert.assertNotNull(univariateDifferentiable70); org.junit.Assert.assertNotNull(univariateDifferentiable71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32); org.junit.Assert.assertNotNull(univariatePointValuePair85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction0 = null; org.apache.commons.math3.analysis.function.Sin sin1 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction2 = sin1.derivative(); double double4 = sin1.value(0.9999999958776927d); double double6 = sin1.value((double) 0); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction7 = sin1.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker10 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer11 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker10); int int12 = brentOptimizer11.getMaxEvaluations(); double double13 = brentOptimizer11.getMax(); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray20); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker25 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer26 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker25); int int27 = brentOptimizer26.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray32 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray32); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray32); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray32); org.apache.commons.math3.optimization.GoalType goalType36 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair40 = brentOptimizer26.optimize(97, univariateFunction35, goalType36, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer26.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType42 = brentOptimizer26.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer11.optimize((int) ' ', univariateFunction22, goalType42, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction0, univariateFunction7, univariateFunction22); double[] doubleArray50 = org.apache.commons.math3.analysis.FunctionUtils.sample(univariateFunction7, 0.0d, 7.346839692639297E-40d, 63); org.junit.Assert.assertNotNull(univariateFunction2); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8414709825806044d + "'", double4 == 0.8414709825806044d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction7); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(univariateDifferentiableArray32); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertTrue("'" + goalType36 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType36.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair40); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]"); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.8268795405320025d, (double) 35.000004f, univariatePointValuePairConvergenceChecker2); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker30 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = sin47.derivative(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin52 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sin52.derivative(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin51, sin52, sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray58 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, univariateDifferentiable39, univariateDifferentiable46, sin47, sin49, univariateDifferentiable57 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray58); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker62 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer63 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker62); int int64 = brentOptimizer63.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin67 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction68 = sin67.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray69 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin66, sin67 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable70 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray69); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable71 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray69); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray69); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer63.optimize(97, univariateFunction72, goalType73, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer63.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType79 = brentOptimizer63.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer3.optimize((int) ' ', (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable59, goalType79, 0.0d, (double) (-127L), (-0.017453292519943295d)); double double84 = univariatePointValuePair83.getValue(); double double85 = univariatePointValuePair83.getValue(); double double86 = univariatePointValuePair83.getPoint(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker30); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateFunction53); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiableArray58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(univariateFunction68); org.junit.Assert.assertNotNull(univariateDifferentiableArray69); org.junit.Assert.assertNotNull(univariateDifferentiable70); org.junit.Assert.assertNotNull(univariateDifferentiable71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 5.777024117637126d + "'", double84 == 5.777024117637126d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5.777024117637126d + "'", double85 == 5.777024117637126d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-48.52047015675627d) + "'", double86 == (-48.52047015675627d)); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); double double23 = sin20.value((double) (short) 10); double double25 = sin20.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin20.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin20.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin20.derivative(); double double30 = sin20.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer3.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin20, goalType31, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction36 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin20); org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure37 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure38 = sin20.value(derivativeStructure37); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.5440211108893698d) + "'", double23 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9922682874719476d + "'", double25 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.01745240643728351d) + "'", double30 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertNotNull(differentiableUnivariateFunction36); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(192.23056381465545d, 0.9999999999999999d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = brentOptimizer2.getConvergenceChecker(); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker3); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(101.0d, (-0.7615941559557649d), univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0.762 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); int int77 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray79 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction80 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray79); org.apache.commons.math3.optimization.GoalType goalType81 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer3.optimize(17, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction80, goalType81, 0.0d, 1.208662425748988d, 74.20324596385817d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray79); org.junit.Assert.assertNotNull(differentiableUnivariateFunction80); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(1.7329193250994747E10d, 36.40055311432538d, univariatePointValuePairConvergenceChecker2); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker74 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker74); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(57926.033087726224d, (double) (short) 100, univariatePointValuePairConvergenceChecker2); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable7 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray8 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction9 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray8); org.apache.commons.math3.exception.NullArgumentException nullArgumentException11 = new org.apache.commons.math3.exception.NullArgumentException(localizable7, (java.lang.Object[]) differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray8); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker16 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer17 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker16); int int18 = brentOptimizer17.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray23 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin20, sin21 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray23); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray23); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray23); org.apache.commons.math3.optimization.GoalType goalType27 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer17.optimize(97, univariateFunction26, goalType27, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer17.doOptimize(); double double33 = brentOptimizer17.getMax(); org.apache.commons.math3.exception.util.Localizable localizable35 = null; org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction38 = sin37.derivative(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray41 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin36, sin37, sin39, sin40 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable42 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray41); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException43 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable35, (java.lang.Object[]) univariateDifferentiableArray41); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray41); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker47 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer48 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker47); int int49 = brentOptimizer48.getEvaluations(); int int50 = brentOptimizer48.getEvaluations(); int int51 = brentOptimizer48.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction53 = null; org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = sin55.derivative(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray59 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin54, sin55, sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable60 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray59); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction61 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray59); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray59); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction64 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction53, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable62, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType65 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer48.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable62, goalType65, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer17.optimize((int) (byte) 100, univariateFunction44, goalType65, 1.2786363145140075E-4d, (-1.5596856728972892d), 2.2227587494850775E-162d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction13, goalType65, (-0.017453292519943295d), 12.000000000000002d, 5.293955920339377E-23d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray8); org.junit.Assert.assertNotNull(differentiableUnivariateFunction9); org.junit.Assert.assertNotNull(differentiableUnivariateFunction10); org.junit.Assert.assertNotNull(differentiableUnivariateFunction12); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertNotNull(univariateDifferentiableArray23); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertTrue("'" + goalType27 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType27.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair31); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.4210854715202004E-14d + "'", double33 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction38); org.junit.Assert.assertNotNull(univariateDifferentiableArray41); org.junit.Assert.assertNotNull(univariateDifferentiable42); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertNotNull(univariateDifferentiableArray59); org.junit.Assert.assertNotNull(univariateDifferentiable60); org.junit.Assert.assertNotNull(univariateFunction61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(multivariateFunction64); org.junit.Assert.assertTrue("'" + goalType65 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType65.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair77); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); double double31 = brentOptimizer3.computeObjectiveValue(0.3457432918138511d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker32 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.33889607743961436d + "'", double31 == 0.33889607743961436d); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker32); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(5.880532994392384d, (double) 1L); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair3 = brentOptimizer2.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 32, 0.8268795405320025d); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(0.0d, (double) 22.0f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction9 = null; org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); double double13 = sin10.value(0.9999999958776927d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = null; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction9, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable14, univariateFunction15); org.apache.commons.math3.optimization.GoalType goalType17 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.optimize(10, univariateFunction16, goalType17, 2.6508980319732887d, 0.17453292519943295d, 0.0d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.8414709825806044d + "'", double13 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + goalType17 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType17.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction7 = null; org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.exception.util.Localizable localizable10 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = sin13.derivative(); org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray17 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin12, sin13, sin15, sin16 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray17); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable11, (java.lang.Object[]) univariateDifferentiableArray17); org.apache.commons.math3.exception.MathInternalError mathInternalError20 = new org.apache.commons.math3.exception.MathInternalError(localizable10, (java.lang.Object[]) univariateDifferentiableArray17); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray17); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException22 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable8, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray17); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable23 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray17); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin26.derivative(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction[] univariateFunctionArray29 = new org.apache.commons.math3.analysis.UnivariateFunction[] { univariateFunction25, univariateFunction27, sin28 }; org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateFunctionArray29); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction7, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable23, univariateFunction30); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer34 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(284.48901560517237d, 2.4544439362322485d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray45); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray45); org.apache.commons.math3.optimization.GoalType goalType49 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair53 = brentOptimizer39.optimize(97, univariateFunction48, goalType49, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int54 = brentOptimizer39.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin56 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = sin56.derivative(); double double59 = sin56.value((double) (short) 10); double double61 = sin56.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction62 = sin56.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin56.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction64 = sin56.derivative(); double double66 = sin56.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType67 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair71 = brentOptimizer39.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin56, goalType67, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin56); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer34.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin56, goalType73, 2.041375977702442d, 8.062017978914582d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair79 = brentOptimizer3.optimize(6, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable23, goalType73, 7.544137102816975d, 320.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (6) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertNotNull(univariateDifferentiableArray17); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable23); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateFunctionArray29); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertTrue("'" + goalType49 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType49.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair53); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.5440211108893698d) + "'", double59 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9922682874719476d + "'", double61 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertNotNull(univariateFunction64); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.01745240643728351d) + "'", double66 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType67 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType67.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair71); org.junit.Assert.assertNotNull(differentiableUnivariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair76); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); double double8 = brentOptimizer3.getStartValue(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); double double13 = sin10.value((double) (short) 10); double double15 = sin10.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = sin10.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer20 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker19); int int21 = brentOptimizer20.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray26 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray26); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray26); org.apache.commons.math3.optimization.GoalType goalType30 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair34 = brentOptimizer20.optimize(97, univariateFunction29, goalType30, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer20.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType36 = brentOptimizer20.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer20.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = sin39.derivative(); org.apache.commons.math3.optimization.GoalType goalType41 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer20.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin39, goalType41, 3.141592653589793d, 0.0d); double double45 = brentOptimizer20.getMax(); org.apache.commons.math3.optimization.GoalType goalType46 = brentOptimizer20.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair50 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) sin10, goalType46, (-0.5013169764050727d), 10.134299718492377d, 1.58859428E8d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (2) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.5440211108893698d) + "'", double13 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9922682874719476d + "'", double15 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertTrue("'" + goalType30 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType30.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair34); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertTrue("'" + goalType36 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType36.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair37); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertTrue("'" + goalType41 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType41.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + goalType46 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType46.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker33 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer34 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker33); int int35 = brentOptimizer34.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = sin38.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray40 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin37, sin38 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable41 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray40); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable42 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray40); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray40); org.apache.commons.math3.optimization.GoalType goalType44 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair48 = brentOptimizer34.optimize(97, univariateFunction43, goalType44, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer34.doOptimize(); int int50 = brentOptimizer34.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable52 = null; org.apache.commons.math3.exception.util.Localizable localizable53 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray54 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray54); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException56 = new org.apache.commons.math3.exception.MathArithmeticException(localizable53, (java.lang.Object[]) differentiableUnivariateFunctionArray54); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray54); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException58 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable52, (java.lang.Object[]) differentiableUnivariateFunctionArray54); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray54); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction60 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray54); org.apache.commons.math3.optimization.GoalType goalType61 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer34.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction60, goalType61, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable65 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction60); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker68 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer69 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker68); int int70 = brentOptimizer69.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin72 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin73 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction74 = sin73.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray75 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin72, sin73 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable76 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray75); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable77 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray75); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction78 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray75); org.apache.commons.math3.optimization.GoalType goalType79 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair83 = brentOptimizer69.optimize(97, univariateFunction78, goalType79, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int84 = brentOptimizer69.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker85 = brentOptimizer69.getConvergenceChecker(); int int86 = brentOptimizer69.getEvaluations(); double double88 = brentOptimizer69.computeObjectiveValue((-0.9999998807907103d)); org.apache.commons.math3.optimization.GoalType goalType89 = brentOptimizer69.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair93 = brentOptimizer3.optimize(515, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable65, goalType89, (-3.8697734814625746d), 1.0E100d, 1.6094379124341005d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertNotNull(univariateFunction39); org.junit.Assert.assertNotNull(univariateDifferentiableArray40); org.junit.Assert.assertNotNull(univariateDifferentiable41); org.junit.Assert.assertNotNull(univariateDifferentiable42); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertTrue("'" + goalType44 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType44.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair48); org.junit.Assert.assertNotNull(univariatePointValuePair49); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray54); org.junit.Assert.assertNotNull(differentiableUnivariateFunction55); org.junit.Assert.assertNotNull(differentiableUnivariateFunction57); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(differentiableUnivariateFunction60); org.junit.Assert.assertTrue("'" + goalType61 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType61.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariateDifferentiable65); org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0); org.junit.Assert.assertNotNull(univariateFunction74); org.junit.Assert.assertNotNull(univariateDifferentiableArray75); org.junit.Assert.assertNotNull(univariateDifferentiable76); org.junit.Assert.assertNotNull(univariateDifferentiable77); org.junit.Assert.assertNotNull(univariateFunction78); org.junit.Assert.assertTrue("'" + goalType79 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType79.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair83); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker85); org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4); org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-0.7456240987455006d) + "'", double88 == (-0.7456240987455006d)); org.junit.Assert.assertTrue("'" + goalType89 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType89.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair93); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); int int31 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.GoalType goalType9 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(goalType9); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); double double30 = brentOptimizer3.computeObjectiveValue((double) (byte) 0); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction32 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray33 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction34 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray33); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = differentiableUnivariateFunction34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); double double39 = sin36.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = sin36.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction32, univariateFunction35, univariateFunction40); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker44 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer45 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker44); int int46 = brentOptimizer45.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin48, sin49 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray51); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable53 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction54 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.GoalType goalType55 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer45.optimize(97, univariateFunction54, goalType55, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair60 = brentOptimizer45.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType61 = brentOptimizer45.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer3.optimize(3, univariateFunction35, goalType61, 0.0d, 7.930067261567154E14d, 1011.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (3) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray33); org.junit.Assert.assertNotNull(differentiableUnivariateFunction34); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.8414709825806044d + "'", double39 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateDifferentiable53); org.junit.Assert.assertNotNull(univariateFunction54); org.junit.Assert.assertTrue("'" + goalType55 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType55.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair59); org.junit.Assert.assertNotNull(univariatePointValuePair60); org.junit.Assert.assertTrue("'" + goalType61 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType61.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(2704.000238418579d, 2.1544346900318834d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getMaxEvaluations(); int int20 = brentOptimizer3.getMaxEvaluations(); double double21 = brentOptimizer3.getMax(); double double22 = brentOptimizer3.getStartValue(); double double24 = brentOptimizer3.computeObjectiveValue((double) 32); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.4210854715202004E-14d + "'", double21 == 1.4210854715202004E-14d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5239029773179922d + "'", double24 == 0.5239029773179922d); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); int int28 = brentOptimizer3.getEvaluations(); int int29 = brentOptimizer3.getMaxEvaluations(); int int30 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(284.48901560517237d, 2.4544439362322485d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer7 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker6); int int8 = brentOptimizer7.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = sin11.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray13 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin10, sin11 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray13); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray13); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray13); org.apache.commons.math3.optimization.GoalType goalType17 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer7.optimize(97, univariateFunction16, goalType17, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int22 = brentOptimizer7.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); double double27 = sin24.value((double) (short) 10); double double29 = sin24.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin24.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin24.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin24.derivative(); double double34 = sin24.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType35 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer7.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin24, goalType35, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction40 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin24); org.apache.commons.math3.optimization.GoalType goalType41 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer2.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin24, goalType41, 2.041375977702442d, 8.062017978914582d); double double45 = brentOptimizer2.getMax(); double double47 = brentOptimizer2.computeObjectiveValue(1.0001523125762564d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertNotNull(univariateDifferentiableArray13); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + goalType17 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType17.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-0.5440211108893698d) + "'", double27 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9922682874719476d + "'", double29 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.01745240643728351d) + "'", double34 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType35 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType35.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertNotNull(differentiableUnivariateFunction40); org.junit.Assert.assertTrue("'" + goalType41 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType41.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 8.062017978914582d + "'", double45 == 8.062017978914582d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.8415532698830488d + "'", double47 == 0.8415532698830488d); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); double double30 = brentOptimizer3.computeObjectiveValue((double) (byte) 0); int int31 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(284.48901560517237d, 2.4544439362322485d); org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException7 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (byte) -1, (java.lang.Number) 0.3526728478474539d, (int) (short) 10); org.apache.commons.math3.exception.util.Localizable localizable8 = null; org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray10 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException12 = new org.apache.commons.math3.exception.MathArithmeticException(localizable9, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray10); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException7, localizable8, (java.lang.Object[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray10); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer20 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker19); int int21 = brentOptimizer20.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray26 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray26); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray26); org.apache.commons.math3.optimization.GoalType goalType30 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair34 = brentOptimizer20.optimize(97, univariateFunction29, goalType30, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer20.doOptimize(); int int36 = brentOptimizer20.getMaxEvaluations(); int int37 = brentOptimizer20.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer20.doOptimize(); int int39 = brentOptimizer20.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType40 = brentOptimizer20.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer2.optimize(2147483647, univariateFunction16, goalType40, (double) (-34.0f), 3.6757332503588205d, (-1.5707963267948912d)); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray10); org.junit.Assert.assertNotNull(differentiableUnivariateFunction11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertNotNull(differentiableUnivariateFunction14); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertTrue("'" + goalType30 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType30.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair34); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12); org.junit.Assert.assertTrue("'" + goalType40 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType40.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); double double32 = brentOptimizer3.computeObjectiveValue((double) Float.NaN); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction34 = null; org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); double double38 = sin35.value((double) (short) 10); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction40 = sin39.derivative(); double double42 = sin39.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin39.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction34, (org.apache.commons.math3.analysis.UnivariateFunction) sin35, (org.apache.commons.math3.analysis.UnivariateFunction) sin39); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin35.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin35.derivative(); org.apache.commons.math3.optimization.GoalType goalType47 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) sin35, goalType47, (double) 5.0f, 2.3208330951017717d, 100.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-0.5440211108893698d) + "'", double38 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(univariateFunction40); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.8414709825806044d + "'", double42 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateFunction46); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); int int30 = brentOptimizer3.getMaxEvaluations(); double double31 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.5707963267948966d + "'", double31 == 1.5707963267948966d); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(1.0003497009543487d, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(1.7763568394002505E-15d, 19.961920644805737d); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair6 = brentOptimizer3.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = brentOptimizer3.getConvergenceChecker(); int int32 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); double double32 = brentOptimizer3.computeObjectiveValue(0.0d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); double double7 = brentOptimizer3.getMin(); org.apache.commons.math3.optimization.GoalType goalType8 = brentOptimizer3.getGoalType(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray10 = null; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.compose(univariateDifferentiableArray10); org.apache.commons.math3.optimization.GoalType goalType12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair15 = brentOptimizer3.optimize((-1), (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable11, goalType12, 2.6138481493996906E22d, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNull(goalType8); org.junit.Assert.assertNotNull(univariateDifferentiable11); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getMaxEvaluations(); int int20 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); double double22 = brentOptimizer3.getMin(); int int23 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker24 = brentOptimizer3.getConvergenceChecker(); double double25 = brentOptimizer3.getMax(); double double26 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.4210854715202004E-14d + "'", double25 == 1.4210854715202004E-14d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.4210854715202004E-14d + "'", double26 == 1.4210854715202004E-14d); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray26 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22, sin24, sin25 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray26); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker32 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer33 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker32); int int34 = brentOptimizer33.getEvaluations(); int int35 = brentOptimizer33.getEvaluations(); int int36 = brentOptimizer33.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction38 = null; org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction38, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType50 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer33.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType50, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer3.optimize(4, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, goalType50, 1.2786363145140078E-4d, (-0.8942257319186149d), 3.6757332503588205d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair59 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(multivariateFunction49); org.junit.Assert.assertTrue("'" + goalType50 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType50.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertNotNull(univariatePointValuePair59); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(56.012896400585895d, (double) (-34.0f), univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -34 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); double double32 = brentOptimizer3.computeObjectiveValue((double) Float.NaN); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker36 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer37 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker36); int int38 = brentOptimizer37.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray43 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable44 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray43); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray43); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray43); org.apache.commons.math3.optimization.GoalType goalType47 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair51 = brentOptimizer37.optimize(97, univariateFunction46, goalType47, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair52 = brentOptimizer37.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType53 = brentOptimizer37.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer37.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin56 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = sin56.derivative(); org.apache.commons.math3.optimization.GoalType goalType58 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer37.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin56, goalType58, 3.141592653589793d, 0.0d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker64 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer65 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker64); int int66 = brentOptimizer65.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType67 = brentOptimizer65.getGoalType(); org.apache.commons.math3.analysis.function.Sin sin69 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction70 = sin69.derivative(); double double72 = sin69.value(0.9999999958776927d); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer65.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin69, goalType73, 4.248291315986092d, 2.154434690031884d, (-0.0015270116852033055d)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair81 = brentOptimizer3.optimize(8, (org.apache.commons.math3.analysis.UnivariateFunction) sin56, goalType73, (double) 9.2233709E18f, (double) 6L, 0.08726646259971647d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (8) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray43); org.junit.Assert.assertNotNull(univariateDifferentiable44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + goalType47 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType47.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair51); org.junit.Assert.assertNotNull(univariatePointValuePair52); org.junit.Assert.assertTrue("'" + goalType53 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType53.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertTrue("'" + goalType58 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType58.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair61); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0); org.junit.Assert.assertNull(goalType67); org.junit.Assert.assertNotNull(univariateFunction70); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8414709825806044d + "'", double72 == 0.8414709825806044d); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair77); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 524, 1.2177655131703127d, univariatePointValuePairConvergenceChecker2); // The following exception was thrown during execution in test generation try { double double5 = brentOptimizer3.computeObjectiveValue(2.5837561062176953E-97d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getStartValue(); double double6 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double74 = brentOptimizer3.getMin(); int int75 = brentOptimizer3.getEvaluations(); double double76 = brentOptimizer3.getStartValue(); double double77 = brentOptimizer3.getMax(); double double79 = brentOptimizer3.computeObjectiveValue(5.2518138795992752E16d); double double81 = brentOptimizer3.computeObjectiveValue(2.0d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.22766967171598d + "'", double74 == 5.22766967171598d); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.4210854715202004E-14d + "'", double77 == 1.4210854715202004E-14d); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.4347845159804997d + "'", double79 == 0.4347845159804997d); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.9092974268256817d + "'", double81 == 0.9092974268256817d); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.analysis.function.Sin sin5 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray11 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7, sin9, sin10 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray11); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction15 = sin14.derivative(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray18 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin13, sin14, sin16, sin17 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable19 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray18); org.apache.commons.math3.analysis.function.Sin sin20 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction21 = sin20.derivative(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin5, univariateDifferentiable12, univariateDifferentiable19, sin20, sin22, univariateDifferentiable30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray31); org.apache.commons.math3.optimization.GoalType goalType33 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer3.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable32, goalType33, 0.0d, 0.17453292519943295d); double double37 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker39 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction15); org.junit.Assert.assertNotNull(univariateDifferentiableArray18); org.junit.Assert.assertNotNull(univariateDifferentiable19); org.junit.Assert.assertNotNull(univariateFunction21); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType33.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.17453292519943295d + "'", double37 == 0.17453292519943295d); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker39); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); double double30 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); double double6 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = sin9.derivative(); double double12 = sin9.value((double) (short) 10); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = sin13.derivative(); double double16 = sin13.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin13.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction18 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) sin9, (org.apache.commons.math3.analysis.UnivariateFunction) sin13); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction19 = sin9.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction20 = sin9.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer24 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker23); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = sin28.derivative(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray32 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin27, sin28, sin30, sin31 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray32); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray39 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin34, sin35, sin37, sin38 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray39); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction44 = sin43.derivative(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction47 = sin46.derivative(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray50 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin45, sin46, sin48, sin49 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable51 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray50); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray52 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, univariateDifferentiable33, univariateDifferentiable40, sin41, sin43, univariateDifferentiable51 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable53 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray52); org.apache.commons.math3.optimization.GoalType goalType54 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair57 = brentOptimizer24.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable53, goalType54, 0.0d, 0.17453292519943295d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer3.optimize(1, (org.apache.commons.math3.analysis.UnivariateFunction) sin9, goalType54, (-0.35891532187732544d), 0.0d, (-8.0d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (1) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction10); org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.5440211108893698d) + "'", double12 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.8414709825806044d + "'", double16 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateFunction18); org.junit.Assert.assertNotNull(univariateFunction19); org.junit.Assert.assertNotNull(univariateFunction20); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateDifferentiableArray32); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateDifferentiableArray39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateFunction44); org.junit.Assert.assertNotNull(univariateFunction47); org.junit.Assert.assertNotNull(univariateDifferentiableArray50); org.junit.Assert.assertNotNull(univariateDifferentiable51); org.junit.Assert.assertNotNull(univariateDifferentiableArray52); org.junit.Assert.assertNotNull(univariateDifferentiable53); org.junit.Assert.assertTrue("'" + goalType54 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType54.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair57); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); int int8 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = sin11.derivative(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin14 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray15 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin10, sin11, sin13, sin14 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray15); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable18 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray15); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker21 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer22 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker21); int int23 = brentOptimizer22.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = sin26.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray28); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray28); org.apache.commons.math3.optimization.GoalType goalType32 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer22.optimize(97, univariateFunction31, goalType32, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair37 = brentOptimizer22.doOptimize(); double double38 = brentOptimizer22.getMax(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction47 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray45); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker51 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer52 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker51); int int53 = brentOptimizer52.getEvaluations(); int int54 = brentOptimizer52.getEvaluations(); int int55 = brentOptimizer52.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction57 = null; org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = sin59.derivative(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray63 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin58, sin59, sin61, sin62 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable64 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray63); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray63); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable66 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray63); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction68 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction57, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable66, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType69 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer52.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable66, goalType69, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer22.optimize(4, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable48, goalType69, 1.2786363145140078E-4d, (-0.8942257319186149d), 3.6757332503588205d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair80 = brentOptimizer3.optimize((-4), (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable18, goalType69, 0.16020232712363816d, (-0.8699394413304256d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-4) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertNotNull(univariateDifferentiableArray15); org.junit.Assert.assertNotNull(univariateDifferentiable16); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiable18); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + goalType32 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType32.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertNotNull(univariatePointValuePair37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.4210854715202004E-14d + "'", double38 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction60); org.junit.Assert.assertNotNull(univariateDifferentiableArray63); org.junit.Assert.assertNotNull(univariateDifferentiable64); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiable66); org.junit.Assert.assertNotNull(multivariateFunction68); org.junit.Assert.assertTrue("'" + goalType69 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType69.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair77); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 63, 8.739598769236628E14d); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { double double11 = brentOptimizer3.computeObjectiveValue(0.8415532698830488d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getStartValue(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin22, sin23, sin25, sin26 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray27); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.compose(univariateDifferentiableArray27); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable30); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction31); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction33 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable32); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable34 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction33); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker37 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer38 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker37); int int39 = brentOptimizer38.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin41, sin42 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction47 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.GoalType goalType48 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair52 = brentOptimizer38.optimize(97, univariateFunction47, goalType48, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair53 = brentOptimizer38.doOptimize(); int int54 = brentOptimizer38.getMaxEvaluations(); int int55 = brentOptimizer38.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair56 = brentOptimizer38.doOptimize(); int int57 = brentOptimizer38.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType58 = brentOptimizer38.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer3.optimize(3, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable34, goalType58, (double) 3.0f, 0.5033290854469099d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(differentiableUnivariateFunction31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(differentiableUnivariateFunction33); org.junit.Assert.assertNotNull(univariateDifferentiable34); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction47); org.junit.Assert.assertTrue("'" + goalType48 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType48.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair52); org.junit.Assert.assertNotNull(univariatePointValuePair53); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair56); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12); org.junit.Assert.assertTrue("'" + goalType58 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType58.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair61); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getMaxEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType8 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(goalType8); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double75 = sin30.value(1.4465168074662325d); double double77 = sin30.value(8.06201797891458d); double double79 = sin30.value(0.0138849173d); org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure80 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure81 = sin30.value(derivativeStructure80); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.9922872354360438d + "'", double75 == 0.9922872354360438d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.9784383721839598d + "'", double77 == 0.9784383721839598d); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.01388447115661774d + "'", double79 == 0.01388447115661774d); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(284.48901560517237d, 2.4544439362322485d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer7 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker6); int int8 = brentOptimizer7.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = sin11.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray13 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin10, sin11 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray13); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray13); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray13); org.apache.commons.math3.optimization.GoalType goalType17 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer7.optimize(97, univariateFunction16, goalType17, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int22 = brentOptimizer7.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); double double27 = sin24.value((double) (short) 10); double double29 = sin24.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = sin24.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin24.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin24.derivative(); double double34 = sin24.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType35 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair39 = brentOptimizer7.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin24, goalType35, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction40 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin24); org.apache.commons.math3.optimization.GoalType goalType41 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair44 = brentOptimizer2.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin24, goalType41, 2.041375977702442d, 8.062017978914582d); double double46 = sin24.value(0.19611603331320274d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertNotNull(univariateDifferentiableArray13); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + goalType17 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType17.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-0.5440211108893698d) + "'", double27 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9922682874719476d + "'", double29 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.01745240643728351d) + "'", double34 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType35 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType35.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair39); org.junit.Assert.assertNotNull(differentiableUnivariateFunction40); org.junit.Assert.assertTrue("'" + goalType41 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType41.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair44); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.19486129594515628d + "'", double46 == 0.19486129594515628d); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sin30.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getMaxEvaluations(); double double37 = brentOptimizer35.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker49 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer50 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker49); int int51 = brentOptimizer50.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin54.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray56 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable57 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray56); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray56); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray56); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer50.optimize(97, univariateFunction59, goalType60, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer50.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType66 = brentOptimizer50.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer35.optimize((int) ' ', univariateFunction46, goalType66, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin30, goalType66, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double74 = brentOptimizer3.getMin(); int int75 = brentOptimizer3.getEvaluations(); double double76 = brentOptimizer3.getStartValue(); double double77 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateDifferentiableArray56); org.junit.Assert.assertNotNull(univariateDifferentiable57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.22766967171598d + "'", double74 == 5.22766967171598d); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.4210854715202004E-14d + "'", double77 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariatePointValuePair78); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.exception.util.Localizable localizable13 = null; org.apache.commons.math3.exception.util.Localizable localizable14 = null; org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable14, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.exception.MathInternalError mathInternalError23 = new org.apache.commons.math3.exception.MathInternalError(localizable13, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException25 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable11, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException28 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable9, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker32 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer33 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker32); int int34 = brentOptimizer33.getEvaluations(); int int35 = brentOptimizer33.getEvaluations(); int int36 = brentOptimizer33.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction38 = null; org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction38, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType50 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer33.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType50, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, goalType50, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); double double59 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(multivariateFunction49); org.junit.Assert.assertTrue("'" + goalType50 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType50.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.8865583226060262d + "'", double59 == 0.8865583226060262d); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); double double5 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.exception.util.Localizable localizable13 = null; org.apache.commons.math3.exception.util.Localizable localizable14 = null; org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable14, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.exception.MathInternalError mathInternalError23 = new org.apache.commons.math3.exception.MathInternalError(localizable13, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException25 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable11, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException28 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable9, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker32 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer33 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker32); int int34 = brentOptimizer33.getEvaluations(); int int35 = brentOptimizer33.getEvaluations(); int int36 = brentOptimizer33.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction38 = null; org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction38, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType50 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer33.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType50, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, goalType50, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker59 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker60 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(multivariateFunction49); org.junit.Assert.assertTrue("'" + goalType50 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType50.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker59); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker60); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair30 = brentOptimizer3.doOptimize(); org.apache.commons.math3.exception.util.Localizable localizable32 = null; org.apache.commons.math3.exception.util.Localizable localizable33 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray34 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction35 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray34); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException36 = new org.apache.commons.math3.exception.MathArithmeticException(localizable33, (java.lang.Object[]) differentiableUnivariateFunctionArray34); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction37 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray34); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException38 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable32, (java.lang.Object[]) differentiableUnivariateFunctionArray34); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray34); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction40 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray34); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray34); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction42 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray34); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable43 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction42); org.apache.commons.math3.optimization.GoalType goalType44 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer3.optimize(1, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable43, goalType44, (double) 5.1539612E10f, 1.0E70d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair30); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray34); org.junit.Assert.assertNotNull(differentiableUnivariateFunction35); org.junit.Assert.assertNotNull(differentiableUnivariateFunction37); org.junit.Assert.assertNotNull(differentiableUnivariateFunction39); org.junit.Assert.assertNotNull(differentiableUnivariateFunction40); org.junit.Assert.assertNotNull(differentiableUnivariateFunction41); org.junit.Assert.assertNotNull(differentiableUnivariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiable43); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); double double7 = brentOptimizer3.getMin(); org.apache.commons.math3.optimization.GoalType goalType8 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); double double10 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNull(goalType8); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, goalType20, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair25 = brentOptimizer3.doOptimize(); int int26 = brentOptimizer3.getMaxEvaluations(); int int27 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(multivariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertNotNull(univariatePointValuePair25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction8 = null; org.apache.commons.math3.analysis.function.Sin sin9 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin10 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction11 = sin10.derivative(); org.apache.commons.math3.analysis.function.Sin sin12 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin13 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray14 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin9, sin10, sin12, sin13 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable15 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray14); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray14); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction8, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType20 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair24 = brentOptimizer3.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable17, goalType20, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair25 = brentOptimizer3.doOptimize(); int int26 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker27 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer32 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker31); int int33 = brentOptimizer32.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin35, sin36 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray38); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray38); org.apache.commons.math3.optimization.GoalType goalType42 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer32.optimize(97, univariateFunction41, goalType42, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair47 = brentOptimizer32.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType48 = brentOptimizer32.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair49 = brentOptimizer32.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction52 = sin51.derivative(); org.apache.commons.math3.optimization.GoalType goalType53 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair56 = brentOptimizer32.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin51, goalType53, 3.141592653589793d, 0.0d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = sin51.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker60 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer61 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker60); int int62 = brentOptimizer61.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin65 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction66 = sin65.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray67 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin64, sin65 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray67); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable69 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray67); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction70 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray67); org.apache.commons.math3.optimization.GoalType goalType71 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair75 = brentOptimizer61.optimize(97, univariateFunction70, goalType71, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int76 = brentOptimizer61.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin78 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction79 = sin78.derivative(); double double81 = sin78.value((double) (short) 10); double double83 = sin78.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction84 = sin78.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction85 = sin78.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction86 = sin78.derivative(); double double88 = sin78.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType89 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair93 = brentOptimizer61.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin78, goalType89, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair97 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin51, goalType89, 0.25734467405837924d, (double) (short) 1, Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(univariateFunction11); org.junit.Assert.assertNotNull(univariateDifferentiableArray14); org.junit.Assert.assertNotNull(univariateDifferentiable15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(multivariateFunction19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair24); org.junit.Assert.assertNotNull(univariatePointValuePair25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair46); org.junit.Assert.assertNotNull(univariatePointValuePair47); org.junit.Assert.assertTrue("'" + goalType48 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType48.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair49); org.junit.Assert.assertNotNull(univariateFunction52); org.junit.Assert.assertTrue("'" + goalType53 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType53.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair56); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertNotNull(univariateFunction66); org.junit.Assert.assertNotNull(univariateDifferentiableArray67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateDifferentiable69); org.junit.Assert.assertNotNull(univariateFunction70); org.junit.Assert.assertTrue("'" + goalType71 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType71.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair75); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97); org.junit.Assert.assertNotNull(univariateFunction79); org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.5440211108893698d) + "'", double81 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.9922682874719476d + "'", double83 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction84); org.junit.Assert.assertNotNull(univariateFunction85); org.junit.Assert.assertNotNull(univariateFunction86); org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-0.01745240643728351d) + "'", double88 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType89 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType89.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair93); org.junit.Assert.assertNotNull(univariatePointValuePair97); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariatePointValuePair21); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); int int7 = brentOptimizer3.getMaxEvaluations(); double double8 = brentOptimizer3.getMax(); int int9 = brentOptimizer3.getEvaluations(); double double10 = brentOptimizer3.getStartValue(); int int11 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getEvaluations(); // The following exception was thrown during execution in test generation try { double double8 = brentOptimizer3.computeObjectiveValue(0.9075711444580241d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); double double20 = brentOptimizer3.getMin(); int int21 = brentOptimizer3.getMaxEvaluations(); double double22 = brentOptimizer3.getStartValue(); double double23 = brentOptimizer3.getMax(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.4210854715202004E-14d + "'", double23 == 1.4210854715202004E-14d); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getMaxEvaluations(); double double5 = brentOptimizer3.getMax(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); int int8 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker10 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker11 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker10); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker11); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType5 = brentOptimizer3.getGoalType(); double double6 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(goalType5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType5 = brentOptimizer3.getGoalType(); double double6 = brentOptimizer3.getMin(); int int7 = brentOptimizer3.getMaxEvaluations(); double double8 = brentOptimizer3.getStartValue(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(goalType5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); double double19 = brentOptimizer3.getMax(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction22 = sin21.derivative(); double double24 = sin21.value((double) (short) 10); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer27 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(284.48901560517237d, 2.4544439362322485d); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker31 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer32 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker31); int int33 = brentOptimizer32.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction37 = sin36.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin35, sin36 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray38); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray38); org.apache.commons.math3.optimization.GoalType goalType42 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair46 = brentOptimizer32.optimize(97, univariateFunction41, goalType42, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int47 = brentOptimizer32.getMaxEvaluations(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = sin49.derivative(); double double52 = sin49.value((double) (short) 10); double double54 = sin49.value(1.695228608386943d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = sin49.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = sin49.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction57 = sin49.derivative(); double double59 = sin49.value((-0.017453292519943295d)); org.apache.commons.math3.optimization.GoalType goalType60 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair64 = brentOptimizer32.optimize((int) '4', (org.apache.commons.math3.analysis.UnivariateFunction) sin49, goalType60, (-120.0000009536743d), (double) 9223372036854775807L, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction65 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin49); org.apache.commons.math3.optimization.GoalType goalType66 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer27.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) sin49, goalType66, 2.041375977702442d, 8.062017978914582d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer3.optimize((int) '#', (org.apache.commons.math3.analysis.UnivariateFunction) sin21, goalType66, (double) 515, 3.632120308602311E17d, 0.13491509971008844d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (35) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4210854715202004E-14d + "'", double19 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction22); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.5440211108893698d) + "'", double24 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(univariateFunction37); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.5440211108893698d) + "'", double52 == (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9922682874719476d + "'", double54 == 0.9922682874719476d); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertNotNull(univariateFunction57); org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.01745240643728351d) + "'", double59 == (-0.01745240643728351d)); org.junit.Assert.assertTrue("'" + goalType60 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType60.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair64); org.junit.Assert.assertNotNull(differentiableUnivariateFunction65); org.junit.Assert.assertTrue("'" + goalType66 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType66.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair69); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); double double20 = brentOptimizer3.getMin(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer3.doOptimize(); double double23 = brentOptimizer3.computeObjectiveValue(4.644483415289244d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.8402235179795785d) + "'", double23 == (-0.8402235179795785d)); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction0 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer4 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker3); int int5 = brentOptimizer4.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray10 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, sin8 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray10); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray10); org.apache.commons.math3.optimization.GoalType goalType14 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer4.optimize(97, univariateFunction13, goalType14, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair19 = brentOptimizer4.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType20 = brentOptimizer4.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair21 = brentOptimizer4.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction24 = sin23.derivative(); org.apache.commons.math3.optimization.GoalType goalType25 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair28 = brentOptimizer4.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin23, goalType25, 3.141592653589793d, 0.0d); double double29 = brentOptimizer4.getMax(); org.apache.commons.math3.analysis.function.Sin sin31 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction32 = sin31.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker35 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer36 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker35); int int37 = brentOptimizer36.getMaxEvaluations(); double double38 = brentOptimizer36.getMax(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = sin41.derivative(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray45 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin40, sin41, sin43, sin44 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray45); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction47 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray45); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker50 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer51 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker50); int int52 = brentOptimizer51.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin55 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = sin55.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray57 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin54, sin55 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable58 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray57); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable59 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray57); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray57); org.apache.commons.math3.optimization.GoalType goalType61 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer51.optimize(97, univariateFunction60, goalType61, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair66 = brentOptimizer51.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType67 = brentOptimizer51.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair70 = brentOptimizer36.optimize((int) ' ', univariateFunction47, goalType67, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer4.optimize((int) (short) 100, (org.apache.commons.math3.analysis.UnivariateFunction) sin31, goalType67, 5.22766967171598d, 1.4210854715202004E-14d, (double) '#'); double double76 = sin31.value(1.4465168074662325d); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction78 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction0, (org.apache.commons.math3.analysis.UnivariateFunction) sin31, (-228.95232643682593d)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertNotNull(univariateDifferentiableArray10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertTrue("'" + goalType14 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType14.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertNotNull(univariatePointValuePair19); org.junit.Assert.assertTrue("'" + goalType20 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType20.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair21); org.junit.Assert.assertNotNull(univariateFunction24); org.junit.Assert.assertTrue("'" + goalType25 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType25.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction32); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertNotNull(univariateDifferentiableArray45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateFunction47); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertNotNull(univariateDifferentiableArray57); org.junit.Assert.assertNotNull(univariateDifferentiable58); org.junit.Assert.assertNotNull(univariateDifferentiable59); org.junit.Assert.assertNotNull(univariateFunction60); org.junit.Assert.assertTrue("'" + goalType61 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType61.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair65); org.junit.Assert.assertNotNull(univariatePointValuePair66); org.junit.Assert.assertTrue("'" + goalType67 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType67.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair70); org.junit.Assert.assertNotNull(univariatePointValuePair74); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.9922872354360438d + "'", double76 == 0.9922872354360438d); org.junit.Assert.assertNotNull(multivariateFunction78); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); int int28 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker29 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction31 = null; org.apache.commons.math3.analysis.function.Sin sin32 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray37 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin32, sin33, sin35, sin36 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable38 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray37); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray37); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.compose(univariateDifferentiableArray37); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction41 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable40); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction43 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction31, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable40, (double) 0.0f); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker46 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer47 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker46); int int48 = brentOptimizer47.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction52 = sin51.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray53 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin50, sin51 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable54 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray53); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable55 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray53); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray53); org.apache.commons.math3.optimization.GoalType goalType57 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer47.optimize(97, univariateFunction56, goalType57, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair65 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable40, goalType57, (double) (byte) 0, 1376.7726074588156d, (-0.8414709848078965d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker29); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertNotNull(univariateDifferentiableArray37); org.junit.Assert.assertNotNull(univariateDifferentiable38); org.junit.Assert.assertNotNull(univariateFunction39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(differentiableUnivariateFunction41); org.junit.Assert.assertNotNull(multivariateFunction43); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0); org.junit.Assert.assertNotNull(univariateFunction52); org.junit.Assert.assertNotNull(univariateDifferentiableArray53); org.junit.Assert.assertNotNull(univariateDifferentiable54); org.junit.Assert.assertNotNull(univariateDifferentiable55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertTrue("'" + goalType57 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType57.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair61); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable7 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray8 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction9 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray8); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException10 = new org.apache.commons.math3.exception.MathArithmeticException(localizable7, (java.lang.Object[]) differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction11 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray8); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable14 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction13); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction15 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(univariateDifferentiable14); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = differentiableUnivariateFunction15.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable17 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction15); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction18 = differentiableUnivariateFunction15.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker21 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer22 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker21); int int23 = brentOptimizer22.getEvaluations(); int int24 = brentOptimizer22.getEvaluations(); int int25 = brentOptimizer22.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker26 = brentOptimizer22.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable28 = null; org.apache.commons.math3.exception.util.Localizable localizable30 = null; org.apache.commons.math3.exception.util.Localizable localizable32 = null; org.apache.commons.math3.exception.util.Localizable localizable33 = null; org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin35 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction36 = sin35.derivative(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin38 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray39 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin34, sin35, sin37, sin38 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable40 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray39); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException41 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable33, (java.lang.Object[]) univariateDifferentiableArray39); org.apache.commons.math3.exception.MathInternalError mathInternalError42 = new org.apache.commons.math3.exception.MathInternalError(localizable32, (java.lang.Object[]) univariateDifferentiableArray39); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable43 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray39); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException44 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable30, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray39); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray39); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable46 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray39); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException47 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable28, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray39); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray39); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker51 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer52 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker51); int int53 = brentOptimizer52.getEvaluations(); int int54 = brentOptimizer52.getEvaluations(); int int55 = brentOptimizer52.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction57 = null; org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = sin59.derivative(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray63 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin58, sin59, sin61, sin62 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable64 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray63); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray63); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable66 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray63); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction68 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction57, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable66, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType69 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer52.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable66, goalType69, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair77 = brentOptimizer22.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable48, goalType69, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); org.apache.commons.math3.optimization.GoalType goalType78 = brentOptimizer22.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair81 = brentOptimizer3.optimize((int) (short) -1, univariateFunction18, goalType78, 0.0d, 57295.77951308232d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (-1) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray8); org.junit.Assert.assertNotNull(differentiableUnivariateFunction9); org.junit.Assert.assertNotNull(differentiableUnivariateFunction11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction12); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertNotNull(univariateDifferentiable14); org.junit.Assert.assertNotNull(differentiableUnivariateFunction15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertNotNull(univariateDifferentiable17); org.junit.Assert.assertNotNull(univariateFunction18); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker26); org.junit.Assert.assertNotNull(univariateFunction36); org.junit.Assert.assertNotNull(univariateDifferentiableArray39); org.junit.Assert.assertNotNull(univariateDifferentiable40); org.junit.Assert.assertNotNull(univariateDifferentiable43); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateDifferentiable46); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction60); org.junit.Assert.assertNotNull(univariateDifferentiableArray63); org.junit.Assert.assertNotNull(univariateDifferentiable64); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiable66); org.junit.Assert.assertNotNull(multivariateFunction68); org.junit.Assert.assertTrue("'" + goalType69 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType69.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair77); org.junit.Assert.assertTrue("'" + goalType78 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType78.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(89008.81499761475d, 5.2518138795992752E16d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer3.getConvergenceChecker(); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 524, 1.2177655131703127d, univariatePointValuePairConvergenceChecker2); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker4 = brentOptimizer3.getConvergenceChecker(); double double5 = brentOptimizer3.getMin(); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 524, 1.2177655131703127d, univariatePointValuePairConvergenceChecker2); // The following exception was thrown during execution in test generation try { double double5 = brentOptimizer3.computeObjectiveValue(0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType5 = brentOptimizer3.getGoalType(); double double6 = brentOptimizer3.getMin(); int int7 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker8 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction10 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker13 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer14 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker13); int int15 = brentOptimizer14.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin17 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction19 = sin18.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin17, sin18 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable22 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray20); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair28 = brentOptimizer14.optimize(97, univariateFunction23, goalType24, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair29 = brentOptimizer14.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType30 = brentOptimizer14.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair31 = brentOptimizer14.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); org.apache.commons.math3.optimization.GoalType goalType35 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair38 = brentOptimizer14.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin33, goalType35, 3.141592653589793d, 0.0d); double double39 = brentOptimizer14.getMax(); int int40 = brentOptimizer14.getMaxEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair41 = brentOptimizer14.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType42 = brentOptimizer14.getGoalType(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair45 = brentOptimizer3.optimize((-54), univariateFunction10, goalType42, 0.8015542873103736d, 5.551115123125783E-17d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(goalType5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker8); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(univariateFunction19); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable22); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair28); org.junit.Assert.assertNotNull(univariatePointValuePair29); org.junit.Assert.assertTrue("'" + goalType30 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType30.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair31); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertTrue("'" + goalType35 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType35.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97); org.junit.Assert.assertNotNull(univariatePointValuePair41); org.junit.Assert.assertTrue("'" + goalType42 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType42.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); int int3 = brentOptimizer2.getEvaluations(); int int4 = brentOptimizer2.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType5 = brentOptimizer2.getGoalType(); int int6 = brentOptimizer2.getEvaluations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(goalType5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker7 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.exception.util.Localizable localizable11 = null; org.apache.commons.math3.exception.util.Localizable localizable13 = null; org.apache.commons.math3.exception.util.Localizable localizable14 = null; org.apache.commons.math3.analysis.function.Sin sin15 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin16 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction17 = sin16.derivative(); org.apache.commons.math3.analysis.function.Sin sin18 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin19 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray20 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin15, sin16, sin18, sin19 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable21 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable14, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.exception.MathInternalError mathInternalError23 = new org.apache.commons.math3.exception.MathInternalError(localizable13, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable24 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException25 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable11, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray20); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException28 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable9, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray20); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray20); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker32 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer33 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker32); int int34 = brentOptimizer33.getEvaluations(); int int35 = brentOptimizer33.getEvaluations(); int int36 = brentOptimizer33.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction38 = null; org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction49 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction38, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType50 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair54 = brentOptimizer33.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType50, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair58 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable29, goalType50, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); org.apache.commons.math3.optimization.GoalType goalType59 = brentOptimizer3.getGoalType(); double double60 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker7); org.junit.Assert.assertNotNull(univariateFunction17); org.junit.Assert.assertNotNull(univariateDifferentiableArray20); org.junit.Assert.assertNotNull(univariateDifferentiable21); org.junit.Assert.assertNotNull(univariateDifferentiable24); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(multivariateFunction49); org.junit.Assert.assertTrue("'" + goalType50 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType50.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair54); org.junit.Assert.assertNotNull(univariatePointValuePair58); org.junit.Assert.assertTrue("'" + goalType59 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType59.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); int int7 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction28 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin22); double double30 = sin22.value(4.2482910979143895d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNotNull(differentiableUnivariateFunction28); org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.8942257319186152d) + "'", double30 == (-0.8942257319186152d)); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getEvaluations(); int int20 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = sin27.derivative(); org.apache.commons.math3.analysis.function.Sin sin29 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin30 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray31 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin26, sin27, sin29, sin30 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable32 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray31); org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin34 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction35 = sin34.derivative(); org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray38 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin33, sin34, sin36, sin37 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable39 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray38); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = sin45.derivative(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin48 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray49 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin44, sin45, sin47, sin48 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray49); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray51 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin25, univariateDifferentiable32, univariateDifferentiable39, sin40, sin42, univariateDifferentiable50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable52 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray51); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException53 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable23, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.exception.NullArgumentException nullArgumentException54 = new org.apache.commons.math3.exception.NullArgumentException(localizable22, (java.lang.Object[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction56 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray51); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker59 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer60 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker59); int int61 = brentOptimizer60.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction65 = sin64.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin63, sin64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray66); org.apache.commons.math3.optimization.GoalType goalType70 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair74 = brentOptimizer60.optimize(97, univariateFunction69, goalType70, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.optimize(17, univariateFunction56, goalType70, 99.99999999999999d, 2.238693057170856d, 0.8687261884639957d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair79 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(univariateDifferentiableArray31); org.junit.Assert.assertNotNull(univariateDifferentiable32); org.junit.Assert.assertNotNull(univariateFunction35); org.junit.Assert.assertNotNull(univariateDifferentiableArray38); org.junit.Assert.assertNotNull(univariateDifferentiable39); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiableArray49); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertNotNull(univariateDifferentiableArray51); org.junit.Assert.assertNotNull(univariateDifferentiable52); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertNotNull(univariateFunction56); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertNotNull(univariateFunction65); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(univariateFunction69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair74); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertNotNull(univariatePointValuePair79); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); int int29 = brentOptimizer3.getEvaluations(); int int30 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); int int19 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable21 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray23 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction24 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray23); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException25 = new org.apache.commons.math3.exception.MathArithmeticException(localizable22, (java.lang.Object[]) differentiableUnivariateFunctionArray23); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction26 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray23); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException27 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable21, (java.lang.Object[]) differentiableUnivariateFunctionArray23); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction28 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray23); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction29 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray23); org.apache.commons.math3.optimization.GoalType goalType30 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair33 = brentOptimizer3.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction29, goalType30, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); int int34 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray23); org.junit.Assert.assertNotNull(differentiableUnivariateFunction24); org.junit.Assert.assertNotNull(differentiableUnivariateFunction26); org.junit.Assert.assertNotNull(univariateFunction28); org.junit.Assert.assertNotNull(differentiableUnivariateFunction29); org.junit.Assert.assertTrue("'" + goalType30 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType30.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); double double21 = brentOptimizer3.computeObjectiveValue(20.000000953674316d); int int22 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType23 = brentOptimizer3.getGoalType(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7913081858681398d + "'", double21 == 0.7913081858681398d); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9); org.junit.Assert.assertTrue("'" + goalType23 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType23.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential((org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) sin22); double double30 = sin22.value(0.0d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(6.6917246496340396E41d, Double.NaN); int int3 = brentOptimizer2.getEvaluations(); int int4 = brentOptimizer2.getEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair5 = brentOptimizer2.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); int int21 = brentOptimizer3.getEvaluations(); double double22 = brentOptimizer3.getMin(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction0 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer4 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker3); int int5 = brentOptimizer4.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin8 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction9 = sin8.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray10 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin7, sin8 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray10); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable12 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray10); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray10); org.apache.commons.math3.optimization.GoalType goalType14 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer4.optimize(97, univariateFunction13, goalType14, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair19 = brentOptimizer4.doOptimize(); double double20 = brentOptimizer4.getMax(); org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.function.Sin sin26 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray28 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24, sin26, sin27 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray28); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable22, (java.lang.Object[]) univariateDifferentiableArray28); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray28); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker34 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer35 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker34); int int36 = brentOptimizer35.getEvaluations(); int int37 = brentOptimizer35.getEvaluations(); int int38 = brentOptimizer35.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction40 = null; org.apache.commons.math3.analysis.function.Sin sin41 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction43 = sin42.derivative(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin45 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray46 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin41, sin42, sin44, sin45 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray46); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction48 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray46); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray46); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction51 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction40, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable49, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType52 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair56 = brentOptimizer35.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable49, goalType52, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair60 = brentOptimizer4.optimize((int) (byte) 100, univariateFunction31, goalType52, 1.2786363145140075E-4d, (-1.5596856728972892d), 2.2227587494850775E-162d); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction61 = null; org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin62.derivative(); double double65 = sin62.value((double) (short) 10); org.apache.commons.math3.analysis.function.Sin sin66 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction67 = sin66.derivative(); double double69 = sin66.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction70 = sin66.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction71 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction61, (org.apache.commons.math3.analysis.UnivariateFunction) sin62, (org.apache.commons.math3.analysis.UnivariateFunction) sin66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = sin62.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction73 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction0, univariateFunction31, (org.apache.commons.math3.analysis.UnivariateFunction) sin62); org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure74 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.analysis.differentiation.DerivativeStructure derivativeStructure75 = sin62.value(derivativeStructure74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(univariateFunction9); org.junit.Assert.assertNotNull(univariateDifferentiableArray10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateDifferentiable12); org.junit.Assert.assertNotNull(univariateFunction13); org.junit.Assert.assertTrue("'" + goalType14 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType14.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertNotNull(univariatePointValuePair19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4210854715202004E-14d + "'", double20 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction31); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(univariateFunction43); org.junit.Assert.assertNotNull(univariateDifferentiableArray46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateFunction48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(multivariateFunction51); org.junit.Assert.assertTrue("'" + goalType52 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType52.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair56); org.junit.Assert.assertNotNull(univariatePointValuePair60); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.5440211108893698d) + "'", double65 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(univariateFunction67); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.8414709825806044d + "'", double69 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction70); org.junit.Assert.assertNotNull(univariateFunction71); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertNotNull(univariateFunction73); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair18 = brentOptimizer3.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType19 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair20 = brentOptimizer3.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.optimization.GoalType goalType24 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair27 = brentOptimizer3.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin22, goalType24, 3.141592653589793d, 0.0d); double double28 = brentOptimizer3.getMax(); org.apache.commons.math3.optimization.GoalType goalType29 = brentOptimizer3.getGoalType(); int int30 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction32 = null; org.apache.commons.math3.analysis.function.Sin sin33 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction34 = sin33.derivative(); double double36 = sin33.value((double) (short) 10); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction38 = sin37.derivative(); double double40 = sin37.value(0.9999999958776927d); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin37.derivative(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction42 = org.apache.commons.math3.analysis.FunctionUtils.combine(bivariateFunction32, (org.apache.commons.math3.analysis.UnivariateFunction) sin33, (org.apache.commons.math3.analysis.UnivariateFunction) sin37); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker45 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer46 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker45); int int47 = brentOptimizer46.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin49 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction51 = sin50.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray52 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin49, sin50 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable53 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray52); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable54 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray52); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction55 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray52); org.apache.commons.math3.optimization.GoalType goalType56 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair60 = brentOptimizer46.optimize(97, univariateFunction55, goalType56, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair61 = brentOptimizer46.doOptimize(); int int62 = brentOptimizer46.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable64 = null; org.apache.commons.math3.exception.util.Localizable localizable65 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray66 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction67 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray66); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException68 = new org.apache.commons.math3.exception.MathArithmeticException(localizable65, (java.lang.Object[]) differentiableUnivariateFunctionArray66); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction69 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray66); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException70 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable64, (java.lang.Object[]) differentiableUnivariateFunctionArray66); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction71 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray66); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray66); org.apache.commons.math3.optimization.GoalType goalType73 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer46.optimize((int) 'a', (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction72, goalType73, (-2.2250738585072014E-308d), (double) 3.8146973E-6f); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair80 = brentOptimizer3.optimize(0, (org.apache.commons.math3.analysis.UnivariateFunction) sin37, goalType73, 1.570796319767148d, (-12.0d), 0.06981317007977318d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (0) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertNotNull(univariatePointValuePair18); org.junit.Assert.assertTrue("'" + goalType19 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType19.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair20); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertTrue("'" + goalType24 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType24.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + goalType29 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType29.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97); org.junit.Assert.assertNotNull(univariateFunction34); org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.5440211108893698d) + "'", double36 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(univariateFunction38); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.8414709825806044d + "'", double40 == 0.8414709825806044d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateFunction42); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertNotNull(univariateFunction51); org.junit.Assert.assertNotNull(univariateDifferentiableArray52); org.junit.Assert.assertNotNull(univariateDifferentiable53); org.junit.Assert.assertNotNull(univariateDifferentiable54); org.junit.Assert.assertNotNull(univariateFunction55); org.junit.Assert.assertTrue("'" + goalType56 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType56.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair60); org.junit.Assert.assertNotNull(univariatePointValuePair61); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray66); org.junit.Assert.assertNotNull(differentiableUnivariateFunction67); org.junit.Assert.assertNotNull(differentiableUnivariateFunction69); org.junit.Assert.assertNotNull(univariateFunction71); org.junit.Assert.assertNotNull(differentiableUnivariateFunction72); org.junit.Assert.assertTrue("'" + goalType73 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType73.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair76); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(201.71315737027922d, 4.641588833612779d, univariatePointValuePairConvergenceChecker2); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); int int8 = brentOptimizer3.getMaxEvaluations(); int int9 = brentOptimizer3.getMaxEvaluations(); int int10 = brentOptimizer3.getEvaluations(); double double11 = brentOptimizer3.getMax(); double double12 = brentOptimizer3.getStartValue(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = null; org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker17 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer18 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker17); int int19 = brentOptimizer18.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin21 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin22 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction23 = sin22.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray24 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin21, sin22 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable25 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray24); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable26 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray24); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction27 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray24); org.apache.commons.math3.optimization.GoalType goalType28 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer18.optimize(97, univariateFunction27, goalType28, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair33 = brentOptimizer18.doOptimize(); int int34 = brentOptimizer18.getEvaluations(); double double35 = brentOptimizer18.getMin(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer18.doOptimize(); org.apache.commons.math3.exception.util.Localizable localizable38 = null; org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray44); org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException49 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable38, (java.lang.Object[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.compose(univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair71 = brentOptimizer54.doOptimize(); org.apache.commons.math3.analysis.function.Sin sin73 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction74 = sin73.derivative(); org.apache.commons.math3.optimization.GoalType goalType75 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer54.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) sin73, goalType75, 3.141592653589793d, 0.0d); double double79 = brentOptimizer54.getMax(); int int80 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.optimization.GoalType goalType81 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair85 = brentOptimizer18.optimize(2147483647, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable50, goalType81, 3.0043213737826426d, 2.2316413623835194E-6d, 7.62939453125E-6d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair88 = brentOptimizer3.optimize((int) (byte) 10, univariateFunction14, goalType81, 42.97512519471661d, (-0.18338213718458096d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math3.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(univariateFunction23); org.junit.Assert.assertNotNull(univariateDifferentiableArray24); org.junit.Assert.assertNotNull(univariateDifferentiable25); org.junit.Assert.assertNotNull(univariateDifferentiable26); org.junit.Assert.assertNotNull(univariateFunction27); org.junit.Assert.assertTrue("'" + goalType28 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType28.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair32); org.junit.Assert.assertNotNull(univariatePointValuePair33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair71); org.junit.Assert.assertNotNull(univariateFunction74); org.junit.Assert.assertTrue("'" + goalType75 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType75.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1); org.junit.Assert.assertTrue("'" + goalType81 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType81.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair85); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); double double7 = brentOptimizer3.getMin(); org.apache.commons.math3.optimization.GoalType goalType8 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); int int10 = brentOptimizer3.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNull(goalType8); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getEvaluations(); double double7 = brentOptimizer3.getMin(); org.apache.commons.math3.optimization.GoalType goalType8 = brentOptimizer3.getGoalType(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker9 = brentOptimizer3.getConvergenceChecker(); org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = sin11.derivative(); double double14 = sin11.value((double) (short) 10); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction15 = org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction((org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable) sin11); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction16 = sin11.derivative(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker19 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer20 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker19); int int21 = brentOptimizer20.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin23 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction25 = sin24.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray26 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin23, sin24 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable27 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray26); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray26); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction29 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray26); org.apache.commons.math3.optimization.GoalType goalType30 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair34 = brentOptimizer20.optimize(97, univariateFunction29, goalType30, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer20.doOptimize(); int int36 = brentOptimizer20.getEvaluations(); int int37 = brentOptimizer20.getEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable39 = null; org.apache.commons.math3.exception.util.Localizable localizable40 = null; org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.function.Sin sin50 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin51 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction52 = sin51.derivative(); org.apache.commons.math3.analysis.function.Sin sin53 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin54 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray55 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin50, sin51, sin53, sin54 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable56 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray55); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction58 = sin57.derivative(); org.apache.commons.math3.analysis.function.Sin sin59 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction60 = sin59.derivative(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin62 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = sin62.derivative(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin65 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray66 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin61, sin62, sin64, sin65 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable67 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray66); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray68 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin42, univariateDifferentiable49, univariateDifferentiable56, sin57, sin59, univariateDifferentiable67 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable69 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray68); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException70 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable40, (java.lang.Number) (-120.00000095367432d), (java.lang.Object[]) univariateDifferentiableArray68); org.apache.commons.math3.exception.NullArgumentException nullArgumentException71 = new org.apache.commons.math3.exception.NullArgumentException(localizable39, (java.lang.Object[]) univariateDifferentiableArray68); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction72 = org.apache.commons.math3.analysis.FunctionUtils.multiply((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray68); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction73 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray68); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker76 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer77 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker76); int int78 = brentOptimizer77.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin80 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin81 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction82 = sin81.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray83 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin80, sin81 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable84 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray83); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable85 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray83); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction86 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray83); org.apache.commons.math3.optimization.GoalType goalType87 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair91 = brentOptimizer77.optimize(97, univariateFunction86, goalType87, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair95 = brentOptimizer20.optimize(17, univariateFunction73, goalType87, 99.99999999999999d, 2.238693057170856d, 0.8687261884639957d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair99 = brentOptimizer3.optimize(11, (org.apache.commons.math3.analysis.UnivariateFunction) sin11, goalType87, (double) 2.384186E-7f, (double) 1.0f, (-1.2942984546608819E-8d)); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNull(goalType8); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker9); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.5440211108893698d) + "'", double14 == (-0.5440211108893698d)); org.junit.Assert.assertNotNull(differentiableUnivariateFunction15); org.junit.Assert.assertNotNull(univariateFunction16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(univariateFunction25); org.junit.Assert.assertNotNull(univariateDifferentiableArray26); org.junit.Assert.assertNotNull(univariateDifferentiable27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateFunction29); org.junit.Assert.assertTrue("'" + goalType30 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType30.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair34); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction52); org.junit.Assert.assertNotNull(univariateDifferentiableArray55); org.junit.Assert.assertNotNull(univariateDifferentiable56); org.junit.Assert.assertNotNull(univariateFunction58); org.junit.Assert.assertNotNull(univariateFunction60); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertNotNull(univariateDifferentiableArray66); org.junit.Assert.assertNotNull(univariateDifferentiable67); org.junit.Assert.assertNotNull(univariateDifferentiableArray68); org.junit.Assert.assertNotNull(univariateDifferentiable69); org.junit.Assert.assertNotNull(univariateFunction72); org.junit.Assert.assertNotNull(univariateFunction73); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(univariateFunction82); org.junit.Assert.assertNotNull(univariateDifferentiableArray83); org.junit.Assert.assertNotNull(univariateDifferentiable84); org.junit.Assert.assertNotNull(univariateDifferentiable85); org.junit.Assert.assertNotNull(univariateFunction86); org.junit.Assert.assertTrue("'" + goalType87 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType87.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair91); org.junit.Assert.assertNotNull(univariatePointValuePair95); org.junit.Assert.assertNotNull(univariatePointValuePair99); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin6 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin7 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction8 = sin7.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray9 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin6, sin7 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable10 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray9); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable11 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray9); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray9); org.apache.commons.math3.optimization.GoalType goalType13 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair17 = brentOptimizer3.optimize(97, univariateFunction12, goalType13, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); int int18 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.exception.util.Localizable localizable20 = null; org.apache.commons.math3.exception.util.Localizable localizable22 = null; org.apache.commons.math3.exception.util.Localizable localizable23 = null; org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.function.Sin sin27 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin28 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray29 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25, sin27, sin28 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable30 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable23, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.exception.MathInternalError mathInternalError32 = new org.apache.commons.math3.exception.MathInternalError(localizable22, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable33 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray29); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException34 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable20, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray29); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable35 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray29); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker38 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer39 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker38); int int40 = brentOptimizer39.getMaxEvaluations(); double double41 = brentOptimizer39.getMax(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin44 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction45 = sin44.derivative(); org.apache.commons.math3.analysis.function.Sin sin46 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin47 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray48 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin43, sin44, sin46, sin47 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable49 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray48); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction50 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray48); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray60 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable61 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray60); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable62 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray60); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction63 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray60); org.apache.commons.math3.optimization.GoalType goalType64 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair68 = brentOptimizer54.optimize(97, univariateFunction63, goalType64, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair69 = brentOptimizer54.doOptimize(); org.apache.commons.math3.optimization.GoalType goalType70 = brentOptimizer54.getGoalType(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair73 = brentOptimizer39.optimize((int) ' ', univariateFunction50, goalType70, 4.000043427276863d, 1.3017526366697145d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer3.optimize(2, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable35, goalType70, (-1.5707963267948912d), (double) (-0.9999999f)); int int77 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair78 = brentOptimizer3.doOptimize(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(univariateFunction8); org.junit.Assert.assertNotNull(univariateDifferentiableArray9); org.junit.Assert.assertNotNull(univariateDifferentiable10); org.junit.Assert.assertNotNull(univariateDifferentiable11); org.junit.Assert.assertNotNull(univariateFunction12); org.junit.Assert.assertTrue("'" + goalType13 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType13.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray29); org.junit.Assert.assertNotNull(univariateDifferentiable30); org.junit.Assert.assertNotNull(univariateDifferentiable33); org.junit.Assert.assertNotNull(univariateDifferentiable35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(univariateFunction45); org.junit.Assert.assertNotNull(univariateDifferentiableArray48); org.junit.Assert.assertNotNull(univariateDifferentiable49); org.junit.Assert.assertNotNull(univariateFunction50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray60); org.junit.Assert.assertNotNull(univariateDifferentiable61); org.junit.Assert.assertNotNull(univariateDifferentiable62); org.junit.Assert.assertNotNull(univariateFunction63); org.junit.Assert.assertTrue("'" + goalType64 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType64.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair68); org.junit.Assert.assertNotNull(univariatePointValuePair69); org.junit.Assert.assertTrue("'" + goalType70 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType70.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair73); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1); org.junit.Assert.assertNotNull(univariatePointValuePair78); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((-13.773597584437857d), (double) 1.0f, univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -13.774 is smaller than the minimum (0)"); } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) { // Expected exception. } }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); int int8 = brentOptimizer3.getMaxEvaluations(); int int9 = brentOptimizer3.getMaxEvaluations(); int int10 = brentOptimizer3.getEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker11 = brentOptimizer3.getConvergenceChecker(); int int12 = brentOptimizer3.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(1.8184464592320668d, (-2864794.7735337033d), univariatePointValuePairConvergenceChecker2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -2,864,794.774 is smaller than, or equal to, the minimum (0)"); } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer((double) 3.8146973E-6f, 5729.57829566771d); double double3 = brentOptimizer2.getStartValue(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); int int4 = brentOptimizer3.getEvaluations(); int int5 = brentOptimizer3.getEvaluations(); int int6 = brentOptimizer3.getMaxEvaluations(); double double7 = brentOptimizer3.getStartValue(); double double8 = brentOptimizer3.getMin(); org.apache.commons.math3.exception.util.Localizable localizable10 = null; org.apache.commons.math3.analysis.function.Sin sin11 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray12 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] { sin11 }; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction13 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray12); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) differentiableUnivariateFunctionArray12); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable10, (java.lang.Object[]) differentiableUnivariateFunctionArray12); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray12); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction17 = org.apache.commons.math3.analysis.FunctionUtils.add(differentiableUnivariateFunctionArray12); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker20 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer21 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker20); int int22 = brentOptimizer21.getEvaluations(); org.apache.commons.math3.analysis.function.Sin sin24 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin25 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction26 = sin25.derivative(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray27 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin24, sin25 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable28 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray27); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable29 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray27); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction30 = org.apache.commons.math3.analysis.FunctionUtils.compose((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray27); org.apache.commons.math3.optimization.GoalType goalType31 = org.apache.commons.math3.optimization.GoalType.MAXIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair35 = brentOptimizer21.optimize(97, univariateFunction30, goalType31, (double) (byte) 10, 1.4210854715202004E-14d, 10.0d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair36 = brentOptimizer21.doOptimize(); double double37 = brentOptimizer21.getMax(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction41 = sin40.derivative(); org.apache.commons.math3.analysis.function.Sin sin42 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin43 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray44 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin39, sin40, sin42, sin43 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction46 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray44); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray44); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker50 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer51 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker50); int int52 = brentOptimizer51.getEvaluations(); int int53 = brentOptimizer51.getEvaluations(); int int54 = brentOptimizer51.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction56 = null; org.apache.commons.math3.analysis.function.Sin sin57 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin58 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction59 = sin58.derivative(); org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray62 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin57, sin58, sin60, sin61 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable63 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray62); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction64 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray62); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable65 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray62); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction67 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction56, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable65, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType68 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair72 = brentOptimizer51.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable65, goalType68, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair76 = brentOptimizer21.optimize(4, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable47, goalType68, 1.2786363145140078E-4d, (-0.8942257319186149d), 3.6757332503588205d); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair79 = brentOptimizer3.optimize(524, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction17, goalType68, (double) 97.0f, 14.744763703714932d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray12); org.junit.Assert.assertNotNull(differentiableUnivariateFunction13); org.junit.Assert.assertNotNull(univariateFunction14); org.junit.Assert.assertNotNull(differentiableUnivariateFunction16); org.junit.Assert.assertNotNull(differentiableUnivariateFunction17); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(univariateFunction26); org.junit.Assert.assertNotNull(univariateDifferentiableArray27); org.junit.Assert.assertNotNull(univariateDifferentiable28); org.junit.Assert.assertNotNull(univariateDifferentiable29); org.junit.Assert.assertNotNull(univariateFunction30); org.junit.Assert.assertTrue("'" + goalType31 + "' != '" + org.apache.commons.math3.optimization.GoalType.MAXIMIZE + "'", goalType31.equals(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair35); org.junit.Assert.assertNotNull(univariatePointValuePair36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.4210854715202004E-14d + "'", double37 == 1.4210854715202004E-14d); org.junit.Assert.assertNotNull(univariateFunction41); org.junit.Assert.assertNotNull(univariateDifferentiableArray44); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateFunction46); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertNotNull(univariateFunction59); org.junit.Assert.assertNotNull(univariateDifferentiableArray62); org.junit.Assert.assertNotNull(univariateDifferentiable63); org.junit.Assert.assertNotNull(univariateFunction64); org.junit.Assert.assertNotNull(univariateDifferentiable65); org.junit.Assert.assertNotNull(multivariateFunction67); org.junit.Assert.assertTrue("'" + goalType68 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType68.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair72); org.junit.Assert.assertNotNull(univariatePointValuePair76); org.junit.Assert.assertNotNull(univariatePointValuePair79); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(80372.16322833701d, (double) (byte) 10); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker3 = brentOptimizer2.getConvergenceChecker(); double double4 = brentOptimizer2.getStartValue(); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker2 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer3 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker2); double double4 = brentOptimizer3.getMax(); int int5 = brentOptimizer3.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker6 = brentOptimizer3.getConvergenceChecker(); double double7 = brentOptimizer3.getStartValue(); org.apache.commons.math3.exception.util.Localizable localizable9 = null; org.apache.commons.math3.exception.util.Localizable localizable10 = null; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] differentiableUnivariateFunctionArray11 = new org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] {}; org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction12 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray11); org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException13 = new org.apache.commons.math3.exception.MathArithmeticException(localizable10, (java.lang.Object[]) differentiableUnivariateFunctionArray11); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction14 = org.apache.commons.math3.analysis.FunctionUtils.multiply(differentiableUnivariateFunctionArray11); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable9, (java.lang.Object[]) differentiableUnivariateFunctionArray11); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction16 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray11); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction17 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray11); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction18 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray11); org.apache.commons.math3.analysis.DifferentiableUnivariateFunction differentiableUnivariateFunction19 = org.apache.commons.math3.analysis.FunctionUtils.compose(differentiableUnivariateFunctionArray11); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable20 = org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(differentiableUnivariateFunction19); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker23 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer24 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker23); int int25 = brentOptimizer24.getEvaluations(); int int26 = brentOptimizer24.getEvaluations(); int int27 = brentOptimizer24.getMaxEvaluations(); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker28 = brentOptimizer24.getConvergenceChecker(); org.apache.commons.math3.exception.util.Localizable localizable30 = null; org.apache.commons.math3.exception.util.Localizable localizable32 = null; org.apache.commons.math3.exception.util.Localizable localizable34 = null; org.apache.commons.math3.exception.util.Localizable localizable35 = null; org.apache.commons.math3.analysis.function.Sin sin36 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin37 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction38 = sin37.derivative(); org.apache.commons.math3.analysis.function.Sin sin39 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin40 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray41 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin36, sin37, sin39, sin40 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable42 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray41); org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException43 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable35, (java.lang.Object[]) univariateDifferentiableArray41); org.apache.commons.math3.exception.MathInternalError mathInternalError44 = new org.apache.commons.math3.exception.MathInternalError(localizable34, (java.lang.Object[]) univariateDifferentiableArray41); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable45 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray41); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException46 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable32, (java.lang.Number) 0.17453292519943295d, (java.lang.Object[]) univariateDifferentiableArray41); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable47 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray41); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable48 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray41); org.apache.commons.math3.exception.MaxCountExceededException maxCountExceededException49 = new org.apache.commons.math3.exception.MaxCountExceededException(localizable30, (java.lang.Number) 5729.5779513082325d, (java.lang.Object[]) univariateDifferentiableArray41); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable50 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray41); org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair> univariatePointValuePairConvergenceChecker53 = null; org.apache.commons.math3.optimization.univariate.BrentOptimizer brentOptimizer54 = new org.apache.commons.math3.optimization.univariate.BrentOptimizer(9.094947017729282E-13d, 1.520858701862118d, univariatePointValuePairConvergenceChecker53); int int55 = brentOptimizer54.getEvaluations(); int int56 = brentOptimizer54.getEvaluations(); int int57 = brentOptimizer54.getEvaluations(); org.apache.commons.math3.analysis.BivariateFunction bivariateFunction59 = null; org.apache.commons.math3.analysis.function.Sin sin60 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin61 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction62 = sin61.derivative(); org.apache.commons.math3.analysis.function.Sin sin63 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.function.Sin sin64 = new org.apache.commons.math3.analysis.function.Sin(); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] univariateDifferentiableArray65 = new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[] { sin60, sin61, sin63, sin64 }; org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable66 = org.apache.commons.math3.analysis.FunctionUtils.multiply(univariateDifferentiableArray65); org.apache.commons.math3.analysis.UnivariateFunction univariateFunction67 = org.apache.commons.math3.analysis.FunctionUtils.add((org.apache.commons.math3.analysis.UnivariateFunction[]) univariateDifferentiableArray65); org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable univariateDifferentiable68 = org.apache.commons.math3.analysis.FunctionUtils.add(univariateDifferentiableArray65); org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction70 = org.apache.commons.math3.analysis.FunctionUtils.collector(bivariateFunction59, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable68, 96.93296794516414d); org.apache.commons.math3.optimization.GoalType goalType71 = org.apache.commons.math3.optimization.GoalType.MINIMIZE; org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair75 = brentOptimizer54.optimize((int) (short) 10, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable68, goalType71, (double) 6.0f, 7.544137102816975d, (double) 12); org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair79 = brentOptimizer24.optimize(97, (org.apache.commons.math3.analysis.UnivariateFunction) univariateDifferentiable50, goalType71, (double) 0L, 0.8865583226060262d, (-1362.4112920855202d)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair univariatePointValuePair82 = brentOptimizer3.optimize((int) (byte) 10, (org.apache.commons.math3.analysis.UnivariateFunction) differentiableUnivariateFunction19, goalType71, 1.10441242001088E155d, 1.58859428E8d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.TooManyEvaluationsException; message: illegal state: maximal count (10) exceeded: evaluations"); } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(differentiableUnivariateFunctionArray11); org.junit.Assert.assertNotNull(differentiableUnivariateFunction12); org.junit.Assert.assertNotNull(differentiableUnivariateFunction14); org.junit.Assert.assertNotNull(differentiableUnivariateFunction16); org.junit.Assert.assertNotNull(differentiableUnivariateFunction17); org.junit.Assert.assertNotNull(differentiableUnivariateFunction18); org.junit.Assert.assertNotNull(differentiableUnivariateFunction19); org.junit.Assert.assertNotNull(univariateDifferentiable20); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNull(univariatePointValuePairConvergenceChecker28); org.junit.Assert.assertNotNull(univariateFunction38); org.junit.Assert.assertNotNull(univariateDifferentiableArray41); org.junit.Assert.assertNotNull(univariateDifferentiable42); org.junit.Assert.assertNotNull(univariateDifferentiable45); org.junit.Assert.assertNotNull(univariateDifferentiable47); org.junit.Assert.assertNotNull(univariateDifferentiable48); org.junit.Assert.assertNotNull(univariateDifferentiable50); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0); org.junit.Assert.assertNotNull(univariateFunction62); org.junit.Assert.assertNotNull(univariateDifferentiableArray65); org.junit.Assert.assertNotNull(univariateDifferentiable66); org.junit.Assert.assertNotNull(univariateFunction67); org.junit.Assert.assertNotNull(univariateDifferentiable68); org.junit.Assert.assertNotNull(multivariateFunction70); org.junit.Assert.assertTrue("'" + goalType71 + "' != '" + org.apache.commons.math3.optimization.GoalType.MINIMIZE + "'", goalType71.equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE)); org.junit.Assert.assertNotNull(univariatePointValuePair75); org.junit.Assert.assertNotNull(univariatePointValuePair79); }
