public void testDelimiterSameAsCommentStartThrowsException() { CSVFormat.DEFAULT.withDelimiter('!').withCommentStart('!').validate(); }
public void testDelimiterSameAsEscapeThrowsException() { CSVFormat.DEFAULT.withDelimiter('!').withEscape('!').validate(); }
public void testDuplicateHeaderElements() { CSVFormat.DEFAULT.withHeader("A", "A").validate(); }
public void testEquals() { final CSVFormat right = CSVFormat.DEFAULT; final CSVFormat left = copy(right); assertFalse(right.equals(null)); assertFalse(right.equals("A String Instance")); assertEquals(right, right); assertEquals(right, left); assertEquals(left, right); assertEquals(right.hashCode(), right.hashCode()); assertEquals(right.hashCode(), left.hashCode()); }
public void testEqualsCommentStart() { final CSVFormat right = CSVFormat.newFormat('\'') .withQuoteChar('"') .withCommentStart('#') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withCommentStart('!'); assertNotEquals(right, left); }
public void testEqualsDelimiter() { final CSVFormat right = CSVFormat.newFormat('!'); final CSVFormat left = CSVFormat.newFormat('?'); assertNotEquals(right, left); }
public void testEqualsEscape() { final CSVFormat right = CSVFormat.newFormat('\'') .withQuoteChar('"') .withCommentStart('#') .withEscape('+') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withEscape('!'); assertNotEquals(right, left); }
public void testEqualsHeader() { final CSVFormat right = CSVFormat.newFormat('\'') .withRecordSeparator('*') .withCommentStart('#') .withEscape('+') .withHeader("One", "Two", "Three") .withIgnoreEmptyLines(true) .withIgnoreSurroundingSpaces(true) .withQuoteChar('"') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withHeader("Three", "Two", "One"); assertNotEquals(right, left); }
public void testEqualsIgnoreEmptyLines() { final CSVFormat right = CSVFormat.newFormat('\'') .withCommentStart('#') .withEscape('+') .withIgnoreEmptyLines(true) .withIgnoreSurroundingSpaces(true) .withQuoteChar('"') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withIgnoreEmptyLines(false); assertNotEquals(right, left); }
public void testEqualsIgnoreSurroundingSpaces() { final CSVFormat right = CSVFormat.newFormat('\'') .withCommentStart('#') .withEscape('+') .withIgnoreSurroundingSpaces(true) .withQuoteChar('"') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withIgnoreSurroundingSpaces(false); assertNotEquals(right, left); }
public void testEqualsQuoteChar() { final CSVFormat right = CSVFormat.newFormat('\'').withQuoteChar('"'); final CSVFormat left = right.withQuoteChar('!'); assertNotEquals(right, left); }
public void testEqualsQuotePolicy() { final CSVFormat right = CSVFormat.newFormat('\'') .withQuoteChar('"') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withQuotePolicy(Quote.MINIMAL); assertNotEquals(right, left); }
public void testEqualsRecordSeparator() { final CSVFormat right = CSVFormat.newFormat('\'') .withRecordSeparator('*') .withCommentStart('#') .withEscape('+') .withIgnoreEmptyLines(true) .withIgnoreSurroundingSpaces(true) .withQuoteChar('"') .withQuotePolicy(Quote.ALL); final CSVFormat left = right .withRecordSeparator('!'); assertNotEquals(right, left); }
public void testEscapeSameAsCommentStartThrowsException() { CSVFormat.DEFAULT.withEscape('!').withCommentStart('!').validate(); }
public void testEscapeSameAsCommentStartThrowsExceptionForWrapperType() { // Cannot assume that callers won't use different Character objects CSVFormat.DEFAULT.withEscape(new Character('!')).withCommentStart(new Character('!')).validate(); }
public void testFormat() { final CSVFormat format = CSVFormat.DEFAULT; assertEquals("", format.format()); assertEquals("a,b,c", format.format("a", "b", "c")); assertEquals("\"x,y\",z", format.format("x,y", "z")); }
public void testGetHeader() throws Exception { final String[] header = new String[]{"one", "two", "three"}; final CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header); // getHeader() makes a copy of the header array. final String[] headerCopy = formatWithHeader.getHeader(); headerCopy[0] = "A"; headerCopy[1] = "B"; headerCopy[2] = "C"; assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy)); assertNotSame(formatWithHeader.getHeader(), headerCopy); }
public void testNullRecordSeparatorCsv106() { final CSVFormat format = CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader("H1", "H2"); final String formatStr = format.format("A", "B"); assertNotNull(formatStr); assertFalse(formatStr.endsWith("null")); }
public void testQuoteCharSameAsCommentStartThrowsException() { CSVFormat.DEFAULT.withQuoteChar('!').withCommentStart('!').validate(); }
public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType() { // Cannot assume that callers won't use different Character objects CSVFormat.DEFAULT.withQuoteChar(new Character('!')).withCommentStart('!').validate(); }
public void testQuoteCharSameAsDelimiterThrowsException() { CSVFormat.DEFAULT.withQuoteChar('!').withDelimiter('!').validate(); }
public void testQuotePolicyNoneWithoutEscapeThrowsException() { CSVFormat.newFormat('!').withQuotePolicy(Quote.NONE).validate(); }
public void testRFC4180() { assertEquals(null, RFC4180.getCommentStart()); assertEquals(',', RFC4180.getDelimiter()); assertEquals(null, RFC4180.getEscape()); assertFalse(RFC4180.getIgnoreEmptyLines()); assertEquals(Character.valueOf('"'), RFC4180.getQuoteChar()); assertEquals(null, RFC4180.getQuotePolicy()); assertEquals("\r\n", RFC4180.getRecordSeparator()); }
public void testWithCommentStart() throws Exception { final CSVFormat formatWithCommentStart = CSVFormat.DEFAULT.withCommentStart('#'); assertEquals( Character.valueOf('#'), formatWithCommentStart.getCommentStart()); }
public void testWithCommentStartCRThrowsException() { CSVFormat.DEFAULT.withCommentStart(CR).validate(); }
public void testWithDelimiter() throws Exception { final CSVFormat formatWithDelimiter = CSVFormat.DEFAULT.withDelimiter('!'); assertEquals('!', formatWithDelimiter.getDelimiter()); }
public void testWithDelimiterLFThrowsException() { CSVFormat.DEFAULT.withDelimiter(LF).validate(); }
public void testWithEscape() throws Exception { final CSVFormat formatWithEscape = CSVFormat.DEFAULT.withEscape('&'); assertEquals(Character.valueOf('&'), formatWithEscape.getEscape()); }
public void testWithEscapeCRThrowsExceptions() { CSVFormat.DEFAULT.withEscape(CR).validate(); }
public void testWithHeader() throws Exception { final String[] header = new String[]{"one", "two", "three"}; // withHeader() makes a copy of the header array. final CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header); assertArrayEquals(header, formatWithHeader.getHeader()); assertNotSame(header, formatWithHeader.getHeader()); header[0] = "A"; header[1] = "B"; header[2] = "C"; assertFalse(Arrays.equals(formatWithHeader.getHeader(), header)); }
public void testWithIgnoreEmptyLines() throws Exception { assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines()); assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines()); }
public void testWithIgnoreSurround() throws Exception { assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces()); assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true).getIgnoreSurroundingSpaces()); }
public void testWithNullString() throws Exception { final CSVFormat formatWithNullString = CSVFormat.DEFAULT.withNullString("null"); assertEquals("null", formatWithNullString.getNullString()); }
public void testWithQuoteChar() throws Exception { final CSVFormat formatWithQuoteChar = CSVFormat.DEFAULT.withQuoteChar('"'); assertEquals(Character.valueOf('"'), formatWithQuoteChar.getQuoteChar()); }
public void testWithQuoteLFThrowsException() { CSVFormat.DEFAULT.withQuoteChar(LF).validate(); }
public void testWithQuotePolicy() throws Exception { final CSVFormat formatWithQuotePolicy = CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL); assertEquals(Quote.ALL, formatWithQuotePolicy.getQuotePolicy()); }
public void testWithRecordSeparator() throws Exception { final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator('!'); assertEquals("!", formatWithRecordSeparator.getRecordSeparator()); }
public void testDisabledComment() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printComment("This is a comment"); assertEquals("", sw.toString()); printer.close(); }
public void testExcelPrintAllArrayOfArrays() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL); printer.printRecords(new String[][] { { "r1c1", "r1c2" }, { "r2c1", "r2c2" } }); assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); printer.close(); }
public void testExcelPrintAllArrayOfLists() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL); printer.printRecords(new List[] { Arrays.asList("r1c1", "r1c2"), Arrays.asList("r2c1", "r2c2") }); assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); printer.close(); }
public void testExcelPrintAllIterableOfArrays() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL); printer.printRecords(Arrays.asList(new String[][] { { "r1c1", "r1c2" }, { "r2c1", "r2c2" } })); assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); printer.close(); }
public void testExcelPrintAllIterableOfLists() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL); printer.printRecords(Arrays.asList(new List[] { Arrays.asList("r1c1", "r1c2"), Arrays.asList("r2c1", "r2c2") })); assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator, sw.toString()); printer.close(); }
public void testExcelPrinter1() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL); printer.printRecord("a", "b"); assertEquals("a,b" + recordSeparator, sw.toString()); printer.close(); }
public void testExcelPrinter2() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL); printer.printRecord("a,b", "b"); assertEquals("\"a,b\",b" + recordSeparator, sw.toString()); printer.close(); }
public void testJdbcPrinter() throws IOException, ClassNotFoundException, SQLException { final StringWriter sw = new StringWriter(); Class.forName("org.h2.Driver"); final Connection connection = DriverManager.getConnection("jdbc:h2:mem:my_test;", "sa", ""); try { final Statement stmt = connection.createStatement(); stmt.execute("CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))"); stmt.execute("insert into TEST values(1, 'r1')"); stmt.execute("insert into TEST values(2, 'r2')"); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecords(stmt.executeQuery("select ID, NAME from TEST")); assertEquals("1,r1" + recordSeparator + "2,r2" + recordSeparator, sw.toString()); printer.close(); } finally { connection.close(); } }
public void testMultiLineComment() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#')); printer.printComment("This is a comment\non multiple lines"); assertEquals("# This is a comment" + recordSeparator + "# on multiple lines" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter1() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a", "b"); assertEquals("a,b" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter2() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a,b", "b"); assertEquals("\"a,b\",b" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter3() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a, b", "b "); assertEquals("\"a, b\",\"b \"" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter4() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a", "b\"c"); assertEquals("a,\"b\"\"c\"" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter5() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a", "b\nc"); assertEquals("a,\"b\nc\"" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter6() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a", "b\r\nc"); assertEquals("a,\"b\r\nc\"" + recordSeparator, sw.toString()); printer.close(); }
public void testPrinter7() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a", "b\\c"); assertEquals("a,b\\c" + recordSeparator, sw.toString()); printer.close(); }
public void testPrintNullValues() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT); printer.printRecord("a", null, "b"); assertEquals("a,,b" + recordSeparator, sw.toString()); printer.close(); }
public void testPrintCustomNullValues() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withNullString("NULL")); printer.printRecord("a", null, "b"); assertEquals("a,NULL,b" + recordSeparator, sw.toString()); printer.close(); }
public void testParseCustomNullValues() throws IOException { final StringWriter sw = new StringWriter(); final CSVFormat format = CSVFormat.DEFAULT.withNullString("NULL"); final CSVPrinter printer = new CSVPrinter(sw, format); printer.printRecord("a", null, "b"); printer.close(); final String csvString = sw.toString(); assertEquals("a,NULL,b" + recordSeparator, csvString); final Iterable<CSVRecord> iterable = format.parse(new StringReader(csvString)); final Iterator<CSVRecord> iterator = iterable.iterator(); final CSVRecord record = iterator.next(); assertEquals("a", record.get(0)); assertEquals(null, record.get(1)); assertEquals("b", record.get(2)); assertFalse(iterator.hasNext()); }
public void testQuoteAll() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL)); printer.printRecord("a", "b\nc", "d"); assertEquals("\"a\",\"b\nc\",\"d\"" + recordSeparator, sw.toString()); printer.close(); }
public void testQuoteNonNumeric() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.NON_NUMERIC)); printer.printRecord("a", "b\nc", Integer.valueOf(1)); assertEquals("\"a\",\"b\nc\",1" + recordSeparator, sw.toString()); printer.close(); }
public void testRandom() throws Exception { final int iter = 10000; doRandom(CSVFormat.DEFAULT, iter); doRandom(CSVFormat.EXCEL, iter); doRandom(CSVFormat.MYSQL, iter); }
public void testPlainQuoted() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\'')); printer.print("abc"); assertEquals("abc", sw.toString()); printer.close(); }
public void testSingleLineComment() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#')); printer.printComment("This is a comment"); assertEquals("# This is a comment" + recordSeparator, sw.toString()); printer.close(); }
public void testSingleQuoteQuoted() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\'')); printer.print("a'b'c"); printer.print("xyz"); assertEquals("'a''b''c',xyz", sw.toString()); printer.close(); }
public void testDelimeterQuoted() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\'')); printer.print("a,b,c"); printer.print("xyz"); assertEquals("'a,b,c',xyz", sw.toString()); printer.close(); }
public void testDelimeterQuoteNONE() throws IOException { final StringWriter sw = new StringWriter(); final CSVFormat format = CSVFormat.DEFAULT.withEscape('!').withQuotePolicy(Quote.NONE); final CSVPrinter printer = new CSVPrinter(sw, format); printer.print("a,b,c"); printer.print("xyz"); assertEquals("a!,b!,c,xyz", sw.toString()); printer.close(); }
public void testEOLQuoted() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\'')); printer.print("a\rb\nc"); printer.print("x\by\fz"); assertEquals("'a\rb\nc',x\by\fz", sw.toString()); printer.close(); }
public void testPlainEscaped() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null).withEscape('!')); printer.print("abc"); printer.print("xyz"); assertEquals("abc,xyz", sw.toString()); printer.close(); }
public void testDelimiterEscaped() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape('!').withQuoteChar(null)); printer.print("a,b,c"); printer.print("xyz"); assertEquals("a!,b!,c,xyz", sw.toString()); printer.close(); }
public void testEOLEscaped() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null).withEscape('!')); printer.print("a\rb\nc"); printer.print("x\fy\bz"); assertEquals("a!rb!nc,x\fy\bz", sw.toString()); printer.close(); }
public void testPlainPlain() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)); printer.print("abc"); printer.print("xyz"); assertEquals("abc,xyz", sw.toString()); printer.close(); }
public void testDelimiterPlain() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)); printer.print("a,b,c"); printer.print("xyz"); assertEquals("a,b,c,xyz", sw.toString()); printer.close(); }
public void testEOLPlain() throws IOException { final StringWriter sw = new StringWriter(); final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)); printer.print("a\rb\nc"); printer.print("x\fy\bz"); assertEquals("a\rb\nc,x\fy\bz", sw.toString()); printer.close(); }
public void testInvalidFormat() throws Exception { final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR); new CSVPrinter(new StringWriter(), invalidFormat).close(); }
public void testNewCSVPrinterNullAppendableFormat() throws Exception { new CSVPrinter(null, CSVFormat.DEFAULT); }
public void testNewCsvPrinterAppendableNullFormat() throws Exception { new CSVPrinter(new StringWriter(), null); }
