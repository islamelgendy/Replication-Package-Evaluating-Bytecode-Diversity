public void test1() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test1"); double[] doubleArray5 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray5); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl8 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix6, (double) 100L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 5x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix6); }
public void test2() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test2"); double[] doubleArray5 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray12); org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, doubleArray12); org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray5); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix16 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray5); double[][] doubleArray17 = array2DRowRealMatrix16.getDataRef(); double[] doubleArray23 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray23); double[] doubleArray30 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30); org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, doubleArray30); org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray23); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix34 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray23); double[][] doubleArray35 = array2DRowRealMatrix34.getDataRef(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix36 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor37 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double38 = array2DRowRealMatrix36.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor37); double double39 = defaultRealMatrixPreservingVisitor37.end(); double double40 = array2DRowRealMatrix34.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor37); double[] doubleArray46 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46); double[] doubleArray53 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray53); org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46, doubleArray53); org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix57 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray46); double[][] doubleArray58 = array2DRowRealMatrix57.getDataRef(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix59 = array2DRowRealMatrix34.add(array2DRowRealMatrix57); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix60 = array2DRowRealMatrix16.subtract(array2DRowRealMatrix59); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl62 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix60, (double) 10.0f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 5x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix6); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix13); org.junit.Assert.assertNotNull(realMatrix15); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix24); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix31); org.junit.Assert.assertNotNull(realMatrix33); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix47); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix54); org.junit.Assert.assertNotNull(realMatrix56); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertNotNull(array2DRowRealMatrix59); org.junit.Assert.assertNotNull(array2DRowRealMatrix60); }
public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); double[] doubleArray4 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray9 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray14 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray19 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray20 = new double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix21 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray20); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix23 = blockRealMatrix21.scalarAdd((-1.0d)); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix24 = blockRealMatrix21.transpose(); int int25 = blockRealMatrix24.getColumnDimension(); org.apache.commons.math.linear.RealVector realVector27 = blockRealMatrix24.getRowVector(1); double[] doubleArray32 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray37 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray42 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray47 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray37, doubleArray42, doubleArray47 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix49 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray48); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix51 = blockRealMatrix49.scalarAdd((-1.0d)); double double52 = blockRealMatrix49.getDeterminant(); org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible((org.apache.commons.math.linear.AnyMatrix) blockRealMatrix24, (org.apache.commons.math.linear.AnyMatrix) blockRealMatrix49); double double54 = blockRealMatrix24.getFrobeniusNorm(); double[] doubleArray60 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray60); double[] doubleArray67 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray67); org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60, doubleArray67); org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray60); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix71 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray60); double[][] doubleArray72 = array2DRowRealMatrix71.getDataRef(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix73 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor74 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double75 = array2DRowRealMatrix73.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor74); double double76 = defaultRealMatrixPreservingVisitor74.end(); double double77 = array2DRowRealMatrix71.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor74); double double78 = blockRealMatrix24.walkInOptimizedOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor74); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix79 = blockRealMatrix24.copy(); org.apache.commons.math.linear.RealVector realVector81 = blockRealMatrix24.getColumnVector((int) (short) 0); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl83 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) blockRealMatrix24, 106.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: eigen decomposition of assymetric matrices not supported yet"); } catch (org.apache.commons.math.linear.InvalidMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(blockRealMatrix23); org.junit.Assert.assertNotNull(blockRealMatrix24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4); org.junit.Assert.assertNotNull(realVector27); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertNotNull(blockRealMatrix51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 147.10540438746634d + "'", double54 == 147.10540438746634d); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix61); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix68); org.junit.Assert.assertNotNull(realMatrix70); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(blockRealMatrix79); org.junit.Assert.assertNotNull(realVector81); }
public void test4() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test4"); double[] doubleArray4 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray9 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray14 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray19 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray20 = new double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix21 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray20); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix23 = blockRealMatrix21.scalarAdd((-1.0d)); int int24 = blockRealMatrix23.getColumnDimension(); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix25 = blockRealMatrix23.copy(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor27 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double28 = array2DRowRealMatrix26.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27); defaultRealMatrixPreservingVisitor27.visit((int) (short) 10, 0, (double) 0.0f); double double37 = blockRealMatrix23.walkInRowOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27, (int) (short) 1, (int) (short) 1, (int) (short) 0, (int) (short) 1); org.apache.commons.math.linear.RealMatrix realMatrix39 = blockRealMatrix23.scalarMultiply((double) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl41 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix39, 257.0796326794893d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: eigen decomposition of assymetric matrices not supported yet"); } catch (org.apache.commons.math.linear.InvalidMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(blockRealMatrix23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4); org.junit.Assert.assertNotNull(blockRealMatrix25); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(realMatrix39); }
public void test5() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test5"); double[] doubleArray4 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray9 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray14 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray19 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray20 = new double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix21 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray20); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix23 = blockRealMatrix21.scalarAdd((-1.0d)); int int24 = blockRealMatrix23.getColumnDimension(); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix25 = blockRealMatrix23.copy(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor27 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double28 = array2DRowRealMatrix26.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27); defaultRealMatrixPreservingVisitor27.visit((int) (short) 10, 0, (double) 0.0f); double double37 = blockRealMatrix23.walkInRowOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27, (int) (short) 1, (int) (short) 1, (int) (short) 0, (int) (short) 1); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) blockRealMatrix23, (double) (byte) 100); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: eigen decomposition of assymetric matrices not supported yet"); } catch (org.apache.commons.math.linear.InvalidMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(blockRealMatrix23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4); org.junit.Assert.assertNotNull(blockRealMatrix25); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); }
public void test6() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test6"); double[] doubleArray0 = null; org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapTan(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapLog10(); org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) arrayRealVector5); org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapSinhToSelf(); double[] doubleArray14 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray14); double[] doubleArray21 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray21); org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14, doubleArray21); org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector27); org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector27); org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27); org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapSinhToSelf(); org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector27.mapAcosToSelf(); double[] doubleArray38 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray38); double[] doubleArray45 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray45); org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, doubleArray45); org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector51); org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47, arrayRealVector51); org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51); double double56 = arrayRealVector51.getEntry((int) 'a'); double[] doubleArray57 = arrayRealVector51.data; double[] doubleArray63 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray63); double[] doubleArray70 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray70); org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63, doubleArray70); org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector74.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector76); org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector72, arrayRealVector76); org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector76); java.lang.String str80 = arrayRealVector76.toString(); double[] doubleArray81 = arrayRealVector76.getData(); double double82 = arrayRealVector51.getLInfDistance(doubleArray81); org.apache.commons.math.linear.BigMatrix bigMatrix83 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray81); double double84 = arrayRealVector27.getLInfDistance(doubleArray81); org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector2.add(doubleArray81); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl87 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray81, 10156.3731274018d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(realVector3); org.junit.Assert.assertNotNull(realVector6); org.junit.Assert.assertNotNull(realVector7); org.junit.Assert.assertNotNull(realVector8); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix15); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix22); org.junit.Assert.assertNotNull(realVector28); org.junit.Assert.assertNotNull(realVector31); org.junit.Assert.assertNotNull(realVector32); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix39); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix46); org.junit.Assert.assertNotNull(realVector52); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix64); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix71); org.junit.Assert.assertNotNull(realVector77); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0}" + "'", str80, "{0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0}"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(bigMatrix83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5707963267948966d + "'", double84 == 1.5707963267948966d); org.junit.Assert.assertNotNull(realVector85); }
public void test7() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test7"); org.apache.commons.math.linear.RealMatrix realMatrix0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void testDimension1() { RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] { { 1.5 } }); EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); assertEquals(1.5, ed.getRealEigenvalue(0), 1.0e-15); }
public void testDimension2() { RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] { { 59.0, 12.0 }, { 12.0, 66.0 } }); EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); assertEquals(75.0, ed.getRealEigenvalue(0), 1.0e-15); assertEquals(50.0, ed.getRealEigenvalue(1), 1.0e-15); }
public void testDimension3() { RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] { { 39632.0, -4824.0, -16560.0 }, { -4824.0, 8693.0,  7920.0 }, { -16560.0, 7920.0, 17300.0 } }); EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); assertEquals(50000.0, ed.getRealEigenvalue(0), 3.0e-11); assertEquals(12500.0, ed.getRealEigenvalue(1), 3.0e-11); assertEquals( 3125.0, ed.getRealEigenvalue(2), 3.0e-11); }
public void testDimension4WithSplit() { RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] { { 0.784, -0.288, 0.000, 0.000 }, { -0.288, 0.616, 0.000, 0.000 }, { 0.000, 0.000, 0.164, -0.048 }, { 0.000, 0.000, -0.048, 0.136 } }); EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15); assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15); assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15); assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15); }
public void testDimension4WithoutSplit() { RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] { { 0.5608, -0.2016, 0.1152, -0.2976 }, { -0.2016, 0.4432, -0.2304, 0.1152 }, { 0.1152, -0.2304, 0.3088, -0.1344 }, { -0.2976, 0.1152, -0.1344, 0.3872 } }); EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15); assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15); assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15); assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15); }
public void testMath308() { double[] mainTridiagonal = { 22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437 }; double[] secondaryTridiagonal = { 13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225 }; // the reference values have been computed using routine DSTEMR // from the fortran library LAPACK version 3.2.1 double[] refEigenValues = { 82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099 }; RealVector[] refEigenVectors = { new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055, 0.011530080757413, 0.252322434584915, 0.967572088232592 }), new ArrayRealVector(new double[] { 0.314647769490148, 0.750806415553905, -0.167700312025760, -0.537092972407375, 0.143854968127780 }), new ArrayRealVector(new double[] { 0.222368839324646, 0.514921891363332, -0.021377019336614, 0.801196801016305, -0.207446991247740 }), new ArrayRealVector(new double[] { 0.713933751051495, -0.190582113553930, 0.671410443368332, -0.056056055955050, 0.006541576993581 }), new ArrayRealVector(new double[] { 0.584677060845929, -0.367177264979103, -0.721453187784497, 0.052971054621812, -0.005740715188257 }) }; EigenDecomposition decomposition = new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN); double[] eigenValues = decomposition.getRealEigenvalues(); for (int i = 0; i < refEigenValues.length; ++i) { assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5); assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7); } }
public void testMathpbx02() { double[] mainTridiagonal = { 7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159 }; double[] secondaryTridiagonal = { -4175.088570476366,1975.7955858241994,5193.178422374075, 1995.286659169179,75.34535882933804,-234.0808002076056 }; // the reference values have been computed using routine DSTEMR // from the fortran library LAPACK version 3.2.1 double[] refEigenValues = { 20654.744890306974412,16828.208208485466457, 6893.155912634994820,6757.083016675340332, 5887.799885688558788,64.309089923240379, 57.992628792736340 }; RealVector[] refEigenVectors = { new ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}), new ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}), new ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}), new ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}), new ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}), new ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}), new ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958}) }; // the following line triggers the exception EigenDecomposition decomposition = new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN); double[] eigenValues = decomposition.getRealEigenvalues(); for (int i = 0; i < refEigenValues.length; ++i) { assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3); if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) { assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5); } else { assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5); } } }
public void testTridiagonal() { Random r = new Random(4366663527842l); double[] ref = new double[30]; for (int i = 0; i < ref.length; ++i) { if (i < 5) { ref[i] = 2 * r.nextDouble() - 1; } else { ref[i] = 0.0001 * r.nextDouble() + 6; } } Arrays.sort(ref); TriDiagonalTransformer t = new TriDiagonalTransformer(createTestMatrix(r, ref)); EigenDecomposition ed = new EigenDecompositionImpl(t.getMainDiagonalRef(), t.getSecondaryDiagonalRef(), MathUtils.SAFE_MIN); double[] eigenValues = ed.getRealEigenvalues(); assertEquals(ref.length, eigenValues.length); for (int i = 0; i < ref.length; ++i) { assertEquals(ref[ref.length - i - 1], eigenValues[i], 2.0e-14); } }
public void testDimensions() { final int m = matrix.getRowDimension(); EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); assertEquals(m, ed.getV().getRowDimension()); assertEquals(m, ed.getV().getColumnDimension()); assertEquals(m, ed.getD().getColumnDimension()); assertEquals(m, ed.getD().getColumnDimension()); assertEquals(m, ed.getVT().getRowDimension()); assertEquals(m, ed.getVT().getColumnDimension()); }
public void testEigenvalues() { EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); double[] eigenValues = ed.getRealEigenvalues(); assertEquals(refValues.length, eigenValues.length); for (int i = 0; i < refValues.length; ++i) { assertEquals(refValues[i], eigenValues[i], 3.0e-15); } }
public void testBigMatrix() { Random r = new Random(17748333525117l); double[] bigValues = new double[200]; for (int i = 0; i < bigValues.length; ++i) { bigValues[i] = 2 * r.nextDouble() - 1; } Arrays.sort(bigValues); EigenDecomposition ed = new EigenDecompositionImpl(createTestMatrix(r, bigValues), MathUtils.SAFE_MIN); double[] eigenValues = ed.getRealEigenvalues(); assertEquals(bigValues.length, eigenValues.length); for (int i = 0; i < bigValues.length; ++i) { assertEquals(bigValues[bigValues.length - i - 1], eigenValues[i], 2.0e-14); } }
public void testEigenvectors() { EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); for (int i = 0; i < matrix.getRowDimension(); ++i) { double lambda = ed.getRealEigenvalue(i); RealVector v = ed.getEigenvector(i); RealVector mV = matrix.operate(v); assertEquals(0, mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(), 1.0e-13); } }
public void testAEqualVDVt() { EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN); RealMatrix v = ed.getV(); RealMatrix d = ed.getD(); RealMatrix vT = ed.getVT(); double norm = v.multiply(d).multiply(vT).subtract(matrix).getNorm(); assertEquals(0, norm, 6.0e-13); }
public void testVOrthogonal() { RealMatrix v = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getV(); RealMatrix vTv = v.transpose().multiply(v); RealMatrix id = MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension()); assertEquals(0, vTv.subtract(id).getNorm(), 2.0e-13); }
public void testDiagonal() { double[] diagonal = new double[] { -3.0, -2.0, 2.0, 5.0 }; RealMatrix m = createDiagonalMatrix(diagonal, diagonal.length, diagonal.length); EigenDecomposition ed = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN); assertEquals(diagonal[0], ed.getRealEigenvalue(3), 2.0e-15); assertEquals(diagonal[1], ed.getRealEigenvalue(2), 2.0e-15); assertEquals(diagonal[2], ed.getRealEigenvalue(1), 2.0e-15); assertEquals(diagonal[3], ed.getRealEigenvalue(0), 2.0e-15); }
public void testRepeatedEigenvalue() { RealMatrix repeated = MatrixUtils.createRealMatrix(new double[][] { {3, 2, 4}, {2, 0, 2}, {4, 2, 3} }); EigenDecomposition ed = new EigenDecompositionImpl(repeated, MathUtils.SAFE_MIN); checkEigenValues((new double[] {8, -1, -1}), ed, 1E-12); checkEigenVector((new double[] {2, 1, 2}), ed, 1E-12); }
public void testDistinctEigenvalues() { RealMatrix distinct = MatrixUtils.createRealMatrix(new double[][] { {3, 1, -4}, {1, 3, -4}, {-4, -4, 8} }); EigenDecomposition ed = new EigenDecompositionImpl(distinct, MathUtils.SAFE_MIN); checkEigenValues((new double[] {2, 0, 12}), ed, 1E-12); checkEigenVector((new double[] {1, -1, 0}), ed, 1E-12); checkEigenVector((new double[] {1, 1, 1}), ed, 1E-12); checkEigenVector((new double[] {-1, -1, 2}), ed, 1E-12); }
public void testZeroDivide() { RealMatrix indefinite = MatrixUtils.createRealMatrix(new double [][] { { 0.0, 1.0, -1.0 }, { 1.0, 1.0, 0.0 }, { -1.0,0.0, 1.0 } }); EigenDecomposition ed = new EigenDecompositionImpl(indefinite, MathUtils.SAFE_MIN); checkEigenValues((new double[] {2, 1, -1}), ed, 1E-12); double isqrt3 = 1/Math.sqrt(3.0); checkEigenVector((new double[] {isqrt3,isqrt3,-isqrt3}), ed, 1E-12); double isqrt2 = 1/Math.sqrt(2.0); checkEigenVector((new double[] {0.0,-isqrt2,-isqrt2}), ed, 1E-12); double isqrt6 = 1/Math.sqrt(6.0); checkEigenVector((new double[] {2*isqrt6,-isqrt6,isqrt6}), ed, 1E-12); }
public void test00() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getImagEigenvalues(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test01() throws Throwable { double[] doubleArray0 = new double[7]; double[] doubleArray1 = new double[6]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getImagEigenvalue(4); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test02() throws Throwable { double[] doubleArray0 = new double[5]; double[] doubleArray1 = new double[4]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 803.3665746684667); try { eigenDecompositionImpl0.getRealEigenvalue(15); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 15 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test03() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues(); assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01); }
public void test04() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-170.7654829726584); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.2737367544323206E-13); RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT(); EigenDecompositionImpl eigenDecompositionImpl1 = null; try { eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, 2.2737367544323206E-13); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // eigen decomposition of assymetric matrices not supported yet // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test05() throws Throwable { Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(7, 7); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.01); eigenDecompositionImpl0.getSolver(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test06() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.687093060298816E-5); RealMatrix realMatrix0 = eigenDecompositionImpl0.getV(); RealMatrix realMatrix1 = eigenDecompositionImpl0.getV(); assertSame(realMatrix1, realMatrix0); }
public void test07() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getVT(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getV(); assertNotNull(realMatrix0); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test08() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.01); eigenDecompositionImpl0.getD(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getD(); assertNotNull(realMatrix0); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test09() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.687093060298816E-5); eigenDecompositionImpl0.getVT(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT(); assertEquals(9, realMatrix0.getRowDimension()); }
public void test10() throws Throwable { double[] doubleArray0 = new double[5]; double[] doubleArray1 = new double[4]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.2250738585072014E-308); eigenDecompositionImpl0.getV(); eigenDecompositionImpl0.getVT(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test11() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getVT(); try { eigenDecompositionImpl0.getEigenvector((-2135080985)); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // -2135080985 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test12() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 406.2); double double0 = eigenDecompositionImpl0.getDeterminant(); assertEquals(0.0, double0, 0.01); }
public void test13() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getV(); eigenDecompositionImpl0.getSolver(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test14() throws Throwable { double[] doubleArray0 = new double[8]; double[] doubleArray1 = new double[7]; doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 3.410605131648481E-13; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test15() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-202.64925544825113); doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-0.09008844494431112); doubleArray0[6] = (-202.64925544825113); doubleArray1[5] = (-0.09008844494431112); doubleArray1[4] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test16() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[3] = 1.01; double[] doubleArray1 = new double[7]; doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 3.410605131648481E-13; EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // cannot solve degree 3 equation // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test17() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[7] = Double.POSITIVE_INFINITY; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test18() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[4] = (-2603.394267030449); doubleArray0[8] = 1.0; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test19() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test20() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-1.108648285134908); doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 3.410605131648481E-13; doubleArray1[3] = 3.410605131648481E-13; doubleArray1[4] = (-1.108648285134908); doubleArray0[2] = (-1.108648285134908); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test21() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-201.10392); doubleArray1[2] = 1.0; doubleArray1[3] = 1.0; doubleArray1[4] = (-2539.759); doubleArray1[5] = 1.0; doubleArray1[6] = (-0.09008844494431112); doubleArray1[7] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 26.136011386914); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test22() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-2213.4096026790276); doubleArray1[1] = (-2213.4096026790276); doubleArray1[2] = 3.410605131648481E-13; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test23() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = (-0.09008844494431112); doubleArray1[4] = (-0.09008844494431112); doubleArray1[5] = (-201.103921322); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test24() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test25() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[0] = 1.01; double[] doubleArray1 = new double[7]; EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test26() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray0[1] = (-15.59181797673864); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test27() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-0.09008844494431112); doubleArray1[4] = (-0.09008844494431112); doubleArray1[5] = 471.339498229886; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test28() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[0] = (-2612.22); double[] doubleArray1 = new double[7]; doubleArray1[0] = (-170.7654829726584); doubleArray1[4] = (-2612.22); doubleArray1[5] = (-2612.22); doubleArray1[6] = (-2612.22); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test29() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = 1.01; doubleArray1[1] = 1.01; doubleArray1[2] = 1.01; doubleArray1[3] = 5.471965115771437E-17; doubleArray1[4] = 1.01; doubleArray0[4] = 1.01; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.01); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test30() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = 3.410605131648481E-13; doubleArray1[4] = 3.410605131648481E-13; doubleArray1[5] = (-5.319412868447537); doubleArray1[6] = (-5.319412868447537); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test31() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray0[2] = (-170.765482973); doubleArray1[2] = 1.0; doubleArray1[3] = 1.0; doubleArray1[4] = 1.01; doubleArray1[5] = (-170.765482973); doubleArray1[6] = (-170.765482973); doubleArray1[7] = 1.0; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.0); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test32() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = 1.01; doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 1.01; doubleArray1[3] = 1.01; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test33() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = 12.640182123527975; doubleArray1[4] = 12.640182123527975; doubleArray1[5] = 98.3; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-303.9890651896)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test34() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[2] = 3.410605131648481E-13; doubleArray1[3] = 3.410605131648481E-13; doubleArray1[4] = 3.410605131648481E-13; doubleArray1[5] = (-5.319412868447537); doubleArray1[6] = (-5.319412868447537); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test35() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = 0.5078312498701947; doubleArray1[3] = (-201.1039213218493); doubleArray1[4] = 0.5078312498701947; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-201.1039213218493)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test36() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = (-201.1039213218493); doubleArray1[3] = (-201.1039213218493); doubleArray1[4] = (-201.1039213218493); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-201.1039213218493)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test37() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-0.09008844494431112); doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-0.09008844494431112); doubleArray1[4] = (-201.1039213218493); doubleArray1[5] = (-201.1039213218493); doubleArray1[6] = (-201.1039213218493); doubleArray1[7] = (-201.1039213218493); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.09008844494431112)); assertEquals((-0.030517008183662656), eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test38() throws Throwable { double[] doubleArray0 = new double[8]; double[] doubleArray1 = new double[7]; doubleArray1[0] = (-0.09008844494431112); doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-926.0274196792); doubleArray1[4] = (-0.09008844494431112); doubleArray1[5] = (-201.1039213218493); doubleArray1[6] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 806.556); assertEquals(4.350725041752126E-9, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test39() throws Throwable { double[] doubleArray0 = new double[1]; doubleArray0[0] = 406.2; double[] doubleArray1 = new double[0]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2612.22)); try { eigenDecompositionImpl0.getEigenvector(15); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 15 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
