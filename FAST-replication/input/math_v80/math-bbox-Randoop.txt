public void test1() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test1"); double[] doubleArray5 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray5); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl8 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix6, (double) 100L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 5x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix6); }
public void test2() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test2"); double[] doubleArray5 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray12); org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, doubleArray12); org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray5); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix16 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray5); double[][] doubleArray17 = array2DRowRealMatrix16.getDataRef(); double[] doubleArray23 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray23); double[] doubleArray30 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30); org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, doubleArray30); org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray23); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix34 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray23); double[][] doubleArray35 = array2DRowRealMatrix34.getDataRef(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix36 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor37 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double38 = array2DRowRealMatrix36.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor37); double double39 = defaultRealMatrixPreservingVisitor37.end(); double double40 = array2DRowRealMatrix34.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor37); double[] doubleArray46 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46); double[] doubleArray53 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray53); org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46, doubleArray53); org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix57 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray46); double[][] doubleArray58 = array2DRowRealMatrix57.getDataRef(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix59 = array2DRowRealMatrix34.add(array2DRowRealMatrix57); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix60 = array2DRowRealMatrix16.subtract(array2DRowRealMatrix59); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl62 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix60, (double) 10.0f); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 5x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix6); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix13); org.junit.Assert.assertNotNull(realMatrix15); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix24); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix31); org.junit.Assert.assertNotNull(realMatrix33); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix47); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix54); org.junit.Assert.assertNotNull(realMatrix56); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertNotNull(array2DRowRealMatrix59); org.junit.Assert.assertNotNull(array2DRowRealMatrix60); }
public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); double[] doubleArray4 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray9 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray14 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray19 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray20 = new double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix21 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray20); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix23 = blockRealMatrix21.scalarAdd((-1.0d)); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix24 = blockRealMatrix21.transpose(); int int25 = blockRealMatrix24.getColumnDimension(); org.apache.commons.math.linear.RealVector realVector27 = blockRealMatrix24.getRowVector(1); double[] doubleArray32 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray37 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray42 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray47 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray37, doubleArray42, doubleArray47 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix49 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray48); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix51 = blockRealMatrix49.scalarAdd((-1.0d)); double double52 = blockRealMatrix49.getDeterminant(); org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible((org.apache.commons.math.linear.AnyMatrix) blockRealMatrix24, (org.apache.commons.math.linear.AnyMatrix) blockRealMatrix49); double double54 = blockRealMatrix24.getFrobeniusNorm(); double[] doubleArray60 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray60); double[] doubleArray67 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray67); org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60, doubleArray67); org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray60); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix71 = new org.apache.commons.math.linear.Array2DRowRealMatrix(doubleArray60); double[][] doubleArray72 = array2DRowRealMatrix71.getDataRef(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix73 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor74 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double75 = array2DRowRealMatrix73.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor74); double double76 = defaultRealMatrixPreservingVisitor74.end(); double double77 = array2DRowRealMatrix71.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor74); double double78 = blockRealMatrix24.walkInOptimizedOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor74); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix79 = blockRealMatrix24.copy(); org.apache.commons.math.linear.RealVector realVector81 = blockRealMatrix24.getColumnVector((int) (short) 0); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl83 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) blockRealMatrix24, 106.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: eigen decomposition of assymetric matrices not supported yet"); } catch (org.apache.commons.math.linear.InvalidMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(blockRealMatrix23); org.junit.Assert.assertNotNull(blockRealMatrix24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4); org.junit.Assert.assertNotNull(realVector27); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertNotNull(blockRealMatrix51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 147.10540438746634d + "'", double54 == 147.10540438746634d); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix61); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix68); org.junit.Assert.assertNotNull(realMatrix70); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(blockRealMatrix79); org.junit.Assert.assertNotNull(realVector81); }
public void test4() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test4"); double[] doubleArray4 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray9 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray14 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray19 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray20 = new double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix21 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray20); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix23 = blockRealMatrix21.scalarAdd((-1.0d)); int int24 = blockRealMatrix23.getColumnDimension(); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix25 = blockRealMatrix23.copy(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor27 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double28 = array2DRowRealMatrix26.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27); defaultRealMatrixPreservingVisitor27.visit((int) (short) 10, 0, (double) 0.0f); double double37 = blockRealMatrix23.walkInRowOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27, (int) (short) 1, (int) (short) 1, (int) (short) 0, (int) (short) 1); org.apache.commons.math.linear.RealMatrix realMatrix39 = blockRealMatrix23.scalarMultiply((double) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl41 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix39, 257.0796326794893d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: eigen decomposition of assymetric matrices not supported yet"); } catch (org.apache.commons.math.linear.InvalidMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(blockRealMatrix23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4); org.junit.Assert.assertNotNull(blockRealMatrix25); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(realMatrix39); }
public void test5() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test5"); double[] doubleArray4 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray9 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray14 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[] doubleArray19 = new double[] { (-1.0d), 52, 52, (-1.0f) }; double[][] doubleArray20 = new double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 }; org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix21 = new org.apache.commons.math.linear.BlockRealMatrix(doubleArray20); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix23 = blockRealMatrix21.scalarAdd((-1.0d)); int int24 = blockRealMatrix23.getColumnDimension(); org.apache.commons.math.linear.BlockRealMatrix blockRealMatrix25 = blockRealMatrix23.copy(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(); org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor27 = new org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor(); double double28 = array2DRowRealMatrix26.walkInColumnOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27); defaultRealMatrixPreservingVisitor27.visit((int) (short) 10, 0, (double) 0.0f); double double37 = blockRealMatrix23.walkInRowOrder((org.apache.commons.math.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor27, (int) (short) 1, (int) (short) 1, (int) (short) 0, (int) (short) 1); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) blockRealMatrix23, (double) (byte) 100); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: eigen decomposition of assymetric matrices not supported yet"); } catch (org.apache.commons.math.linear.InvalidMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 52.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(blockRealMatrix23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4); org.junit.Assert.assertNotNull(blockRealMatrix25); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); }
public void test6() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test6"); double[] doubleArray0 = null; org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapTan(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapLog10(); org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) arrayRealVector5); org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapSinhToSelf(); double[] doubleArray14 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray14); double[] doubleArray21 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray21); org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14, doubleArray21); org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector27); org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector27); org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27); org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapSinhToSelf(); org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector27.mapAcosToSelf(); double[] doubleArray38 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray38); double[] doubleArray45 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray45); org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, doubleArray45); org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector51); org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47, arrayRealVector51); org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51); double double56 = arrayRealVector51.getEntry((int) 'a'); double[] doubleArray57 = arrayRealVector51.data; double[] doubleArray63 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray63); double[] doubleArray70 = new double[] { (short) 1, 100, (short) 0, 0.0d, (short) 10 }; org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray70); org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63, doubleArray70); org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(100); org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector74.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector76); org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector72, arrayRealVector76); org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector76); java.lang.String str80 = arrayRealVector76.toString(); double[] doubleArray81 = arrayRealVector76.getData(); double double82 = arrayRealVector51.getLInfDistance(doubleArray81); org.apache.commons.math.linear.BigMatrix bigMatrix83 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray81); double double84 = arrayRealVector27.getLInfDistance(doubleArray81); org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector2.add(doubleArray81); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl87 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray81, 10156.3731274018d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(realVector3); org.junit.Assert.assertNotNull(realVector6); org.junit.Assert.assertNotNull(realVector7); org.junit.Assert.assertNotNull(realVector8); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix15); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix22); org.junit.Assert.assertNotNull(realVector28); org.junit.Assert.assertNotNull(realVector31); org.junit.Assert.assertNotNull(realVector32); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix39); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix46); org.junit.Assert.assertNotNull(realVector52); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix64); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0, 0.0, 0.0, 10.0]"); org.junit.Assert.assertNotNull(realMatrix71); org.junit.Assert.assertNotNull(realVector77); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0}" + "'", str80, "{0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0}"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(bigMatrix83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5707963267948966d + "'", double84 == 1.5707963267948966d); org.junit.Assert.assertNotNull(realVector85); }
public void test7() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test7"); org.apache.commons.math.linear.RealMatrix realMatrix0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
