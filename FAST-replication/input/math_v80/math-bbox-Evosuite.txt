public void test00() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getImagEigenvalues(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test01() throws Throwable { double[] doubleArray0 = new double[7]; double[] doubleArray1 = new double[6]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getImagEigenvalue(4); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test02() throws Throwable { double[] doubleArray0 = new double[5]; double[] doubleArray1 = new double[4]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 803.3665746684667); try { eigenDecompositionImpl0.getRealEigenvalue(15); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 15 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test03() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues(); assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01); }
public void test04() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-170.7654829726584); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.2737367544323206E-13); RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT(); EigenDecompositionImpl eigenDecompositionImpl1 = null; try { eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, 2.2737367544323206E-13); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // eigen decomposition of assymetric matrices not supported yet // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test05() throws Throwable { Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(7, 7); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.01); eigenDecompositionImpl0.getSolver(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test06() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.687093060298816E-5); RealMatrix realMatrix0 = eigenDecompositionImpl0.getV(); RealMatrix realMatrix1 = eigenDecompositionImpl0.getV(); assertSame(realMatrix1, realMatrix0); }
public void test07() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getVT(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getV(); assertNotNull(realMatrix0); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test08() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.01); eigenDecompositionImpl0.getD(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getD(); assertNotNull(realMatrix0); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test09() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.687093060298816E-5); eigenDecompositionImpl0.getVT(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT(); assertEquals(9, realMatrix0.getRowDimension()); }
public void test10() throws Throwable { double[] doubleArray0 = new double[5]; double[] doubleArray1 = new double[4]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.2250738585072014E-308); eigenDecompositionImpl0.getV(); eigenDecompositionImpl0.getVT(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test11() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getVT(); try { eigenDecompositionImpl0.getEigenvector((-2135080985)); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // -2135080985 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test12() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 406.2); double double0 = eigenDecompositionImpl0.getDeterminant(); assertEquals(0.0, double0, 0.01); }
public void test13() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); eigenDecompositionImpl0.getV(); eigenDecompositionImpl0.getSolver(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test14() throws Throwable { double[] doubleArray0 = new double[8]; double[] doubleArray1 = new double[7]; doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 3.410605131648481E-13; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test15() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-202.64925544825113); doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-0.09008844494431112); doubleArray0[6] = (-202.64925544825113); doubleArray1[5] = (-0.09008844494431112); doubleArray1[4] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test16() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[3] = 1.01; double[] doubleArray1 = new double[7]; doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 3.410605131648481E-13; EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // cannot solve degree 3 equation // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test17() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[7] = Double.POSITIVE_INFINITY; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0); assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test18() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[4] = (-2603.394267030449); doubleArray0[8] = 1.0; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test19() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test20() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-1.108648285134908); doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 3.410605131648481E-13; doubleArray1[3] = 3.410605131648481E-13; doubleArray1[4] = (-1.108648285134908); doubleArray0[2] = (-1.108648285134908); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test21() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-201.10392); doubleArray1[2] = 1.0; doubleArray1[3] = 1.0; doubleArray1[4] = (-2539.759); doubleArray1[5] = 1.0; doubleArray1[6] = (-0.09008844494431112); doubleArray1[7] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 26.136011386914); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test22() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-2213.4096026790276); doubleArray1[1] = (-2213.4096026790276); doubleArray1[2] = 3.410605131648481E-13; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test23() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = (-0.09008844494431112); doubleArray1[4] = (-0.09008844494431112); doubleArray1[5] = (-201.103921322); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test24() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test25() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[0] = 1.01; double[] doubleArray1 = new double[7]; EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test26() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray0[1] = (-15.59181797673864); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test27() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-0.09008844494431112); doubleArray1[4] = (-0.09008844494431112); doubleArray1[5] = 471.339498229886; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test28() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[0] = (-2612.22); double[] doubleArray1 = new double[7]; doubleArray1[0] = (-170.7654829726584); doubleArray1[4] = (-2612.22); doubleArray1[5] = (-2612.22); doubleArray1[6] = (-2612.22); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test29() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = 1.01; doubleArray1[1] = 1.01; doubleArray1[2] = 1.01; doubleArray1[3] = 5.471965115771437E-17; doubleArray1[4] = 1.01; doubleArray0[4] = 1.01; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.01); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test30() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = 3.410605131648481E-13; doubleArray1[4] = 3.410605131648481E-13; doubleArray1[5] = (-5.319412868447537); doubleArray1[6] = (-5.319412868447537); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test31() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray0[2] = (-170.765482973); doubleArray1[2] = 1.0; doubleArray1[3] = 1.0; doubleArray1[4] = 1.01; doubleArray1[5] = (-170.765482973); doubleArray1[6] = (-170.765482973); doubleArray1[7] = 1.0; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.0); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test32() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = 1.01; doubleArray1[1] = 3.410605131648481E-13; doubleArray1[2] = 1.01; doubleArray1[3] = 1.01; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test33() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[3] = 12.640182123527975; doubleArray1[4] = 12.640182123527975; doubleArray1[5] = 98.3; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-303.9890651896)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test34() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[2] = 3.410605131648481E-13; doubleArray1[3] = 3.410605131648481E-13; doubleArray1[4] = 3.410605131648481E-13; doubleArray1[5] = (-5.319412868447537); doubleArray1[6] = (-5.319412868447537); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3.410605131648481E-13); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test35() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = 0.5078312498701947; doubleArray1[3] = (-201.1039213218493); doubleArray1[4] = 0.5078312498701947; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-201.1039213218493)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test36() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = (-201.1039213218493); doubleArray1[3] = (-201.1039213218493); doubleArray1[4] = (-201.1039213218493); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-201.1039213218493)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test37() throws Throwable { double[] doubleArray0 = new double[9]; double[] doubleArray1 = new double[8]; doubleArray1[0] = (-0.09008844494431112); doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-0.09008844494431112); doubleArray1[4] = (-201.1039213218493); doubleArray1[5] = (-201.1039213218493); doubleArray1[6] = (-201.1039213218493); doubleArray1[7] = (-201.1039213218493); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.09008844494431112)); assertEquals((-0.030517008183662656), eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test38() throws Throwable { double[] doubleArray0 = new double[8]; double[] doubleArray1 = new double[7]; doubleArray1[0] = (-0.09008844494431112); doubleArray1[1] = (-201.1039213218493); doubleArray1[2] = (-0.09008844494431112); doubleArray1[3] = (-926.0274196792); doubleArray1[4] = (-0.09008844494431112); doubleArray1[5] = (-201.1039213218493); doubleArray1[6] = (-0.09008844494431112); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 806.556); assertEquals(4.350725041752126E-9, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test39() throws Throwable { double[] doubleArray0 = new double[1]; doubleArray0[0] = 406.2; double[] doubleArray1 = new double[0]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2612.22)); try { eigenDecompositionImpl0.getEigenvector(15); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 15 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
