public void test02() throws Throwable { MersenneTwister mersenneTwister0 = new MersenneTwister(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, (-102), mersenneTwister0); // Undeclared exception! try { multiStartUnivariateRealOptimizer0.getRelativeAccuracy(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test03() throws Throwable { JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 135, jDKRandomGenerator0); // Undeclared exception! try { multiStartUnivariateRealOptimizer0.setAbsoluteAccuracy(910.0); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test04() throws Throwable { JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 0, jDKRandomGenerator0); // Undeclared exception! try { multiStartUnivariateRealOptimizer0.getAbsoluteAccuracy(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test05() throws Throwable { JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 135, jDKRandomGenerator0); int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations(); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaximalIterationCount()); assertEquals(0, multiStartUnivariateRealOptimizer0.getIterationCount()); assertEquals(Integer.MAX_VALUE, int0); }
public void test06() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); MersenneTwister mersenneTwister0 = new MersenneTwister(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-1), mersenneTwister0); // Undeclared exception! try { multiStartUnivariateRealOptimizer0.getResult(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test07() throws Throwable { JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 135, jDKRandomGenerator0); // Undeclared exception! try { multiStartUnivariateRealOptimizer0.resetRelativeAccuracy(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test10() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); MersenneTwister mersenneTwister0 = new MersenneTwister(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-1), mersenneTwister0); multiStartUnivariateRealOptimizer0.resetMaximalIterationCount(); assertEquals(0, multiStartUnivariateRealOptimizer0.getIterationCount()); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaximalIterationCount()); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaxEvaluations()); }
public void test11() throws Throwable { MersenneTwister mersenneTwister0 = new MersenneTwister(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer((UnivariateRealOptimizer) null, 905, mersenneTwister0); // Undeclared exception! try { multiStartUnivariateRealOptimizer0.resetAbsoluteAccuracy(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test13() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); MersenneTwister mersenneTwister0 = new MersenneTwister((long) (-1086)); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-1086), mersenneTwister0); try { multiStartUnivariateRealOptimizer0.getOptima(); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // no optimum computed yet // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test14() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); doReturn(0, 0, 0, 0, 0).when(univariateRealOptimizer0).getIterationCount(); doReturn(0, 0, 0, 0, 0).when(univariateRealOptimizer0).getEvaluations(); doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateRealOptimizer0).getFunctionValue(); doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble()); JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 209, jDKRandomGenerator0); assertEquals(0, multiStartUnivariateRealOptimizer0.getIterationCount()); double[] doubleArray0 = new double[3]; PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0); GoalType goalType0 = GoalType.MINIMIZE; multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 209.0, (double) 209); double[] doubleArray1 = multiStartUnivariateRealOptimizer0.getOptimaValues(); assertEquals(209, doubleArray1.length); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaximalIterationCount()); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaxEvaluations()); }
public void test15() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 209, jDKRandomGenerator0); try { multiStartUnivariateRealOptimizer0.getOptimaValues(); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // no optimum computed yet // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test16() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); doReturn((-2116), (-2116), (-2116), (-2116), 1358).when(univariateRealOptimizer0).getIterationCount(); doReturn(1358, 1106, 1106, (-2116), (-4466)).when(univariateRealOptimizer0).getEvaluations(); doReturn(2669.8936, (double)1106, 1483.0, 2669.8936, (double)1358).when(univariateRealOptimizer0).getFunctionValue(); doReturn(1483.0, (double)(-4466), 480.1, 2669.8936, Double.NaN).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble()); MersenneTwister mersenneTwister0 = new MersenneTwister((-4885)); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 50, mersenneTwister0); double[] doubleArray0 = new double[2]; PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0); GoalType goalType0 = GoalType.MINIMIZE; // Undeclared exception! try { multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, (double) 50, (-4885.0), (-1.0)); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 50 // verifyException("org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer", e); } }
public void test00() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); MersenneTwister mersenneTwister0 = new MersenneTwister(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 1, mersenneTwister0); multiStartUnivariateRealOptimizer0.setRelativeAccuracy(1); assertEquals(0, multiStartUnivariateRealOptimizer0.getIterationCount()); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaximalIterationCount()); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaxEvaluations()); }
public void test01() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); MersenneTwister mersenneTwister0 = new MersenneTwister((-1590)); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, (-1590), mersenneTwister0); int int0 = multiStartUnivariateRealOptimizer0.getMaximalIterationCount(); assertEquals(Integer.MAX_VALUE, int0); assertEquals(0, multiStartUnivariateRealOptimizer0.getIterationCount()); assertEquals(Integer.MAX_VALUE, multiStartUnivariateRealOptimizer0.getMaxEvaluations()); }
public void test08() throws Throwable { MersenneTwister mersenneTwister0 = new MersenneTwister(1005); UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); doReturn(0, 0, 0, 0, 0).when(univariateRealOptimizer0).getIterationCount(); doReturn(0, 0, 0, 0, 0).when(univariateRealOptimizer0).getEvaluations(); doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateRealOptimizer0).getFunctionValue(); doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble()); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 15, mersenneTwister0); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer(multiStartUnivariateRealOptimizer0, 1005, mersenneTwister0); double[] doubleArray0 = new double[4]; PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0); GoalType goalType0 = GoalType.MAXIMIZE; // Undeclared exception! multiStartUnivariateRealOptimizer1.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-1151.9267071), (double) 1005); }
public void test09() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); doReturn(0, 905, 0, 0, 905).when(univariateRealOptimizer0).getIterationCount(); doReturn(905, 0, 0, (-313), (-313)).when(univariateRealOptimizer0).getEvaluations(); doReturn(1.0, (double)0, (double)(-313), (double)905, (double)905).when(univariateRealOptimizer0).getFunctionValue(); doReturn(531.728, (double)0, 1.0, 1.0, (double)905).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble()); MersenneTwister mersenneTwister0 = new MersenneTwister((-4885)); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 50, mersenneTwister0); double[] doubleArray0 = new double[2]; PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0); GoalType goalType0 = GoalType.MAXIMIZE; double double0 = multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-4885.0), (double) (-4885), (double) 50); assertEquals(42535, multiStartUnivariateRealOptimizer0.getIterationCount()); assertEquals(905.0, double0, 0.01); }
public void test12() throws Throwable { UnivariateRealOptimizer univariateRealOptimizer0 = mock(UnivariateRealOptimizer.class, new ViolatedAssumptionAnswer()); doReturn(2054, 2054, 79, 79, 136).when(univariateRealOptimizer0).getIterationCount(); doReturn((-3931), Integer.MAX_VALUE, 79, 2054, 136).when(univariateRealOptimizer0).getEvaluations(); doReturn((double)136, (double)(-3931), Double.NaN, (double)2054, (double)136).when(univariateRealOptimizer0).getFunctionValue(); doReturn(0.0, 0.0, (double)Integer.MAX_VALUE, (-300.9589499221601), (-149.607)).when(univariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.UnivariateRealFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble()); JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator(); MultiStartUnivariateRealOptimizer multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer(univariateRealOptimizer0, 209, jDKRandomGenerator0); double[] doubleArray0 = new double[3]; PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0); GoalType goalType0 = GoalType.MINIMIZE; multiStartUnivariateRealOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 209.0, (double) 209); multiStartUnivariateRealOptimizer0.getOptima(); assertEquals((-2147457567), multiStartUnivariateRealOptimizer0.getEvaluations()); }
