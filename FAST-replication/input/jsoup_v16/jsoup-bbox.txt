public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", "", "hi!=\"\"", "#root"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document.OutputSettings outputSettings7 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) (short) 10, outputSettings7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.StringBuilder stringBuilder13 = null; org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode17.setBaseUri(""); java.lang.String str20 = textNode17.getWholeText(); textNode17.setSiblingIndex(100); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings(); textNode17.outerHtmlTail(stringBuilder23, 100, outputSettings25); org.jsoup.nodes.Entities.EscapeMode escapeMode27 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.escapeMode(escapeMode27); org.jsoup.nodes.Entities.EscapeMode escapeMode29 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.escapeMode(escapeMode29); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings28.prettyPrint(true); textNode10.outerHtmlTail(stringBuilder13, (int) 'a', outputSettings32); org.jsoup.nodes.TextNode textNode36 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode36.setBaseUri(""); java.lang.String str39 = textNode36.getWholeText(); textNode36.setSiblingIndex(100); java.lang.StringBuilder stringBuilder42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings(); textNode36.outerHtmlTail(stringBuilder42, 100, outputSettings44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.escapeMode(escapeMode46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); java.nio.charset.Charset charset50 = outputSettings47.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings32.charset(charset50); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder6, (int) (short) 1, outputSettings32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertNotNull(textNode17); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(textNode36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charset50); org.junit.Assert.assertNotNull(outputSettings51); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document.OutputSettings outputSettings7 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) ' ', outputSettings7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.TextNode textNode50 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode50.setBaseUri(""); java.lang.String str53 = textNode50.getWholeText(); textNode50.setSiblingIndex(100); java.lang.StringBuilder stringBuilder56 = null; org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings(); textNode50.outerHtmlTail(stringBuilder56, 100, outputSettings58); org.jsoup.nodes.Entities.EscapeMode escapeMode60 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings58.escapeMode(escapeMode60); java.nio.charset.Charset charset62 = outputSettings58.charset(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder46, (int) (short) 100, outputSettings58); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(textNode50); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings61); org.junit.Assert.assertNotNull(charset62); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.clone(); documentType4.outerHtmlTail(stringBuilder6, (int) (byte) 10, outputSettings18); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.TextNode textNode29 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode29.setBaseUri(""); java.lang.StringBuilder stringBuilder32 = null; org.jsoup.nodes.TextNode textNode36 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode36.setBaseUri(""); java.lang.String str39 = textNode36.getWholeText(); textNode36.setSiblingIndex(100); java.lang.StringBuilder stringBuilder42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings(); textNode36.outerHtmlTail(stringBuilder42, 100, outputSettings44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.escapeMode(escapeMode46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings47.prettyPrint(true); textNode29.outerHtmlTail(stringBuilder32, (int) 'a', outputSettings51); org.jsoup.nodes.TextNode textNode55 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode55.setBaseUri(""); java.lang.String str58 = textNode55.getWholeText(); textNode55.setSiblingIndex(100); java.lang.StringBuilder stringBuilder61 = null; org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings(); textNode55.outerHtmlTail(stringBuilder61, 100, outputSettings63); org.jsoup.nodes.Entities.EscapeMode escapeMode65 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings63.escapeMode(escapeMode65); org.jsoup.nodes.Entities.EscapeMode escapeMode67 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.escapeMode(escapeMode67); java.nio.charset.Charset charset69 = outputSettings66.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings51.charset(charset69); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder25, 0, outputSettings70); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(textNode29); org.junit.Assert.assertNotNull(textNode36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(textNode55); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertNotNull(charset69); org.junit.Assert.assertNotNull(outputSettings70); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode2.setBaseUri(""); java.lang.String str5 = textNode2.getWholeText(); textNode2.setSiblingIndex(100); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); textNode2.outerHtmlTail(stringBuilder8, 100, outputSettings10); textNode2.setBaseUri("hi!"); java.lang.String str15 = textNode2.attr("hi!"); java.lang.String str16 = textNode2.baseUri(); java.lang.String str17 = textNode2.text; textNode2.siblingIndex = 1; java.lang.StringBuilder stringBuilder20 = null; org.jsoup.nodes.DocumentType documentType26 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder27 = null; org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); org.jsoup.nodes.Entities.EscapeMode escapeMode43 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.escapeMode(escapeMode43); java.nio.charset.Charset charset45 = outputSettings42.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings42.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings49.encoder(); org.jsoup.nodes.TextNode textNode53 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode53.setBaseUri(""); java.lang.String str56 = textNode53.getWholeText(); textNode53.setSiblingIndex(100); java.lang.StringBuilder stringBuilder59 = null; org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings(); textNode53.outerHtmlTail(stringBuilder59, 100, outputSettings61); org.jsoup.nodes.Entities.EscapeMode escapeMode63 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.escapeMode(escapeMode63); java.nio.charset.Charset charset65 = outputSettings61.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings49.charset(charset65); documentType26.outerHtmlTail(stringBuilder27, 1, outputSettings66); java.lang.StringBuilder stringBuilder68 = null; org.jsoup.nodes.DocumentType documentType74 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str75 = documentType74.nodeName(); java.lang.StringBuilder stringBuilder76 = null; org.jsoup.nodes.TextNode textNode80 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode80.setBaseUri(""); java.lang.String str83 = textNode80.getWholeText(); textNode80.setSiblingIndex(100); java.lang.StringBuilder stringBuilder86 = null; org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings(); textNode80.outerHtmlTail(stringBuilder86, 100, outputSettings88); org.jsoup.nodes.Entities.EscapeMode escapeMode90 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings88.escapeMode(escapeMode90); org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings88.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings88.clone(); documentType74.outerHtmlTail(stringBuilder76, (int) (byte) 10, outputSettings88); documentType26.outerHtmlTail(stringBuilder68, (int) (byte) 0, outputSettings88); // The following exception was thrown during execution in test generation try { textNode2.indent(stringBuilder20, 2, outputSettings88); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charset45); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charsetEncoder50); org.junit.Assert.assertNotNull(textNode53); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(charset65); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "#doctype" + "'", str75, "#doctype"); org.junit.Assert.assertNotNull(textNode80); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings91); org.junit.Assert.assertNotNull(outputSettings92); org.junit.Assert.assertNotNull(outputSettings93); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi!", ""); boolean boolean3 = attribute2.isDataAttribute(); org.jsoup.nodes.Attribute attribute4 = attribute2.clone(); java.lang.String str5 = attribute2.toString(); org.jsoup.nodes.DocumentType documentType10 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str11 = documentType10.nodeName(); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode16.setBaseUri(""); java.lang.String str19 = textNode16.getWholeText(); textNode16.setSiblingIndex(100); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); textNode16.outerHtmlTail(stringBuilder22, 100, outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.escapeMode(escapeMode26); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.clone(); documentType10.outerHtmlTail(stringBuilder12, (int) (byte) 10, outputSettings24); java.lang.StringBuilder stringBuilder31 = null; org.jsoup.nodes.TextNode textNode35 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode35.setBaseUri(""); java.lang.String str38 = textNode35.getWholeText(); textNode35.setSiblingIndex(100); java.lang.StringBuilder stringBuilder41 = null; org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings(); textNode35.outerHtmlTail(stringBuilder41, 100, outputSettings43); org.jsoup.nodes.Entities.EscapeMode escapeMode45 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings43.escapeMode(escapeMode45); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings43.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.clone(); documentType10.outerHtmlTail(stringBuilder31, (int) 'a', outputSettings48); boolean boolean50 = attribute2.equals((java.lang.Object) documentType10); org.junit.Assert.assertNotNull(attribute2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(attribute4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!=\"\"" + "'", str5, "hi!=\"\""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#doctype" + "'", str11, "#doctype"); org.junit.Assert.assertNotNull(textNode16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(textNode35); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.clone(); documentType4.outerHtmlTail(stringBuilder6, (int) (byte) 10, outputSettings18); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.Attributes attributes27 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder28 = null; org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); attributes27.html(stringBuilder28, outputSettings39); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor42 = attributes27.iterator(); java.lang.String str43 = attributes27.html(); java.util.List<org.jsoup.nodes.Attribute> attributeList44 = attributes27.asList(); java.lang.StringBuilder stringBuilder45 = null; org.jsoup.nodes.TextNode textNode48 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode48.setBaseUri(""); java.lang.StringBuilder stringBuilder51 = null; org.jsoup.nodes.TextNode textNode55 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode55.setBaseUri(""); java.lang.String str58 = textNode55.getWholeText(); textNode55.setSiblingIndex(100); java.lang.StringBuilder stringBuilder61 = null; org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings(); textNode55.outerHtmlTail(stringBuilder61, 100, outputSettings63); org.jsoup.nodes.Entities.EscapeMode escapeMode65 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings63.escapeMode(escapeMode65); org.jsoup.nodes.Entities.EscapeMode escapeMode67 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.escapeMode(escapeMode67); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings66.prettyPrint(true); textNode48.outerHtmlTail(stringBuilder51, (int) 'a', outputSettings70); org.jsoup.nodes.TextNode textNode74 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode74.setBaseUri(""); java.lang.String str77 = textNode74.getWholeText(); textNode74.setSiblingIndex(100); java.lang.StringBuilder stringBuilder80 = null; org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings(); textNode74.outerHtmlTail(stringBuilder80, 100, outputSettings82); org.jsoup.nodes.Entities.EscapeMode escapeMode84 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings82.escapeMode(escapeMode84); org.jsoup.nodes.Entities.EscapeMode escapeMode86 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings85.escapeMode(escapeMode86); java.nio.charset.Charset charset88 = outputSettings85.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings70.charset(charset88); org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings89.clone(); java.nio.charset.Charset charset91 = outputSettings90.charset(); attributes27.html(stringBuilder45, outputSettings90); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder25, (int) '4', outputSettings90); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertNotNull(attributeItor42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNotNull(attributeList44); org.junit.Assert.assertNotNull(textNode48); org.junit.Assert.assertNotNull(textNode55); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(textNode74); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertNotNull(charset88); org.junit.Assert.assertNotNull(outputSettings89); org.junit.Assert.assertNotNull(outputSettings90); org.junit.Assert.assertNotNull(charset91); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document.OutputSettings outputSettings8 = null; documentType4.outerHtmlTail(stringBuilder6, (int) (short) -1, outputSettings8); java.lang.String str10 = documentType4.nodeName(); java.lang.String str11 = documentType4.nodeName(); org.junit.Assert.assertNull(node5); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#doctype" + "'", str10, "#doctype"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#doctype" + "'", str11, "#doctype"); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document.OutputSettings outputSettings8 = null; documentType4.outerHtmlTail(stringBuilder6, (int) (short) -1, outputSettings8); java.lang.StringBuilder stringBuilder10 = null; org.jsoup.nodes.Document document13 = org.jsoup.nodes.Document.createShell(""); java.lang.String str14 = document13.id(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = document13.outputSettings(); java.nio.charset.Charset charset16 = outputSettings15.charset(); int int17 = outputSettings15.indentAmount(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder10, (int) (short) -1, outputSettings15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(node5); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode11.setBaseUri(""); java.lang.String str14 = textNode11.getWholeText(); textNode11.setSiblingIndex(100); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); textNode11.outerHtmlTail(stringBuilder17, 100, outputSettings19); attributes7.html(stringBuilder8, outputSettings19); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.clone(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, 0, outputSettings19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(outputSettings22); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.jsoup.nodes.DocumentType documentType5 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Entities.EscapeMode escapeMode22 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.escapeMode(escapeMode22); java.nio.charset.Charset charset24 = outputSettings21.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings28.encoder(); org.jsoup.nodes.TextNode textNode32 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode32.setBaseUri(""); java.lang.String str35 = textNode32.getWholeText(); textNode32.setSiblingIndex(100); java.lang.StringBuilder stringBuilder38 = null; org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings(); textNode32.outerHtmlTail(stringBuilder38, 100, outputSettings40); org.jsoup.nodes.Entities.EscapeMode escapeMode42 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings40.escapeMode(escapeMode42); java.nio.charset.Charset charset44 = outputSettings40.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings28.charset(charset44); documentType5.outerHtmlTail(stringBuilder6, 1, outputSettings45); java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings45.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode(); java.lang.String str50 = org.jsoup.nodes.Entities.escape("[text=\"hi!\":contains([[#text^=hi!]*=:contains(]hi!=\"\"*=.:contains(]", charsetEncoder47, escapeMode49); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(charsetEncoder29); org.junit.Assert.assertNotNull(textNode32); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(charset44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(charsetEncoder47); org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]" + "'", str50, "[text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]"); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", "[hi!=\"hi!\"!=[hi!!=#[^hi!]]]", "hi!=\"hi!\"", "#[^hi!]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", "[!=#root]", ".<hi!=\"hi!\"></hi!=\"hi!\">", "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("hi!", "hi!"); java.lang.String str3 = attribute2.getValue(); boolean boolean5 = attribute2.equals((java.lang.Object) 0L); boolean boolean6 = attribute2.isDataAttribute(); org.jsoup.nodes.Attribute attribute7 = attribute2.clone(); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements11 = document9.getElementsContainingText("hi!"); java.lang.String str12 = document9.baseUri; org.jsoup.nodes.Element element14 = document9.prependElement("#document"); document9.setBaseUri("hi!"); boolean boolean17 = attribute2.equals((java.lang.Object) "hi!"); java.lang.String str18 = attribute2.html(); java.lang.StringBuilder stringBuilder19 = null; org.jsoup.nodes.DocumentType documentType24 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.TextNode textNode29 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode29.setBaseUri(""); java.lang.String str32 = textNode29.getWholeText(); textNode29.setSiblingIndex(100); java.lang.StringBuilder stringBuilder35 = null; org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings(); textNode29.outerHtmlTail(stringBuilder35, 100, outputSettings37); org.jsoup.nodes.Entities.EscapeMode escapeMode39 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings37.escapeMode(escapeMode39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings40.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings40.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings47.encoder(); org.jsoup.nodes.TextNode textNode51 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode51.setBaseUri(""); java.lang.String str54 = textNode51.getWholeText(); textNode51.setSiblingIndex(100); java.lang.StringBuilder stringBuilder57 = null; org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings(); textNode51.outerHtmlTail(stringBuilder57, 100, outputSettings59); org.jsoup.nodes.Entities.EscapeMode escapeMode61 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings59.escapeMode(escapeMode61); java.nio.charset.Charset charset63 = outputSettings59.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings47.charset(charset63); documentType24.outerHtmlTail(stringBuilder25, 1, outputSettings64); // The following exception was thrown during execution in test generation try { attribute2.html(stringBuilder19, outputSettings64); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(attribute7); org.junit.Assert.assertNotNull(elements11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!=\"hi!\"" + "'", str18, "hi!=\"hi!\""); org.junit.Assert.assertNotNull(textNode29); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(charsetEncoder48); org.junit.Assert.assertNotNull(textNode51); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(charset63); org.junit.Assert.assertNotNull(outputSettings64); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[#text^=hi!]", "                                                 ", " text=\"hi!\" hi!=\"hi!\"", "#&midast;"); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "[hi!=\"\"$=hi!]", "                                                  ", "[^]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); textNode9.setBaseUri("hi!"); org.jsoup.nodes.TextNode textNode23 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode23.setBaseUri(""); java.lang.String str26 = textNode23.getWholeText(); org.jsoup.nodes.Node[] nodeArray27 = textNode23.childNodesAsArray(); textNode9.addChildren(nodeArray27); java.lang.StringBuilder stringBuilder29 = null; org.jsoup.nodes.TextNode textNode33 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode33.setBaseUri(""); java.lang.String str36 = textNode33.getWholeText(); textNode33.setSiblingIndex(100); java.lang.StringBuilder stringBuilder39 = null; org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings(); textNode33.outerHtmlTail(stringBuilder39, 100, outputSettings41); textNode33.setBaseUri("hi!"); java.lang.String str45 = textNode33.getWholeText(); java.lang.String str46 = textNode33.outerHtml(); java.lang.String str48 = textNode33.attr("data-"); java.lang.StringBuilder stringBuilder49 = null; org.jsoup.nodes.Attributes attributes51 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder52 = null; org.jsoup.nodes.TextNode textNode55 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode55.setBaseUri(""); java.lang.String str58 = textNode55.getWholeText(); textNode55.setSiblingIndex(100); java.lang.StringBuilder stringBuilder61 = null; org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings(); textNode55.outerHtmlTail(stringBuilder61, 100, outputSettings63); attributes51.html(stringBuilder52, outputSettings63); org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings63.clone(); textNode33.outerHtmlTail(stringBuilder49, (int) '#', outputSettings63); int int68 = outputSettings63.indentAmount(); textNode9.outerHtmlTail(stringBuilder29, (int) '4', outputSettings63); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings63.prettyPrint(false); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) (byte) 0, outputSettings63); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(textNode23); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!"); org.junit.Assert.assertNotNull(nodeArray27); org.junit.Assert.assertNotNull(textNode33); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, ""); org.junit.Assert.assertNotNull(textNode55); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!"); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1); org.junit.Assert.assertNotNull(outputSettings71); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("#document", "[^hi!]", "hi!=\"hi!\"#:contains(hi!#:contains(#root#:contains(#:contains( text=\"hi!\"#:contains([#text^=hi!]", ":containsOwn(:contains("); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node6 = documentType4.childNode((int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.DocumentType documentType52 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str53 = documentType52.nodeName(); java.lang.StringBuilder stringBuilder54 = null; org.jsoup.nodes.TextNode textNode58 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode58.setBaseUri(""); java.lang.String str61 = textNode58.getWholeText(); textNode58.setSiblingIndex(100); java.lang.StringBuilder stringBuilder64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); textNode58.outerHtmlTail(stringBuilder64, 100, outputSettings66); org.jsoup.nodes.Entities.EscapeMode escapeMode68 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings66.escapeMode(escapeMode68); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.clone(); documentType52.outerHtmlTail(stringBuilder54, (int) (byte) 10, outputSettings66); documentType4.outerHtmlTail(stringBuilder46, (int) (byte) 0, outputSettings66); java.lang.StringBuilder stringBuilder74 = null; org.jsoup.nodes.Attributes attributes76 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder77 = null; org.jsoup.nodes.TextNode textNode80 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode80.setBaseUri(""); java.lang.String str83 = textNode80.getWholeText(); textNode80.setSiblingIndex(100); java.lang.StringBuilder stringBuilder86 = null; org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings(); textNode80.outerHtmlTail(stringBuilder86, 100, outputSettings88); attributes76.html(stringBuilder77, outputSettings88); org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings88.clone(); documentType4.outerHtmlTail(stringBuilder74, 100, outputSettings91); java.lang.String str93 = documentType4.nodeName(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "#doctype" + "'", str53, "#doctype"); org.junit.Assert.assertNotNull(textNode58); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(textNode80); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!"); org.junit.Assert.assertNotNull(outputSettings91); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "#doctype" + "'", str93, "#doctype"); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":lt(52)", "text=&quot;hi!&quot;", ":eq(100)", "#&midast;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str12 = documentType11.nodeName(); java.lang.StringBuilder stringBuilder13 = null; org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode17.setBaseUri(""); java.lang.StringBuilder stringBuilder20 = null; org.jsoup.nodes.TextNode textNode24 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode24.setBaseUri(""); java.lang.String str27 = textNode24.getWholeText(); textNode24.setSiblingIndex(100); java.lang.StringBuilder stringBuilder30 = null; org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings(); textNode24.outerHtmlTail(stringBuilder30, 100, outputSettings32); org.jsoup.nodes.Entities.EscapeMode escapeMode34 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.escapeMode(escapeMode34); org.jsoup.nodes.Entities.EscapeMode escapeMode36 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.escapeMode(escapeMode36); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings35.prettyPrint(true); textNode17.outerHtmlTail(stringBuilder20, (int) 'a', outputSettings39); org.jsoup.nodes.TextNode textNode43 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode43.setBaseUri(""); java.lang.String str46 = textNode43.getWholeText(); textNode43.setSiblingIndex(100); java.lang.StringBuilder stringBuilder49 = null; org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings(); textNode43.outerHtmlTail(stringBuilder49, 100, outputSettings51); org.jsoup.nodes.Entities.EscapeMode escapeMode53 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings51.escapeMode(escapeMode53); org.jsoup.nodes.Entities.EscapeMode escapeMode55 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.escapeMode(escapeMode55); java.nio.charset.Charset charset57 = outputSettings54.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings39.charset(charset57); documentType11.outerHtmlTail(stringBuilder13, (int) (short) 1, outputSettings39); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) (byte) 100, outputSettings39); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#doctype" + "'", str12, "#doctype"); org.junit.Assert.assertNotNull(textNode17); org.junit.Assert.assertNotNull(textNode24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(textNode43); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(charset57); org.junit.Assert.assertNotNull(outputSettings58); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.clone(); documentType4.outerHtmlTail(stringBuilder6, (int) (byte) 10, outputSettings18); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings18.clone(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.clone(); documentType4.outerHtmlTail(stringBuilder6, (int) (byte) 10, outputSettings18); java.lang.String str25 = documentType4.nodeName(); java.lang.String str26 = documentType4.nodeName(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node28 = documentType4.after("text=\"hi!\"#[^hi!]hi!=\"hi!\""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi!", ""); boolean boolean3 = attribute2.isDataAttribute(); org.jsoup.nodes.Attribute attribute4 = attribute2.clone(); java.lang.String str5 = attribute2.toString(); java.lang.String str6 = attribute2.html(); java.lang.String str7 = attribute2.getKey(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.DocumentType documentType13 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str14 = documentType13.nodeName(); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.TextNode textNode19 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode19.setBaseUri(""); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.TextNode textNode26 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode26.setBaseUri(""); java.lang.String str29 = textNode26.getWholeText(); textNode26.setSiblingIndex(100); java.lang.StringBuilder stringBuilder32 = null; org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings(); textNode26.outerHtmlTail(stringBuilder32, 100, outputSettings34); org.jsoup.nodes.Entities.EscapeMode escapeMode36 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.escapeMode(escapeMode36); org.jsoup.nodes.Entities.EscapeMode escapeMode38 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.escapeMode(escapeMode38); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings37.prettyPrint(true); textNode19.outerHtmlTail(stringBuilder22, (int) 'a', outputSettings41); org.jsoup.nodes.TextNode textNode45 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode45.setBaseUri(""); java.lang.String str48 = textNode45.getWholeText(); textNode45.setSiblingIndex(100); java.lang.StringBuilder stringBuilder51 = null; org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings(); textNode45.outerHtmlTail(stringBuilder51, 100, outputSettings53); org.jsoup.nodes.Entities.EscapeMode escapeMode55 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings53.escapeMode(escapeMode55); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.escapeMode(escapeMode57); java.nio.charset.Charset charset59 = outputSettings56.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings41.charset(charset59); documentType13.outerHtmlTail(stringBuilder15, (int) (short) 1, outputSettings41); // The following exception was thrown during execution in test generation try { attribute2.html(stringBuilder8, outputSettings41); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(attribute2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(attribute4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!=\"\"" + "'", str5, "hi!=\"\""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!=\"\"" + "'", str6, "hi!=\"\""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#doctype" + "'", str14, "#doctype"); org.junit.Assert.assertNotNull(textNode19); org.junit.Assert.assertNotNull(textNode26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(textNode45); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertNotNull(charset59); org.junit.Assert.assertNotNull(outputSettings60); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", "                  hi!", "text=\"hi!\".:contains(hi!=\"\"", "hi!=\"hi!\""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.DocumentType documentType12 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str13 = documentType12.nodeName(); java.lang.StringBuilder stringBuilder14 = null; org.jsoup.nodes.TextNode textNode18 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode18.setBaseUri(""); java.lang.StringBuilder stringBuilder21 = null; org.jsoup.nodes.TextNode textNode25 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode25.setBaseUri(""); java.lang.String str28 = textNode25.getWholeText(); textNode25.setSiblingIndex(100); java.lang.StringBuilder stringBuilder31 = null; org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings(); textNode25.outerHtmlTail(stringBuilder31, 100, outputSettings33); org.jsoup.nodes.Entities.EscapeMode escapeMode35 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings33.escapeMode(escapeMode35); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.escapeMode(escapeMode37); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings36.prettyPrint(true); textNode18.outerHtmlTail(stringBuilder21, (int) 'a', outputSettings40); org.jsoup.nodes.TextNode textNode44 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode44.setBaseUri(""); java.lang.String str47 = textNode44.getWholeText(); textNode44.setSiblingIndex(100); java.lang.StringBuilder stringBuilder50 = null; org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings(); textNode44.outerHtmlTail(stringBuilder50, 100, outputSettings52); org.jsoup.nodes.Entities.EscapeMode escapeMode54 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.escapeMode(escapeMode54); org.jsoup.nodes.Entities.EscapeMode escapeMode56 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.escapeMode(escapeMode56); java.nio.charset.Charset charset58 = outputSettings55.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings40.charset(charset58); documentType12.outerHtmlTail(stringBuilder14, (int) (short) 1, outputSettings40); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings40.prettyPrint(false); documentType4.outerHtmlTail(stringBuilder6, (int) (byte) 1, outputSettings40); org.junit.Assert.assertNull(node5); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#doctype" + "'", str13, "#doctype"); org.junit.Assert.assertNotNull(textNode18); org.junit.Assert.assertNotNull(textNode25); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(textNode44); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(charset58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(outputSettings62); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(#document", "#text", " ", "[^hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode16.setBaseUri(""); java.lang.String str19 = textNode16.getWholeText(); textNode16.setSiblingIndex(100); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); textNode16.outerHtmlTail(stringBuilder22, 100, outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.escapeMode(escapeMode26); org.jsoup.nodes.Entities.EscapeMode escapeMode28 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.escapeMode(escapeMode28); java.nio.charset.Charset charset30 = outputSettings27.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings34.encoder(); org.jsoup.nodes.TextNode textNode38 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode38.setBaseUri(""); java.lang.String str41 = textNode38.getWholeText(); textNode38.setSiblingIndex(100); java.lang.StringBuilder stringBuilder44 = null; org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings(); textNode38.outerHtmlTail(stringBuilder44, 100, outputSettings46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.escapeMode(escapeMode48); java.nio.charset.Charset charset50 = outputSettings46.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings34.charset(charset50); documentType11.outerHtmlTail(stringBuilder12, 1, outputSettings51); java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings51.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings51.indentAmount((int) (byte) 10); org.jsoup.nodes.Document document59 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements60 = document59.getAllElements(); document59.baseUri = "hi!=\"hi!\""; org.jsoup.nodes.Document.OutputSettings outputSettings63 = document59.outputSettings(); java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings63.encoder(); org.jsoup.nodes.Entities.EscapeMode escapeMode65 = org.jsoup.nodes.Entities.EscapeMode.extended; java.lang.String str66 = org.jsoup.nodes.Entities.escape("", charsetEncoder64, escapeMode65); org.jsoup.nodes.TextNode textNode69 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode69.setBaseUri(""); java.lang.String str72 = textNode69.getWholeText(); textNode69.setSiblingIndex(100); java.lang.StringBuilder stringBuilder75 = null; org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings(); textNode69.outerHtmlTail(stringBuilder75, 100, outputSettings77); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings77.escapeMode(escapeMode79); org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings80.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings82.escapeMode(); java.lang.String str84 = org.jsoup.nodes.Entities.escape("&colon;contains&lpar;&lsqb;&lsqb;&num;text&Hat;&equals;hi&excl;&rsqb;&midast;&equals;&colon;contains&lpar;&rsqb;", charsetEncoder64, escapeMode83); org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings51.escapeMode(escapeMode83); documentType4.outerHtmlTail(stringBuilder5, (-1), outputSettings51); org.junit.Assert.assertNotNull(textNode16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(charsetEncoder35); org.junit.Assert.assertNotNull(textNode38); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charset50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charsetEncoder53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertNotNull(outputSettings63); org.junit.Assert.assertNotNull(charsetEncoder64); org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(textNode69); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings80); org.junit.Assert.assertNotNull(outputSettings82); org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;" + "'", str84, "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;"); org.junit.Assert.assertNotNull(outputSettings85); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder1 = null; org.jsoup.nodes.TextNode textNode4 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode4.setBaseUri(""); java.lang.String str7 = textNode4.getWholeText(); textNode4.setSiblingIndex(100); java.lang.StringBuilder stringBuilder10 = null; org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings(); textNode4.outerHtmlTail(stringBuilder10, 100, outputSettings12); attributes0.html(stringBuilder1, outputSettings12); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes0.iterator(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator16 = attributes0.spliterator(); attributes0.put("[^hi!]", " text=\"hi!\""); org.jsoup.nodes.Attributes attributes20 = attributes0.clone(); attributes0.put(":lt(52)", "&lt;&num;text&gt;"); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.TextNode textNode27 = org.jsoup.nodes.TextNode.createFromEncoded("[^hi!]=\"\"", ":lt(52)"); java.lang.StringBuilder stringBuilder28 = null; org.jsoup.nodes.DocumentType documentType34 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str35 = documentType34.nodeName(); java.lang.StringBuilder stringBuilder36 = null; org.jsoup.nodes.TextNode textNode40 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode40.setBaseUri(""); java.lang.String str43 = textNode40.getWholeText(); textNode40.setSiblingIndex(100); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings(); textNode40.outerHtmlTail(stringBuilder46, 100, outputSettings48); org.jsoup.nodes.Entities.EscapeMode escapeMode50 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings48.escapeMode(escapeMode50); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings48.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings48.clone(); documentType34.outerHtmlTail(stringBuilder36, (int) (byte) 10, outputSettings48); textNode27.outerHtmlTail(stringBuilder28, 100, outputSettings48); // The following exception was thrown during execution in test generation try { attributes0.html(stringBuilder24, outputSettings48); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode4); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertNotNull(attributeItor15); org.junit.Assert.assertNotNull(attributeSpliterator16); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(textNode27); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#doctype" + "'", str35, "#doctype"); org.junit.Assert.assertNotNull(textNode40); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(outputSettings53); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains([[#text^=hi!]*=:contains(]", "[[#text^=hi!]*=:contains(]", ":gt(35)", "<#text>"); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings44.encoder(); boolean boolean47 = outputSettings44.prettyPrint(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charsetEncoder46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":eq(0)", "<hi!=\"hi!\"></hi!=\"hi!\">", "[#doctype$=*]", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings20.encoder(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, 100, outputSettings20); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(charsetEncoder24); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[#document]", ":gt(0)", "[:contains(!=:lt(52)]", "[:contains(!=:lt(52)]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document.OutputSettings outputSettings8 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder6, 100, outputSettings8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "[hi!=\"\"$=hi!]", "                                                  ", "[^]"); java.lang.String str5 = documentType4.nodeName(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.DocumentType documentType52 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str53 = documentType52.nodeName(); java.lang.StringBuilder stringBuilder54 = null; org.jsoup.nodes.TextNode textNode58 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode58.setBaseUri(""); java.lang.String str61 = textNode58.getWholeText(); textNode58.setSiblingIndex(100); java.lang.StringBuilder stringBuilder64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); textNode58.outerHtmlTail(stringBuilder64, 100, outputSettings66); org.jsoup.nodes.Entities.EscapeMode escapeMode68 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings66.escapeMode(escapeMode68); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.clone(); documentType52.outerHtmlTail(stringBuilder54, (int) (byte) 10, outputSettings66); documentType4.outerHtmlTail(stringBuilder46, (int) (byte) 0, outputSettings66); java.lang.StringBuilder stringBuilder74 = null; org.jsoup.nodes.Document document77 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements78 = document77.getAllElements(); document77.baseUri = "hi!=\"hi!\""; org.jsoup.nodes.Document.OutputSettings outputSettings81 = document77.outputSettings(); java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings81.encoder(); documentType4.outerHtmlTail(stringBuilder74, (int) ' ', outputSettings81); org.jsoup.nodes.Node[] nodeArray84 = null; // The following exception was thrown during execution in test generation try { documentType4.addChildren(nodeArray84); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "#doctype" + "'", str53, "#doctype"); org.junit.Assert.assertNotNull(textNode58); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(elements78); org.junit.Assert.assertNotNull(outputSettings81); org.junit.Assert.assertNotNull(charsetEncoder82); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[hi!=\"\"$=hi!]", "[#document^=]", "[#doctype]", " "); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); int int29 = outputSettings27.indentAmount(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, 10, outputSettings27); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]", "[text=\"hi!\" hi!=\"hi!\"^=#&midast;]", "<#document></#document>", "hi!"); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings44.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings44.indentAmount((int) (byte) 10); org.jsoup.nodes.Document document52 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements53 = document52.getAllElements(); document52.baseUri = "hi!=\"hi!\""; org.jsoup.nodes.Document.OutputSettings outputSettings56 = document52.outputSettings(); java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings56.encoder(); org.jsoup.nodes.Entities.EscapeMode escapeMode58 = org.jsoup.nodes.Entities.EscapeMode.extended; java.lang.String str59 = org.jsoup.nodes.Entities.escape("", charsetEncoder57, escapeMode58); org.jsoup.nodes.TextNode textNode62 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode62.setBaseUri(""); java.lang.String str65 = textNode62.getWholeText(); textNode62.setSiblingIndex(100); java.lang.StringBuilder stringBuilder68 = null; org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings(); textNode62.outerHtmlTail(stringBuilder68, 100, outputSettings70); org.jsoup.nodes.Entities.EscapeMode escapeMode72 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings70.escapeMode(escapeMode72); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings75.escapeMode(); java.lang.String str77 = org.jsoup.nodes.Entities.escape("&colon;contains&lpar;&lsqb;&lsqb;&num;text&Hat;&equals;hi&excl;&rsqb;&midast;&equals;&colon;contains&lpar;&rsqb;", charsetEncoder57, escapeMode76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings44.escapeMode(escapeMode76); java.util.Map<java.lang.Character, java.lang.String> charMap79 = escapeMode76.getMap(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charsetEncoder46); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(charsetEncoder57); org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(textNode62); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;" + "'", str77, "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;"); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(charMap79); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); // The following exception was thrown during execution in test generation try { java.lang.String str7 = documentType4.absUrl(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.TextNode textNode51 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode51.setBaseUri(""); java.lang.String str54 = textNode51.getWholeText(); textNode51.setSiblingIndex(100); java.lang.StringBuilder stringBuilder57 = null; org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings(); textNode51.outerHtmlTail(stringBuilder57, 100, outputSettings59); org.jsoup.nodes.Entities.EscapeMode escapeMode61 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings59.escapeMode(escapeMode61); org.jsoup.nodes.Entities.EscapeMode escapeMode63 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.escapeMode(escapeMode63); org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings62.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings62.prettyPrint(false); java.lang.String str69 = org.jsoup.nodes.Entities.escape(":eq(100)", outputSettings68); org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings68.escapeMode(escapeMode71); org.jsoup.nodes.Attributes attributes73 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder74 = null; org.jsoup.nodes.TextNode textNode77 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode77.setBaseUri(""); java.lang.String str80 = textNode77.getWholeText(); textNode77.setSiblingIndex(100); java.lang.StringBuilder stringBuilder83 = null; org.jsoup.nodes.Document.OutputSettings outputSettings85 = new org.jsoup.nodes.Document.OutputSettings(); textNode77.outerHtmlTail(stringBuilder83, 100, outputSettings85); attributes73.html(stringBuilder74, outputSettings85); org.jsoup.nodes.Entities.EscapeMode escapeMode88 = outputSettings85.escapeMode(); org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings85.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings68.escapeMode(escapeMode89); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder46, 0, outputSettings90); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(textNode51); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + ":eq(100)" + "'", str69, ":eq(100)"); org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(textNode77); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode88 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode88.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings90); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("&midast;", "hi!=&quot;hi!&quot;:lt(52)hi!:lt(52)#root:lt(52):lt(52) text=&quot;hi!&quot;:lt(52)[#text^=hi!]\n<html>\n <head></head>\n <body></body>\n</html>", "[text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]", "<#document text=\"hi!\"></#document>"); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "[hi!=\"\"$=hi!]", "                                                  ", "[^]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting9 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Document document11 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements13 = document11.getElementsContainingText("hi!"); boolean boolean15 = document11.hasClass("#text"); java.util.regex.Pattern pattern17 = null; org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueMatching("hi!=\"\"", pattern17); org.jsoup.nodes.Element element19 = document11.body(); org.jsoup.select.Elements elements21 = document11.getElementsByTag("hi!"); org.jsoup.nodes.Document document23 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements25 = document23.getElementsContainingText("hi!"); boolean boolean27 = document23.hasClass("#text"); java.util.regex.Pattern pattern29 = null; org.jsoup.select.Elements elements30 = document23.getElementsByAttributeValueMatching("hi!=\"\"", pattern29); boolean boolean31 = attributeWithValueStarting9.matches((org.jsoup.nodes.Element) document11, (org.jsoup.nodes.Element) document23); org.jsoup.nodes.Document.OutputSettings outputSettings32 = document23.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.prettyPrint(false); documentType4.outerHtmlTail(stringBuilder5, (int) ' ', outputSettings34); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNull(element19); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertNotNull(elements25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(elements30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.jsoup.select.NodeVisitor nodeVisitor0 = null; org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0); org.jsoup.nodes.DocumentType documentType6 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str7 = documentType6.nodeName(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.TextNode textNode12 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode12.setBaseUri(""); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.TextNode textNode19 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode19.setBaseUri(""); java.lang.String str22 = textNode19.getWholeText(); textNode19.setSiblingIndex(100); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings(); textNode19.outerHtmlTail(stringBuilder25, 100, outputSettings27); org.jsoup.nodes.Entities.EscapeMode escapeMode29 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings27.escapeMode(escapeMode29); org.jsoup.nodes.Entities.EscapeMode escapeMode31 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.escapeMode(escapeMode31); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings30.prettyPrint(true); textNode12.outerHtmlTail(stringBuilder15, (int) 'a', outputSettings34); org.jsoup.nodes.TextNode textNode38 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode38.setBaseUri(""); java.lang.String str41 = textNode38.getWholeText(); textNode38.setSiblingIndex(100); java.lang.StringBuilder stringBuilder44 = null; org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings(); textNode38.outerHtmlTail(stringBuilder44, 100, outputSettings46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.escapeMode(escapeMode48); org.jsoup.nodes.Entities.EscapeMode escapeMode50 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.escapeMode(escapeMode50); java.nio.charset.Charset charset52 = outputSettings49.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings34.charset(charset52); documentType6.outerHtmlTail(stringBuilder8, (int) (short) 1, outputSettings34); java.lang.String str55 = documentType6.nodeName(); // The following exception was thrown during execution in test generation try { nodeTraversor1.traverse((org.jsoup.nodes.Node) documentType6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#doctype" + "'", str7, "#doctype"); org.junit.Assert.assertNotNull(textNode12); org.junit.Assert.assertNotNull(textNode19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(textNode38); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charset52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#doctype" + "'", str55, "#doctype"); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":lt(52)", "text=&quot;hi!&quot;", ":eq(100)", "#&midast;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode11.setBaseUri(""); java.lang.String str14 = textNode11.getWholeText(); textNode11.setSiblingIndex(100); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); textNode11.outerHtmlTail(stringBuilder17, 100, outputSettings19); attributes7.html(stringBuilder8, outputSettings19); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.clone(); java.nio.charset.Charset charset23 = outputSettings19.charset(); documentType4.outerHtmlTail(stringBuilder5, (int) (short) 0, outputSettings19); org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.DocumentType documentType52 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str53 = documentType52.nodeName(); java.lang.StringBuilder stringBuilder54 = null; org.jsoup.nodes.TextNode textNode58 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode58.setBaseUri(""); java.lang.String str61 = textNode58.getWholeText(); textNode58.setSiblingIndex(100); java.lang.StringBuilder stringBuilder64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); textNode58.outerHtmlTail(stringBuilder64, 100, outputSettings66); org.jsoup.nodes.Entities.EscapeMode escapeMode68 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings66.escapeMode(escapeMode68); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.clone(); documentType52.outerHtmlTail(stringBuilder54, (int) (byte) 10, outputSettings66); documentType4.outerHtmlTail(stringBuilder46, (int) (byte) 0, outputSettings66); java.lang.String str74 = documentType4.nodeName(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "#doctype" + "'", str53, "#doctype"); org.junit.Assert.assertNotNull(textNode58); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "#doctype" + "'", str74, "#doctype"); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.StringBuilder stringBuilder13 = null; org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode17.setBaseUri(""); java.lang.String str20 = textNode17.getWholeText(); textNode17.setSiblingIndex(100); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings(); textNode17.outerHtmlTail(stringBuilder23, 100, outputSettings25); org.jsoup.nodes.Entities.EscapeMode escapeMode27 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.escapeMode(escapeMode27); org.jsoup.nodes.Entities.EscapeMode escapeMode29 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.escapeMode(escapeMode29); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings28.prettyPrint(true); textNode10.outerHtmlTail(stringBuilder13, (int) 'a', outputSettings32); org.jsoup.nodes.TextNode textNode36 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode36.setBaseUri(""); java.lang.String str39 = textNode36.getWholeText(); textNode36.setSiblingIndex(100); java.lang.StringBuilder stringBuilder42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings(); textNode36.outerHtmlTail(stringBuilder42, 100, outputSettings44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.escapeMode(escapeMode46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); java.nio.charset.Charset charset50 = outputSettings47.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings32.charset(charset50); documentType4.outerHtmlTail(stringBuilder6, (int) (short) 1, outputSettings32); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings32.charset(" text=\"hi!\" hi!=\"hi!\""); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: text=\"hi!\" hi!=\"hi!\""); } catch (java.nio.charset.IllegalCharsetNameException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertNotNull(textNode17); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(textNode36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charset50); org.junit.Assert.assertNotNull(outputSettings51); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertNull(node5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":eq(0)", "<hi!=\"hi!\"></hi!=\"hi!\">", "[#doctype$=*]", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document.OutputSettings outputSettings7 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) (byte) 1, outputSettings7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.nodes.DocumentType documentType52 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str53 = documentType52.nodeName(); java.lang.StringBuilder stringBuilder54 = null; org.jsoup.nodes.TextNode textNode58 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode58.setBaseUri(""); java.lang.String str61 = textNode58.getWholeText(); textNode58.setSiblingIndex(100); java.lang.StringBuilder stringBuilder64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); textNode58.outerHtmlTail(stringBuilder64, 100, outputSettings66); org.jsoup.nodes.Entities.EscapeMode escapeMode68 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings66.escapeMode(escapeMode68); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings66.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.clone(); documentType52.outerHtmlTail(stringBuilder54, (int) (byte) 10, outputSettings66); documentType4.outerHtmlTail(stringBuilder46, (int) (byte) 0, outputSettings66); java.lang.StringBuilder stringBuilder74 = null; org.jsoup.nodes.Attributes attributes76 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder77 = null; org.jsoup.nodes.TextNode textNode80 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode80.setBaseUri(""); java.lang.String str83 = textNode80.getWholeText(); textNode80.setSiblingIndex(100); java.lang.StringBuilder stringBuilder86 = null; org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings(); textNode80.outerHtmlTail(stringBuilder86, 100, outputSettings88); attributes76.html(stringBuilder77, outputSettings88); org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings88.clone(); documentType4.outerHtmlTail(stringBuilder74, 100, outputSettings91); java.nio.charset.Charset charset93 = outputSettings91.charset(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "#doctype" + "'", str53, "#doctype"); org.junit.Assert.assertNotNull(textNode58); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(textNode80); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!"); org.junit.Assert.assertNotNull(outputSettings91); org.junit.Assert.assertNotNull(charset93); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("data-=\"#:contains(\"", "<#document></#document>", "hi!=\"\"", "#&midast;"); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":gt(97)", "     ", "#&midast;", ":containsOwn([[#text^=hi!]*=:contains(]"); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching(" text=\"hi!\"", pattern1); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements6 = document4.getElementsContainingText("hi!"); java.lang.String str7 = document4.baseUri; org.jsoup.nodes.Element element9 = document4.prependElement("#document"); org.jsoup.select.Elements elements10 = document4.parents(); org.jsoup.nodes.Document document12 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements13 = document12.getAllElements(); document12.baseUri = "hi!=\"hi!\""; boolean boolean16 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document12); java.lang.String str17 = document12.outerHtml(); java.util.regex.Pattern pattern19 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching20 = new org.jsoup.select.Evaluator.AttributeWithValueMatching(" text=\"hi!\"", pattern19); org.jsoup.nodes.Document document22 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements24 = document22.getElementsContainingText("hi!"); java.lang.String str25 = document22.baseUri; org.jsoup.nodes.Element element27 = document22.prependElement("#document"); org.jsoup.select.Elements elements28 = document22.parents(); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements31 = document30.getAllElements(); document30.baseUri = "hi!=\"hi!\""; boolean boolean34 = attributeWithValueMatching20.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document30); org.jsoup.nodes.Element element36 = document22.html("#document"); org.jsoup.nodes.Attributes attributes37 = element36.attributes; org.jsoup.nodes.DocumentType documentType42 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str43 = documentType42.nodeName(); org.jsoup.nodes.Element element44 = element36.appendChild((org.jsoup.nodes.Node) documentType42); java.util.List<org.jsoup.nodes.Node> nodeList45 = documentType42.childNodes; document12.childNodes = nodeList45; org.junit.Assert.assertNotNull(elements6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!"); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(elements28); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#doctype" + "'", str43, "#doctype"); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(nodeList45); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("[^hi!]=\"\"", ":lt(52)"); java.lang.StringBuilder stringBuilder3 = null; org.jsoup.nodes.DocumentType documentType9 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str10 = documentType9.nodeName(); java.lang.StringBuilder stringBuilder11 = null; org.jsoup.nodes.TextNode textNode15 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode15.setBaseUri(""); java.lang.String str18 = textNode15.getWholeText(); textNode15.setSiblingIndex(100); java.lang.StringBuilder stringBuilder21 = null; org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); textNode15.outerHtmlTail(stringBuilder21, 100, outputSettings23); org.jsoup.nodes.Entities.EscapeMode escapeMode25 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings23.escapeMode(escapeMode25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings23.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings23.clone(); documentType9.outerHtmlTail(stringBuilder11, (int) (byte) 10, outputSettings23); textNode2.outerHtmlTail(stringBuilder3, 100, outputSettings23); java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings23.encoder(); org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#doctype" + "'", str10, "#doctype"); org.junit.Assert.assertNotNull(textNode15); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(charsetEncoder31); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[^[#text^=hi!]]", ":contains([text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]", " text=\"hi!\" hi!=\"hi!\"", "#text"); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching(" text=\"hi!\"", pattern1); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements6 = document4.getElementsContainingText("hi!"); java.lang.String str7 = document4.baseUri; org.jsoup.nodes.Element element9 = document4.prependElement("#document"); org.jsoup.select.Elements elements10 = document4.parents(); org.jsoup.nodes.Document document12 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements13 = document12.getAllElements(); document12.baseUri = "hi!=\"hi!\""; boolean boolean16 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Element element18 = document4.html("#document"); org.jsoup.nodes.Attributes attributes19 = element18.attributes; org.jsoup.nodes.DocumentType documentType24 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str25 = documentType24.nodeName(); org.jsoup.nodes.Element element26 = element18.appendChild((org.jsoup.nodes.Node) documentType24); org.jsoup.parser.Tag tag28 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean29 = tag28.formatAsBlock(); org.jsoup.nodes.TextNode textNode33 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); java.lang.String str35 = textNode33.absUrl("#text"); org.jsoup.nodes.Attributes attributes36 = textNode33.attributes(); org.jsoup.nodes.Element element37 = new org.jsoup.nodes.Element(tag28, "", attributes36); java.util.Set<java.lang.String> strSet38 = element37.classNames(); org.jsoup.nodes.Element element39 = element18.classNames(strSet38); org.junit.Assert.assertNotNull(elements6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(attributes19); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(tag28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(textNode33); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(attributes36); org.junit.Assert.assertNotNull(strSet38); org.junit.Assert.assertNotNull(element39); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.String str46 = documentType4.nodeName(); org.jsoup.nodes.Document document48 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements50 = document48.getElementsContainingText("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("#text"); java.util.List<org.jsoup.nodes.Node> nodeList53 = element52.childNodes; documentType4.childNodes = nodeList53; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node56 = documentType4.wrap(":gt(52)"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#doctype" + "'", str46, "#doctype"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(nodeList53); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<#root></#root>", "&lt;#text&gt;", "[^hi!]", ":lt(32)"); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[text=&quot;hi!&quot;=.:contains(]", "[&lsqb;&Hat;hi&excl;&rsqb;]", "&colon;contains&lpar;&lsqb;&lsqb;&num;text&Hat;&equals;hi&excl;&rsqb;&midast;&equals;&colon;contains&lpar;&rsqb;", "[     ]"); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode2.setBaseUri(""); java.lang.String str5 = textNode2.getWholeText(); textNode2.setSiblingIndex(100); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); textNode2.outerHtmlTail(stringBuilder8, 100, outputSettings10); textNode2.setBaseUri("hi!"); org.jsoup.nodes.Node[] nodeArray14 = textNode2.childNodesAsArray(); org.jsoup.nodes.Node node15 = textNode2.clone(); org.jsoup.nodes.Node[] nodeArray16 = textNode2.childNodesAsArray(); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.DocumentType documentType23 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str24 = documentType23.nodeName(); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.TextNode textNode29 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode29.setBaseUri(""); java.lang.StringBuilder stringBuilder32 = null; org.jsoup.nodes.TextNode textNode36 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode36.setBaseUri(""); java.lang.String str39 = textNode36.getWholeText(); textNode36.setSiblingIndex(100); java.lang.StringBuilder stringBuilder42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings(); textNode36.outerHtmlTail(stringBuilder42, 100, outputSettings44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.escapeMode(escapeMode46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings47.prettyPrint(true); textNode29.outerHtmlTail(stringBuilder32, (int) 'a', outputSettings51); org.jsoup.nodes.TextNode textNode55 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode55.setBaseUri(""); java.lang.String str58 = textNode55.getWholeText(); textNode55.setSiblingIndex(100); java.lang.StringBuilder stringBuilder61 = null; org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings(); textNode55.outerHtmlTail(stringBuilder61, 100, outputSettings63); org.jsoup.nodes.Entities.EscapeMode escapeMode65 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings63.escapeMode(escapeMode65); org.jsoup.nodes.Entities.EscapeMode escapeMode67 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.escapeMode(escapeMode67); java.nio.charset.Charset charset69 = outputSettings66.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings51.charset(charset69); documentType23.outerHtmlTail(stringBuilder25, (int) (short) 1, outputSettings51); org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings51.prettyPrint(false); // The following exception was thrown during execution in test generation try { textNode2.outerHtmlHead(stringBuilder17, (int) 'a', outputSettings73); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertNotNull(nodeArray14); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(nodeArray16); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#doctype" + "'", str24, "#doctype"); org.junit.Assert.assertNotNull(textNode29); org.junit.Assert.assertNotNull(textNode36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(textNode55); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertNotNull(charset69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings73); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements3 = document1.getElementsContainingText("hi!"); java.lang.String str4 = document1.baseUri; org.jsoup.nodes.Document.OutputSettings outputSettings5 = document1.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = document1.outputSettings(); java.util.List<org.jsoup.nodes.Node> nodeList7 = document1.childNodes(); org.jsoup.nodes.Document document8 = document1.clone(); java.lang.StringBuilder stringBuilder9 = null; org.jsoup.nodes.DocumentType documentType15 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str16 = documentType15.nodeName(); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.TextNode textNode21 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode21.setBaseUri(""); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.TextNode textNode28 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode28.setBaseUri(""); java.lang.String str31 = textNode28.getWholeText(); textNode28.setSiblingIndex(100); java.lang.StringBuilder stringBuilder34 = null; org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings(); textNode28.outerHtmlTail(stringBuilder34, 100, outputSettings36); org.jsoup.nodes.Entities.EscapeMode escapeMode38 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.escapeMode(escapeMode38); org.jsoup.nodes.Entities.EscapeMode escapeMode40 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.escapeMode(escapeMode40); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings39.prettyPrint(true); textNode21.outerHtmlTail(stringBuilder24, (int) 'a', outputSettings43); org.jsoup.nodes.TextNode textNode47 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode47.setBaseUri(""); java.lang.String str50 = textNode47.getWholeText(); textNode47.setSiblingIndex(100); java.lang.StringBuilder stringBuilder53 = null; org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings(); textNode47.outerHtmlTail(stringBuilder53, 100, outputSettings55); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.escapeMode(escapeMode57); org.jsoup.nodes.Entities.EscapeMode escapeMode59 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.escapeMode(escapeMode59); java.nio.charset.Charset charset61 = outputSettings58.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings43.charset(charset61); documentType15.outerHtmlTail(stringBuilder17, (int) (short) 1, outputSettings43); org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings43.prettyPrint(false); // The following exception was thrown during execution in test generation try { document8.outerHtmlHead(stringBuilder9, (int) ' ', outputSettings43); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(elements3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!"); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(nodeList7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#doctype" + "'", str16, "#doctype"); org.junit.Assert.assertNotNull(textNode21); org.junit.Assert.assertNotNull(textNode28); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(textNode47); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(charset61); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(outputSettings65); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.jsoup.select.NodeVisitor nodeVisitor0 = null; org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0); org.jsoup.nodes.DocumentType documentType6 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); // The following exception was thrown during execution in test generation try { nodeTraversor1.traverse((org.jsoup.nodes.Node) documentType6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings44.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings44.indentAmount((int) (byte) 10); org.jsoup.nodes.Document document52 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements53 = document52.getAllElements(); document52.baseUri = "hi!=\"hi!\""; org.jsoup.nodes.Document.OutputSettings outputSettings56 = document52.outputSettings(); java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings56.encoder(); org.jsoup.nodes.Entities.EscapeMode escapeMode58 = org.jsoup.nodes.Entities.EscapeMode.extended; java.lang.String str59 = org.jsoup.nodes.Entities.escape("", charsetEncoder57, escapeMode58); org.jsoup.nodes.TextNode textNode62 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode62.setBaseUri(""); java.lang.String str65 = textNode62.getWholeText(); textNode62.setSiblingIndex(100); java.lang.StringBuilder stringBuilder68 = null; org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings(); textNode62.outerHtmlTail(stringBuilder68, 100, outputSettings70); org.jsoup.nodes.Entities.EscapeMode escapeMode72 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings70.escapeMode(escapeMode72); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings75.escapeMode(); java.lang.String str77 = org.jsoup.nodes.Entities.escape("&colon;contains&lpar;&lsqb;&lsqb;&num;text&Hat;&equals;hi&excl;&rsqb;&midast;&equals;&colon;contains&lpar;&rsqb;", charsetEncoder57, escapeMode76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings44.escapeMode(escapeMode76); java.nio.charset.Charset charset79 = outputSettings44.charset(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charsetEncoder46); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(charsetEncoder57); org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(textNode62); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;" + "'", str77, "&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;"); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(charset79); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[hi!=\"\"$=hi!]", "[#document^=]", "[#doctype]", " "); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("text=&quot;hi!&quot;", ":contains(", "[hi!!=#[^hi!]]", ":contains("); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.formatAsBlock(); org.jsoup.nodes.TextNode textNode6 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); java.lang.String str8 = textNode6.absUrl("#text"); org.jsoup.nodes.Attributes attributes9 = textNode6.attributes(); org.jsoup.nodes.Element element10 = new org.jsoup.nodes.Element(tag1, "", attributes9); boolean boolean11 = tag1.isData(); boolean boolean12 = tag1.isData(); boolean boolean13 = tag1.formatAsBlock(); java.lang.String str14 = tag1.toString(); boolean boolean15 = tag1.formatAsBlock(); org.jsoup.nodes.DocumentType documentType20 = new org.jsoup.nodes.DocumentType(":eq(0)", "<hi!=\"hi!\"></hi!=\"hi!\">", "[#doctype$=*]", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;"); java.lang.StringBuilder stringBuilder21 = null; org.jsoup.nodes.TextNode textNode25 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode25.setBaseUri(""); java.lang.String str28 = textNode25.getWholeText(); textNode25.setSiblingIndex(100); java.lang.StringBuilder stringBuilder31 = null; org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings(); textNode25.outerHtmlTail(stringBuilder31, 100, outputSettings33); org.jsoup.nodes.Entities.EscapeMode escapeMode35 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings33.escapeMode(escapeMode35); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.escapeMode(escapeMode37); documentType20.outerHtmlTail(stringBuilder21, (int) (byte) 1, outputSettings36); boolean boolean40 = tag1.equals((java.lang.Object) documentType20); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(textNode6); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#document" + "'", str14, "#document"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(textNode25); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":eq(0)", "<hi!=\"hi!\"></hi!=\"hi!\">", "[#doctype$=*]", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document.OutputSettings outputSettings7 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) (short) 100, outputSettings7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("[^hi!]=\"\"", ":lt(52)"); java.lang.StringBuilder stringBuilder3 = null; org.jsoup.nodes.DocumentType documentType9 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str10 = documentType9.nodeName(); java.lang.StringBuilder stringBuilder11 = null; org.jsoup.nodes.TextNode textNode15 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode15.setBaseUri(""); java.lang.String str18 = textNode15.getWholeText(); textNode15.setSiblingIndex(100); java.lang.StringBuilder stringBuilder21 = null; org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); textNode15.outerHtmlTail(stringBuilder21, 100, outputSettings23); org.jsoup.nodes.Entities.EscapeMode escapeMode25 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings23.escapeMode(escapeMode25); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings23.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings23.clone(); documentType9.outerHtmlTail(stringBuilder11, (int) (byte) 10, outputSettings23); textNode2.outerHtmlTail(stringBuilder3, 100, outputSettings23); boolean boolean31 = textNode2.isBlank(); org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#doctype" + "'", str10, "#doctype"); org.junit.Assert.assertNotNull(textNode15); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("..<hi!=\"hi!\"></hi!=\"hi!\">", " *=\"#document\"", "#:contains(", "<body></body>"); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.String str46 = documentType4.nodeName(); org.jsoup.nodes.Document document48 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements50 = document48.getElementsContainingText("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("#text"); java.util.List<org.jsoup.nodes.Node> nodeList53 = element52.childNodes; documentType4.childNodes = nodeList53; org.jsoup.nodes.Document document56 = org.jsoup.nodes.Document.createShell(" text=\"hi!\" hi!=\"hi!\""); org.jsoup.nodes.Element element58 = document56.html(":eq(-1)"); org.jsoup.nodes.Node node59 = documentType4.doClone((org.jsoup.nodes.Node) element58); org.jsoup.select.Elements elements61 = element58.getElementsMatchingText(":lt(0)"); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#doctype" + "'", str46, "#doctype"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(node59); org.junit.Assert.assertNotNull(elements61); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<#document text=\"hi!\"></#document>", ":gt(35)", ":matchesOwn(null", ""); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "[hi!=\"\"$=hi!]", "                                                  ", "[^]"); java.lang.String str5 = documentType4.outerHtml(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<!DOCTYPE                                                   PUBLIC \"[hi!=\"\"$=hi!]\">" + "'", str5, "<!DOCTYPE                                                   PUBLIC \"[hi!=\"\"$=hi!]\">"); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.jsoup.select.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.select.Evaluator.AttributeWithValueEnding("hi!=\"\"", "hi!"); java.lang.String str3 = attributeWithValueEnding2.toString(); java.lang.String str4 = attributeWithValueEnding2.toString(); org.jsoup.select.Evaluator.Id id6 = new org.jsoup.select.Evaluator.Id("&midast;"); java.lang.String str7 = id6.toString(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting10 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element11 = null; org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("hi!"); boolean boolean14 = attributeWithValueStarting10.matches(element11, (org.jsoup.nodes.Element) document13); org.jsoup.select.Elements elements17 = document13.getElementsByAttributeValueMatching("[#text^=hi!]", "[#text^=hi!]"); org.jsoup.select.Elements elements20 = document13.getElementsByAttributeValueStarting("hi!=\"hi!\"", "hi!"); org.jsoup.nodes.Document document22 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements24 = document22.getElementsContainingText("hi!"); org.jsoup.nodes.Element element26 = document22.createElement("#text"); org.jsoup.nodes.Element element28 = document22.removeClass("#root"); org.jsoup.nodes.Element element30 = document22.prepend("hi!=\"hi!\""); boolean boolean31 = id6.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document22); org.jsoup.nodes.Document document33 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element35 = document33.val(" text=\"hi!\" hi!=\"hi!\""); java.lang.String str36 = document33.nodeName(); boolean boolean37 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.DocumentType documentType42 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str43 = documentType42.nodeName(); java.lang.StringBuilder stringBuilder44 = null; org.jsoup.nodes.TextNode textNode48 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode48.setBaseUri(""); java.lang.StringBuilder stringBuilder51 = null; org.jsoup.nodes.TextNode textNode55 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode55.setBaseUri(""); java.lang.String str58 = textNode55.getWholeText(); textNode55.setSiblingIndex(100); java.lang.StringBuilder stringBuilder61 = null; org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings(); textNode55.outerHtmlTail(stringBuilder61, 100, outputSettings63); org.jsoup.nodes.Entities.EscapeMode escapeMode65 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings63.escapeMode(escapeMode65); org.jsoup.nodes.Entities.EscapeMode escapeMode67 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.escapeMode(escapeMode67); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings66.prettyPrint(true); textNode48.outerHtmlTail(stringBuilder51, (int) 'a', outputSettings70); org.jsoup.nodes.TextNode textNode74 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode74.setBaseUri(""); java.lang.String str77 = textNode74.getWholeText(); textNode74.setSiblingIndex(100); java.lang.StringBuilder stringBuilder80 = null; org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings(); textNode74.outerHtmlTail(stringBuilder80, 100, outputSettings82); org.jsoup.nodes.Entities.EscapeMode escapeMode84 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings82.escapeMode(escapeMode84); org.jsoup.nodes.Entities.EscapeMode escapeMode86 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings85.escapeMode(escapeMode86); java.nio.charset.Charset charset88 = outputSettings85.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings70.charset(charset88); documentType42.outerHtmlTail(stringBuilder44, (int) (short) 1, outputSettings70); java.lang.String str91 = documentType42.nodeName(); java.lang.String str92 = documentType42.nodeName(); // The following exception was thrown during execution in test generation try { document33.replaceWith((org.jsoup.nodes.Node) documentType42); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[hi!=\"\"$=hi!]" + "'", str3, "[hi!=\"\"$=hi!]"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[hi!=\"\"$=hi!]" + "'", str4, "[hi!=\"\"$=hi!]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#&midast;" + "'", str7, "#&midast;"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#document" + "'", str36, "#document"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#doctype" + "'", str43, "#doctype"); org.junit.Assert.assertNotNull(textNode48); org.junit.Assert.assertNotNull(textNode55); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(textNode74); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertNotNull(charset88); org.junit.Assert.assertNotNull(outputSettings89); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "#doctype" + "'", str91, "#doctype"); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "#doctype" + "'", str92, "#doctype"); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.String str46 = documentType4.nodeName(); org.jsoup.nodes.Document document48 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements50 = document48.getElementsContainingText("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("#text"); java.util.List<org.jsoup.nodes.Node> nodeList53 = element52.childNodes; documentType4.childNodes = nodeList53; org.jsoup.nodes.Document document56 = org.jsoup.nodes.Document.createShell(" text=\"hi!\" hi!=\"hi!\""); org.jsoup.nodes.Element element58 = document56.html(":eq(-1)"); org.jsoup.nodes.Node node59 = documentType4.doClone((org.jsoup.nodes.Node) element58); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node61 = documentType4.after(" *=\"#document\""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#doctype" + "'", str46, "#doctype"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(node59); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":eq(0)", "<hi!=\"hi!\"></hi!=\"hi!\">", "[#doctype$=*]", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) 1, outputSettings20); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting28 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements32 = document30.getElementsContainingText("hi!"); boolean boolean34 = document30.hasClass("#text"); java.util.regex.Pattern pattern36 = null; org.jsoup.select.Elements elements37 = document30.getElementsByAttributeValueMatching("hi!=\"\"", pattern36); org.jsoup.nodes.Element element38 = document30.body(); org.jsoup.select.Elements elements40 = document30.getElementsByTag("hi!"); org.jsoup.nodes.Document document42 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements44 = document42.getElementsContainingText("hi!"); boolean boolean46 = document42.hasClass("#text"); java.util.regex.Pattern pattern48 = null; org.jsoup.select.Elements elements49 = document42.getElementsByAttributeValueMatching("hi!=\"\"", pattern48); boolean boolean50 = attributeWithValueStarting28.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document42); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document42.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.prettyPrint(false); org.jsoup.nodes.Attributes attributes54 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder55 = null; org.jsoup.nodes.TextNode textNode58 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode58.setBaseUri(""); java.lang.String str61 = textNode58.getWholeText(); textNode58.setSiblingIndex(100); java.lang.StringBuilder stringBuilder64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); textNode58.outerHtmlTail(stringBuilder64, 100, outputSettings66); attributes54.html(stringBuilder55, outputSettings66); org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings66.escapeMode(); org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings66.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings51.escapeMode(escapeMode70); documentType4.outerHtmlTail(stringBuilder24, 10, outputSettings51); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertNull(element38); org.junit.Assert.assertNotNull(elements40); org.junit.Assert.assertNotNull(elements44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(textNode58); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings71); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); org.jsoup.nodes.Node node6 = documentType4.removeAttr("&amp;colon&semi;contains&amp;lpar&semi;&amp;lsqb&semi;&amp;lsqb&semi;&amp;num&semi;text&amp;Hat&semi;&amp;equals&semi;hi&amp;excl&semi;&amp;rsqb&semi;&amp;midast&semi;&amp;equals&semi;&amp;colon&semi;contains&amp;lpar&semi;&amp;rsqb&semi;"); org.junit.Assert.assertNotNull(node6); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element3 = null; org.jsoup.nodes.Document document5 = new org.jsoup.nodes.Document("hi!"); boolean boolean6 = attributeWithValueStarting2.matches(element3, (org.jsoup.nodes.Element) document5); org.jsoup.select.Elements elements9 = document5.getElementsByAttributeValueMatching("[#text^=hi!]", "[#text^=hi!]"); org.jsoup.parser.Tag tag10 = document5.tag(); boolean boolean11 = tag10.preserveWhitespace(); org.jsoup.nodes.Element element13 = new org.jsoup.nodes.Element(tag10, " text=\"hi!\" hi!=\"hi!\""); org.jsoup.nodes.Element element15 = element13.prepend(":eq(52)"); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.DocumentType documentType22 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.TextNode textNode27 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode27.setBaseUri(""); java.lang.String str30 = textNode27.getWholeText(); textNode27.setSiblingIndex(100); java.lang.StringBuilder stringBuilder33 = null; org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings(); textNode27.outerHtmlTail(stringBuilder33, 100, outputSettings35); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.escapeMode(escapeMode37); org.jsoup.nodes.Entities.EscapeMode escapeMode39 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.escapeMode(escapeMode39); java.nio.charset.Charset charset41 = outputSettings38.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings45.encoder(); org.jsoup.nodes.TextNode textNode49 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode49.setBaseUri(""); java.lang.String str52 = textNode49.getWholeText(); textNode49.setSiblingIndex(100); java.lang.StringBuilder stringBuilder55 = null; org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings(); textNode49.outerHtmlTail(stringBuilder55, 100, outputSettings57); org.jsoup.nodes.Entities.EscapeMode escapeMode59 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.escapeMode(escapeMode59); java.nio.charset.Charset charset61 = outputSettings57.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings45.charset(charset61); documentType22.outerHtmlTail(stringBuilder23, 1, outputSettings62); java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings62.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings62.indentAmount((int) (byte) 10); boolean boolean67 = outputSettings66.prettyPrint(); // The following exception was thrown during execution in test generation try { element15.outerHtmlHead(stringBuilder16, (int) (byte) 10, outputSettings66); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(elements9); org.junit.Assert.assertNotNull(tag10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(textNode27); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(charsetEncoder46); org.junit.Assert.assertNotNull(textNode49); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(charset61); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(charsetEncoder64); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode(); java.nio.charset.Charset charset25 = outputSettings23.charset(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder6, (int) (byte) 10, outputSettings23); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(charset25); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements6 = document4.getElementsContainingText("hi!"); java.lang.String str7 = document4.baseUri; org.jsoup.nodes.Element element9 = document4.prependElement("#document"); document4.setBaseUri("hi!"); boolean boolean12 = textNode2.equals((java.lang.Object) document4); org.jsoup.nodes.Attributes attributes13 = textNode2.attributes(); int int14 = textNode2.siblingIndex; org.jsoup.nodes.Attributes attributes15 = textNode2.attributes(); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.DocumentType documentType21 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.TextNode textNode26 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode26.setBaseUri(""); java.lang.String str29 = textNode26.getWholeText(); textNode26.setSiblingIndex(100); java.lang.StringBuilder stringBuilder32 = null; org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings(); textNode26.outerHtmlTail(stringBuilder32, 100, outputSettings34); org.jsoup.nodes.Entities.EscapeMode escapeMode36 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.escapeMode(escapeMode36); org.jsoup.nodes.Entities.EscapeMode escapeMode38 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.escapeMode(escapeMode38); java.nio.charset.Charset charset40 = outputSettings37.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings37.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings44.encoder(); org.jsoup.nodes.TextNode textNode48 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode48.setBaseUri(""); java.lang.String str51 = textNode48.getWholeText(); textNode48.setSiblingIndex(100); java.lang.StringBuilder stringBuilder54 = null; org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings(); textNode48.outerHtmlTail(stringBuilder54, 100, outputSettings56); org.jsoup.nodes.Entities.EscapeMode escapeMode58 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings56.escapeMode(escapeMode58); java.nio.charset.Charset charset60 = outputSettings56.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings44.charset(charset60); documentType21.outerHtmlTail(stringBuilder22, 1, outputSettings61); java.lang.StringBuilder stringBuilder63 = null; org.jsoup.nodes.DocumentType documentType69 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str70 = documentType69.nodeName(); java.lang.StringBuilder stringBuilder71 = null; org.jsoup.nodes.TextNode textNode75 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode75.setBaseUri(""); java.lang.String str78 = textNode75.getWholeText(); textNode75.setSiblingIndex(100); java.lang.StringBuilder stringBuilder81 = null; org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings(); textNode75.outerHtmlTail(stringBuilder81, 100, outputSettings83); org.jsoup.nodes.Entities.EscapeMode escapeMode85 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings83.escapeMode(escapeMode85); org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings83.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings83.clone(); documentType69.outerHtmlTail(stringBuilder71, (int) (byte) 10, outputSettings83); documentType21.outerHtmlTail(stringBuilder63, (int) (byte) 0, outputSettings83); // The following exception was thrown during execution in test generation try { attributes15.html(stringBuilder16, outputSettings83); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertNotNull(elements6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(textNode26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(charset40); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charsetEncoder45); org.junit.Assert.assertNotNull(textNode48); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(charset60); org.junit.Assert.assertNotNull(outputSettings61); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "#doctype" + "'", str70, "#doctype"); org.junit.Assert.assertNotNull(textNode75); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings86); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertNotNull(outputSettings88); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element3 = null; org.jsoup.nodes.Document document5 = new org.jsoup.nodes.Document("hi!"); boolean boolean6 = attributeWithValueStarting2.matches(element3, (org.jsoup.nodes.Element) document5); org.jsoup.nodes.Element element8 = document5.prependElement("hi!=\"hi!\""); org.jsoup.nodes.Document document9 = document5.ownerDocument(); java.lang.StringBuilder stringBuilder10 = null; org.jsoup.nodes.TextNode textNode14 = org.jsoup.nodes.TextNode.createFromEncoded("[^hi!]=\"\"", ":lt(52)"); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.DocumentType documentType21 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str22 = documentType21.nodeName(); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.TextNode textNode27 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode27.setBaseUri(""); java.lang.String str30 = textNode27.getWholeText(); textNode27.setSiblingIndex(100); java.lang.StringBuilder stringBuilder33 = null; org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings(); textNode27.outerHtmlTail(stringBuilder33, 100, outputSettings35); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.escapeMode(escapeMode37); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings35.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings35.clone(); documentType21.outerHtmlTail(stringBuilder23, (int) (byte) 10, outputSettings35); textNode14.outerHtmlTail(stringBuilder15, 100, outputSettings35); org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings35.escapeMode(); // The following exception was thrown during execution in test generation try { document5.outerHtmlTail(stringBuilder10, 100, outputSettings35); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(textNode14); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#doctype" + "'", str22, "#doctype"); org.junit.Assert.assertNotNull(textNode27); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.String str46 = documentType4.nodeName(); org.jsoup.nodes.Document document48 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements50 = document48.getElementsContainingText("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("#text"); java.util.List<org.jsoup.nodes.Node> nodeList53 = element52.childNodes; documentType4.childNodes = nodeList53; java.lang.String str55 = documentType4.nodeName(); java.lang.String str56 = documentType4.nodeName(); org.jsoup.nodes.Node[] nodeArray57 = documentType4.childNodesAsArray(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting60 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element61 = null; org.jsoup.nodes.Document document63 = new org.jsoup.nodes.Document("hi!"); boolean boolean64 = attributeWithValueStarting60.matches(element61, (org.jsoup.nodes.Element) document63); org.jsoup.nodes.Element element66 = document63.prependElement("hi!=\"hi!\""); org.jsoup.select.Elements elements68 = element66.getElementsMatchingOwnText(""); boolean boolean69 = element66.isBlock(); org.jsoup.select.Elements elements72 = element66.getElementsByAttributeValueEnding(":gt(52)", "[#doctype]"); org.jsoup.nodes.Document document74 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements75 = document74.getAllElements(); document74.baseUri = "hi!=\"hi!\""; boolean boolean78 = document74.hasText(); org.jsoup.nodes.Document document79 = document74.ownerDocument(); org.jsoup.nodes.Element element81 = document74.prependElement("&colon;contains&lpar;&lsqb;&lsqb;&num;text&Hat;&equals;hi&excl;&rsqb;&midast;&equals;&colon;contains&lpar;&rsqb;"); // The following exception was thrown during execution in test generation try { documentType4.replaceChild((org.jsoup.nodes.Node) element66, (org.jsoup.nodes.Node) element81); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#doctype" + "'", str46, "#doctype"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#doctype" + "'", str55, "#doctype"); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#doctype" + "'", str56, "#doctype"); org.junit.Assert.assertNotNull(nodeArray57); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(elements68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertNotNull(elements75); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(element81); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.String str46 = documentType4.nodeName(); org.jsoup.nodes.Document document48 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements50 = document48.getElementsContainingText("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("#text"); java.util.List<org.jsoup.nodes.Node> nodeList53 = element52.childNodes; documentType4.childNodes = nodeList53; java.lang.String str55 = documentType4.nodeName(); java.lang.String str56 = documentType4.nodeName(); org.jsoup.nodes.Document document57 = documentType4.ownerDocument(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#doctype" + "'", str46, "#doctype"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#doctype" + "'", str55, "#doctype"); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#doctype" + "'", str56, "#doctype"); org.junit.Assert.assertNull(document57); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("&amp;lt;#text&amp;gt;", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;", " &midast;", "[[:contains(!=:lt(52)]=[^hi!]=\"\"]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); java.lang.String str10 = textNode9.getWholeText(); java.lang.String str11 = textNode9.getWholeText(); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.Attributes attributes14 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode17.setBaseUri(""); java.lang.String str20 = textNode17.getWholeText(); textNode17.setSiblingIndex(100); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings(); textNode17.outerHtmlTail(stringBuilder23, 100, outputSettings25); org.jsoup.nodes.Entities.EscapeMode escapeMode27 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.escapeMode(escapeMode27); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode(); boolean boolean32 = attributes14.equals((java.lang.Object) outputSettings30); textNode9.outerHtmlTail(stringBuilder12, 1, outputSettings30); org.jsoup.nodes.TextNode textNode36 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode36.setBaseUri(""); java.lang.String str39 = textNode36.getWholeText(); textNode36.setSiblingIndex(100); java.lang.StringBuilder stringBuilder42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings(); textNode36.outerHtmlTail(stringBuilder42, 100, outputSettings44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.escapeMode(escapeMode46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); java.nio.charset.Charset charset50 = outputSettings47.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings30.charset(charset50); documentType4.outerHtmlTail(stringBuilder5, (int) 'a', outputSettings51); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!"); org.junit.Assert.assertNotNull(textNode17); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(textNode36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charset50); org.junit.Assert.assertNotNull(outputSettings51); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements2 = document1.getAllElements(); org.jsoup.nodes.Element element4 = document1.appendElement("hi!=\"hi!\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode16.setBaseUri(""); java.lang.String str19 = textNode16.getWholeText(); textNode16.setSiblingIndex(100); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); textNode16.outerHtmlTail(stringBuilder22, 100, outputSettings24); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.escapeMode(escapeMode26); org.jsoup.nodes.Entities.EscapeMode escapeMode28 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.escapeMode(escapeMode28); java.nio.charset.Charset charset30 = outputSettings27.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings34.encoder(); org.jsoup.nodes.TextNode textNode38 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode38.setBaseUri(""); java.lang.String str41 = textNode38.getWholeText(); textNode38.setSiblingIndex(100); java.lang.StringBuilder stringBuilder44 = null; org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings(); textNode38.outerHtmlTail(stringBuilder44, 100, outputSettings46); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.escapeMode(escapeMode48); java.nio.charset.Charset charset50 = outputSettings46.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings34.charset(charset50); documentType11.outerHtmlTail(stringBuilder12, 1, outputSettings51); java.lang.StringBuilder stringBuilder53 = null; org.jsoup.nodes.DocumentType documentType59 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str60 = documentType59.nodeName(); java.lang.StringBuilder stringBuilder61 = null; org.jsoup.nodes.TextNode textNode65 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode65.setBaseUri(""); java.lang.String str68 = textNode65.getWholeText(); textNode65.setSiblingIndex(100); java.lang.StringBuilder stringBuilder71 = null; org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings(); textNode65.outerHtmlTail(stringBuilder71, 100, outputSettings73); org.jsoup.nodes.Entities.EscapeMode escapeMode75 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings73.escapeMode(escapeMode75); org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings73.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings73.clone(); documentType59.outerHtmlTail(stringBuilder61, (int) (byte) 10, outputSettings73); documentType11.outerHtmlTail(stringBuilder53, (int) (byte) 0, outputSettings73); java.lang.StringBuilder stringBuilder81 = null; org.jsoup.nodes.Document document84 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements85 = document84.getAllElements(); document84.baseUri = "hi!=\"hi!\""; org.jsoup.nodes.Document.OutputSettings outputSettings88 = document84.outputSettings(); java.nio.charset.CharsetEncoder charsetEncoder89 = outputSettings88.encoder(); documentType11.outerHtmlTail(stringBuilder81, (int) ' ', outputSettings88); // The following exception was thrown during execution in test generation try { element4.outerHtmlTail(stringBuilder5, 1, outputSettings88); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(elements2); org.junit.Assert.assertNotNull(element4); org.junit.Assert.assertNotNull(textNode16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(charsetEncoder35); org.junit.Assert.assertNotNull(textNode38); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charset50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "#doctype" + "'", str60, "#doctype"); org.junit.Assert.assertNotNull(textNode65); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(outputSettings77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(elements85); org.junit.Assert.assertNotNull(outputSettings88); org.junit.Assert.assertNotNull(charsetEncoder89); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(#document", "#text", " ", "[^hi!]"); documentType4.setBaseUri(" #text=\"hi!=&quot;hi!&quot;\" hi!=\"\""); java.lang.StringBuilder stringBuilder7 = null; org.jsoup.nodes.TextNode textNode12 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode12.setBaseUri(""); java.lang.String str15 = textNode12.getWholeText(); textNode12.setSiblingIndex(100); java.lang.StringBuilder stringBuilder18 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings(); textNode12.outerHtmlTail(stringBuilder18, 100, outputSettings20); org.jsoup.nodes.Entities.EscapeMode escapeMode22 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.escapeMode(escapeMode22); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.escapeMode(escapeMode24); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings23.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.prettyPrint(false); java.lang.String str30 = org.jsoup.nodes.Entities.escape(":eq(100)", outputSettings29); org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings29.escapeMode(escapeMode32); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings29.clone(); documentType4.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings34); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node36 = documentType4.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":eq(100)" + "'", str30, ":eq(100)"); org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(outputSettings34); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode11.setBaseUri(""); java.lang.String str14 = textNode11.getWholeText(); textNode11.setSiblingIndex(100); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); textNode11.outerHtmlTail(stringBuilder17, 100, outputSettings19); attributes7.html(stringBuilder8, outputSettings19); java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings19.encoder(); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings19); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.Attributes attributes27 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder28 = null; org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); attributes27.html(stringBuilder28, outputSettings39); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone(); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings39.escapeMode(); java.lang.String str45 = org.jsoup.nodes.Entities.escape("[text=\"hi!\"$=:contains(#document]", outputSettings39); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings39.prettyPrint(true); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings39.escapeMode(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder24, (int) (byte) 1, outputSettings39); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(charsetEncoder22); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[text=&quot;hi!&quot;$=:contains(#document]" + "'", str45, "[text=&quot;hi!&quot;$=:contains(#document]"); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base)); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str5 = documentType4.nodeName(); java.lang.String str6 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder7 = null; org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode11.setBaseUri(""); java.lang.String str14 = textNode11.getWholeText(); textNode11.setSiblingIndex(100); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); textNode11.outerHtmlTail(stringBuilder17, 100, outputSettings19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.escapeMode(escapeMode21); org.jsoup.nodes.Entities.EscapeMode escapeMode23 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.escapeMode(escapeMode23); java.nio.charset.Charset charset25 = outputSettings22.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings22.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder7, (-1), outputSettings27); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings27.prettyPrint(false); java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings27.encoder(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(charset25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(charsetEncoder35); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains([text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]", "[text=&quot;hi!&quot;$=:contains(#document]", "#root", "                                                  "); org.jsoup.nodes.Node node5 = documentType4.nextSibling(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertNull(node5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[<#document></#document>!=:containsown(:contains(]", "#[^hi!]=\"hi!\"", ".<hi!=\"hi!\"></hi!=\"hi!\">", "[^[#text^=hi!]]"); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element3 = null; org.jsoup.nodes.Document document5 = new org.jsoup.nodes.Document("hi!"); boolean boolean6 = attributeWithValueStarting2.matches(element3, (org.jsoup.nodes.Element) document5); org.jsoup.select.Elements elements9 = document5.getElementsByAttributeValueMatching("[#text^=hi!]", "[#text^=hi!]"); org.jsoup.select.Elements elements12 = document5.getElementsByAttributeValueStarting("hi!=\"hi!\"", "hi!"); java.lang.String str13 = document5.nodeName(); org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode16.setBaseUri(""); java.lang.String str19 = textNode16.getWholeText(); textNode16.setSiblingIndex(100); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); textNode16.outerHtmlTail(stringBuilder22, 100, outputSettings24); org.jsoup.nodes.TextNode textNode27 = textNode16.splitText(0); boolean boolean28 = textNode16.isBlank(); org.jsoup.nodes.Element element29 = document5.appendChild((org.jsoup.nodes.Node) textNode16); org.jsoup.select.Elements elements31 = document5.getElementsByClass("hi!=\"hi!\""); java.lang.StringBuilder stringBuilder32 = null; org.jsoup.nodes.DocumentType documentType39 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder40 = null; org.jsoup.nodes.TextNode textNode44 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode44.setBaseUri(""); java.lang.String str47 = textNode44.getWholeText(); textNode44.setSiblingIndex(100); java.lang.StringBuilder stringBuilder50 = null; org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings(); textNode44.outerHtmlTail(stringBuilder50, 100, outputSettings52); org.jsoup.nodes.Entities.EscapeMode escapeMode54 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.escapeMode(escapeMode54); org.jsoup.nodes.Entities.EscapeMode escapeMode56 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.escapeMode(escapeMode56); java.nio.charset.Charset charset58 = outputSettings55.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings55.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings62.encoder(); org.jsoup.nodes.TextNode textNode66 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode66.setBaseUri(""); java.lang.String str69 = textNode66.getWholeText(); textNode66.setSiblingIndex(100); java.lang.StringBuilder stringBuilder72 = null; org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings(); textNode66.outerHtmlTail(stringBuilder72, 100, outputSettings74); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings74.escapeMode(escapeMode76); java.nio.charset.Charset charset78 = outputSettings74.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings62.charset(charset78); documentType39.outerHtmlTail(stringBuilder40, 1, outputSettings79); java.lang.String str81 = org.jsoup.nodes.Entities.escape("[text=\"hi!\"$=:contains(#document]", outputSettings79); int int82 = outputSettings79.indentAmount(); org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings79.prettyPrint(false); // The following exception was thrown during execution in test generation try { document5.outerHtmlHead(stringBuilder32, (int) (byte) 100, outputSettings84); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(elements9); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#document" + "'", str13, "#document"); org.junit.Assert.assertNotNull(textNode16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNotNull(textNode27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(textNode44); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(charset58); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(charsetEncoder63); org.junit.Assert.assertNotNull(textNode66); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings77); org.junit.Assert.assertNotNull(charset78); org.junit.Assert.assertNotNull(outputSettings79); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[text=&quot;hi!&quot;$=:contains(#document]" + "'", str81, "[text=&quot;hi!&quot;$=:contains(#document]"); org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10); org.junit.Assert.assertNotNull(outputSettings84); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(".hi!", "[text=&quot;hi!&quot;$=:contains(#document]", "", "hi!=\"\""); java.lang.String str6 = documentType4.attr("hi!=\"[text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]\""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[.:contains(=text=\"hi!\"#[^hi!]hi!=\"hi!\"]", "<hi!=\"hi!\"> <#root> <html> <head></head> <body></body> </html> </#root> </hi!=\"hi!\">", "", ""); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements6 = document4.getElementsContainingText("hi!"); boolean boolean8 = document4.hasClass("#text"); java.util.regex.Pattern pattern10 = null; org.jsoup.select.Elements elements11 = document4.getElementsByAttributeValueMatching("hi!=\"\"", pattern10); org.jsoup.nodes.Element element12 = document4.body(); org.jsoup.select.Elements elements14 = document4.getElementsByTag("hi!"); org.jsoup.nodes.Document document16 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements18 = document16.getElementsContainingText("hi!"); boolean boolean20 = document16.hasClass("#text"); java.util.regex.Pattern pattern22 = null; org.jsoup.select.Elements elements23 = document16.getElementsByAttributeValueMatching("hi!=\"\"", pattern22); boolean boolean24 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document16); org.jsoup.nodes.Document.OutputSettings outputSettings25 = document16.outputSettings(); org.jsoup.nodes.Element element27 = document16.createElement("[[#text^=hi!]*=:contains(]"); org.jsoup.nodes.Element element28 = document16.head(); java.lang.String str29 = document16.data(); java.lang.StringBuilder stringBuilder30 = null; org.jsoup.nodes.TextNode textNode34 = org.jsoup.nodes.TextNode.createFromEncoded("[^hi!]=\"\"", ":lt(52)"); java.lang.StringBuilder stringBuilder35 = null; org.jsoup.nodes.DocumentType documentType41 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str42 = documentType41.nodeName(); java.lang.StringBuilder stringBuilder43 = null; org.jsoup.nodes.TextNode textNode47 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode47.setBaseUri(""); java.lang.String str50 = textNode47.getWholeText(); textNode47.setSiblingIndex(100); java.lang.StringBuilder stringBuilder53 = null; org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings(); textNode47.outerHtmlTail(stringBuilder53, 100, outputSettings55); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.escapeMode(escapeMode57); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings55.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings55.clone(); documentType41.outerHtmlTail(stringBuilder43, (int) (byte) 10, outputSettings55); textNode34.outerHtmlTail(stringBuilder35, 100, outputSettings55); // The following exception was thrown during execution in test generation try { document16.outerHtmlTail(stringBuilder30, (int) 'a', outputSettings55); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(elements6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(elements11); org.junit.Assert.assertNull(element12); org.junit.Assert.assertNotNull(elements14); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(elements23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(textNode34); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "#doctype" + "'", str42, "#doctype"); org.junit.Assert.assertNotNull(textNode47); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(outputSettings60); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "[hi!=\"\"$=hi!]", "                                                  ", "[^]"); java.lang.String str5 = documentType4.baseUri; java.lang.StringBuilder stringBuilder6 = null; java.util.regex.Pattern pattern9 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching10 = new org.jsoup.select.Evaluator.AttributeWithValueMatching(" text=\"hi!\"", pattern9); org.jsoup.select.Evaluator.AllElements allElements11 = new org.jsoup.select.Evaluator.AllElements(); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements15 = document13.getElementsContainingText("hi!"); boolean boolean17 = document13.hasClass("#text"); java.util.regex.Pattern pattern19 = null; org.jsoup.select.Elements elements20 = document13.getElementsByAttributeValueMatching("hi!=\"\"", pattern19); org.jsoup.nodes.Element element21 = document13.body(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting24 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Document document26 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements28 = document26.getElementsContainingText("hi!"); boolean boolean30 = document26.hasClass("#text"); java.util.regex.Pattern pattern32 = null; org.jsoup.select.Elements elements33 = document26.getElementsByAttributeValueMatching("hi!=\"\"", pattern32); org.jsoup.nodes.Element element34 = document26.body(); org.jsoup.select.Elements elements36 = document26.getElementsByTag("hi!"); org.jsoup.nodes.Document document38 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements40 = document38.getElementsContainingText("hi!"); boolean boolean42 = document38.hasClass("#text"); java.util.regex.Pattern pattern44 = null; org.jsoup.select.Elements elements45 = document38.getElementsByAttributeValueMatching("hi!=\"\"", pattern44); boolean boolean46 = attributeWithValueStarting24.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Node node49 = document38.attr("[[#text^=hi!]*=:contains(]", "[[#text^=hi!]*=:contains(]"); boolean boolean50 = allElements11.matches(element21, (org.jsoup.nodes.Element) document38); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan52 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '4'); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting55 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element56 = null; org.jsoup.nodes.Document document58 = new org.jsoup.nodes.Document("hi!"); boolean boolean59 = attributeWithValueStarting55.matches(element56, (org.jsoup.nodes.Element) document58); org.jsoup.select.Elements elements62 = document58.getElementsByAttributeValueMatching("[#text^=hi!]", "[#text^=hi!]"); org.jsoup.nodes.Document document64 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements65 = document64.getAllElements(); boolean boolean66 = indexGreaterThan52.matches((org.jsoup.nodes.Element) document58, (org.jsoup.nodes.Element) document64); java.lang.String str67 = document64.val(); boolean boolean68 = attributeWithValueMatching10.matches(element21, (org.jsoup.nodes.Element) document64); java.lang.String str69 = document64.title(); org.jsoup.nodes.Element element71 = document64.getElementById("hi!=\"hi!\":lt(52)hi!:lt(52)#root:lt(52):lt(52) text=\"hi!\":lt(52)[#text^=hi!]"); org.jsoup.nodes.Document.OutputSettings outputSettings72 = document64.outputSettings(); boolean boolean73 = outputSettings72.prettyPrint(); documentType4.outerHtmlTail(stringBuilder6, (int) (short) -1, outputSettings72); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[^]" + "'", str5, "[^]"); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNull(element21); org.junit.Assert.assertNotNull(elements28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNull(element34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(elements40); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(elements45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(elements62); org.junit.Assert.assertNotNull(elements65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, ""); org.junit.Assert.assertNull(element71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode2.setBaseUri(""); java.lang.String str5 = textNode2.getWholeText(); textNode2.setSiblingIndex(100); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); textNode2.outerHtmlTail(stringBuilder8, 100, outputSettings10); textNode2.setBaseUri("hi!"); java.lang.String str15 = textNode2.attr("hi!"); org.jsoup.nodes.TextNode textNode18 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode18.setBaseUri(""); java.lang.String str21 = textNode18.getWholeText(); textNode18.setSiblingIndex(100); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings(); textNode18.outerHtmlTail(stringBuilder24, 100, outputSettings26); org.jsoup.nodes.Attributes attributes28 = textNode18.attributes; org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); org.jsoup.nodes.Node[] nodeArray34 = new org.jsoup.nodes.Node[] { textNode31 }; java.util.ArrayList<org.jsoup.nodes.Node> nodeList35 = new java.util.ArrayList<org.jsoup.nodes.Node>(); boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Node>) nodeList35, nodeArray34); textNode18.childNodes = nodeList35; textNode2.childNodes = nodeList35; org.jsoup.helper.Validate.notNull((java.lang.Object) textNode2, ""); org.jsoup.nodes.Node node42 = textNode2.removeAttr(":gt(0)"); org.jsoup.nodes.Attributes attributes43 = textNode2.attributes(); org.jsoup.nodes.DocumentType documentType48 = new org.jsoup.nodes.DocumentType("[#document]", ":gt(0)", "[:contains(!=:lt(52)]", "[:contains(!=:lt(52)]"); java.lang.String str49 = documentType48.nodeName(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node50 = textNode2.after((org.jsoup.nodes.Node) documentType48); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(textNode18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNull(attributes28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertNotNull(nodeArray34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(node42); org.junit.Assert.assertNotNull(attributes43); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "#doctype" + "'", str49, "#doctype"); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(".hi!", "[text=&quot;hi!&quot;$=:contains(#document]", "", "hi!=\"\""); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode11.setBaseUri(""); java.lang.String str14 = textNode11.getWholeText(); textNode11.setSiblingIndex(100); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); textNode11.outerHtmlTail(stringBuilder17, 100, outputSettings19); attributes7.html(stringBuilder8, outputSettings19); java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings19.encoder(); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings19); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.TextNode textNode28 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); java.lang.String str29 = textNode28.getWholeText(); java.lang.String str30 = textNode28.getWholeText(); java.lang.StringBuilder stringBuilder31 = null; org.jsoup.nodes.Attributes attributes33 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.TextNode textNode36 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode36.setBaseUri(""); java.lang.String str39 = textNode36.getWholeText(); textNode36.setSiblingIndex(100); java.lang.StringBuilder stringBuilder42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings(); textNode36.outerHtmlTail(stringBuilder42, 100, outputSettings44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.escapeMode(escapeMode46); org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode(); boolean boolean51 = attributes33.equals((java.lang.Object) outputSettings49); textNode28.outerHtmlTail(stringBuilder31, 1, outputSettings49); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder24, (int) (short) 10, outputSettings49); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(charsetEncoder22); org.junit.Assert.assertNotNull(textNode28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertNotNull(textNode36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "#text", "&num;&lsqb;&Hat;hi&excl;&rsqb;&equals;&quot;hi&excl;&quot;", "[^[#text^=hi!]]"); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching(" text=\"hi!\"", pattern1); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements6 = document4.getElementsContainingText("hi!"); java.lang.String str7 = document4.baseUri; org.jsoup.nodes.Element element9 = document4.prependElement("#document"); org.jsoup.select.Elements elements10 = document4.parents(); org.jsoup.nodes.Document document12 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements13 = document12.getAllElements(); document12.baseUri = "hi!=\"hi!\""; boolean boolean16 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document12); org.jsoup.nodes.Element element18 = document4.html("#document"); org.jsoup.nodes.Attributes attributes19 = element18.attributes; org.jsoup.nodes.DocumentType documentType24 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str25 = documentType24.nodeName(); org.jsoup.nodes.Element element26 = element18.appendChild((org.jsoup.nodes.Node) documentType24); java.util.List<org.jsoup.nodes.Node> nodeList27 = documentType24.childNodes; java.lang.StringBuilder stringBuilder28 = null; org.jsoup.nodes.TextNode textNode35 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode35.setBaseUri(""); java.lang.String str38 = textNode35.getWholeText(); textNode35.setSiblingIndex(100); java.lang.StringBuilder stringBuilder41 = null; org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings(); textNode35.outerHtmlTail(stringBuilder41, 100, outputSettings43); java.lang.String str45 = org.jsoup.nodes.Entities.escape("hi!", outputSettings43); boolean boolean46 = outputSettings43.prettyPrint(); java.lang.String str47 = org.jsoup.nodes.Entities.escape("<#text>", outputSettings43); java.lang.String str48 = org.jsoup.nodes.Entities.escape("[#document^=]", outputSettings43); org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings43.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) (short) 100); // The following exception was thrown during execution in test generation try { documentType24.outerHtmlHead(stringBuilder28, (int) (short) 100, outputSettings51); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(elements6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(attributes19); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(textNode35); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "&lt;#text&gt;" + "'", str47, "&lt;#text&gt;"); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[#document^=]" + "'", str48, "[#document^=]"); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings51); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode2.setBaseUri(""); java.lang.String str5 = textNode2.getWholeText(); textNode2.setSiblingIndex(100); textNode2.baseUri = "#root"; boolean boolean11 = textNode2.hasAttr(""); java.lang.String str13 = textNode2.absUrl("#text"); org.jsoup.nodes.TextNode textNode15 = textNode2.splitText((int) (short) 0); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.DocumentType documentType22 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.TextNode textNode27 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode27.setBaseUri(""); java.lang.String str30 = textNode27.getWholeText(); textNode27.setSiblingIndex(100); java.lang.StringBuilder stringBuilder33 = null; org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings(); textNode27.outerHtmlTail(stringBuilder33, 100, outputSettings35); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.escapeMode(escapeMode37); org.jsoup.nodes.Entities.EscapeMode escapeMode39 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.escapeMode(escapeMode39); java.nio.charset.Charset charset41 = outputSettings38.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings45.encoder(); org.jsoup.nodes.TextNode textNode49 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode49.setBaseUri(""); java.lang.String str52 = textNode49.getWholeText(); textNode49.setSiblingIndex(100); java.lang.StringBuilder stringBuilder55 = null; org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings(); textNode49.outerHtmlTail(stringBuilder55, 100, outputSettings57); org.jsoup.nodes.Entities.EscapeMode escapeMode59 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.escapeMode(escapeMode59); java.nio.charset.Charset charset61 = outputSettings57.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings45.charset(charset61); documentType22.outerHtmlTail(stringBuilder23, 1, outputSettings62); org.jsoup.nodes.TextNode textNode66 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode66.setBaseUri(""); java.lang.String str69 = textNode66.getWholeText(); textNode66.setSiblingIndex(100); java.lang.StringBuilder stringBuilder72 = null; org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings(); textNode66.outerHtmlTail(stringBuilder72, 100, outputSettings74); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings74.escapeMode(escapeMode76); org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings77.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings79.escapeMode(); java.nio.charset.CharsetEncoder charsetEncoder82 = null; org.jsoup.nodes.Entities.EscapeMode escapeMode83 = org.jsoup.nodes.Entities.EscapeMode.extended; java.lang.String str84 = org.jsoup.nodes.Entities.escape("", charsetEncoder82, escapeMode83); org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings79.escapeMode(escapeMode83); org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings62.escapeMode(escapeMode83); textNode2.outerHtmlTail(stringBuilder16, (int) (short) -1, outputSettings62); org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(textNode15); org.junit.Assert.assertNotNull(textNode27); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(charsetEncoder46); org.junit.Assert.assertNotNull(textNode49); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(charset61); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(textNode66); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings77); org.junit.Assert.assertNotNull(outputSettings79); org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, ""); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertNotNull(outputSettings86); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[#document]", ":gt(0)", "[:contains(!=:lt(52)]", "[:contains(!=:lt(52)]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document.OutputSettings outputSettings8 = null; documentType4.outerHtmlTail(stringBuilder6, 2, outputSettings8); java.lang.StringBuilder stringBuilder10 = null; org.jsoup.nodes.TextNode textNode14 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode14.setBaseUri(""); java.lang.String str17 = textNode14.getWholeText(); textNode14.setSiblingIndex(100); java.lang.StringBuilder stringBuilder20 = null; org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings(); textNode14.outerHtmlTail(stringBuilder20, 100, outputSettings22); textNode14.setBaseUri("hi!"); org.jsoup.nodes.TextNode textNode28 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode28.setBaseUri(""); java.lang.String str31 = textNode28.getWholeText(); org.jsoup.nodes.Node[] nodeArray32 = textNode28.childNodesAsArray(); textNode14.addChildren(nodeArray32); textNode14.setBaseUri(""); org.jsoup.nodes.TextNode textNode37 = textNode14.splitText((int) (short) 1); java.lang.StringBuilder stringBuilder38 = null; org.jsoup.nodes.TextNode textNode42 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode42.setBaseUri(""); java.lang.String str45 = textNode42.getWholeText(); textNode42.setSiblingIndex(100); java.lang.StringBuilder stringBuilder48 = null; org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings(); textNode42.outerHtmlTail(stringBuilder48, 100, outputSettings50); org.jsoup.nodes.Entities.EscapeMode escapeMode52 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings50.escapeMode(escapeMode52); org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings50.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode55 = null; org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.escapeMode(escapeMode55); textNode14.outerHtmlTail(stringBuilder38, 100, outputSettings56); documentType4.outerHtmlTail(stringBuilder10, 0, outputSettings56); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode14); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(textNode28); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!"); org.junit.Assert.assertNotNull(nodeArray32); org.junit.Assert.assertNotNull(textNode37); org.junit.Assert.assertNotNull(textNode42); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(outputSettings56); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings44.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings44.indentAmount((int) (byte) 10); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings44.charset("[^]"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: [^]"); } catch (java.nio.charset.IllegalCharsetNameException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charsetEncoder46); org.junit.Assert.assertNotNull(outputSettings48); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("text=\"hi!\"[.<hi!=\"hi!\"></hi!=\"hi!\">=&midast;]hi!=\"\"", "[hi!]", "                                                 ", "<#document>\n hi!=&quot;hi!&quot;\n</#document>"); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode2.setBaseUri(""); java.lang.String str5 = textNode2.getWholeText(); textNode2.setSiblingIndex(100); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); textNode2.outerHtmlTail(stringBuilder8, 100, outputSettings10); org.jsoup.nodes.Attributes attributes12 = textNode2.attributes; org.jsoup.nodes.TextNode textNode15 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode15.setBaseUri(""); java.lang.String str18 = textNode15.getWholeText(); textNode2.setParentNode((org.jsoup.nodes.Node) textNode15); org.jsoup.nodes.Node node21 = textNode15.removeAttr("hi!=\"hi!\""); java.lang.String str22 = textNode15.text; java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.DocumentType documentType29 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder30 = null; org.jsoup.nodes.TextNode textNode34 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode34.setBaseUri(""); java.lang.String str37 = textNode34.getWholeText(); textNode34.setSiblingIndex(100); java.lang.StringBuilder stringBuilder40 = null; org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings(); textNode34.outerHtmlTail(stringBuilder40, 100, outputSettings42); org.jsoup.nodes.Entities.EscapeMode escapeMode44 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings42.escapeMode(escapeMode44); org.jsoup.nodes.Entities.EscapeMode escapeMode46 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.escapeMode(escapeMode46); java.nio.charset.Charset charset48 = outputSettings45.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings45.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings52.encoder(); org.jsoup.nodes.TextNode textNode56 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode56.setBaseUri(""); java.lang.String str59 = textNode56.getWholeText(); textNode56.setSiblingIndex(100); java.lang.StringBuilder stringBuilder62 = null; org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings(); textNode56.outerHtmlTail(stringBuilder62, 100, outputSettings64); org.jsoup.nodes.Entities.EscapeMode escapeMode66 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings64.escapeMode(escapeMode66); java.nio.charset.Charset charset68 = outputSettings64.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings52.charset(charset68); documentType29.outerHtmlTail(stringBuilder30, 1, outputSettings69); java.nio.charset.CharsetEncoder charsetEncoder71 = outputSettings69.encoder(); textNode15.outerHtmlTail(stringBuilder23, (int) (short) -1, outputSettings69); org.jsoup.nodes.Attributes attributes73 = textNode15.attributes(); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan75 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '4'); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting78 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element79 = null; org.jsoup.nodes.Document document81 = new org.jsoup.nodes.Document("hi!"); boolean boolean82 = attributeWithValueStarting78.matches(element79, (org.jsoup.nodes.Element) document81); org.jsoup.select.Elements elements85 = document81.getElementsByAttributeValueMatching("[#text^=hi!]", "[#text^=hi!]"); org.jsoup.nodes.Document document87 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements88 = document87.getAllElements(); boolean boolean89 = indexGreaterThan75.matches((org.jsoup.nodes.Element) document81, (org.jsoup.nodes.Element) document87); java.lang.String str90 = document87.val(); org.jsoup.nodes.Document document91 = document87.normalise(); java.lang.String str92 = document87.title(); org.jsoup.nodes.Element element93 = document87.body(); org.jsoup.select.Elements elements94 = document87.parents(); org.jsoup.nodes.Element element95 = document87.body(); boolean boolean96 = attributes73.equals((java.lang.Object) document87); org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertNull(attributes12); org.junit.Assert.assertNotNull(textNode15); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); org.junit.Assert.assertNotNull(node21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertNotNull(textNode34); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(charset48); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(charsetEncoder53); org.junit.Assert.assertNotNull(textNode56); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings67); org.junit.Assert.assertNotNull(charset68); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(charsetEncoder71); org.junit.Assert.assertNotNull(attributes73); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(elements85); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, ""); org.junit.Assert.assertNotNull(element93); org.junit.Assert.assertNotNull(elements94); org.junit.Assert.assertNotNull(element95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[#document^=]", "<#document text=\"hi!\"></#document>", "[text=&quot;hi!&quot;:contains([[#text^=hi!]*=:contains(]hi!=&quot;&quot;*=.:contains(]", "#text"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings17.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.prettyPrint(false); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) 10, outputSettings24); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.clone(); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings26); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.String str46 = documentType4.nodeName(); org.jsoup.nodes.Document document48 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements50 = document48.getElementsContainingText("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("#text"); java.util.List<org.jsoup.nodes.Node> nodeList53 = element52.childNodes; documentType4.childNodes = nodeList53; org.jsoup.nodes.Document document56 = org.jsoup.nodes.Document.createShell(" text=\"hi!\" hi!=\"hi!\""); org.jsoup.nodes.Element element58 = document56.html(":eq(-1)"); org.jsoup.nodes.Node node59 = documentType4.doClone((org.jsoup.nodes.Node) element58); java.lang.StringBuilder stringBuilder60 = null; org.jsoup.nodes.TextNode textNode65 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode65.setBaseUri(""); java.lang.String str68 = textNode65.getWholeText(); textNode65.setSiblingIndex(100); java.lang.StringBuilder stringBuilder71 = null; org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings(); textNode65.outerHtmlTail(stringBuilder71, 100, outputSettings73); org.jsoup.nodes.Entities.EscapeMode escapeMode75 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings73.escapeMode(escapeMode75); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.prettyPrint(false); int int79 = outputSettings78.indentAmount(); java.lang.String str80 = org.jsoup.nodes.Entities.escape("<hi!=\"hi!\">\n <#root>\n <html>\n  <head></head>\n  <body></body>\n </html>\n </#root>\n</hi!=\"hi!\">", outputSettings78); documentType4.outerHtmlTail(stringBuilder60, (int) (byte) 0, outputSettings78); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#doctype" + "'", str46, "#doctype"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(node59); org.junit.Assert.assertNotNull(textNode65); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "&lt;hi&excl;&equals;&quot;hi&excl;&quot;&gt;&NewLine; &lt;&num;root&gt;&NewLine; &lt;html&gt;&NewLine;  &lt;head&gt;&lt;&sol;head&gt;&NewLine;  &lt;body&gt;&lt;&sol;body&gt;&NewLine; &lt;&sol;html&gt;&NewLine; &lt;&sol;&num;root&gt;&NewLine;&lt;&sol;hi&excl;&equals;&quot;hi&excl;&quot;&gt;" + "'", str80, "&lt;hi&excl;&equals;&quot;hi&excl;&quot;&gt;&NewLine; &lt;&num;root&gt;&NewLine; &lt;html&gt;&NewLine;  &lt;head&gt;&lt;&sol;head&gt;&NewLine;  &lt;body&gt;&lt;&sol;body&gt;&NewLine; &lt;&sol;html&gt;&NewLine; &lt;&sol;&num;root&gt;&NewLine;&lt;&sol;hi&excl;&equals;&quot;hi&excl;&quot;&gt;"); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("#document", "[^hi!]", "hi!=\"hi!\"#:contains(hi!#:contains(#root#:contains(#:contains( text=\"hi!\"#:contains([#text^=hi!]", ":containsOwn(:contains("); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(" text=&quot;hi!&quot; hi!=&quot;hi!&quot;", "[hi!=\"\"$=text=\"hi!\"#[^hi!]hi!=\"hi!\"]", ":eq(-1)", ""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); java.lang.String str10 = textNode9.getWholeText(); org.jsoup.nodes.Node node13 = textNode9.attr("hi!", ""); org.jsoup.nodes.Attributes attributes14 = textNode9.attributes(); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.TextNode textNode19 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode19.setBaseUri(""); java.lang.String str22 = textNode19.getWholeText(); textNode19.setSiblingIndex(100); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings(); textNode19.outerHtmlTail(stringBuilder25, 100, outputSettings27); org.jsoup.nodes.Entities.EscapeMode escapeMode29 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings27.escapeMode(escapeMode29); org.jsoup.nodes.Entities.EscapeMode escapeMode31 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.escapeMode(escapeMode31); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings30.prettyPrint(true); boolean boolean35 = outputSettings30.prettyPrint(); textNode9.outerHtmlTail(stringBuilder15, (int) (byte) -1, outputSettings30); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings30.prettyPrint(true); org.jsoup.nodes.TextNode textNode41 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode41.setBaseUri(""); java.lang.String str44 = textNode41.getWholeText(); textNode41.setSiblingIndex(100); java.lang.StringBuilder stringBuilder47 = null; org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings(); textNode41.outerHtmlTail(stringBuilder47, 100, outputSettings49); org.jsoup.nodes.Entities.EscapeMode escapeMode51 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings49.escapeMode(escapeMode51); org.jsoup.nodes.Entities.EscapeMode escapeMode53 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.escapeMode(escapeMode53); java.nio.charset.Charset charset55 = outputSettings54.charset(); org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings54.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings30.escapeMode(escapeMode56); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.prettyPrint(true); documentType4.outerHtmlTail(stringBuilder5, 2, outputSettings59); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!"); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(attributes14); org.junit.Assert.assertNotNull(textNode19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(textNode41); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(charset55); org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(outputSettings59); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("hi!", "hi!"); java.lang.String str3 = attribute2.getValue(); boolean boolean5 = attribute2.equals((java.lang.Object) 0L); java.lang.String str6 = attribute2.getValue(); java.lang.String str7 = attribute2.getKey(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.DocumentType documentType13 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str14 = documentType13.nodeName(); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.TextNode textNode19 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode19.setBaseUri(""); java.lang.StringBuilder stringBuilder22 = null; org.jsoup.nodes.TextNode textNode26 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode26.setBaseUri(""); java.lang.String str29 = textNode26.getWholeText(); textNode26.setSiblingIndex(100); java.lang.StringBuilder stringBuilder32 = null; org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings(); textNode26.outerHtmlTail(stringBuilder32, 100, outputSettings34); org.jsoup.nodes.Entities.EscapeMode escapeMode36 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.escapeMode(escapeMode36); org.jsoup.nodes.Entities.EscapeMode escapeMode38 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.escapeMode(escapeMode38); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings37.prettyPrint(true); textNode19.outerHtmlTail(stringBuilder22, (int) 'a', outputSettings41); org.jsoup.nodes.TextNode textNode45 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode45.setBaseUri(""); java.lang.String str48 = textNode45.getWholeText(); textNode45.setSiblingIndex(100); java.lang.StringBuilder stringBuilder51 = null; org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings(); textNode45.outerHtmlTail(stringBuilder51, 100, outputSettings53); org.jsoup.nodes.Entities.EscapeMode escapeMode55 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings53.escapeMode(escapeMode55); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.escapeMode(escapeMode57); java.nio.charset.Charset charset59 = outputSettings56.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings41.charset(charset59); documentType13.outerHtmlTail(stringBuilder15, (int) (short) 1, outputSettings41); // The following exception was thrown during execution in test generation try { attribute2.html(stringBuilder8, outputSettings41); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#doctype" + "'", str14, "#doctype"); org.junit.Assert.assertNotNull(textNode19); org.junit.Assert.assertNotNull(textNode26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(textNode45); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertNotNull(charset59); org.junit.Assert.assertNotNull(outputSettings60); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("&amp;lt;#text&amp;gt;", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;", " &midast;", "[[:contains(!=:lt(52)]=[^hi!]=\"\"]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.TextNode textNode11 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode11.setBaseUri(""); java.lang.String str14 = textNode11.getWholeText(); textNode11.setSiblingIndex(100); java.lang.StringBuilder stringBuilder17 = null; org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); textNode11.outerHtmlTail(stringBuilder17, 100, outputSettings19); attributes7.html(stringBuilder8, outputSettings19); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.clone(); org.jsoup.nodes.Attributes attributes23 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.TextNode textNode27 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode27.setBaseUri(""); java.lang.String str30 = textNode27.getWholeText(); textNode27.setSiblingIndex(100); java.lang.StringBuilder stringBuilder33 = null; org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings(); textNode27.outerHtmlTail(stringBuilder33, 100, outputSettings35); attributes23.html(stringBuilder24, outputSettings35); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings35.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings22.escapeMode(escapeMode39); org.jsoup.nodes.TextNode textNode43 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode43.setBaseUri(""); java.lang.String str46 = textNode43.getWholeText(); textNode43.setSiblingIndex(100); java.lang.StringBuilder stringBuilder49 = null; org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings(); textNode43.outerHtmlTail(stringBuilder49, 100, outputSettings51); org.jsoup.nodes.Attributes attributes53 = textNode43.attributes; org.jsoup.nodes.TextNode textNode56 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode56.setBaseUri(""); java.lang.String str59 = textNode56.getWholeText(); textNode43.setParentNode((org.jsoup.nodes.Node) textNode56); int int61 = textNode43.siblingIndex; java.lang.StringBuilder stringBuilder62 = null; org.jsoup.nodes.TextNode textNode66 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode66.setBaseUri(""); java.lang.String str69 = textNode66.getWholeText(); textNode66.setSiblingIndex(100); java.lang.StringBuilder stringBuilder72 = null; org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings(); textNode66.outerHtmlTail(stringBuilder72, 100, outputSettings74); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings74.escapeMode(escapeMode76); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings74.clone(); textNode43.outerHtmlTail(stringBuilder62, (int) '#', outputSettings78); org.jsoup.nodes.TextNode textNode82 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode82.setBaseUri(""); java.lang.String str85 = textNode82.getWholeText(); textNode82.setSiblingIndex(100); java.lang.StringBuilder stringBuilder88 = null; org.jsoup.nodes.Document.OutputSettings outputSettings90 = new org.jsoup.nodes.Document.OutputSettings(); textNode82.outerHtmlTail(stringBuilder88, 100, outputSettings90); org.jsoup.nodes.Entities.EscapeMode escapeMode92 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings90.escapeMode(escapeMode92); org.jsoup.nodes.Entities.EscapeMode escapeMode94 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings93.escapeMode(escapeMode94); java.nio.charset.Charset charset96 = outputSettings93.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings97 = outputSettings78.charset(charset96); org.jsoup.nodes.Document.OutputSettings outputSettings98 = outputSettings22.charset(charset96); documentType4.outerHtmlTail(stringBuilder5, (int) (short) -1, outputSettings22); org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(textNode27); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(textNode43); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertNull(attributes53); org.junit.Assert.assertNotNull(textNode56); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!"); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100); org.junit.Assert.assertNotNull(textNode66); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(textNode82); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings93); org.junit.Assert.assertTrue("'" + escapeMode94 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode94.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings95); org.junit.Assert.assertNotNull(charset96); org.junit.Assert.assertNotNull(outputSettings97); org.junit.Assert.assertNotNull(outputSettings98); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode9.setBaseUri(""); java.lang.String str12 = textNode9.getWholeText(); textNode9.setSiblingIndex(100); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); textNode9.outerHtmlTail(stringBuilder15, 100, outputSettings17); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.escapeMode(escapeMode19); org.jsoup.nodes.Entities.EscapeMode escapeMode21 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.escapeMode(escapeMode21); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) (byte) 10); java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings27.encoder(); org.jsoup.nodes.TextNode textNode31 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode31.setBaseUri(""); java.lang.String str34 = textNode31.getWholeText(); textNode31.setSiblingIndex(100); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); textNode31.outerHtmlTail(stringBuilder37, 100, outputSettings39); org.jsoup.nodes.Entities.EscapeMode escapeMode41 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.escapeMode(escapeMode41); java.nio.charset.Charset charset43 = outputSettings39.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings27.charset(charset43); documentType4.outerHtmlTail(stringBuilder5, 1, outputSettings44); java.lang.StringBuilder stringBuilder46 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting50 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Document document52 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements54 = document52.getElementsContainingText("hi!"); boolean boolean56 = document52.hasClass("#text"); java.util.regex.Pattern pattern58 = null; org.jsoup.select.Elements elements59 = document52.getElementsByAttributeValueMatching("hi!=\"\"", pattern58); org.jsoup.nodes.Element element60 = document52.body(); org.jsoup.select.Elements elements62 = document52.getElementsByTag("hi!"); org.jsoup.nodes.Document document64 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements66 = document64.getElementsContainingText("hi!"); boolean boolean68 = document64.hasClass("#text"); java.util.regex.Pattern pattern70 = null; org.jsoup.select.Elements elements71 = document64.getElementsByAttributeValueMatching("hi!=\"\"", pattern70); boolean boolean72 = attributeWithValueStarting50.matches((org.jsoup.nodes.Element) document52, (org.jsoup.nodes.Element) document64); org.jsoup.nodes.Document.OutputSettings outputSettings73 = document64.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); org.jsoup.nodes.Attributes attributes76 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder77 = null; org.jsoup.nodes.TextNode textNode80 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode80.setBaseUri(""); java.lang.String str83 = textNode80.getWholeText(); textNode80.setSiblingIndex(100); java.lang.StringBuilder stringBuilder86 = null; org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings(); textNode80.outerHtmlTail(stringBuilder86, 100, outputSettings88); attributes76.html(stringBuilder77, outputSettings88); org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings88.escapeMode(); org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings88.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings73.escapeMode(escapeMode92); boolean boolean94 = outputSettings93.prettyPrint(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder46, 10, outputSettings93); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(charsetEncoder28); org.junit.Assert.assertNotNull(textNode31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(elements54); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(elements59); org.junit.Assert.assertNull(element60); org.junit.Assert.assertNotNull(elements62); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNotNull(textNode80); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("                                                  ", "[hi!=\"\"$=hi!]", "                                                  ", "[^]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); documentType4.outerHtmlTail(stringBuilder6, 100, outputSettings21); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.prettyPrint(true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings24); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); java.lang.String str3 = textNode2.getWholeText(); java.lang.String str4 = textNode2.getWholeText(); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.Attributes attributes14 = new org.jsoup.nodes.Attributes(); java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.TextNode textNode18 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode18.setBaseUri(""); java.lang.String str21 = textNode18.getWholeText(); textNode18.setSiblingIndex(100); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings(); textNode18.outerHtmlTail(stringBuilder24, 100, outputSettings26); attributes14.html(stringBuilder15, outputSettings26); java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings26.encoder(); documentType11.outerHtmlTail(stringBuilder12, 1, outputSettings26); // The following exception was thrown during execution in test generation try { textNode2.outerHtmlHead(stringBuilder5, (int) (short) 1, outputSettings26); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!"); org.junit.Assert.assertNotNull(textNode18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNotNull(charsetEncoder29); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[#document]", ":gt(0)", "[:contains(!=:lt(52)]", "[:contains(!=:lt(52)]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document.OutputSettings outputSettings8 = null; documentType4.outerHtmlTail(stringBuilder6, 2, outputSettings8); java.util.List<org.jsoup.nodes.Node> nodeList10 = documentType4.childNodes(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(nodeList10); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":contains(#document", "#text", " ", "[^hi!]"); documentType4.setBaseUri(" #text=\"hi!=&quot;hi!&quot;\" hi!=\"\""); java.lang.StringBuilder stringBuilder7 = null; org.jsoup.nodes.TextNode textNode12 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode12.setBaseUri(""); java.lang.String str15 = textNode12.getWholeText(); textNode12.setSiblingIndex(100); java.lang.StringBuilder stringBuilder18 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings(); textNode12.outerHtmlTail(stringBuilder18, 100, outputSettings20); org.jsoup.nodes.Entities.EscapeMode escapeMode22 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.escapeMode(escapeMode22); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.escapeMode(escapeMode24); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings23.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings23.prettyPrint(false); java.lang.String str30 = org.jsoup.nodes.Entities.escape(":eq(100)", outputSettings29); org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings29.escapeMode(escapeMode32); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings29.clone(); documentType4.outerHtmlTail(stringBuilder7, (int) (byte) 100, outputSettings34); java.lang.StringBuilder stringBuilder36 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting40 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("#text", "hi!"); org.jsoup.nodes.Element element41 = null; org.jsoup.nodes.Document document43 = new org.jsoup.nodes.Document("hi!"); boolean boolean44 = attributeWithValueStarting40.matches(element41, (org.jsoup.nodes.Element) document43); org.jsoup.nodes.Element element46 = document43.prependElement("hi!=\"hi!\""); org.jsoup.nodes.Element element48 = element46.wrap("#text"); org.jsoup.nodes.Document document50 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements52 = document50.getElementsContainingText("hi!"); java.lang.String str53 = document50.baseUri; org.jsoup.nodes.Document.OutputSettings outputSettings54 = document50.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = document50.outputSettings(); java.util.List<org.jsoup.nodes.Node> nodeList56 = document50.childNodes(); org.jsoup.nodes.Document document57 = document50.clone(); org.jsoup.nodes.Node node58 = element46.before((org.jsoup.nodes.Node) document57); org.jsoup.nodes.Document.OutputSettings outputSettings59 = document57.outputSettings(); documentType4.outerHtmlTail(stringBuilder36, (int) (short) 1, outputSettings59); org.junit.Assert.assertNotNull(textNode12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":eq(100)" + "'", str30, ":eq(100)"); org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNull(element48); org.junit.Assert.assertNotNull(elements52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(nodeList56); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(node58); org.junit.Assert.assertNotNull(outputSettings59); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":eq(0)", "<hi!=\"hi!\"></hi!=\"hi!\">", "[#doctype$=*]", "hi!=&quot;[text=&amp;quot;hi!&amp;quot;:contains([[#text^=hi!]*=:contains(]hi!=&amp;quot;&amp;quot;*=.:contains(]&quot;"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType(":contains(", "&colon;contains&lpar;", ":contains(", ""); java.lang.String str12 = documentType11.nodeName(); java.lang.String str13 = documentType11.nodeName(); java.lang.StringBuilder stringBuilder14 = null; org.jsoup.nodes.TextNode textNode18 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode18.setBaseUri(""); java.lang.String str21 = textNode18.getWholeText(); textNode18.setSiblingIndex(100); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings(); textNode18.outerHtmlTail(stringBuilder24, 100, outputSettings26); org.jsoup.nodes.Entities.EscapeMode escapeMode28 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings26.escapeMode(escapeMode28); org.jsoup.nodes.Entities.EscapeMode escapeMode30 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.escapeMode(escapeMode30); java.nio.charset.Charset charset32 = outputSettings29.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings29.prettyPrint(true); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) (byte) 10); documentType11.outerHtmlTail(stringBuilder14, (-1), outputSettings34); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings34.indentAmount(0); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) 10, outputSettings34); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#doctype" + "'", str12, "#doctype"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#doctype" + "'", str13, "#doctype"); org.junit.Assert.assertNotNull(textNode18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings31); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings39); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode10.setBaseUri(""); java.lang.String str13 = textNode10.getWholeText(); textNode10.setSiblingIndex(100); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings(); textNode10.outerHtmlTail(stringBuilder16, 100, outputSettings18); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.escapeMode(escapeMode20); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.clone(); documentType4.outerHtmlTail(stringBuilder6, (int) (byte) 10, outputSettings18); java.lang.String str25 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.TextNode textNode30 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode30.setBaseUri(""); java.lang.StringBuilder stringBuilder33 = null; org.jsoup.nodes.TextNode textNode37 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode37.setBaseUri(""); java.lang.String str40 = textNode37.getWholeText(); textNode37.setSiblingIndex(100); java.lang.StringBuilder stringBuilder43 = null; org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings(); textNode37.outerHtmlTail(stringBuilder43, 100, outputSettings45); org.jsoup.nodes.Entities.EscapeMode escapeMode47 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings45.escapeMode(escapeMode47); org.jsoup.nodes.Entities.EscapeMode escapeMode49 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.escapeMode(escapeMode49); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings48.prettyPrint(true); textNode30.outerHtmlTail(stringBuilder33, (int) 'a', outputSettings52); org.jsoup.nodes.TextNode textNode56 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!"); textNode56.setBaseUri(""); java.lang.String str59 = textNode56.getWholeText(); textNode56.setSiblingIndex(100); java.lang.StringBuilder stringBuilder62 = null; org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings(); textNode56.outerHtmlTail(stringBuilder62, 100, outputSettings64); org.jsoup.nodes.Entities.EscapeMode escapeMode66 = org.jsoup.nodes.Entities.EscapeMode.extended; org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings64.escapeMode(escapeMode66); org.jsoup.nodes.Entities.EscapeMode escapeMode68 = org.jsoup.nodes.Entities.EscapeMode.base; org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.escapeMode(escapeMode68); java.nio.charset.Charset charset70 = outputSettings67.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings52.charset(charset70); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings71.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings72.clone(); documentType4.outerHtmlTail(stringBuilder26, (int) '4', outputSettings73); java.lang.String str75 = documentType4.baseUri(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(textNode10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertNotNull(textNode30); org.junit.Assert.assertNotNull(textNode37); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(textNode56); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!"); org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.extended + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.extended)); org.junit.Assert.assertNotNull(outputSettings67); org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(charset70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[#text^=hi!]" + "'", str75, "[#text^=hi!]"); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!=\"\"", "#document", "", "[#text^=hi!]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("hi!"); org.jsoup.select.Elements elements10 = document9.getAllElements(); document9.baseUri = "hi!=\"hi!\""; org.jsoup.nodes.Document.OutputSettings outputSettings13 = document9.outputSettings(); java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings13.encoder(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder6, (int) (byte) 10, outputSettings13); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetEncoder14); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (int) (byte) 0, outputSettings18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", ":containsOwn([ text=\"\"]", ":containsown(hi!", "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder5, (int) ' ', outputSettings18); java.lang.StringBuilder stringBuilder25 = null; org.jsoup.nodes.Document document28 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode29 = null; org.jsoup.nodes.Document document30 = document28.quirksMode(quirksMode29); org.jsoup.nodes.Element element32 = document30.tagName("hi!"); org.jsoup.nodes.Element element34 = document30.createElement("hi!"); org.jsoup.nodes.Element element36 = document30.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings37 = document30.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings37.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings37.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.prettyPrint(false); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder25, 0, outputSettings44); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(outputSettings44); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder3 = null; org.jsoup.nodes.DocumentType documentType9 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder10 = null; org.jsoup.nodes.Document document13 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode14 = null; org.jsoup.nodes.Document document15 = document13.quirksMode(quirksMode14); org.jsoup.nodes.Element element17 = document15.tagName("hi!"); org.jsoup.nodes.Element element19 = document15.createElement("hi!"); org.jsoup.nodes.Element element21 = document15.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings22 = document15.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings22.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = null; org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.escapeMode(escapeMode24); boolean boolean26 = outputSettings23.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings23.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings23.escapeMode(); documentType9.outerHtmlTail(stringBuilder10, (int) (byte) -1, outputSettings23); boolean boolean31 = outputSettings23.prettyPrint(); // The following exception was thrown during execution in test generation try { textNode2.indent(stringBuilder3, 10, outputSettings23); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNull(escapeMode29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); boolean boolean4 = textNode2.hasAttr(""); org.jsoup.nodes.Attributes attributes5 = textNode2.attributes(); org.jsoup.nodes.Node node7 = textNode2.removeAttr("# text=\"\""); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.DocumentType documentType14 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node15 = documentType14.parent(); java.lang.StringBuilder stringBuilder16 = null; org.jsoup.nodes.Document document19 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode20 = null; org.jsoup.nodes.Document document21 = document19.quirksMode(quirksMode20); org.jsoup.nodes.Element element23 = document21.tagName("hi!"); org.jsoup.nodes.Element element25 = document21.createElement("hi!"); org.jsoup.nodes.Element element27 = document21.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings28 = document21.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings28.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings28.indentAmount(0); documentType14.outerHtmlTail(stringBuilder16, (int) (short) 0, outputSettings28); // The following exception was thrown during execution in test generation try { textNode2.outerHtmlHead(stringBuilder8, (int) (byte) 10, outputSettings28); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(node7); org.junit.Assert.assertNull(node15); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(outputSettings31); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertNull(node5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.escapeMode(escapeMode20); org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode24 = null; org.jsoup.nodes.Document document25 = document23.quirksMode(quirksMode24); org.jsoup.nodes.Element element27 = document25.tagName("hi!"); org.jsoup.nodes.Element element29 = document25.createElement("hi!"); org.jsoup.nodes.Element element31 = document25.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings32 = document25.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings32.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount(0); java.nio.charset.Charset charset38 = outputSettings37.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings19.charset(charset38); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder6, 100, outputSettings39); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(node5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(charset38); org.junit.Assert.assertNotNull(outputSettings39); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.Document document15 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode16 = null; org.jsoup.nodes.Document document17 = document15.quirksMode(quirksMode16); org.jsoup.nodes.Element element19 = document17.tagName("hi!"); org.jsoup.nodes.Element element21 = document17.createElement("hi!"); org.jsoup.nodes.Element element23 = document17.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null; org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.escapeMode(escapeMode26); boolean boolean28 = outputSettings25.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.indentAmount((int) (byte) 10); documentType11.outerHtmlTail(stringBuilder12, (int) ' ', outputSettings25); documentType4.outerHtmlTail(stringBuilder5, (int) (short) -1, outputSettings25); java.util.List<org.jsoup.nodes.Node> nodeList33 = documentType4.childNodes; org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(nodeList33); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf(":containsOwn(hi!"); boolean boolean2 = tag1.canContainBlock(); org.jsoup.nodes.DocumentType documentType7 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder8 = null; org.jsoup.nodes.Document document11 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode12 = null; org.jsoup.nodes.Document document13 = document11.quirksMode(quirksMode12); org.jsoup.nodes.Element element15 = document13.tagName("hi!"); org.jsoup.nodes.Element element17 = document13.createElement("hi!"); org.jsoup.nodes.Element element19 = document13.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings20 = document13.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings20.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode22 = null; org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.escapeMode(escapeMode22); boolean boolean24 = outputSettings21.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings21.escapeMode(); documentType7.outerHtmlTail(stringBuilder8, (int) (byte) -1, outputSettings21); java.lang.String str29 = documentType7.nodeName(); java.lang.StringBuilder stringBuilder30 = null; org.jsoup.nodes.DocumentType documentType36 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder37 = null; org.jsoup.nodes.Document document40 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode41 = null; org.jsoup.nodes.Document document42 = document40.quirksMode(quirksMode41); org.jsoup.nodes.Element element44 = document42.tagName("hi!"); org.jsoup.nodes.Element element46 = document42.createElement("hi!"); org.jsoup.nodes.Element element48 = document42.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document42.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings49.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode51 = null; org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.escapeMode(escapeMode51); boolean boolean53 = outputSettings50.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings50.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings50.escapeMode(); documentType36.outerHtmlTail(stringBuilder37, (int) (byte) -1, outputSettings50); boolean boolean58 = outputSettings50.prettyPrint(); documentType7.outerHtmlTail(stringBuilder30, 0, outputSettings50); java.lang.StringBuilder stringBuilder60 = null; org.jsoup.nodes.Document document63 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode64 = null; org.jsoup.nodes.Document document65 = document63.quirksMode(quirksMode64); org.jsoup.nodes.Element element67 = document65.tagName("hi!"); org.jsoup.nodes.Element element69 = document65.createElement("hi!"); org.jsoup.nodes.Element element71 = document65.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings72 = document65.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings72.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null; org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.escapeMode(escapeMode74); boolean boolean76 = outputSettings73.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings73.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings73.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings73.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings81.escapeMode(); documentType7.outerHtmlTail(stringBuilder60, 0, outputSettings81); boolean boolean84 = tag1.equals((java.lang.Object) stringBuilder60); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNull(escapeMode27); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#doctype" + "'", str29, "#doctype"); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNull(escapeMode56); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNull(escapeMode79); org.junit.Assert.assertNotNull(outputSettings81); org.junit.Assert.assertNull(escapeMode82); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]", " text=\"\"", "", "# text=\"\""); int int5 = documentType4.siblingIndex(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.escapeMode(escapeMode20); boolean boolean22 = outputSettings19.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder6, 0, outputSettings19); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting28 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("hi!", "hi!"); org.jsoup.nodes.Element element29 = null; org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode32 = null; org.jsoup.nodes.Document document33 = document31.quirksMode(quirksMode32); org.jsoup.nodes.Element element35 = document33.tagName("hi!"); org.jsoup.nodes.Document document37 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode38 = null; org.jsoup.nodes.Document document39 = document37.quirksMode(quirksMode38); org.jsoup.nodes.Element element41 = document39.tagName("hi!"); org.jsoup.select.Elements elements43 = document39.getElementsByIndexEquals((int) (byte) 1); org.jsoup.nodes.Document document44 = document39.clone(); org.jsoup.nodes.Node node45 = document33.doClone((org.jsoup.nodes.Node) document39); org.jsoup.nodes.Element element47 = document33.removeClass("hi!"); org.jsoup.nodes.Document document48 = document33.normalise(); java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "hi!", ":containsOwn(hi!" }; java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53); org.jsoup.nodes.Element element56 = document33.classNames((java.util.Set<java.lang.String>) strSet54); boolean boolean57 = attributeWithValueStarting28.matches(element29, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Node[] nodeArray58 = document33.childNodesAsArray(); // The following exception was thrown during execution in test generation try { documentType4.removeChild((org.jsoup.nodes.Node) document33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(node45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(nodeArray58); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder27 = null; org.jsoup.nodes.DocumentType documentType33 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder34 = null; org.jsoup.nodes.Document document37 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode38 = null; org.jsoup.nodes.Document document39 = document37.quirksMode(quirksMode38); org.jsoup.nodes.Element element41 = document39.tagName("hi!"); org.jsoup.nodes.Element element43 = document39.createElement("hi!"); org.jsoup.nodes.Element element45 = document39.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings46 = document39.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings46.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); boolean boolean50 = outputSettings47.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings47.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings47.escapeMode(); documentType33.outerHtmlTail(stringBuilder34, (int) (byte) -1, outputSettings47); boolean boolean55 = outputSettings47.prettyPrint(); documentType4.outerHtmlTail(stringBuilder27, 0, outputSettings47); java.lang.StringBuilder stringBuilder57 = null; org.jsoup.nodes.Document document60 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode61 = null; org.jsoup.nodes.Document document62 = document60.quirksMode(quirksMode61); org.jsoup.nodes.Element element64 = document62.tagName("hi!"); org.jsoup.nodes.Element element66 = document62.createElement("hi!"); org.jsoup.nodes.Element element68 = document62.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings69 = document62.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings69.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode71 = null; org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.escapeMode(escapeMode71); boolean boolean73 = outputSettings70.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings70.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings70.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings70.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings78.escapeMode(); documentType4.outerHtmlTail(stringBuilder57, 0, outputSettings78); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings78.charset("<head></head>"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: <head></head>"); } catch (java.nio.charset.IllegalCharsetNameException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNull(escapeMode53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNull(escapeMode76); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNull(escapeMode79); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode2 = null; org.jsoup.nodes.Document document3 = document1.quirksMode(quirksMode2); org.jsoup.nodes.Node[] nodeArray4 = document1.childNodesAsArray(); org.jsoup.helper.Validate.notNull((java.lang.Object) document1); document1.setBaseUri("hi!"); java.util.Map<java.lang.String, java.lang.String> strMap8 = document1.dataset(); org.jsoup.nodes.Element element10 = document1.text(" text=\"\""); org.jsoup.nodes.DocumentType documentType15 = new org.jsoup.nodes.DocumentType("[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]", " text=\"\"", "", "# text=\"\""); int int16 = documentType15.siblingIndex(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node17 = document1.before((org.jsoup.nodes.Node) documentType15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document1); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(nodeArray4); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute("[^ text=\"\"]"); org.jsoup.nodes.Document document3 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode4 = null; org.jsoup.nodes.Document document5 = document3.quirksMode(quirksMode4); org.jsoup.nodes.Element element7 = document5.tagName("hi!"); org.jsoup.nodes.Element element9 = document5.createElement("hi!"); org.jsoup.nodes.Element element11 = document5.append(":containsOwn(hi!"); org.jsoup.select.Elements elements13 = document5.getElementsByTag(":containsOwn(hi!"); java.lang.String str14 = document5.html(); org.jsoup.nodes.Element element16 = document5.getElementById("hi!"); org.jsoup.nodes.Document document18 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode19 = null; org.jsoup.nodes.Document document20 = document18.quirksMode(quirksMode19); org.jsoup.nodes.Element element22 = document20.tagName("hi!"); int int23 = element22.siblingIndex; org.jsoup.nodes.Document document25 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element27 = document25.removeClass(""); org.jsoup.select.Elements elements29 = element27.getElementsContainingOwnText(""); org.jsoup.nodes.Element element30 = element22.prependChild((org.jsoup.nodes.Node) element27); org.jsoup.select.Elements elements33 = element22.getElementsByAttributeValueMatching(":containsown(hi!", ""); boolean boolean34 = element22.isBlock(); boolean boolean35 = attribute1.matches((org.jsoup.nodes.Element) document5, element22); java.lang.StringBuilder stringBuilder36 = null; org.jsoup.nodes.DocumentType documentType42 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder43 = null; org.jsoup.nodes.DocumentType documentType49 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder50 = null; org.jsoup.nodes.Document document53 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode54 = null; org.jsoup.nodes.Document document55 = document53.quirksMode(quirksMode54); org.jsoup.nodes.Element element57 = document55.tagName("hi!"); org.jsoup.nodes.Element element59 = document55.createElement("hi!"); org.jsoup.nodes.Element element61 = document55.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings62 = document55.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings62.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.escapeMode(escapeMode64); boolean boolean66 = outputSettings63.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings63.indentAmount((int) (byte) 10); documentType49.outerHtmlTail(stringBuilder50, (int) ' ', outputSettings63); documentType42.outerHtmlTail(stringBuilder43, (int) (short) -1, outputSettings63); // The following exception was thrown during execution in test generation try { element22.outerHtmlHead(stringBuilder36, (int) '#', outputSettings63); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!" + "'", str14, "<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!"); org.junit.Assert.assertNull(element16); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(outputSettings63); org.junit.Assert.assertNotNull(outputSettings65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(outputSettings68); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null; org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.escapeMode(escapeMode40); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode44 = null; org.jsoup.nodes.Document document45 = document43.quirksMode(quirksMode44); org.jsoup.nodes.Element element47 = document45.tagName("hi!"); org.jsoup.nodes.Element element49 = document45.createElement("hi!"); org.jsoup.nodes.Element element51 = document45.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings52 = document45.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings52.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount(0); java.nio.charset.Charset charset58 = outputSettings57.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings39.charset(charset58); documentType4.outerHtmlTail(stringBuilder26, (-1), outputSettings39); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue63 = new org.jsoup.select.Evaluator.AttributeWithValue(":containsOwn(hi!", " text=\"\""); org.jsoup.nodes.Document document65 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode66 = null; org.jsoup.nodes.Document document67 = document65.quirksMode(quirksMode66); org.jsoup.nodes.Document document69 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode70 = null; org.jsoup.nodes.Document document71 = document69.quirksMode(quirksMode70); org.jsoup.nodes.Element element73 = document71.tagName("hi!"); int int74 = element73.siblingIndex; org.jsoup.nodes.Document document76 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element78 = document76.removeClass(""); org.jsoup.select.Elements elements80 = element78.getElementsContainingOwnText(""); org.jsoup.nodes.Element element81 = element73.prependChild((org.jsoup.nodes.Node) element78); java.util.List<org.jsoup.nodes.Node> nodeList82 = element78.siblingNodes(); boolean boolean83 = attributeWithValue63.matches((org.jsoup.nodes.Element) document65, element78); java.lang.String str84 = element78.tagName(); java.lang.String str85 = element78.tagName(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node86 = documentType4.before((org.jsoup.nodes.Node) element78); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(charset58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "#root" + "'", str84, "#root"); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "#root" + "'", str85, "#root"); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", "", " text=&quot;&quot;", "# text=\"\""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode(" text=\"\"", " text=\"\""); textNode2.text = ":containsOwn(hi!"; java.lang.String str5 = textNode2.nodeName(); org.jsoup.nodes.DocumentType documentType10 = new org.jsoup.nodes.DocumentType("[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]", " text=\"\"", "", "# text=\"\""); int int11 = documentType10.siblingIndex(); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.Document document15 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode16 = null; org.jsoup.nodes.Document document17 = document15.quirksMode(quirksMode16); org.jsoup.nodes.Element element19 = document17.tagName("hi!"); org.jsoup.nodes.Element element21 = document17.createElement("hi!"); org.jsoup.nodes.Element element23 = document17.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null; org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.escapeMode(escapeMode26); boolean boolean28 = outputSettings25.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.indentAmount((int) (byte) 10); documentType10.outerHtmlTail(stringBuilder12, 0, outputSettings25); org.jsoup.nodes.TextNode textNode34 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); textNode34.siblingIndex = (short) 10; java.lang.String str37 = textNode34.nodeName(); java.lang.StringBuilder stringBuilder38 = null; org.jsoup.nodes.Document.OutputSettings outputSettings40 = null; textNode34.outerHtmlTail(stringBuilder38, 100, outputSettings40); java.lang.String str42 = textNode34.outerHtml(); org.jsoup.nodes.Node node44 = textNode34.removeAttr("hi!"); // The following exception was thrown during execution in test generation try { textNode2.replaceChild((org.jsoup.nodes.Node) documentType10, node44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertNotNull(textNode34); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "#text" + "'", str37, "#text"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(node44); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]", " text=\"\"", "", "# text=\"\""); int int5 = documentType4.siblingIndex(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document.OutputSettings outputSettings28 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder26, (int) (short) 100, outputSettings28); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null; org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.escapeMode(escapeMode40); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode44 = null; org.jsoup.nodes.Document document45 = document43.quirksMode(quirksMode44); org.jsoup.nodes.Element element47 = document45.tagName("hi!"); org.jsoup.nodes.Element element49 = document45.createElement("hi!"); org.jsoup.nodes.Element element51 = document45.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings52 = document45.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings52.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount(0); java.nio.charset.Charset charset58 = outputSettings57.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings39.charset(charset58); documentType4.outerHtmlTail(stringBuilder26, (-1), outputSettings39); org.jsoup.nodes.Node node61 = documentType4.nextSibling(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(charset58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNull(node61); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("hi!", "[text=\"\"$=text=\"\"]", "[[ text=\"\"]]", "#[.:containsOwn(hi!]"); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); java.nio.charset.Charset charset24 = outputSettings18.charset(); documentType4.outerHtmlTail(stringBuilder5, (int) (short) -1, outputSettings18); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null; org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.escapeMode(escapeMode40); boolean boolean42 = outputSettings39.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings39.indentAmount((int) (byte) 10); java.nio.charset.Charset charset45 = outputSettings39.charset(); org.jsoup.nodes.Document document47 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode48 = null; org.jsoup.nodes.Document document49 = document47.quirksMode(quirksMode48); org.jsoup.nodes.Element element51 = document49.tagName("hi!"); org.jsoup.nodes.Element element53 = document49.createElement("hi!"); org.jsoup.nodes.Element element55 = document49.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings56 = document49.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings56.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode58 = null; org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.escapeMode(escapeMode58); org.jsoup.nodes.Entities.EscapeMode escapeMode60 = null; org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings57.escapeMode(escapeMode60); org.jsoup.nodes.Document document63 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode64 = null; org.jsoup.nodes.Document document65 = document63.quirksMode(quirksMode64); org.jsoup.nodes.Element element67 = document65.tagName("hi!"); org.jsoup.nodes.Element element69 = document65.createElement("hi!"); org.jsoup.nodes.Element element71 = document65.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings72 = document65.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings72.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null; org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.escapeMode(escapeMode74); boolean boolean76 = outputSettings73.prettyPrint(); java.nio.charset.Charset charset77 = outputSettings73.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings57.charset(charset77); org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings39.charset(charset77); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings39.indentAmount((int) (byte) 0); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder26, (int) (short) 10, outputSettings81); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charset45); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(outputSettings57); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(outputSettings61); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(charset77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(outputSettings79); org.junit.Assert.assertNotNull(outputSettings81); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.TextNode textNode7 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); boolean boolean9 = textNode7.hasAttr(""); org.jsoup.nodes.Node[] nodeArray11 = new org.jsoup.nodes.Node[] {}; textNode7.addChildren((int) '4', nodeArray11); org.jsoup.nodes.Attributes attributes13 = textNode7.attributes(); boolean boolean14 = documentType4.equals((java.lang.Object) attributes13); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node16 = documentType4.childNode((int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(textNode7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(nodeArray11); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); int int27 = documentType4.siblingIndex(); java.lang.StringBuilder stringBuilder28 = null; org.jsoup.nodes.Document.OutputSettings outputSettings30 = null; // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder28, (int) 'a', outputSettings30); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); java.nio.charset.Charset charset24 = outputSettings18.charset(); documentType4.outerHtmlTail(stringBuilder5, (int) (short) -1, outputSettings18); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings18.charset("<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: <html>? <head></head>? <body></body>?</html>:containsOwn(hi!"); } catch (java.nio.charset.IllegalCharsetNameException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(charset24); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.jsoup.nodes.DocumentType documentType5 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node6 = documentType5.parent(); java.lang.StringBuilder stringBuilder7 = null; org.jsoup.nodes.Document document10 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode11 = null; org.jsoup.nodes.Document document12 = document10.quirksMode(quirksMode11); org.jsoup.nodes.Element element14 = document12.tagName("hi!"); org.jsoup.nodes.Element element16 = document12.createElement("hi!"); org.jsoup.nodes.Element element18 = document12.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings19 = document12.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings19.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.indentAmount(0); documentType5.outerHtmlTail(stringBuilder7, (int) (short) 0, outputSettings19); org.jsoup.nodes.Document document27 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode28 = null; org.jsoup.nodes.Document document29 = document27.quirksMode(quirksMode28); org.jsoup.nodes.Element element31 = document29.tagName("hi!"); org.jsoup.nodes.Element element33 = document29.createElement("hi!"); org.jsoup.nodes.Element element35 = document29.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings36 = document29.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings36.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.indentAmount(0); java.nio.charset.CharsetEncoder charsetEncoder40 = outputSettings39.encoder(); org.jsoup.nodes.Document document42 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode43 = null; org.jsoup.nodes.Document document44 = document42.quirksMode(quirksMode43); org.jsoup.nodes.Element element46 = document44.tagName("hi!"); org.jsoup.nodes.Element element48 = document44.createElement("hi!"); org.jsoup.nodes.Element element50 = document44.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings51 = document44.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings51.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings51.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.indentAmount(0); java.nio.charset.Charset charset57 = outputSettings56.charset(); org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings56.escapeMode(); java.lang.String str59 = org.jsoup.nodes.Entities.escape("", charsetEncoder40, escapeMode58); org.jsoup.nodes.Document document62 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode63 = null; org.jsoup.nodes.Document document64 = document62.quirksMode(quirksMode63); org.jsoup.nodes.Element element66 = document64.tagName("hi!"); org.jsoup.nodes.Element element68 = document64.createElement("hi!"); org.jsoup.nodes.Element element70 = document64.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings71 = document64.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings71.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode73 = null; org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.escapeMode(escapeMode73); org.jsoup.nodes.Entities.EscapeMode escapeMode75 = null; org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.escapeMode(escapeMode75); java.nio.charset.CharsetEncoder charsetEncoder77 = outputSettings76.encoder(); org.jsoup.nodes.Document document79 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode80 = null; org.jsoup.nodes.Document document81 = document79.quirksMode(quirksMode80); org.jsoup.nodes.Element element83 = document81.tagName("hi!"); org.jsoup.nodes.Element element85 = document81.createElement("hi!"); org.jsoup.nodes.Element element87 = document81.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings88 = document81.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings88.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings88.indentAmount(0); java.nio.charset.CharsetEncoder charsetEncoder92 = outputSettings91.encoder(); org.jsoup.nodes.Entities.EscapeMode escapeMode93 = outputSettings91.escapeMode(); java.lang.String str94 = org.jsoup.nodes.Entities.escape("[hi!^=hi!]", charsetEncoder77, escapeMode93); java.util.Map<java.lang.Character, java.lang.String> charMap95 = escapeMode93.getMap(); java.lang.String str96 = org.jsoup.nodes.Entities.escape(".:containsOwn(hi!", charsetEncoder40, escapeMode93); org.jsoup.nodes.Document.OutputSettings outputSettings97 = outputSettings19.escapeMode(escapeMode93); java.lang.String str98 = org.jsoup.nodes.Entities.escape("[[^ text=\"\"]!=<head></head>]", outputSettings19); org.junit.Assert.assertNull(node6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(charsetEncoder40); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(charset57); org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings74); org.junit.Assert.assertNotNull(outputSettings76); org.junit.Assert.assertNotNull(charsetEncoder77); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertNotNull(outputSettings88); org.junit.Assert.assertNotNull(outputSettings89); org.junit.Assert.assertNotNull(outputSettings91); org.junit.Assert.assertNotNull(charsetEncoder92); org.junit.Assert.assertTrue("'" + escapeMode93 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode93.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[hi!^=hi!]" + "'", str94, "[hi!^=hi!]"); org.junit.Assert.assertNotNull(charMap95); org.junit.Assert.assertEquals("'" + str96 + "' != '" + ".:containsOwn(hi!" + "'", str96, ".:containsOwn(hi!"); org.junit.Assert.assertNotNull(outputSettings97); org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[[^ text=&quot;&quot;]!=&lt;head&gt;&lt;/head&gt;]" + "'", str98, "[[^ text=&quot;&quot;]!=&lt;head&gt;&lt;/head&gt;]"); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(".:containsown(hi!", "[^ text=\"\"]", "[hi!^=hi!]", "hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount(0); java.nio.charset.Charset charset23 = outputSettings22.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings22.prettyPrint(true); // The following exception was thrown during execution in test generation try { documentType4.indent(stringBuilder5, (int) (byte) 10, outputSettings22); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(".:containsown(hi!", "[^ text=\"\"]", "[hi!^=hi!]", "hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.prettyPrint(false); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder5, (-1), outputSettings24); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(outputSettings24); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.jsoup.select.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.select.Evaluator.AttributeWithValueEnding(" text=\"\"", " text=\"\""); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode5 = null; org.jsoup.nodes.Document document6 = document4.quirksMode(quirksMode5); org.jsoup.nodes.Element element8 = document6.tagName("hi!"); org.jsoup.nodes.Document document10 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode11 = null; org.jsoup.nodes.Document document12 = document10.quirksMode(quirksMode11); org.jsoup.nodes.Element element14 = document12.tagName("hi!"); org.jsoup.select.Elements elements16 = document12.getElementsByIndexEquals((int) (byte) 1); org.jsoup.nodes.Document document17 = document12.clone(); org.jsoup.nodes.Node node18 = document6.doClone((org.jsoup.nodes.Node) document12); org.jsoup.select.Elements elements20 = document6.getElementsContainingOwnText("hi!"); java.lang.String str22 = document6.absUrl(":containsOwn(hi!"); org.jsoup.nodes.Node[] nodeArray23 = document6.childNodesAsArray(); org.jsoup.nodes.Document document25 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = null; org.jsoup.nodes.Document document27 = document25.quirksMode(quirksMode26); org.jsoup.nodes.Element element29 = document27.tagName("hi!"); org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode32 = null; org.jsoup.nodes.Document document33 = document31.quirksMode(quirksMode32); org.jsoup.nodes.Element element35 = document33.tagName("hi!"); org.jsoup.select.Elements elements37 = document33.getElementsByIndexEquals((int) (byte) 1); org.jsoup.nodes.Document document38 = document33.clone(); org.jsoup.nodes.Node node39 = document27.doClone((org.jsoup.nodes.Node) document33); org.jsoup.nodes.Element element41 = document27.removeClass("hi!"); java.util.List<org.jsoup.nodes.Node> nodeList42 = element41.childNodes(); boolean boolean43 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document6, element41); org.jsoup.nodes.DocumentType documentType48 = new org.jsoup.nodes.DocumentType("[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]", " text=\"\"", "", "# text=\"\""); int int49 = documentType48.siblingIndex(); java.lang.StringBuilder stringBuilder50 = null; org.jsoup.nodes.Document document53 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode54 = null; org.jsoup.nodes.Document document55 = document53.quirksMode(quirksMode54); org.jsoup.nodes.Element element57 = document55.tagName("hi!"); org.jsoup.nodes.Element element59 = document55.createElement("hi!"); org.jsoup.nodes.Element element61 = document55.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings62 = document55.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings62.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode64 = null; org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.escapeMode(escapeMode64); boolean boolean66 = outputSettings63.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings63.indentAmount((int) (byte) 10); documentType48.outerHtmlTail(stringBuilder50, 0, outputSettings63); org.jsoup.nodes.Node node70 = null; // The following exception was thrown during execution in test generation try { element41.replaceChild((org.jsoup.nodes.Node) documentType48, node70); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(nodeArray23); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(node39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(nodeList42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(outputSettings63); org.junit.Assert.assertNotNull(outputSettings65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(outputSettings68); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder27 = null; org.jsoup.nodes.DocumentType documentType33 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder34 = null; org.jsoup.nodes.Document document37 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode38 = null; org.jsoup.nodes.Document document39 = document37.quirksMode(quirksMode38); org.jsoup.nodes.Element element41 = document39.tagName("hi!"); org.jsoup.nodes.Element element43 = document39.createElement("hi!"); org.jsoup.nodes.Element element45 = document39.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings46 = document39.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings46.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); boolean boolean50 = outputSettings47.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings47.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings47.escapeMode(); documentType33.outerHtmlTail(stringBuilder34, (int) (byte) -1, outputSettings47); boolean boolean55 = outputSettings47.prettyPrint(); documentType4.outerHtmlTail(stringBuilder27, 0, outputSettings47); java.lang.StringBuilder stringBuilder57 = null; org.jsoup.nodes.Document document60 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode61 = null; org.jsoup.nodes.Document document62 = document60.quirksMode(quirksMode61); org.jsoup.nodes.Element element64 = document62.tagName("hi!"); org.jsoup.nodes.Element element66 = document62.createElement("hi!"); org.jsoup.nodes.Element element68 = document62.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings69 = document62.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings69.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode71 = null; org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.escapeMode(escapeMode71); boolean boolean73 = outputSettings70.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings70.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings70.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings70.prettyPrint(false); org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings78.escapeMode(); documentType4.outerHtmlTail(stringBuilder57, 0, outputSettings78); org.jsoup.nodes.Document document82 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode83 = null; org.jsoup.nodes.Document document84 = document82.quirksMode(quirksMode83); org.jsoup.nodes.Element element86 = document84.tagName("hi!"); org.jsoup.nodes.Element element88 = document84.createElement("hi!"); org.jsoup.nodes.Element element90 = document84.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings91 = document84.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings91.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode93 = null; org.jsoup.nodes.Document.OutputSettings outputSettings94 = outputSettings92.escapeMode(escapeMode93); java.nio.charset.Charset charset95 = outputSettings94.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings78.charset(charset95); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNull(escapeMode53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNull(escapeMode76); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNull(escapeMode79); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(element88); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertNotNull(outputSettings91); org.junit.Assert.assertNotNull(outputSettings92); org.junit.Assert.assertNotNull(outputSettings94); org.junit.Assert.assertNotNull(charset95); org.junit.Assert.assertNotNull(outputSettings96); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings17.indentAmount((int) (short) 0); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings21); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode27 = null; org.jsoup.nodes.Document document28 = document26.quirksMode(quirksMode27); org.jsoup.nodes.Element element30 = document28.tagName("hi!"); org.jsoup.nodes.Element element32 = document28.createElement("hi!"); org.jsoup.nodes.Element element34 = document28.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.escapeMode(escapeMode37); boolean boolean39 = outputSettings36.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder23, (int) (short) 10, outputSettings41); java.lang.StringBuilder stringBuilder43 = null; org.jsoup.nodes.Document document46 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode47 = null; org.jsoup.nodes.Document document48 = document46.quirksMode(quirksMode47); org.jsoup.nodes.Element element50 = document48.tagName("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("hi!"); org.jsoup.nodes.Element element54 = document48.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings55 = document48.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings55.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.indentAmount(0); org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode(); java.nio.charset.Charset charset60 = outputSettings58.charset(); documentType4.outerHtmlTail(stringBuilder43, 0, outputSettings58); boolean boolean62 = outputSettings58.prettyPrint(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charsetEncoder19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertNotNull(charset60); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.jsoup.nodes.DocumentType documentType5 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.escapeMode(escapeMode20); boolean boolean22 = outputSettings19.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.indentAmount((int) (byte) 10); java.nio.charset.Charset charset25 = outputSettings19.charset(); documentType5.outerHtmlTail(stringBuilder6, (int) (short) -1, outputSettings19); // The following exception was thrown during execution in test generation try { java.lang.String str27 = org.jsoup.nodes.Entities.escape("", outputSettings19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(charset25); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;", "<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":containsOwn([ text=\"\"]", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>"); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); int int27 = documentType4.siblingIndex(); java.lang.StringBuilder stringBuilder28 = null; org.jsoup.nodes.Document document31 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode32 = null; org.jsoup.nodes.Document document33 = document31.quirksMode(quirksMode32); org.jsoup.nodes.Element element35 = document33.tagName("hi!"); org.jsoup.nodes.Element element37 = document33.createElement("hi!"); org.jsoup.nodes.Element element39 = document33.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings40 = document33.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings40.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode42 = null; org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.escapeMode(escapeMode42); java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings41.encoder(); org.jsoup.nodes.DocumentType documentType49 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node50 = documentType49.parent(); java.lang.StringBuilder stringBuilder51 = null; org.jsoup.nodes.Document document54 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode55 = null; org.jsoup.nodes.Document document56 = document54.quirksMode(quirksMode55); org.jsoup.nodes.Element element58 = document56.tagName("hi!"); org.jsoup.nodes.Element element60 = document56.createElement("hi!"); org.jsoup.nodes.Element element62 = document56.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings63 = document56.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings63.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings63.indentAmount(0); documentType49.outerHtmlTail(stringBuilder51, (int) (short) 0, outputSettings63); java.nio.charset.Charset charset68 = outputSettings63.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings41.charset(charset68); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder28, (int) (short) 10, outputSettings69); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(charsetEncoder44); org.junit.Assert.assertNull(node50); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(outputSettings63); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertNotNull(charset68); org.junit.Assert.assertNotNull(outputSettings69); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.Document document15 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode16 = null; org.jsoup.nodes.Document document17 = document15.quirksMode(quirksMode16); org.jsoup.nodes.Element element19 = document17.tagName("hi!"); org.jsoup.nodes.Element element21 = document17.createElement("hi!"); org.jsoup.nodes.Element element23 = document17.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode26 = null; org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.escapeMode(escapeMode26); boolean boolean28 = outputSettings25.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings25.indentAmount((int) (byte) 10); documentType11.outerHtmlTail(stringBuilder12, (int) ' ', outputSettings25); documentType4.outerHtmlTail(stringBuilder5, (int) (short) -1, outputSettings25); java.lang.String str33 = documentType4.nodeName(); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#doctype" + "'", str33, "#doctype"); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); org.jsoup.nodes.Document document28 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode29 = null; org.jsoup.nodes.Document document30 = document28.quirksMode(quirksMode29); org.jsoup.nodes.Element element31 = document30.body(); // The following exception was thrown during execution in test generation try { documentType4.removeChild((org.jsoup.nodes.Node) document30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(element31); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount(0); documentType4.outerHtmlTail(stringBuilder6, (int) (short) 0, outputSettings18); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode27 = null; org.jsoup.nodes.Document document28 = document26.quirksMode(quirksMode27); org.jsoup.nodes.Element element30 = document28.tagName("hi!"); org.jsoup.nodes.Element element32 = document28.createElement("hi!"); org.jsoup.nodes.Element element34 = document28.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.escapeMode(escapeMode37); boolean boolean39 = outputSettings36.prettyPrint(); java.nio.charset.Charset charset40 = outputSettings36.charset(); int int41 = outputSettings36.indentAmount(); org.jsoup.nodes.Document document44 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode45 = null; org.jsoup.nodes.Document document46 = document44.quirksMode(quirksMode45); org.jsoup.nodes.Element element48 = document46.tagName("hi!"); org.jsoup.nodes.Element element50 = document46.createElement("hi!"); org.jsoup.nodes.Element element52 = document46.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings53 = document46.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings53.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode55 = null; org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.escapeMode(escapeMode55); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = null; org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.escapeMode(escapeMode57); java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings58.encoder(); org.jsoup.nodes.Document document61 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode62 = null; org.jsoup.nodes.Document document63 = document61.quirksMode(quirksMode62); org.jsoup.nodes.Element element65 = document63.tagName("hi!"); org.jsoup.nodes.Element element67 = document63.createElement("hi!"); org.jsoup.nodes.Element element69 = document63.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings70 = document63.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings70.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings70.indentAmount(0); java.nio.charset.CharsetEncoder charsetEncoder74 = outputSettings73.encoder(); org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings73.escapeMode(); java.lang.String str76 = org.jsoup.nodes.Entities.escape("[hi!^=hi!]", charsetEncoder59, escapeMode75); java.util.Map<java.lang.Character, java.lang.String> charMap77 = escapeMode75.getMap(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings36.escapeMode(escapeMode75); java.nio.charset.Charset charset79 = outputSettings78.charset(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder23, (int) (byte) 0, outputSettings78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(node5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(charset40); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertNotNull(charsetEncoder59); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(charsetEncoder74); org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[hi!^=hi!]" + "'", str76, "[hi!^=hi!]"); org.junit.Assert.assertNotNull(charMap77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(charset79); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[text=\"\"$=text=\"\"]", ":containsOwn(hi!", "[<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>!=<head></head>]", "[:containsown(hi!=text=\"\"]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode20 = null; org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.escapeMode(escapeMode20); boolean boolean22 = outputSettings19.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings19.indentAmount((int) (byte) 10); java.nio.charset.Charset charset25 = outputSettings19.charset(); org.jsoup.nodes.Document document27 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode28 = null; org.jsoup.nodes.Document document29 = document27.quirksMode(quirksMode28); org.jsoup.nodes.Element element31 = document29.tagName("hi!"); org.jsoup.nodes.Element element33 = document29.createElement("hi!"); org.jsoup.nodes.Element element35 = document29.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings36 = document29.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings36.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.escapeMode(escapeMode38); org.jsoup.nodes.Entities.EscapeMode escapeMode40 = null; org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings37.escapeMode(escapeMode40); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode44 = null; org.jsoup.nodes.Document document45 = document43.quirksMode(quirksMode44); org.jsoup.nodes.Element element47 = document45.tagName("hi!"); org.jsoup.nodes.Element element49 = document45.createElement("hi!"); org.jsoup.nodes.Element element51 = document45.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings52 = document45.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings52.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode54 = null; org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.escapeMode(escapeMode54); boolean boolean56 = outputSettings53.prettyPrint(); java.nio.charset.Charset charset57 = outputSettings53.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings37.charset(charset57); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings19.charset(charset57); org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings19.indentAmount((int) (byte) 0); documentType4.outerHtmlTail(stringBuilder6, 100, outputSettings19); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(charset25); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(charset57); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(outputSettings61); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount(0); documentType4.outerHtmlTail(stringBuilder6, (int) (short) 0, outputSettings18); org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode27 = null; org.jsoup.nodes.Document document28 = document26.quirksMode(quirksMode27); org.jsoup.nodes.Element element30 = document28.tagName("hi!"); org.jsoup.nodes.Element element32 = document28.createElement("hi!"); org.jsoup.nodes.Element element34 = document28.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.indentAmount(0); java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings38.encoder(); org.jsoup.nodes.Document document41 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode42 = null; org.jsoup.nodes.Document document43 = document41.quirksMode(quirksMode42); org.jsoup.nodes.Element element45 = document43.tagName("hi!"); org.jsoup.nodes.Element element47 = document43.createElement("hi!"); org.jsoup.nodes.Element element49 = document43.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings50 = document43.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings50.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings50.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.indentAmount(0); java.nio.charset.Charset charset56 = outputSettings55.charset(); org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings55.escapeMode(); java.lang.String str58 = org.jsoup.nodes.Entities.escape("", charsetEncoder39, escapeMode57); org.jsoup.nodes.Document document61 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode62 = null; org.jsoup.nodes.Document document63 = document61.quirksMode(quirksMode62); org.jsoup.nodes.Element element65 = document63.tagName("hi!"); org.jsoup.nodes.Element element67 = document63.createElement("hi!"); org.jsoup.nodes.Element element69 = document63.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings70 = document63.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings70.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode72 = null; org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.escapeMode(escapeMode72); org.jsoup.nodes.Entities.EscapeMode escapeMode74 = null; org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.escapeMode(escapeMode74); java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings75.encoder(); org.jsoup.nodes.Document document78 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode79 = null; org.jsoup.nodes.Document document80 = document78.quirksMode(quirksMode79); org.jsoup.nodes.Element element82 = document80.tagName("hi!"); org.jsoup.nodes.Element element84 = document80.createElement("hi!"); org.jsoup.nodes.Element element86 = document80.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings87 = document80.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings87.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings87.indentAmount(0); java.nio.charset.CharsetEncoder charsetEncoder91 = outputSettings90.encoder(); org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings90.escapeMode(); java.lang.String str93 = org.jsoup.nodes.Entities.escape("[hi!^=hi!]", charsetEncoder76, escapeMode92); java.util.Map<java.lang.Character, java.lang.String> charMap94 = escapeMode92.getMap(); java.lang.String str95 = org.jsoup.nodes.Entities.escape(".:containsOwn(hi!", charsetEncoder39, escapeMode92); org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings18.escapeMode(escapeMode92); org.jsoup.nodes.Document.OutputSettings outputSettings98 = outputSettings18.prettyPrint(false); org.junit.Assert.assertNull(node5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(charsetEncoder39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(charset56); org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(outputSettings73); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNotNull(charsetEncoder76); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(outputSettings87); org.junit.Assert.assertNotNull(outputSettings88); org.junit.Assert.assertNotNull(outputSettings90); org.junit.Assert.assertNotNull(charsetEncoder91); org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.base)); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[hi!^=hi!]" + "'", str93, "[hi!^=hi!]"); org.junit.Assert.assertNotNull(charMap94); org.junit.Assert.assertEquals("'" + str95 + "' != '" + ".:containsOwn(hi!" + "'", str95, ".:containsOwn(hi!"); org.junit.Assert.assertNotNull(outputSettings96); org.junit.Assert.assertNotNull(outputSettings98); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(".:containsown(hi!", "[^ text=\"\"]", "[hi!^=hi!]", "hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.prettyPrint(false); documentType4.outerHtmlTail(stringBuilder5, 0, outputSettings17); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(outputSettings22); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder27 = null; org.jsoup.nodes.DocumentType documentType33 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder34 = null; org.jsoup.nodes.Document document37 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode38 = null; org.jsoup.nodes.Document document39 = document37.quirksMode(quirksMode38); org.jsoup.nodes.Element element41 = document39.tagName("hi!"); org.jsoup.nodes.Element element43 = document39.createElement("hi!"); org.jsoup.nodes.Element element45 = document39.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings46 = document39.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings46.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode48 = null; org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.escapeMode(escapeMode48); boolean boolean50 = outputSettings47.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings47.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings47.escapeMode(); documentType33.outerHtmlTail(stringBuilder34, (int) (byte) -1, outputSettings47); boolean boolean55 = outputSettings47.prettyPrint(); documentType4.outerHtmlTail(stringBuilder27, 0, outputSettings47); java.lang.StringBuilder stringBuilder57 = null; org.jsoup.nodes.Document document60 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode61 = null; org.jsoup.nodes.Document document62 = document60.quirksMode(quirksMode61); org.jsoup.nodes.Element element64 = document62.tagName("hi!"); org.jsoup.nodes.Element element66 = document62.createElement("hi!"); org.jsoup.nodes.Element element68 = document62.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings69 = document62.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings69.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings69.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount(0); documentType4.outerHtmlTail(stringBuilder57, 1, outputSettings74); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(outputSettings52); org.junit.Assert.assertNull(escapeMode53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings74); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder5, (int) ' ', outputSettings18); java.lang.String str25 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); int int40 = outputSettings39.indentAmount(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.indentAmount((int) (short) 100); documentType4.outerHtmlTail(stringBuilder26, (int) (byte) -1, outputSettings42); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.clone(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(outputSettings44); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings17.indentAmount((int) (short) 0); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings21); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode27 = null; org.jsoup.nodes.Document document28 = document26.quirksMode(quirksMode27); org.jsoup.nodes.Element element30 = document28.tagName("hi!"); org.jsoup.nodes.Element element32 = document28.createElement("hi!"); org.jsoup.nodes.Element element34 = document28.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.escapeMode(escapeMode37); boolean boolean39 = outputSettings36.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder23, (int) (short) 10, outputSettings41); java.lang.StringBuilder stringBuilder43 = null; org.jsoup.nodes.Document document46 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode47 = null; org.jsoup.nodes.Document document48 = document46.quirksMode(quirksMode47); org.jsoup.nodes.Element element50 = document48.tagName("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("hi!"); org.jsoup.nodes.Element element54 = document48.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings55 = document48.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings55.clone(); int int57 = outputSettings56.indentAmount(); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings56.indentAmount((int) (short) 100); org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.prettyPrint(false); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder43, (-1), outputSettings59); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charsetEncoder19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1); org.junit.Assert.assertNotNull(outputSettings59); org.junit.Assert.assertNotNull(outputSettings61); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder5, (int) ' ', outputSettings18); java.lang.String str25 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); int int40 = outputSettings39.indentAmount(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.indentAmount((int) (short) 100); documentType4.outerHtmlTail(stringBuilder26, (int) (byte) -1, outputSettings42); org.jsoup.nodes.TextNode textNode46 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); boolean boolean48 = textNode46.hasAttr(""); org.jsoup.nodes.Attributes attributes49 = textNode46.attributes(); java.lang.String str51 = textNode46.attr(":containsOwn(hi!"); org.jsoup.nodes.Node node52 = textNode46.parent(); boolean boolean53 = textNode46.isBlank(); org.jsoup.nodes.Node node54 = documentType4.doClone((org.jsoup.nodes.Node) textNode46); java.lang.String str55 = textNode46.nodeName(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(textNode46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(attributes49); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, ""); org.junit.Assert.assertNull(node52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(node54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#text" + "'", str55, "#text"); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder5, (int) ' ', outputSettings18); java.lang.String str25 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); int int40 = outputSettings39.indentAmount(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.indentAmount((int) (short) 100); documentType4.outerHtmlTail(stringBuilder26, (int) (byte) -1, outputSettings42); org.jsoup.nodes.TextNode textNode46 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); boolean boolean48 = textNode46.hasAttr(""); org.jsoup.nodes.Attributes attributes49 = textNode46.attributes(); java.lang.String str51 = textNode46.attr(":containsOwn(hi!"); org.jsoup.nodes.Node node52 = textNode46.parent(); boolean boolean53 = textNode46.isBlank(); org.jsoup.nodes.Node node54 = documentType4.doClone((org.jsoup.nodes.Node) textNode46); org.jsoup.nodes.Node node55 = node54.clone(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#doctype" + "'", str25, "#doctype"); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(textNode46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(attributes49); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, ""); org.junit.Assert.assertNull(node52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(node54); org.junit.Assert.assertNotNull(node55); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings17.indentAmount((int) (short) 0); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings21); java.lang.StringBuilder stringBuilder23 = null; org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode27 = null; org.jsoup.nodes.Document document28 = document26.quirksMode(quirksMode27); org.jsoup.nodes.Element element30 = document28.tagName("hi!"); org.jsoup.nodes.Element element32 = document28.createElement("hi!"); org.jsoup.nodes.Element element34 = document28.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings35.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode37 = null; org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.escapeMode(escapeMode37); boolean boolean39 = outputSettings36.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings36.indentAmount((int) (byte) 10); documentType4.outerHtmlTail(stringBuilder23, (int) (short) 10, outputSettings41); java.lang.StringBuilder stringBuilder43 = null; org.jsoup.nodes.Document document46 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode47 = null; org.jsoup.nodes.Document document48 = document46.quirksMode(quirksMode47); org.jsoup.nodes.Element element50 = document48.tagName("hi!"); org.jsoup.nodes.Element element52 = document48.createElement("hi!"); org.jsoup.nodes.Element element54 = document48.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings55 = document48.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings55.clone(); java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings55.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings55.indentAmount((int) (short) 0); documentType4.outerHtmlTail(stringBuilder43, (int) (byte) 100, outputSettings55); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charsetEncoder19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(charsetEncoder57); org.junit.Assert.assertNotNull(outputSettings59); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings17.indentAmount((int) (short) 0); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings21); java.nio.charset.Charset charset23 = outputSettings21.charset(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charsetEncoder19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(charset23); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]", "hi! ", "text=\"\"", "[^ text=&quot;&quot;]"); java.lang.String str5 = documentType4.nodeName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[text=\"\"$=text=\"\"]", ":containsOwn(hi!", "[<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>!=<head></head>]", "[:containsown(hi!=text=\"\"]"); java.lang.String str5 = documentType4.nodeName(); org.jsoup.nodes.Attributes attributes6 = documentType4.attributes; java.lang.String str7 = attributes6.toString(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " name=\"[text=&quot;&quot;$=text=&quot;&quot;]\" publicid=\":containsOwn(hi!\" systemid=\"[&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;!=&lt;head&gt;&lt;/head&gt;]\"" + "'", str7, " name=\"[text=&quot;&quot;$=text=&quot;&quot;]\" publicid=\":containsOwn(hi!\" systemid=\"[&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;!=&lt;head&gt;&lt;/head&gt;]\""); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("", "\n[text=&quot;&quot;$=text=&quot;&quot;]", "class=\"\"", "&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode2 = null; org.jsoup.nodes.Document document3 = document1.quirksMode(quirksMode2); org.jsoup.nodes.Element element4 = document3.body(); org.jsoup.nodes.Document document6 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element7 = element4.before((org.jsoup.nodes.Node) document6); org.jsoup.nodes.Element element8 = element7.clone(); org.jsoup.nodes.DocumentType documentType13 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder14 = null; org.jsoup.nodes.Document document17 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode18 = null; org.jsoup.nodes.Document document19 = document17.quirksMode(quirksMode18); org.jsoup.nodes.Element element21 = document19.tagName("hi!"); org.jsoup.nodes.Element element23 = document19.createElement("hi!"); org.jsoup.nodes.Element element25 = document19.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings26 = document19.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings26.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode28 = null; org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.escapeMode(escapeMode28); boolean boolean30 = outputSettings27.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings27.indentAmount((int) (byte) 10); documentType13.outerHtmlTail(stringBuilder14, (int) ' ', outputSettings27); java.lang.String str34 = documentType13.nodeName(); java.lang.StringBuilder stringBuilder35 = null; org.jsoup.nodes.Document document38 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode39 = null; org.jsoup.nodes.Document document40 = document38.quirksMode(quirksMode39); org.jsoup.nodes.Element element42 = document40.tagName("hi!"); org.jsoup.nodes.Element element44 = document40.createElement("hi!"); org.jsoup.nodes.Element element46 = document40.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings47 = document40.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings47.clone(); int int49 = outputSettings48.indentAmount(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings48.indentAmount((int) (short) 100); documentType13.outerHtmlTail(stringBuilder35, (int) (byte) -1, outputSettings51); org.jsoup.nodes.TextNode textNode55 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); boolean boolean57 = textNode55.hasAttr(""); org.jsoup.nodes.Attributes attributes58 = textNode55.attributes(); java.lang.String str60 = textNode55.attr(":containsOwn(hi!"); org.jsoup.nodes.Node node61 = textNode55.parent(); boolean boolean62 = textNode55.isBlank(); org.jsoup.nodes.Node node63 = documentType13.doClone((org.jsoup.nodes.Node) textNode55); org.jsoup.nodes.Node node64 = element7.after((org.jsoup.nodes.Node) textNode55); java.lang.String str65 = textNode55.text(); org.junit.Assert.assertNotNull(document1); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element4); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "#doctype" + "'", str34, "#doctype"); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(textNode55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(attributes58); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNull(node61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(node63); org.junit.Assert.assertNotNull(node64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[text=\"\"$=text=\"\"]", ":containsOwn(hi!", "[<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>!=<head></head>]", "[:containsown(hi!=text=\"\"]"); java.lang.String str5 = documentType4.nodeName(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) (short) 0); boolean boolean26 = outputSettings25.prettyPrint(); // The following exception was thrown during execution in test generation try { documentType4.outerHtmlHead(stringBuilder6, (int) (byte) 100, outputSettings25); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount(0); documentType4.outerHtmlTail(stringBuilder6, (int) (short) 0, outputSettings18); org.jsoup.nodes.Document document23 = documentType4.ownerDocument(); java.lang.StringBuilder stringBuilder24 = null; org.jsoup.nodes.Document document27 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode28 = null; org.jsoup.nodes.Document document29 = document27.quirksMode(quirksMode28); org.jsoup.nodes.Element element31 = document29.tagName("hi!"); org.jsoup.nodes.Element element33 = document29.createElement("hi!"); org.jsoup.nodes.Element element35 = document29.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings36 = document29.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings36.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode38 = null; org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.escapeMode(escapeMode38); org.jsoup.nodes.Document document41 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode42 = null; org.jsoup.nodes.Document document43 = document41.quirksMode(quirksMode42); org.jsoup.nodes.Element element45 = document43.tagName("hi!"); org.jsoup.nodes.Element element47 = document43.createElement("hi!"); org.jsoup.nodes.Element element49 = document43.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings50 = document43.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings50.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings50.indentAmount(0); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.indentAmount(0); java.nio.charset.Charset charset56 = outputSettings55.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings37.charset(charset56); documentType4.outerHtmlTail(stringBuilder24, (int) (short) 0, outputSettings57); org.junit.Assert.assertNull(node5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNull(document23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(outputSettings37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(outputSettings53); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(charset56); org.junit.Assert.assertNotNull(outputSettings57); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode9 = null; org.jsoup.nodes.Document document10 = document8.quirksMode(quirksMode9); org.jsoup.nodes.Element element12 = document10.tagName("hi!"); org.jsoup.nodes.Element element14 = document10.createElement("hi!"); org.jsoup.nodes.Element element16 = document10.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document10.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings17.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode19 = null; org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.escapeMode(escapeMode19); boolean boolean21 = outputSettings18.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings18.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode(); documentType4.outerHtmlTail(stringBuilder5, (int) (byte) -1, outputSettings18); java.lang.String str26 = documentType4.nodeName(); int int27 = documentType4.siblingIndex(); java.lang.String str28 = documentType4.nodeName(); java.lang.String str29 = documentType4.nodeName(); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNull(escapeMode24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#doctype" + "'", str26, "#doctype"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "#doctype" + "'", str28, "#doctype"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#doctype" + "'", str29, "#doctype"); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode2 = null; org.jsoup.nodes.Document document3 = document1.quirksMode(quirksMode2); org.jsoup.nodes.Element element5 = document3.tagName("hi!"); int int6 = element5.siblingIndex; org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element10 = document8.removeClass(""); org.jsoup.select.Elements elements12 = element10.getElementsContainingOwnText(""); org.jsoup.nodes.Element element13 = element5.prependChild((org.jsoup.nodes.Node) element10); org.jsoup.nodes.Element element15 = element10.html(""); java.lang.String str16 = element10.tagName(); org.jsoup.nodes.Document document18 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode19 = null; org.jsoup.nodes.Document document20 = document18.quirksMode(quirksMode19); org.jsoup.nodes.Element element21 = document20.body(); java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "" }; java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25); org.jsoup.nodes.Element element28 = document20.classNames((java.util.Set<java.lang.String>) strSet26); java.lang.String str29 = element28.nodeName(); org.jsoup.nodes.Element element31 = element28.text(""); boolean boolean32 = element28.isBlock(); org.jsoup.nodes.Element element33 = element10.before((org.jsoup.nodes.Node) element28); org.jsoup.nodes.DocumentType documentType38 = new org.jsoup.nodes.DocumentType("[text=\"\"$=text=\"\"]", "[<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!!=hi!# text=\"\"]", "# text=\"\"", "[hi!=\":containsown(hi!\"$=hi!=\":containsown(hi!\"]"); org.jsoup.nodes.Document document40 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode41 = null; org.jsoup.nodes.Document document42 = document40.quirksMode(quirksMode41); org.jsoup.nodes.Element element43 = document42.body(); java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!", "" }; java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47); org.jsoup.nodes.Element element50 = document42.classNames((java.util.Set<java.lang.String>) strSet48); org.jsoup.nodes.Node[] nodeArray51 = element50.childNodesAsArray(); org.jsoup.helper.Validate.notNull((java.lang.Object) nodeArray51); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) nodeArray51, "[^ text=\"\"]"); documentType38.addChildren(nodeArray51); org.jsoup.nodes.Node node56 = element10.after((org.jsoup.nodes.Node) documentType38); org.junit.Assert.assertNotNull(document1); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#root" + "'", str16, "#root"); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#document" + "'", str29, "#document"); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(nodeArray51); org.junit.Assert.assertNotNull(node56); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); textNode9.siblingIndex = (short) 10; java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.TextNode textNode16 = org.jsoup.nodes.TextNode.createFromEncoded("", "hi!"); boolean boolean18 = textNode16.hasAttr(""); org.jsoup.nodes.Attributes attributes19 = textNode16.attributes; java.lang.StringBuilder stringBuilder20 = null; org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode24 = null; org.jsoup.nodes.Document document25 = document23.quirksMode(quirksMode24); org.jsoup.nodes.Element element27 = document25.tagName("hi!"); org.jsoup.nodes.Element element29 = document25.createElement("hi!"); org.jsoup.nodes.Element element31 = document25.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings32 = document25.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings32.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode34 = null; org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.escapeMode(escapeMode34); boolean boolean36 = outputSettings33.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.indentAmount((int) (byte) 10); org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings33.escapeMode(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings33.prettyPrint(false); textNode16.outerHtmlTail(stringBuilder20, 10, outputSettings41); org.jsoup.nodes.Entities.EscapeMode escapeMode43 = null; org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings41.escapeMode(escapeMode43); org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) (short) 0); textNode9.outerHtmlTail(stringBuilder12, 100, outputSettings46); documentType4.outerHtmlTail(stringBuilder5, (int) 'a', outputSettings46); org.junit.Assert.assertNotNull(textNode9); org.junit.Assert.assertNotNull(textNode16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(attributes19); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNull(escapeMode39); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(outputSettings46); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[text=\"\"$=text=\"\"]", ":containsOwn(hi!", "[<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>!=<head></head>]", "[:containsown(hi!=text=\"\"]"); java.lang.String str5 = documentType4.nodeName(); org.jsoup.nodes.Attributes attributes6 = documentType4.attributes; java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor7 = attributes6.iterator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#doctype" + "'", str5, "#doctype"); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeItor7); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode2 = null; org.jsoup.nodes.Document document3 = document1.quirksMode(quirksMode2); org.jsoup.nodes.Element element4 = document3.body(); java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!", "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document3.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element12 = document3.clone(); org.jsoup.select.Elements elements13 = document3.getAllElements(); org.jsoup.nodes.Element element15 = document3.createElement("<head></head>"); org.jsoup.nodes.Element element17 = document3.tagName("#[:eq(1)!=:contains(<html>\n <head></head>\n <body></body>\n</html>:containsown(hi!]"); java.lang.StringBuilder stringBuilder18 = null; org.jsoup.nodes.DocumentType documentType24 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node25 = documentType24.parent(); java.lang.StringBuilder stringBuilder26 = null; org.jsoup.nodes.Document document29 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document29.quirksMode(quirksMode30); org.jsoup.nodes.Element element33 = document31.tagName("hi!"); org.jsoup.nodes.Element element35 = document31.createElement("hi!"); org.jsoup.nodes.Element element37 = document31.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings38 = document31.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings38.indentAmount(0); documentType24.outerHtmlTail(stringBuilder26, (int) (short) 0, outputSettings38); // The following exception was thrown during execution in test generation try { element17.outerHtmlTail(stringBuilder18, (int) (short) 10, outputSettings38); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document1); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element4); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNull(node25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(outputSettings41); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType("[ text=\"\"]", "hi!", "", ":containsOwn(hi!"); org.jsoup.nodes.Node node5 = documentType4.parent(); java.lang.StringBuilder stringBuilder6 = null; org.jsoup.nodes.Document document9 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = null; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.tagName("hi!"); org.jsoup.nodes.Element element15 = document11.createElement("hi!"); org.jsoup.nodes.Element element17 = document11.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document11.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings18.clone(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.indentAmount(0); documentType4.outerHtmlTail(stringBuilder6, (int) (short) 0, outputSettings18); boolean boolean23 = outputSettings18.prettyPrint(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings18.charset(""); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: "); } catch (java.nio.charset.IllegalCharsetNameException e) { // Expected exception. } org.junit.Assert.assertNull(node5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.jsoup.nodes.DocumentType documentType4 = new org.jsoup.nodes.DocumentType(":eq(1)", "<head></head>", "# text=\"\"", "<html>\n <head></head>\n <body></body>\n</html> text=&quot;&quot;"); int int5 = documentType4.siblingIndex(); java.lang.String str6 = documentType4.nodeName(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#doctype" + "'", str6, "#doctype"); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded(":containsOwn(hi!", ":containsOwn(hi!"); org.jsoup.nodes.TextNode textNode4 = textNode2.text(":containsown(hi!"); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.DocumentType documentType11 = new org.jsoup.nodes.DocumentType("<html>\n <head></head>\n <body></body>\n</html><html>\n <head></head>\n <body></body>\n</html>", ":eq(1)", "<html>\n <head></head>\n <body>\n  text=&quot;&quot;\n </body>\n</html>", " text=\"\""); java.lang.StringBuilder stringBuilder12 = null; org.jsoup.nodes.Document document15 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode16 = null; org.jsoup.nodes.Document document17 = document15.quirksMode(quirksMode16); org.jsoup.nodes.Element element19 = document17.tagName("hi!"); org.jsoup.nodes.Element element21 = document17.createElement("hi!"); org.jsoup.nodes.Element element23 = document17.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings24 = document17.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings24.clone(); java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings24.encoder(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings24.indentAmount((int) (short) 0); documentType11.outerHtmlTail(stringBuilder12, (int) (byte) -1, outputSettings28); java.lang.StringBuilder stringBuilder30 = null; org.jsoup.nodes.Document document33 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode34 = null; org.jsoup.nodes.Document document35 = document33.quirksMode(quirksMode34); org.jsoup.nodes.Element element37 = document35.tagName("hi!"); org.jsoup.nodes.Element element39 = document35.createElement("hi!"); org.jsoup.nodes.Element element41 = document35.append(":containsOwn(hi!"); org.jsoup.nodes.Document.OutputSettings outputSettings42 = document35.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings42.clone(); org.jsoup.nodes.Entities.EscapeMode escapeMode44 = null; org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.escapeMode(escapeMode44); boolean boolean46 = outputSettings43.prettyPrint(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.indentAmount((int) (byte) 10); documentType11.outerHtmlTail(stringBuilder30, (int) (short) 10, outputSettings48); int int50 = outputSettings48.indentAmount(); textNode4.outerHtmlTail(stringBuilder5, (int) (short) -1, outputSettings48); org.junit.Assert.assertNotNull(textNode2); org.junit.Assert.assertNotNull(textNode4); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(outputSettings24); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charsetEncoder26); org.junit.Assert.assertNotNull(outputSettings28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10); }
public void test0() throws Throwable { DocumentType documentType0 = new DocumentType("0wv,tnIbel7gEj", "0wv,tnIbel7gEj", "", ""); Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings(); documentType0.outerHtmlTail((StringBuilder) null, 0, document_OutputSettings0); assertEquals(1, document_OutputSettings0.indentAmount()); }
public void test1() throws Throwable { DocumentType documentType0 = new DocumentType("J", "ovbar", "", ""); String string0 = documentType0.nodeName(); assertEquals("#doctype", string0); }
public void test2() throws Throwable { StringBuilder stringBuilder0 = new StringBuilder(); Document document0 = Document.createShell(")7.xY9(PR+w_~L;+_R"); Document.OutputSettings document_OutputSettings0 = document0.outputSettings(); DocumentType documentType0 = new DocumentType("]9", "", "]9", ""); documentType0.outerHtmlHead(stringBuilder0, 747, document_OutputSettings0); assertEquals("<!DOCTYPE ]9 \"]9\">", stringBuilder0.toString()); }
public void test3() throws Throwable { StringBuilder stringBuilder0 = new StringBuilder(); DocumentType documentType0 = new DocumentType("J", "ovbar", "", ""); Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings(); documentType0.outerHtmlHead(stringBuilder0, (-498), document_OutputSettings0); assertEquals("<!DOCTYPE J PUBLIC \"ovbar\">", stringBuilder0.toString()); }
public void constructorValidationThrowsExceptionOnBlankName() { DocumentType fail = new DocumentType("","", "", ""); }
public void constructorValidationThrowsExceptionOnNulls() { DocumentType fail = new DocumentType("html", null, null, ""); }
public void constructorValidationOkWithBlankPublicAndSystemIds() { DocumentType fail = new DocumentType("html","", "",""); }
@Test public void outerHtmlGeneration() { DocumentType html5 = new DocumentType("html", "", "", ""); assertEquals("<!DOCTYPE html>", html5.outerHtml()); DocumentType publicDocType = new DocumentType("html", "-//IETF//DTD HTML//", "", ""); assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml()); DocumentType systemDocType = new DocumentType("html", "", "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", ""); assertEquals("<!DOCTYPE html \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml()); DocumentType combo = new DocumentType("notHtml", "--public", "--system", ""); assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml()); }
