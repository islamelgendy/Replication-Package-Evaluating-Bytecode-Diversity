public void test00() throws Throwable { Fraction fraction0 = Fraction.ONE_QUARTER; int int0 = fraction0.getDenominator(); assertEquals(4, int0); }
public void test01() throws Throwable { Fraction fraction0 = Fraction.ONE_FIFTH; Fraction fraction1 = fraction0.TWO_THIRDS.add(2096); assertEquals(6290, fraction1.getNumerator()); assertEquals(2096.6666666666665, fraction1.doubleValue(), 0.01); }
public void test02() throws Throwable { Fraction fraction0 = Fraction.TWO_FIFTHS; Fraction fraction1 = fraction0.TWO_FIFTHS.divide(1133); Fraction fraction2 = fraction1.multiply(1133); Fraction fraction3 = Fraction.TWO_FIFTHS; boolean boolean0 = fraction2.equals(fraction3); assertFalse(fraction3.equals((Object)fraction1)); assertEquals(0.0353045013239188, fraction1.percentageValue(), 0.01); assertTrue(boolean0); }
public void test03() throws Throwable { Fraction fraction0 = Fraction.MINUS_ONE; Fraction fraction1 = fraction0.ZERO.subtract(fraction0); assertEquals((byte)1, fraction1.byteValue()); assertEquals(1, fraction1.getNumerator()); }
public void test04() throws Throwable { Fraction fraction0 = new Fraction(2147483631); Fraction fraction1 = Fraction.ZERO; Fraction fraction2 = fraction0.TWO_THIRDS.multiply(fraction1); assertEquals(1, fraction0.getDenominator()); assertEquals(0, fraction2.getNumerator()); assertEquals(2147483631L, fraction0.longValue()); }
public void test05() throws Throwable { Fraction fraction0 = Fraction.ONE_HALF; FractionField fractionField0 = fraction0.ONE_QUARTER.getField(); assertNotNull(fractionField0); }
public void test06() throws Throwable { Fraction fraction0 = new Fraction((double) (-2129735848)); assertEquals((byte)88, fraction0.byteValue()); }
public void test07() throws Throwable { Fraction fraction0 = Fraction.getReducedFraction(1372, 1372); long long0 = fraction0.longValue(); assertEquals(1, fraction0.getNumerator()); assertEquals(100.0, fraction0.percentageValue(), 0.01); assertEquals(1L, long0); }
public void test08() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Fraction fraction1 = fraction0.ONE_FIFTH.divide(fraction0); assertEquals(2, fraction1.getNumerator()); assertEquals(5, fraction1.getDenominator()); }
public void test09() throws Throwable { Fraction fraction0 = Fraction.ZERO; Fraction fraction1 = fraction0.subtract(2877); assertEquals((-2877), fraction1.getNumerator()); assertEquals((-287700.0), fraction1.percentageValue(), 0.01); }
public void test10() throws Throwable { Fraction fraction0 = new Fraction((-526)); int int0 = fraction0.intValue(); assertEquals((-526), int0); assertEquals(1, fraction0.getDenominator()); }
public void test11() throws Throwable { Fraction fraction0 = Fraction.THREE_FIFTHS; fraction0.hashCode(); }
public void test12() throws Throwable { Fraction fraction0 = Fraction.THREE_FIFTHS; int int0 = fraction0.getNumerator(); assertEquals(3, int0); }
public void test13() throws Throwable { Fraction fraction0 = Fraction.ONE_FIFTH; float float0 = fraction0.floatValue(); assertEquals(0.2F, float0, 0.01F); }
public void test14() throws Throwable { Fraction fraction0 = Fraction.getReducedFraction(1372, 1372); double double0 = fraction0.percentageValue(); assertEquals(100.0, double0, 0.01); assertEquals(1, fraction0.getDenominator()); }
public void test15() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction((double) 1, 1); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807) // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test16() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction(4.503599627370496E15); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // illegal state: Overflow trying to convert 4,503,599,627,370,496 to fraction (4,503,599,627,370,496/1) // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test17() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction((double) 37, 37); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // illegal state: Overflow trying to convert 37 to fraction (9,223,372,036,854,775,772/9,223,372,036,854,775,807) // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test18() throws Throwable { Fraction fraction0 = new Fraction(0.9); assertEquals(0.9F, fraction0.floatValue(), 0.01F); }
public void test19() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction(758.391943, (-2147483646), (-2147483646)); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // illegal state: Unable to convert 758.392 to fraction after -2,147,483,646 iterations // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test20() throws Throwable { Fraction fraction0 = new Fraction(294.5236174025977, (-981)); assertEquals(294, fraction0.intValue()); }
public void test21() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction(0, 0); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // zero denominator in fraction 0/0 // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test22() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test23() throws Throwable { Fraction fraction0 = null; try { fraction0 = new Fraction((-2147483630), Integer.MIN_VALUE); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // overflow in fraction -2,147,483,630/-2,147,483,648, cannot negate // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test24() throws Throwable { Fraction fraction0 = Fraction.ONE_HALF; Fraction fraction1 = fraction0.ONE_THIRD.abs(); assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01); }
public void test25() throws Throwable { Fraction fraction0 = new Fraction(179, 179); int int0 = fraction0.compareTo(fraction0); assertEquals(0, int0); assertEquals(1, fraction0.getNumerator()); assertEquals(1.0, fraction0.doubleValue(), 0.01); }
public void test26() throws Throwable { Fraction fraction0 = Fraction.TWO_THIRDS; Fraction fraction1 = Fraction.THREE_QUARTERS; int int0 = fraction0.compareTo(fraction1); assertEquals((-1), int0); }
public void test27() throws Throwable { Fraction fraction0 = new Fraction(179, 179); Fraction fraction1 = Fraction.THREE_QUARTERS; int int0 = fraction0.compareTo(fraction1); assertEquals(1, int0); assertEquals(1, fraction0.getDenominator()); assertEquals(100.0, fraction0.percentageValue(), 0.01); }
public void test28() throws Throwable { Fraction fraction0 = Fraction.TWO_FIFTHS; Fraction fraction1 = fraction0.add(fraction0); boolean boolean0 = fraction1.equals(fraction0); assertEquals(80.0, fraction1.percentageValue(), 0.01); assertFalse(fraction0.equals((Object)fraction1)); assertEquals(5, fraction1.getDenominator()); assertFalse(boolean0); }
public void test29() throws Throwable { Fraction fraction0 = Fraction.THREE_FIFTHS; boolean boolean0 = fraction0.equals(fraction0); assertTrue(boolean0); }
public void test30() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Object object0 = new Object(); boolean boolean0 = fraction0.equals(object0); assertFalse(boolean0); }
public void test31() throws Throwable { Fraction fraction0 = Fraction.ONE_QUARTER; Fraction fraction1 = fraction0.MINUS_ONE.abs(); boolean boolean0 = fraction1.equals(fraction0); assertFalse(fraction0.equals((Object)fraction1)); assertEquals((byte)1, fraction1.byteValue()); assertFalse(boolean0); assertEquals(1, fraction1.getNumerator()); }
public void test32() throws Throwable { Fraction fraction0 = new Fraction(Integer.MIN_VALUE); // Undeclared exception! try { fraction0.negate(); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // overflow in fraction -2,147,483,648/1, cannot negate // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test33() throws Throwable { Fraction fraction0 = Fraction.ONE_HALF; // Undeclared exception! try { fraction0.subtract((Fraction) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // fraction // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test34() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Fraction fraction1 = fraction0.ZERO.add(fraction0); assertSame(fraction1, fraction0); }
public void test35() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Fraction fraction1 = Fraction.ZERO; Fraction fraction2 = fraction0.subtract(fraction1); assertSame(fraction2, fraction0); }
public void test36() throws Throwable { Fraction fraction0 = Fraction.ONE_HALF; Fraction fraction1 = fraction0.TWO.subtract(fraction0); assertEquals(3, fraction1.getNumerator()); assertEquals(150.0, fraction1.percentageValue(), 0.01); }
public void test37() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Fraction fraction1 = fraction0.subtract(fraction0); assertEquals(0.0, fraction1.percentageValue(), 0.01); }
public void test38() throws Throwable { Fraction fraction0 = Fraction.getReducedFraction((-2147483646), (-3479)); Fraction fraction1 = new Fraction(1301, (-3479)); // Undeclared exception! try { fraction1.subtract(fraction0); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // overflow, numerator too large after multiply: -2,147,484,947 // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test39() throws Throwable { Fraction fraction0 = Fraction.ONE_HALF; // Undeclared exception! try { fraction0.multiply((Fraction) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // fraction // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test40() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Fraction fraction1 = fraction0.ZERO.multiply(fraction0); assertEquals(0.0, fraction1.percentageValue(), 0.01); }
public void test41() throws Throwable { Fraction fraction0 = Fraction.ONE_QUARTER; // Undeclared exception! try { fraction0.THREE_QUARTERS.divide((Fraction) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // fraction // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test42() throws Throwable { Fraction fraction0 = Fraction.TWO_QUARTERS; Fraction fraction1 = Fraction.ZERO; // Undeclared exception! try { fraction0.FOUR_FIFTHS.divide(fraction1); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // the fraction to divide by must not be zero: 0/1 // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test43() throws Throwable { // Undeclared exception! try { Fraction.getReducedFraction(0, 0); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // zero denominator in fraction 0/0 // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test44() throws Throwable { Fraction fraction0 = Fraction.getReducedFraction(0, (-4114)); assertEquals(0, fraction0.getNumerator()); }
public void test45() throws Throwable { Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE); assertEquals(1, fraction0.getDenominator()); assertEquals(1.0, fraction0.doubleValue(), 0.01); }
public void test46() throws Throwable { // Undeclared exception! try { Fraction.getReducedFraction((-2147483643), Integer.MIN_VALUE); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // overflow in fraction -2,147,483,643/-2,147,483,648, cannot negate // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test47() throws Throwable { // Undeclared exception! try { Fraction.getReducedFraction(Integer.MIN_VALUE, (-2147483608)); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // overflow in fraction -2,147,483,648/-2,147,483,608, cannot negate // verifyException("org.apache.commons.math3.fraction.Fraction", e); } }
public void test48() throws Throwable { Fraction fraction0 = Fraction.ONE_FIFTH; String string0 = fraction0.toString(); assertEquals("1 / 5", string0); }
public void test49() throws Throwable { Fraction fraction0 = Fraction.MINUS_ONE; String string0 = fraction0.toString(); assertEquals("-1", string0); }
