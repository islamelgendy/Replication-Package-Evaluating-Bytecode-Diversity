public void testFindWrapPos() throws Exception { HelpFormatter hf = new HelpFormatter(); String text = "This is a test."; assertEquals("wrap position", 7, hf.findWrapPos(text, 8, 0)); assertEquals("wrap position 2", -1, hf.findWrapPos(text, 8, 8)); text = "aaaa aa"; assertEquals("wrap position 3", 4, hf.findWrapPos(text, 3, 0)); }
public void testPrintWrapped() throws Exception { StringBuffer sb = new StringBuffer(); HelpFormatter hf = new HelpFormatter(); String text = "This is a test."; String expected = "This is a" + hf.getNewLine() + "test."; hf.renderWrappedText(sb, 12, 0, text); assertEquals("single line text", expected, sb.toString()); sb.setLength(0); expected = "This is a" + hf.getNewLine() + "  test."; hf.renderWrappedText(sb, 12, 4, text); assertEquals("single line padded text", expected, sb.toString()); text = " -p,--period <PERIOD> PERIOD is time duration of form " + "DATE[-DATE] where DATE has form YYYY[MM[DD]]"; sb.setLength(0); expected = " -p,--period <PERIOD> PERIOD is time duration of" + hf.getNewLine() + "            form DATE[-DATE] where DATE" + hf.getNewLine() + "            has form YYYY[MM[DD]]"; hf.renderWrappedText(sb, 53, 24, text); assertEquals("single line padded text 2", expected, sb.toString()); text = "aaaa aaaa aaaa" + hf.getNewLine() + "aaaaaa" + hf.getNewLine() + "aaaaa"; expected = text; sb.setLength(0); hf.renderWrappedText(sb, 16, 0, text); assertEquals("multi line text", expected, sb.toString()); expected = "aaaa aaaa aaaa" + hf.getNewLine() + "  aaaaaa" + hf.getNewLine() + "  aaaaa"; sb.setLength(0); hf.renderWrappedText(sb, 16, 4, text); assertEquals("multi-line padded text", expected, sb.toString()); }
public void testPrintOptions() throws Exception { StringBuffer sb = new StringBuffer(); HelpFormatter hf = new HelpFormatter(); final int leftPad = 1; final int descPad = 3; final String lpad = hf.createPadding(leftPad); final String dpad = hf.createPadding(descPad); Options options = null; String expected = null; options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa"); expected = lpad + "-a" + dpad + "aaaa aaaa aaaa aaaa aaaa"; hf.renderOptions(sb, 60, options, leftPad, descPad); assertEquals("simple non-wrapped option", expected, sb.toString()); int nextLineTabStop = leftPad + descPad + "-a".length(); expected = lpad + "-a" + dpad + "aaaa aaaa aaaa" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "aaaa aaaa"; sb.setLength(0); hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad); assertEquals("simple wrapped option", expected, sb.toString());  options = new Options().addOption("a", "aaa", false, "dddd dddd dddd dddd"); expected = lpad + "-a,--aaa" + dpad + "dddd dddd dddd dddd"; sb.setLength(0); hf.renderOptions(sb, 60, options, leftPad, descPad); assertEquals("long non-wrapped option", expected, sb.toString()); nextLineTabStop = leftPad + descPad + "-a,--aaa".length(); expected = lpad + "-a,--aaa" + dpad + "dddd dddd" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "dddd dddd"; sb.setLength(0); hf.renderOptions(sb, 25, options, leftPad, descPad); assertEquals("long wrapped option", expected, sb.toString()); options = new Options(). addOption("a", "aaa", false, "dddd dddd dddd dddd"). addOption("b", false, "feeee eeee eeee eeee"); expected = lpad + "-a,--aaa" + dpad + "dddd dddd" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "dddd dddd" + hf.getNewLine() + lpad + "-b   " + dpad + "feeee eeee" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "eeee eeee"; sb.setLength(0); hf.renderOptions(sb, 25, options, leftPad, descPad); assertEquals("multiple wrapped options", expected, sb.toString()); }
public void testPrintHelpWithEmptySyntax() { HelpFormatter formatter = new HelpFormatter(); try { formatter.printHelp(null, new Options()); fail("null command line syntax should be rejected"); } catch (IllegalArgumentException e) { } try { formatter.printHelp("", new Options()); fail("empty command line syntax should be rejected"); } catch (IllegalArgumentException e) { } }
public void testAutomaticUsage() throws Exception { HelpFormatter hf = new HelpFormatter(); Options options = null; String expected = "usage: app [-a]"; ByteArrayOutputStream out = new ByteArrayOutputStream(); PrintWriter pw = new PrintWriter(out); options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa"); hf.printUsage(pw, 60, "app", options); pw.flush(); assertEquals("simple auto usage", expected, out.toString().trim()); out.reset(); expected = "usage: app [-a] [-b]"; options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa") .addOption("b", false, "bbb"); hf.printUsage(pw, 60, "app", options); pw.flush(); assertEquals("simple auto usage", expected, out.toString().trim()); out.reset(); }
public void testPrintUsage() { Option optionA = new Option("a", "first"); Option optionB = new Option("b", "second"); Option optionC = new Option("c", "third"); Options opts = new Options(); opts.addOption(optionA); opts.addOption(optionB); opts.addOption(optionC); HelpFormatter helpFormatter = new HelpFormatter(); ByteArrayOutputStream bytesOut = new ByteArrayOutputStream(); PrintWriter printWriter = new PrintWriter(bytesOut); helpFormatter.printUsage(printWriter, 80, "app", opts); printWriter.close(); assertEquals("usage: app [-a] [-b] [-c]" + EOL, bytesOut.toString()); }
public void testPrintSortedUsage() { Options opts = new Options(); opts.addOption(new Option("a", "first")); opts.addOption(new Option("b", "second")); opts.addOption(new Option("c", "third")); HelpFormatter helpFormatter = new HelpFormatter(); helpFormatter.setOptionComparator(new Comparator() { public int compare(Object o1, Object o2) { Option opt1 = (Option) o1; Option opt2 = (Option) o2; return opt2.getKey().compareToIgnoreCase(opt1.getKey()); } }); StringWriter out = new StringWriter(); helpFormatter.printUsage(new PrintWriter(out), 80, "app", opts); assertEquals("usage: app [-c] [-b] [-a]" + EOL, out.toString()); }
public void testPrintSortedUsageWithNullComparator() { Options opts = new Options(); opts.addOption(new Option("a", "first")); opts.addOption(new Option("b", "second")); opts.addOption(new Option("c", "third")); HelpFormatter helpFormatter = new HelpFormatter(); helpFormatter.setOptionComparator(null); StringWriter out = new StringWriter(); helpFormatter.printUsage(new PrintWriter(out), 80, "app", opts); assertEquals("usage: app [-a] [-b] [-c]" + EOL, out.toString()); }
public void testPrintOptionGroupUsage() { OptionGroup group = new OptionGroup(); group.addOption(OptionBuilder.create("a")); group.addOption(OptionBuilder.create("b")); group.addOption(OptionBuilder.create("c")); Options options = new Options(); options.addOptionGroup(group); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app [-a | -b | -c]" + EOL, out.toString()); }
public void testPrintRequiredOptionGroupUsage() { OptionGroup group = new OptionGroup(); group.addOption(OptionBuilder.create("a")); group.addOption(OptionBuilder.create("b")); group.addOption(OptionBuilder.create("c")); group.setRequired(true); Options options = new Options(); options.addOptionGroup(group); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app -a | -b | -c" + EOL, out.toString()); }
public void testPrintOptionWithEmptyArgNameUsage() { Option option = new Option("f", true, null); option.setArgName(""); option.setRequired(true); Options options = new Options(); options.addOption(option); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app -f" + EOL, out.toString()); }
public void testDefaultArgName() { Option option = OptionBuilder.hasArg().isRequired().create("f"); Options options = new Options(); options.addOption(option); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.setArgName("argument"); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app -f <argument>" + EOL, out.toString()); }
public void testRtrim() { HelpFormatter formatter = new HelpFormatter(); assertEquals(null, formatter.rtrim(null)); assertEquals("", formatter.rtrim("")); assertEquals(" foo", formatter.rtrim(" foo ")); }
public void testAccessors() { HelpFormatter formatter = new HelpFormatter(); formatter.setArgName("argname"); assertEquals("arg name", "argname", formatter.getArgName()); formatter.setDescPadding(3); assertEquals("desc padding", 3, formatter.getDescPadding()); formatter.setLeftPadding(7); assertEquals("left padding", 7, formatter.getLeftPadding()); formatter.setLongOptPrefix("~~"); assertEquals("long opt prefix", "~~", formatter.getLongOptPrefix()); formatter.setNewLine("\n"); assertEquals("new line", "\n", formatter.getNewLine()); formatter.setOptPrefix("~"); assertEquals("opt prefix", "~", formatter.getOptPrefix()); formatter.setSyntaxPrefix("-> "); assertEquals("syntax prefix", "-> ", formatter.getSyntaxPrefix()); formatter.setWidth(80); assertEquals("width", 80, formatter.getWidth()); }
public void testHeaderStartingWithLineSeparator() { Options options = new Options(); HelpFormatter formatter = new HelpFormatter(); String header = EOL + "Header"; String footer = "Footer"; StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "foobar", header, options, 2, 2, footer, true); assertEquals( "usage: foobar" + EOL + "" + EOL + "Header" + EOL + "" + EOL + "Footer" + EOL , out.toString()); }
public void testOptionWithoutShortFormat() { Options options = new Options(); options.addOption(new Option("a", "aaa", false, "aaaaaaa")); options.addOption(new Option(null, "bbb", false, "bbbbbbb")); options.addOption(new Option("c", null, false, "ccccccc")); HelpFormatter formatter = new HelpFormatter(); StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "foobar", "", options, 2, 2, "", true); assertEquals( "usage: foobar [-a] [--bbb] [-c]" + EOL + " -a,--aaa aaaaaaa" + EOL + "   --bbb bbbbbbb" + EOL + " -c    ccccccc" + EOL , out.toString()); }
public void testOptionWithoutShortFormat2() { Option help = new Option("h", "help", false, "print this message"); Option version = new Option("v", "version", false, "print version information"); Option newRun = new Option("n", "new", false, "Create NLT cache entries only for new items"); Option trackerRun = new Option("t", "tracker", false, "Create NLT cache entries only for tracker items"); Option timeLimit = OptionBuilder.withLongOpt("limit") .hasArg() .withValueSeparator() .withDescription("Set time limit for execution, in mintues") .create("l"); Option age = OptionBuilder.withLongOpt("age") .hasArg() .withValueSeparator() .withDescription("Age (in days) of cache item before being recomputed") .create("a"); Option server = OptionBuilder.withLongOpt("server") .hasArg() .withValueSeparator() .withDescription("The NLT server address") .create("s"); Option numResults = OptionBuilder.withLongOpt("results") .hasArg() .withValueSeparator() .withDescription("Number of results per item") .create("r"); Option configFile = OptionBuilder.withLongOpt("config") .hasArg() .withValueSeparator() .withDescription("Use the specified configuration file") .create(); Options mOptions = new Options(); mOptions.addOption(help); mOptions.addOption(version); mOptions.addOption(newRun); mOptions.addOption(trackerRun); mOptions.addOption(timeLimit); mOptions.addOption(age); mOptions.addOption(server); mOptions.addOption(numResults); mOptions.addOption(configFile); HelpFormatter formatter = new HelpFormatter(); final String EOL = System.getProperty("line.separator"); StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out),80,"commandline","header",mOptions,2,2,"footer",true); assertEquals( "usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]" + EOL + "    [-s <arg>] [-t] [-v]" + EOL + "header"+EOL+ " -a,--age <arg>   Age (in days) of cache item before being recomputed"+EOL+ "   --config <arg>  Use the specified configuration file"+EOL+ " -h,--help      print this message"+EOL+ " -l,--limit <arg>  Set time limit for execution, in mintues"+EOL+ " -n,--new      Create NLT cache entries only for new items"+EOL+ " -r,--results <arg> Number of results per item"+EOL+ " -s,--server <arg>  The NLT server address"+EOL+ " -t,--tracker    Create NLT cache entries only for tracker items"+EOL+ " -v,--version    print version information"+EOL+ "footer"+EOL ,out.toString()); }
public void testHelpWithLongOptSeparator() throws Exception { Options options = new Options(); options.addOption( "f", true, "the file" ); options.addOption(OptionBuilder.withLongOpt("size").withDescription("the size").hasArg().withArgName("SIZE").create('s')); options.addOption(OptionBuilder.withLongOpt("age").withDescription("the age").hasArg().create()); HelpFormatter formatter = new HelpFormatter(); assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator()); formatter.setLongOptSeparator("="); assertEquals("=", formatter.getLongOptSeparator()); StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "create", "header", options, 2, 2, "footer"); assertEquals( "usage: create" + EOL + "header" + EOL + "   --age=<arg>  the age" + EOL + " -f <arg>     the file" + EOL + " -s,--size=<SIZE> the size" + EOL + "footer" + EOL, out.toString()); }
public void testUsageWithLongOptSeparator() throws Exception { Options options = new Options(); options.addOption( "f", true, "the file" ); options.addOption(OptionBuilder.withLongOpt("size").withDescription("the size").hasArg().withArgName("SIZE").create('s')); options.addOption(OptionBuilder.withLongOpt("age").withDescription("the age").hasArg().create()); HelpFormatter formatter = new HelpFormatter(); formatter.setLongOptSeparator("="); StringWriter out = new StringWriter(); formatter.printUsage(new PrintWriter(out), 80, "create", options); assertEquals("usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]", out.toString().trim()); }
public void testSingleOptionFromGroup() throws Exception { String[] args = new String[] { "-f" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is NOT set", !cl.hasOption("r") ); assertTrue( "Confirm -f is set", cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is NOT set", !cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm no extra args", cl.getArgList().size() == 0); }
public void testSingleOption() throws Exception { String[] args = new String[] { "-r" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is set", cl.hasOption("r") ); assertTrue( "Confirm -f is NOT set", !cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is NOT set", !cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm no extra args", cl.getArgList().size() == 0); }
public void testTwoValidOptions() throws Exception { String[] args = new String[] { "-r", "-f" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is set", cl.hasOption("r") ); assertTrue( "Confirm -f is set", cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is NOT set", !cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm no extra args", cl.getArgList().size() == 0); }
public void testSingleLongOption() throws Exception { String[] args = new String[] { "--file" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is NOT set", !cl.hasOption("r") ); assertTrue( "Confirm -f is set", cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is NOT set", !cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm no extra args", cl.getArgList().size() == 0); }
public void testTwoValidLongOptions() throws Exception { String[] args = new String[] { "--revision", "--file" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is set", cl.hasOption("r") ); assertTrue( "Confirm -f is set", cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is NOT set", !cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm no extra args", cl.getArgList().size() == 0); }
public void testNoOptionsExtraArgs() throws Exception { String[] args = new String[] { "arg1", "arg2" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is NOT set", !cl.hasOption("r") ); assertTrue( "Confirm -f is NOT set", !cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is NOT set", !cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm TWO extra args", cl.getArgList().size() == 2); }
public void testTwoOptionsFromGroup() throws Exception { String[] args = new String[] { "-f", "-d" }; try { parser.parse( _options, args); fail( "two arguments from group not allowed" ); } catch (AlreadySelectedException e) { assertNotNull("null option group", e.getOptionGroup()); assertEquals("selected option", "f", e.getOptionGroup().getSelected()); assertEquals("option", "d", e.getOption().getOpt()); } }
public void testTwoLongOptionsFromGroup() throws Exception { String[] args = new String[] { "--file", "--directory" }; try { parser.parse(_options, args); fail( "two arguments from group not allowed" ); } catch (AlreadySelectedException e) { assertNotNull("null option group", e.getOptionGroup()); assertEquals("selected option", "f", e.getOptionGroup().getSelected()); assertEquals("option", "d", e.getOption().getOpt()); } }
public void testTwoOptionsFromDifferentGroup() throws Exception { String[] args = new String[] { "-f", "-s" }; CommandLine cl = parser.parse( _options, args); assertTrue( "Confirm -r is NOT set", !cl.hasOption("r") ); assertTrue( "Confirm -f is set", cl.hasOption("f") ); assertTrue( "Confirm -d is NOT set", !cl.hasOption("d") ); assertTrue( "Confirm -s is set", cl.hasOption("s") ); assertTrue( "Confirm -c is NOT set", !cl.hasOption("c") ); assertTrue( "Confirm NO extra args", cl.getArgList().size() == 0); }
public void testTwoOptionsFromGroupWithProperties() throws Exception { String[] args = new String[] { "-f" }; Properties properties = new Properties(); properties.put("d", "true"); CommandLine cl = parser.parse( _options, args, properties); assertTrue(cl.hasOption("f")); assertTrue(!cl.hasOption("d")); }
public void testValidLongOnlyOptions() throws Exception { CommandLine cl1 = parser.parse(_options, new String[]{"--export"}); assertTrue("Confirm --export is set", cl1.hasOption("export")); CommandLine cl2 = parser.parse(_options, new String[]{"--import"}); assertTrue("Confirm --import is set", cl2.hasOption("import")); }
public void testToString() { OptionGroup group1 = new OptionGroup(); group1.addOption(new Option(null, "foo", false, "Foo")); group1.addOption(new Option(null, "bar", false, "Bar")); if (!"[--bar Bar, --foo Foo]".equals(group1.toString())) { assertEquals("[--foo Foo, --bar Bar]", group1.toString()); } OptionGroup group2 = new OptionGroup(); group2.addOption(new Option("f", "foo", false, "Foo")); group2.addOption(new Option("b", "bar", false, "Bar")); if (!"[-b Bar, -f Foo]".equals(group2.toString())) { assertEquals("[-f Foo, -b Bar]", group2.toString()); } }
public void testGetNames() { OptionGroup group = new OptionGroup(); group.addOption(OptionBuilder.create('a')); group.addOption(OptionBuilder.create('b')); assertNotNull("null names", group.getNames()); assertEquals(2, group.getNames().size()); assertTrue(group.getNames().contains("a")); assertTrue(group.getNames().contains("b")); }
public void testClear() { TestOption option = new TestOption("x", true, ""); assertEquals(0, option.getValuesList().size()); option.addValue("a"); assertEquals(1, option.getValuesList().size()); option.clearValues(); assertEquals(0, option.getValuesList().size()); }
public void testClone() throws CloneNotSupportedException { TestOption a = new TestOption("a", true, ""); TestOption b = (TestOption) a.clone(); assertEquals(a, b); assertNotSame(a, b); a.setDescription("a"); assertEquals("", b.getDescription()); b.setArgs(2); b.addValue("b1"); b.addValue("b2"); assertEquals(1, a.getArgs()); assertEquals(0, a.getValuesList().size()); assertEquals(2, b.getValues().length); }
public void testSubclass() throws CloneNotSupportedException { Option option = new DefaultOption("f", "file", "myfile.txt"); Option clone = (Option) option.clone(); assertEquals("myfile.txt", clone.getValue()); assertEquals(DefaultOption.class, clone.getClass()); }
public void testHasArgName() { Option option = new Option("f", null); option.setArgName(null); assertFalse(option.hasArgName()); option.setArgName(""); assertFalse(option.hasArgName()); option.setArgName("file"); assertTrue(option.hasArgName()); }
public void testHasArgs() { Option option = new Option("f", null); option.setArgs(0); assertFalse(option.hasArgs()); option.setArgs(1); assertFalse(option.hasArgs()); option.setArgs(10); assertTrue(option.hasArgs()); option.setArgs(Option.UNLIMITED_VALUES); assertTrue(option.hasArgs()); option.setArgs(Option.UNINITIALIZED); assertFalse(option.hasArgs()); }
public void testGetValue() { Option option = new Option("f", null); option.setArgs(Option.UNLIMITED_VALUES); assertEquals("default", option.getValue("default")); assertEquals(null, option.getValue(0)); option.addValueForProcessing("foo"); assertEquals("foo", option.getValue()); assertEquals("foo", option.getValue(0)); assertEquals("foo", option.getValue("default")); }
public void testCompleteOption( ) { Option simple = OptionBuilder.withLongOpt( "simple option") .hasArg( ) .isRequired( ) .hasArgs( ) .withType( new Float( 10 ) ) .withDescription( "this is a simple option" ) .create( 's' ); assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType().getClass(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); }
public void testTwoCompleteOptions( ) { Option simple = OptionBuilder.withLongOpt( "simple option") .hasArg( ) .isRequired( ) .hasArgs( ) .withType( new Float( 10 ) ) .withDescription( "this is a simple option" ) .create( 's' ); assertEquals( "s", simple.getOpt() ); assertEquals( "simple option", simple.getLongOpt() ); assertEquals( "this is a simple option", simple.getDescription() ); assertEquals( simple.getType().getClass(), Float.class ); assertTrue( simple.hasArg() ); assertTrue( simple.isRequired() ); assertTrue( simple.hasArgs() ); simple = OptionBuilder.withLongOpt( "dimple option") .hasArg( ) .withDescription( "this is a dimple option" ) .create( 'd' ); assertEquals( "d", simple.getOpt() ); assertEquals( "dimple option", simple.getLongOpt() ); assertEquals( "this is a dimple option", simple.getDescription() ); assertNull( simple.getType() ); assertTrue( simple.hasArg() ); assertTrue( !simple.isRequired() ); assertTrue( !simple.hasArgs() ); }
public void testBaseOptionCharOpt() { Option base = OptionBuilder.withDescription( "option description") .create( 'o' ); assertEquals( "o", base.getOpt() ); assertEquals( "option description", base.getDescription() ); assertTrue( !base.hasArg() ); }
public void testBaseOptionStringOpt() { Option base = OptionBuilder.withDescription( "option description") .create( "o" ); assertEquals( "o", base.getOpt() ); assertEquals( "option description", base.getDescription() ); assertTrue( !base.hasArg() ); }
public void testSpecialOptChars() throws Exception { Option opt1 = OptionBuilder.withDescription("help options").create('?'); assertEquals("?", opt1.getOpt()); Option opt2 = OptionBuilder.withDescription("read from stdin").create('@'); assertEquals("@", opt2.getOpt()); try { OptionBuilder.create(' '); fail( "IllegalArgumentException not caught" ); } catch (IllegalArgumentException e) { } }
public void testOptionArgNumbers() { Option opt = OptionBuilder.withDescription( "option description" ) .hasArgs( 2 ) .create( 'o' ); assertEquals( 2, opt.getArgs() ); }
public void testIllegalOptions() { try { OptionBuilder.withDescription( "option description" ).create( '"' ); fail( "IllegalArgumentException not caught" ); } catch( IllegalArgumentException exp ) { } try { Option opt = OptionBuilder.create( "opt`" ); fail( "IllegalArgumentException not caught" ); } catch( IllegalArgumentException exp ) { } try { Option opt = OptionBuilder.create( "opt" ); } catch( IllegalArgumentException exp ) { fail( "IllegalArgumentException caught" ); } }
public void testCreateIncompleteOption() { try { OptionBuilder.hasArg().create(); fail("Incomplete option should be rejected"); } catch (IllegalArgumentException e) { OptionBuilder.create( "opt" ); } }
public void testBuilderIsResettedAlways() { try { OptionBuilder.withDescription("JUnit").create('"'); fail("IllegalArgumentException expected"); } catch (IllegalArgumentException e) { } assertNull("we inherited a description", OptionBuilder.create('x').getDescription()); try { OptionBuilder.withDescription("JUnit").create(); fail("IllegalArgumentException expected"); } catch (IllegalArgumentException e) { } assertNull("we inherited a description", OptionBuilder.create('x').getDescription()); }
public void testSimple() { Options opts = new Options(); opts.addOption("a", false, "toggle -a"); opts.addOption("b", true, "toggle -b"); assertTrue(opts.hasOption("a")); assertTrue(opts.hasOption("b")); }
public void testDuplicateSimple() { Options opts = new Options(); opts.addOption("a", false, "toggle -a"); opts.addOption("a", true, "toggle -a*"); assertEquals("last one in wins", "toggle -a*", opts.getOption("a").getDescription()); }
public void testLong() { Options opts = new Options(); opts.addOption("a", "--a", false, "toggle -a"); opts.addOption("b", "--b", true, "set -b"); assertTrue(opts.hasOption("a")); assertTrue(opts.hasOption("b")); }
public void testDuplicateLong() { Options opts = new Options(); opts.addOption("a", "--a", false, "toggle -a"); opts.addOption("a", "--a", false, "toggle -a*"); assertEquals("last one in wins", "toggle -a*", opts.getOption("a").getDescription()); }
public void testHelpOptions() { Option longOnly1 = OptionBuilder.withLongOpt("long-only1").create(); Option longOnly2 = OptionBuilder.withLongOpt("long-only2").create(); Option shortOnly1 = OptionBuilder.create("1"); Option shortOnly2 = OptionBuilder.create("2"); Option bothA = OptionBuilder.withLongOpt("bothA").create("a"); Option bothB = OptionBuilder.withLongOpt("bothB").create("b"); Options options = new Options(); options.addOption(longOnly1); options.addOption(longOnly2); options.addOption(shortOnly1); options.addOption(shortOnly2); options.addOption(bothA); options.addOption(bothB); Collection allOptions = new ArrayList(); allOptions.add(longOnly1); allOptions.add(longOnly2); allOptions.add(shortOnly1); allOptions.add(shortOnly2); allOptions.add(bothA); allOptions.add(bothB); Collection helpOptions = options.helpOptions(); assertTrue("Everything in all should be in help", helpOptions.containsAll(allOptions)); assertTrue("Everything in help should be in all", allOptions.containsAll(helpOptions)); }
public void testMissingOptionException() throws ParseException { Options options = new Options(); options.addOption(OptionBuilder.isRequired().create("f")); try { new PosixParser().parse(options, new String[0]); fail("Expected MissingOptionException to be thrown"); } catch (MissingOptionException e) { assertEquals("Missing required option: f", e.getMessage()); } }
public void testMissingOptionsException() throws ParseException { Options options = new Options(); options.addOption(OptionBuilder.isRequired().create("f")); options.addOption(OptionBuilder.isRequired().create("x")); try { new PosixParser().parse(options, new String[0]); fail("Expected MissingOptionException to be thrown"); } catch (MissingOptionException e) { assertEquals("Missing required options: f, x", e.getMessage()); } }
public void testToString() { Options options = new Options(); options.addOption("f", "foo", true, "Foo"); options.addOption("b", "bar", false, "Bar"); String s = options.toString(); assertNotNull("null string returned", s); assertTrue("foo option missing", s.toLowerCase().indexOf("foo") != -1); assertTrue("bar option missing", s.toLowerCase().indexOf("bar") != -1); }
public void testGetOptionsGroups() { Options options = new Options(); OptionGroup group1 = new OptionGroup(); group1.addOption(OptionBuilder.create('a')); group1.addOption(OptionBuilder.create('b')); OptionGroup group2 = new OptionGroup(); group2.addOption(OptionBuilder.create('x')); group2.addOption(OptionBuilder.create('y')); options.addOptionGroup(group1); options.addOptionGroup(group2); assertNotNull(options.getOptionGroups()); assertEquals(2, options.getOptionGroups().size()); }
public void testGetMatchingOpts() { Options options = new Options(); options.addOption(OptionBuilder.withLongOpt("version").create()); options.addOption(OptionBuilder.withLongOpt("verbose").create()); assertTrue(options.getMatchingOptions("foo").isEmpty()); assertEquals(1, options.getMatchingOptions("version").size()); assertEquals(2, options.getMatchingOptions("ver").size()); }
public void testOptionAndOptionWithArgument() throws Exception { String[] args = new String[]{ "-p", "-attr", "p" }; CommandLine cl = parser.parse(options, args); assertTrue("Confirm -p is set", cl.hasOption("p")); assertTrue("Confirm -attr is set", cl.hasOption("attr")); assertTrue("Confirm arg of -attr", cl.getOptionValue("attr").equals("p")); assertTrue("Confirm all arguments recognized", cl.getArgs().length == 0); }
public void testOptionWithArgument() throws Exception { String[] args = new String[]{ "-attr", "p" }; CommandLine cl = parser.parse(options, args); assertFalse("Confirm -p is set", cl.hasOption("p")); assertTrue("Confirm -attr is set", cl.hasOption("attr")); assertTrue("Confirm arg of -attr", cl.getOptionValue("attr").equals("p")); assertTrue("Confirm all arguments recognized", cl.getArgs().length == 0); }
public void testOption() throws Exception { String[] args = new String[]{ "-p" }; CommandLine cl = parser.parse(options, args); assertTrue("Confirm -p is set", cl.hasOption("p")); assertFalse("Confirm -attr is not set", cl.hasOption("attr")); assertTrue("Confirm all arguments recognized", cl.getArgs().length == 0); }
public void testSimplePattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/m*z#"); String[] args = new String[] {"-c", "-a", "foo", "-b", "java.util.Vector", "-e", "build.xml", "-f", "java.util.Calendar", "-n", "4.5", "-t", "http://commons.apache.org", "-z", "Thu Jun 06 17:48:57 EDT 2002", "-m", "test*"}; CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, args); assertEquals("flag a", "foo", line.getOptionValue("a")); assertEquals("string flag a", "foo", line.getOptionObject("a")); assertEquals("object flag b", new Vector(), line.getOptionObject("b")); assertTrue("boolean true flag c", line.hasOption("c")); assertFalse("boolean false flag d", line.hasOption("d")); assertEquals("file flag e", new File("build.xml"), line.getOptionObject("e")); assertEquals("class flag f", Calendar.class, line.getOptionObject("f")); assertEquals("number flag n", new Double(4.5), line.getOptionObject("n")); assertEquals("url flag t", new URL("http://commons.apache.org"), line.getOptionObject("t")); assertEquals("flag a", "foo", line.getOptionValue('a')); assertEquals("string flag a", "foo", line.getOptionObject('a')); assertEquals("object flag b", new Vector(), line.getOptionObject('b')); assertTrue("boolean true flag c", line.hasOption('c')); assertFalse("boolean false flag d", line.hasOption('d')); assertEquals("file flag e", new File("build.xml"), line.getOptionObject('e')); assertEquals("class flag f", Calendar.class, line.getOptionObject('f')); assertEquals("number flag n", new Double(4.5), line.getOptionObject('n')); assertEquals("url flag t", new URL("http://commons.apache.org"), line.getOptionObject('t')); try { assertEquals("files flag m", new File[0], line.getOptionObject('m')); fail("Multiple files are not supported yet, should have failed"); } catch(UnsupportedOperationException uoe) { } try { assertEquals("date flag z", new Date(1023400137276L), line.getOptionObject('z')); fail("Date is not supported yet, should have failed"); } catch(UnsupportedOperationException uoe) { } }
public void testEmptyPattern() throws Exception { Options options = PatternOptionBuilder.parsePattern(""); assertTrue(options.getOptions().isEmpty()); }
public void testUntypedPattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("abc"); CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-abc" }); assertTrue(line.hasOption('a')); assertNull("value a", line.getOptionObject('a')); assertTrue(line.hasOption('b')); assertNull("value b", line.getOptionObject('b')); assertTrue(line.hasOption('c')); assertNull("value c", line.getOptionObject('c')); }
public void testNumberPattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("n%d%x%"); CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-n", "1", "-d", "2.1", "-x", "3,5" }); assertEquals("n object class", Long.class, line.getOptionObject("n").getClass()); assertEquals("n value", new Long(1), line.getOptionObject("n")); assertEquals("d object class", Double.class, line.getOptionObject("d").getClass()); assertEquals("d value", new Double(2.1), line.getOptionObject("d")); assertNull("x object", line.getOptionObject("x")); }
public void testClassPattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("c+d+"); CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-c", "java.util.Calendar", "-d", "System.DateTime" }); assertEquals("c value", Calendar.class, line.getOptionObject("c")); assertNull("d value", line.getOptionObject("d")); }
public void testObjectPattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("o@i@n@"); CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-o", "java.lang.String", "-i", "java.util.Calendar", "-n", "System.DateTime" }); assertEquals("o value", "", line.getOptionObject("o")); assertNull("i value", line.getOptionObject("i")); assertNull("n value", line.getOptionObject("n")); }
public void testURLPattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("u/v/"); CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-u", "http://commons.apache.org", "-v", "foo://commons.apache.org" }); assertEquals("u value", new URL("http://commons.apache.org"), line.getOptionObject("u")); assertNull("v value", line.getOptionObject("v")); }
public void testExistingFilePattern() throws Exception { Options options = PatternOptionBuilder.parsePattern("f<"); CommandLineParser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-f", "test.properties" }); assertEquals("f value", new File("test.properties"), line.getOptionObject("f")); }
public void testRequiredOption() throws Exception { Options options = PatternOptionBuilder.parsePattern("!n%m%"); CommandLineParser parser = new PosixParser(); try { parser.parse(options, new String[]{""}); fail("MissingOptionException wasn't thrown"); } catch (MissingOptionException e) { assertEquals(1, e.getMissingOptions().size()); assertTrue(e.getMissingOptions().contains("n")); } }
