public void test00() throws Throwable { Option option0 = new Option("H", true, "H"); option0.setValueSeparator('\''); option0.addValueForProcessing("Illegal option name '"); assertEquals('\'', option0.getValueSeparator()); }
public void test01() throws Throwable { Option option0 = new Option("", ""); String string0 = option0.getDescription(); assertNotNull(string0); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); }
public void test02() throws Throwable { Option option0 = new Option("", true, ""); option0.getArgName(); assertFalse(option0.hasLongOpt()); }
public void test03() throws Throwable { Option option0 = new Option("MP", "MP"); option0.setOptionalArg(true); boolean boolean0 = option0.acceptsArg(); assertTrue(option0.hasOptionalArg()); assertTrue(boolean0); }
public void test04() throws Throwable { Option option0 = new Option("MP", "MP"); option0.setRequired(false); assertFalse(option0.isRequired()); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); }
public void test05() throws Throwable { Option option0 = new Option("6P", "6P"); option0.setArgs((-961)); try { option0.addValueForProcessing("6P"); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test06() throws Throwable { Option option0 = new Option((String) null, (String) null); option0.isRequired(); assertEquals((-1), option0.getArgs()); }
public void test07() throws Throwable { Option option0 = new Option("", "", true, ""); List list0 = option0.getValuesList(); assertTrue(list0.isEmpty()); }
public void test08() throws Throwable { Option option0 = new Option("", "", false, ""); option0.getLongOpt(); assertEquals((-1), option0.getArgs()); }
public void test09() throws Throwable { Option option0 = new Option((String) null, (String) null); try { option0.getId(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test10() throws Throwable { Option option0 = new Option("MP", "MP"); try { option0.addValue("MP"); fail("Expecting exception: UnsupportedOperationException"); } catch(UnsupportedOperationException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test11() throws Throwable { Option option0 = new Option((String) null, (String) null); Option option1 = (Option)option0.clone(); boolean boolean0 = option1.equals(option0); assertTrue(boolean0); assertEquals((-1), option1.getArgs()); assertNotSame(option1, option0); }
public void test12() throws Throwable { Option option0 = new Option("MP", "MP"); option0.getType(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test13() throws Throwable { Option option0 = new Option("MP", "MP"); option0.setDescription("MP"); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); }
public void test14() throws Throwable { Option option0 = new Option("", ""); String string0 = option0.getOpt(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); assertNotNull(string0); }
public void test15() throws Throwable { Option option0 = new Option("MP", "MP"); assertFalse(option0.hasLongOpt()); option0.setLongOpt("MP"); String string0 = option0.toString(); assertEquals("[ option: MP MP :: MP ]", string0); }
public void test16() throws Throwable { Option option0 = new Option("", ""); int int0 = option0.getArgs(); assertEquals((-1), int0); assertFalse(option0.hasLongOpt()); }
public void test17() throws Throwable { Option option0 = new Option("", "yf8zO 0<V1}h)rIV'T");
public void test18() throws Throwable { Option option0 = new Option("", ""); String string0 = option0.getKey(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); assertNotNull(string0); }
public void test19() throws Throwable { Option option0 = new Option("", ""); boolean boolean0 = option0.hasLongOpt(); assertFalse(boolean0); assertEquals((-1), option0.getArgs()); }
public void test20() throws Throwable { Option option0 = new Option((String) null, "y&./D%H@("); assertFalse(option0.hasLongOpt()); option0.setLongOpt("y&./D%H@("); boolean boolean0 = option0.hasLongOpt(); assertTrue(boolean0); }
public void test21() throws Throwable { Option option0 = new Option("0K", "0K"); boolean boolean0 = option0.hasArgName(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); assertFalse(boolean0); }
public void test22() throws Throwable { Option option0 = new Option("", "", true, ""); option0.setArgName(""); boolean boolean0 = option0.hasArgName(); assertFalse(boolean0); }
public void test23() throws Throwable { Option option0 = new Option("l", "l", true, "l"); option0.setArgName("l"); boolean boolean0 = option0.hasArgName(); assertTrue(boolean0); }
public void test24() throws Throwable { Option option0 = new Option("", ""); option0.setArgs(3333); option0.toString(); assertEquals(3333, option0.getArgs()); }
public void test25() throws Throwable { Option option0 = new Option("", ""); assertFalse(option0.hasArgs()); option0.setArgs((-2)); option0.toString(); assertEquals((-2), option0.getArgs()); }
public void test26() throws Throwable { Option option0 = new Option("MP", "MP"); try { option0.addValueForProcessing("MP"); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test27() throws Throwable { Option option0 = new Option("", "yf8zO 0<V1}h)rIV'T");
public void test28() throws Throwable { Option option0 = new Option("NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED"); option0.addValueForProcessing("NO_ARGS_ALLOWED"); option0.getValue("NO_ARGS_ALLOWED"); assertFalse(option0.hasValueSeparator()); assertFalse(option0.hasLongOpt()); }
public void test29() throws Throwable { Option option0 = new Option("", ""); option0.setArgs((-2)); option0.addValueForProcessing(""); try { option0.getValue((int) '\''); fail("Expecting exception: IndexOutOfBoundsException"); } catch(IndexOutOfBoundsException e) { verifyException("java.util.ArrayList", e); } }
public void test30() throws Throwable { Option option0 = new Option((String) null, (String) null); option0.getValue((-1)); assertEquals((-1), option0.getArgs()); }
public void test31() throws Throwable { Option option0 = new Option("NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED"); String string0 = option0.getValue("NO_ARGS_ALLOWED"); assertNotNull(string0); assertFalse(option0.hasLongOpt()); }
public void test32() throws Throwable { Option option0 = new Option("", ""); assertFalse(option0.hasArgs()); option0.setArgs((-2)); assertTrue(option0.hasArgs()); option0.addValueForProcessing(""); option0.getValues(); assertFalse(option0.hasValueSeparator()); }
public void test33() throws Throwable { Option option0 = new Option("_", "_"); String[] stringArray0 = option0.getValues(); assertNull(stringArray0); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); }
public void test34() throws Throwable { Option option0 = new Option("MP", true, "MP"); String string0 = option0.toString(); assertEquals("[ option: MP [ARG] :: MP ]", string0); }
public void test35() throws Throwable { Option option0 = new Option("vP", "vP"); option0.setType("vP"); String string0 = option0.toString(); assertEquals((-1), option0.getArgs()); assertEquals("[ option: vP :: vP :: vP ]", string0); }
public void test36() throws Throwable { Option option0 = new Option("MP", "MP"); Option option1 = new Option("", "", false, ""); boolean boolean0 = option0.equals(option1); assertFalse(option0.hasLongOpt()); assertEquals((-1), option1.getArgs()); assertFalse(boolean0); }
public void test37() throws Throwable { Option option0 = new Option((String) null, (String) null); boolean boolean0 = option0.equals(option0); assertTrue(boolean0); assertEquals((-1), option0.getArgs()); }
public void test38() throws Throwable { Option option0 = new Option("MP", "MP"); boolean boolean0 = option0.equals((Object) null); assertFalse(boolean0); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test39() throws Throwable { Option option0 = new Option("H", "H"); boolean boolean0 = option0.equals("[ option: H :: H ]"); assertFalse(boolean0); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test40() throws Throwable { Option option0 = new Option("MP", "MP"); Option option1 = new Option((String) null, (String) null); boolean boolean0 = option1.equals(option0); assertFalse(option0.hasLongOpt()); assertFalse(boolean0); assertEquals((-1), option1.getArgs()); }
public void test41() throws Throwable { Option option0 = new Option("MP", "MP"); Option option1 = new Option("MP", "MP", false, "MP"); boolean boolean0 = option0.equals(option1); assertFalse(boolean0); assertEquals((-1), option1.getArgs()); }
public void test42() throws Throwable { Option option0 = new Option("H", "H"); assertFalse(option0.hasLongOpt()); option0.setLongOpt("H"); Object object0 = option0.clone(); boolean boolean0 = option0.equals(object0); assertTrue(boolean0); }
public void test43() throws Throwable { Option option0 = new Option("H", "H"); assertFalse(option0.hasLongOpt()); option0.setLongOpt("H"); Option option1 = new Option("H", "H"); boolean boolean0 = option0.equals(option1); assertFalse(boolean0); }
public void test44() throws Throwable { Option option0 = new Option((String) null, (String) null); option0.hashCode(); assertEquals((-1), option0.getArgs()); }
public void test45() throws Throwable { Option option0 = new Option("MP", "MP"); option0.hashCode(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test46() throws Throwable { Option option0 = new Option("MP", "MP"); assertFalse(option0.hasLongOpt()); option0.setLongOpt("MP"); option0.hashCode(); assertFalse(option0.hasArgs()); }
public void test47() throws Throwable { Option option0 = new Option((String) null, true, (String) null); assertFalse(option0.hasValueSeparator()); option0.addValueForProcessing((String) null); boolean boolean0 = option0.acceptsArg(); assertFalse(boolean0); }
public void test48() throws Throwable { Option option0 = new Option("MP", "MP"); boolean boolean0 = option0.requiresArg(); assertFalse(boolean0); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test49() throws Throwable { Option option0 = new Option("MP", "MP"); option0.setOptionalArg(true); boolean boolean0 = option0.requiresArg(); assertTrue(option0.hasOptionalArg()); assertFalse(boolean0); }
public void test50() throws Throwable { Option option0 = new Option("MP", "MP"); assertFalse(option0.hasArg()); option0.setArgs((-2)); boolean boolean0 = option0.requiresArg(); assertTrue(boolean0); }
public void test51() throws Throwable { Option option0 = new Option("MP", "MP"); assertFalse(option0.hasArgs()); option0.setArgs((-2)); option0.addValueForProcessing("MP"); boolean boolean0 = option0.requiresArg(); assertFalse(boolean0); }
public void test00() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArgs((-1464)); assertNotNull(optionBuilder0); }
public void test01() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.isRequired(false); OptionBuilder optionBuilder1 = OptionBuilder.withType(optionBuilder0); assertSame(optionBuilder1, optionBuilder0); }
public void test02() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.isRequired(); assertNotNull(optionBuilder0); }
public void test03() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator('6'); assertNotNull(optionBuilder0); }
public void test04() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArg(); assertNotNull(optionBuilder0); }
public void test06() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withArgName("zsJ4qCmis1Pm<)\"e-Ck"); assertNotNull(optionBuilder0); }
public void test07() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator(); assertNotNull(optionBuilder0); }
public void test08() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArg(); assertNotNull(optionBuilder0); }
public void test10() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArgs(); assertNotNull(optionBuilder0); }
public void test11() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs((-413)); assertNotNull(optionBuilder0); }
public void test12() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs(); assertNotNull(optionBuilder0); }
public void test13() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withDescription(""); assertNotNull(optionBuilder0); }
public void test14() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false); assertNotNull(optionBuilder0); }
public void test15() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArg(true); assertNotNull(optionBuilder0); }
public void test16() throws Throwable { try { OptionBuilder.create(); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.OptionBuilder", e); } }
public void test00() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.getWidth(); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(74, int0); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(1, helpFormatter0.defaultLeftPad); }
public void test01() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); assertEquals("--", helpFormatter0.getLongOptPrefix()); helpFormatter0.setLongOptPrefix((String) null); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); }
public void test02() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.getDescPadding(); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(3, int0); }
public void test03() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setLongOptSeparator("-"); assertEquals("-", helpFormatter0.getLongOptSeparator()); }
public void test04() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setNewLine("arg"); assertEquals("arg", helpFormatter0.getNewLine()); }
public void test05() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setLeftPadding(74); assertEquals(74, helpFormatter0.defaultLeftPad); }
public void test06() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setArgName("\n"); assertEquals("\n", helpFormatter0.getArgName()); }
public void test07() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); helpFormatter0.printHelp(")T2a", options0, false); assertEquals("arg", helpFormatter0.getArgName()); }
public void test08() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setSyntaxPrefix("usage: "); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test09() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); helpFormatter0.printHelp(74, "Illegal option name '", "Illegal option name '", options0, "Illegal option name '"); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test10() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); helpFormatter0.printHelp(">", options0); assertEquals(" ", helpFormatter0.getLongOptSeparator()); }
public void test11() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getLongOptSeparator(); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(" ", string0); }
public void test12() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setWidth(3); assertEquals(3, helpFormatter0.defaultWidth); }
public void test13() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setOptPrefix("Aw6plb-A"); assertEquals("Aw6plb-A", helpFormatter0.getOptPrefix()); }
public void test14() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.getLeftPadding(); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(1, int0); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test15() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); try { helpFormatter0.printHelp((PrintWriter) null, 2996, "", "", options0, 2996, 2996, ""); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test16() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setDescPadding(30); assertEquals(30, helpFormatter0.defaultDescPad); }
public void test17() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); try { helpFormatter0.printHelp("arg", "Vg?HXP", (Options) null, "arg"); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test18() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getNewLine(); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("\n", string0); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("--", helpFormatter0.getLongOptPrefix()); }
public void test19() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getLongOptPrefix(); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", string0); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test20() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getSyntaxPrefix(); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("usage: ", string0); }
public void test21() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getOptPrefix(); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", string0); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test23() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); helpFormatter0.setOptionComparator(comparator0); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("--", helpFormatter0.getLongOptPrefix()); }
public void test24() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setOptionComparator((Comparator) null); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(" ", helpFormatter0.getLongOptSeparator()); }
public void test25() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); try { helpFormatter0.printHelp(3, (String) null, (String) null, options0, " [ARG]"); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test26() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); helpFormatter0.printHelp(3, "  ", "  ", options0, "  ", true); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("arg", helpFormatter0.getArgName()); }
public void test27() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); Options options1 = options0.addOption("arg", true, "--"); try { helpFormatter0.printUsage((PrintWriter) null, 1, " ", options1); fail("Expecting exception: StringIndexOutOfBoundsException"); } catch(StringIndexOutOfBoundsException e) { } }
public void test28() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-"); Option option0 = new Option("arg", "--"); OptionGroup optionGroup0 = new OptionGroup(); OptionGroup optionGroup1 = optionGroup0.addOption(option0); Option option1 = new Option("", "arg", false, "\n"); OptionGroup optionGroup2 = optionGroup1.addOption(option1); Options options0 = new Options(); Options options1 = options0.addOptionGroup(optionGroup2); helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1694, "", options1); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); }
public void test29() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--"); OptionGroup optionGroup0 = new OptionGroup(); Option option0 = new Option("arg", "--"); OptionGroup optionGroup1 = optionGroup0.addOption(option0); Options options0 = new Options(); Options options1 = options0.addOptionGroup(optionGroup1); optionGroup1.setRequired(true); try { helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "--", options1); fail("Expecting exception: StringIndexOutOfBoundsException"); } catch(StringIndexOutOfBoundsException e) { } }
public void test30() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); Options options1 = options0.addOption((String) null, true, "--"); try { helpFormatter0.printUsage((PrintWriter) null, 1, " ", options1); fail("Expecting exception: StringIndexOutOfBoundsException"); } catch(StringIndexOutOfBoundsException e) { } }
public void test31() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); StringBuffer stringBuffer0 = new StringBuffer(74); Options options0 = new Options(); options0.addOption((String) null, "usage: ", false, (String) null); helpFormatter0.renderOptions(stringBuffer0, 3970, options0, 3970, 3970); }
public void test32() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); StringBuffer stringBuffer0 = new StringBuffer(74); Options options0 = new Options(); Options options1 = options0.addOption("arg", true, "arg"); try { helpFormatter0.renderOptions(stringBuffer0, 3, options1, 1, 74); fail("Expecting exception: StringIndexOutOfBoundsException"); } catch(StringIndexOutOfBoundsException e) { } }
public void test33() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); Options options1 = options0.addOption("CocT", false, "-"); Options options2 = options1.addOption("", " ", false, "-"); try { helpFormatter0.renderOptions((StringBuffer) null, 3, options2, 3, 5); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test35() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); StringBuffer stringBuffer0 = new StringBuffer(); helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "\n"); assertEquals("\n ", stringBuffer0.toString()); assertEquals(2, stringBuffer0.length()); }
public void test37() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--"); helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n"); assertEquals(74, helpFormatter0.defaultWidth); }
public void test38() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.findWrapPos("\n", (-1), 1); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(0, int0); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test39() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.rtrim((String) null); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertNull(string0); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
