public void test00() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("[w", cSVFormat0); Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test01() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; // Undeclared exception! try { CSVParser.parse((File) null, cSVFormat0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Parameter 'file' must not be null! // verifyException("org.apache.commons.csv.Assertions", e); } }
public void test02() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("o+bph_;/B75kL5", cSVFormat0); long long0 = cSVParser0.getCurrentLineNumber(); assertEquals(0L, long0); }
public void test03() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("o+bph_;/B75kL5", cSVFormat0); long long0 = cSVParser0.getRecordNumber(); assertEquals(0L, long0); }
public void test04() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample"); NetworkHandling.createRemoteTextFile(evoSuiteURL0, "pJ"); URL uRL0 = MockURL.getHttpExample(); Charset charset0 = Charset.defaultCharset(); CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test05() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line "); CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1); cSVParser0.nextRecord(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test06() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVFormat cSVFormat1 = cSVFormat0.withNullString("9n/"); CSVParser cSVParser0 = CSVParser.parse("9n/", cSVFormat1); cSVParser0.nextRecord(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test07() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("xe$utxo5", cSVFormat0); cSVParser0.close(); Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test08() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; String[] stringArray0 = new String[1]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("!~0axa1!U^7O", cSVFormat1); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertEquals(0L, cSVParser0.getRecordNumber()); assertEquals(1, map0.size()); assertNotNull(map0); }
public void test09() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("#o4gHlDW?,[6", cSVFormat0); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertNull(map0); }
public void test10() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("xe$utxo5", cSVFormat0); cSVParser0.getRecords(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test11() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("e;JBbTs5f", cSVFormat1); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test12() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test13() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; String[] stringArray0 = new String[1]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true); CSVParser cSVParser0 = CSVParser.parse("eHKR$n{gUQ*5L|F1", cSVFormat2); assertEquals(1L, cSVParser0.getRecordNumber()); } @Test(timeout = 4000) public void test14() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.DEFAULT; CSVParser cSVParser0 = CSVParser.parse("#o4gHlDW?,[6", cSVFormat0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[#o4gHlDW?, [6]", cSVRecord0.toString()); } @Test(timeout = 4000) public void test15() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[]", cSVRecord0.toString()); } @Test(timeout = 4000) public void test16() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('5'); CSVParser cSVParser0 = CSVParser.parse("5T[cT2p{NL#2}M", cSVFormat1); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertNull(cSVRecord0); assertEquals(0L, cSVParser0.getRecordNumber()); } }
public void test14() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.DEFAULT; CSVParser cSVParser0 = CSVParser.parse("#o4gHlDW?,[6", cSVFormat0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[#o4gHlDW?, [6]", cSVRecord0.toString()); }
public void test15() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[]", cSVRecord0.toString()); }
public void test16() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('5'); CSVParser cSVParser0 = CSVParser.parse("5T[cT2p{NL#2}M", cSVFormat1); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertNull(cSVRecord0); assertEquals(0L, cSVParser0.getRecordNumber()); }
