public void test00() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser$1", cSVFormat0); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test01() throws Throwable { URL uRL0 = MockURL.getHttpExample(); Charset charset0 = Charset.defaultCharset(); CSVFormat cSVFormat0 = CSVFormat.DEFAULT; try { CSVParser.parse(uRL0, charset0, cSVFormat0); fail("Expecting exception: IOException"); } catch(IOException e) { // // Could not find: www.someFakeButWellFormedURL.org // verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e); } }
public void test02() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("The quoteChar cannot be a line break", cSVFormat0); cSVParser0.getRecords(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test03() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; // Undeclared exception! try { CSVParser.parse((File) null, cSVFormat0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Parameter 'file' must not be null! // verifyException("org.apache.commons.csv.Assertions", e); } }
public void test04() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; CSVParser cSVParser0 = CSVParser.parse("hnK7bHe/O]sv4JPUn", cSVFormat0); long long0 = cSVParser0.getCurrentLineNumber(); assertEquals(0L, long0); }
public void test05() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("P5)[,{Fg%zy1", cSVFormat0); long long0 = cSVParser0.getRecordNumber(); assertEquals(0L, long0); } @Test(timeout = 4000) public void test06() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line "); CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1); cSVParser0.nextRecord(); assertEquals(1L, cSVParser0.getRecordNumber()); } @Test(timeout = 4000) public void test07() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("rhz1zl9j1>hfhg*m", cSVFormat0); cSVParser0.close(); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(0L, cSVParser0.getRecordNumber()); } @Test(timeout = 4000) public void test08() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("JK.%/01/Rg31A}Lrr7\"", cSVFormat1); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertEquals(1, map0.size()); assertNotNull(map0); }
public void test06() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line "); CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1); cSVParser0.nextRecord(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test07() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("rhz1zl9j1>hfhg*m", cSVFormat0); cSVParser0.close(); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test08() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("JK.%/01/Rg31A}Lrr7\"", cSVFormat1);
public void test09() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("8oHI?)]8`=H.9^", cSVFormat0); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertNull(map0); }
public void test10() throws Throwable { Quote quote0 = Quote.NON_NUMERIC; String[] stringArray0 = new String[1]; CSVFormat cSVFormat0 = new CSVFormat('=', (Character) null, quote0, (Character) null, (Character) null, false, false, " skipheaderrecord:", " skipheaderrecord:", stringArray0, false); CSVParser cSVParser0 = CSVParser.parse(" skipheaderrecord:", cSVFormat0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test11() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test12() throws Throwable { Quote quote0 = Quote.NON_NUMERIC; String[] stringArray0 = new String[1]; CSVFormat cSVFormat0 = new CSVFormat('=', (Character) null, quote0, (Character) null, (Character) null, false, false, " skipheaderrecord:", " skipheaderrecord:", stringArray0, false); CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true); CSVParser cSVParser0 = CSVParser.parse(" skipheaderrecord:", cSVFormat1); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test13() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); // Undeclared exception! try { CSVParser.parse("\"\",,,,,,", cSVFormat1); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // The header contains duplicate names: [, , , , , , ] // verifyException("org.apache.commons.csv.CSVParser", e); } }
public void test14() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[]", cSVRecord0.toString()); }
public void test15() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('W'); CSVParser cSVParser0 = CSVParser.parse("Wd ;Bu9`k1#", cSVFormat1); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertNull(cSVRecord0); assertEquals(0L, cSVParser0.getRecordNumber()); }
