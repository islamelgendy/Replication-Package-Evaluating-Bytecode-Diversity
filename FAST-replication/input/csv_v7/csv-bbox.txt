public void test0501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0501"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0502"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); boolean boolean17 = cSVFormat13.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat13.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0503"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withSkipHeaderRecord(false); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat19, extendedBufferedReader22); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat19.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0504"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withEscape('a'); java.io.Reader reader19 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = cSVFormat13.parse(reader19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0505"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote57 = null; java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote57, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray66, true); boolean boolean69 = cSVFormat68.getIgnoreSurroundingSpaces(); boolean boolean70 = cSVFormat68.isEscaping(); java.lang.String[] strArray71 = cSVFormat68.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat51.withHeader(strArray71); java.io.Reader reader73 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser74 = cSVFormat72.parse(reader73); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertNotNull(cSVFormat72); }
public void test0506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0506"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withRecordSeparator(""); boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0507"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withIgnoreEmptyLines(false); java.lang.String str23 = cSVFormat15.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str23, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0508"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '4'); java.io.Reader reader22 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat19.parse(reader22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0509"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat18.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); }
public void test0510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0510"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null; org.apache.commons.csv.Lexer lexer17 = new org.apache.commons.csv.Lexer(cSVFormat15, extendedBufferedReader16); java.io.Reader reader18 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat15.parse(reader18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0511"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat49.isNullHandling(); java.io.Reader reader53 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser54 = cSVFormat49.parse(reader53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); }
public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); java.lang.String[] strArray19 = cSVFormat18.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); }
public void test0513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0513"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat51.withCommentStart(' '); boolean boolean57 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader58 = null; org.apache.commons.csv.Lexer lexer59 = new org.apache.commons.csv.Lexer(cSVFormat51, extendedBufferedReader58); java.io.Reader reader60 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = cSVFormat51.parse(reader60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); }
public void test0514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0514"); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.Quote quote11 = null; org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote11, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray29, true); java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray29, strMap34, "", (long) ' '); java.lang.String[] strArray38 = cSVRecord37.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) (-1)); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) '#', quote2, (java.lang.Character) 'a', (java.lang.Character) 'a', true, false, "[, hi!]", "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray38, false); java.io.Reader reader45 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = cSVFormat44.parse(reader45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(strArray38); }
public void test0515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0515"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuotePolicy(quote26); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0516"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); }
public void test0517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0517"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.Quote quote53 = null; java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat64 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote53, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray62, true); boolean boolean65 = cSVFormat64.getIgnoreSurroundingSpaces(); boolean boolean66 = cSVFormat64.isEscaping(); java.lang.String[] strArray67 = cSVFormat64.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat50.withHeader(strArray67); boolean boolean69 = cSVFormat68.isCommentingEnabled(); boolean boolean70 = cSVFormat68.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser71 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat68); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); }
public void test0518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0518"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0519"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0520"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test0521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0521"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); }
public void test0522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0522"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat19.withNullString("hi!"); boolean boolean54 = cSVFormat19.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); }
public void test0523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0523"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0524"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0525"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withNullString("hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0526"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isEscaping(); java.lang.String[] strArray18 = cSVFormat15.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('4'); java.lang.String[] strArray21 = cSVFormat20.getHeader(); boolean boolean22 = cSVFormat20.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote27 = null; org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withQuotePolicy(quote27); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test0527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0527"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withSkipHeaderRecord(false); boolean boolean24 = cSVFormat14.isQuoting(); org.apache.commons.csv.Quote quote25 = cSVFormat14.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withRecordSeparator(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNull(quote25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0528"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean24 = cSVFormat23.isNullHandling(); org.apache.commons.csv.Quote quote27 = null; java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote27, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray36, true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat40.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean49 = cSVFormat23.equals((java.lang.Object) cSVFormat44); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test0529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0529"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withSkipHeaderRecord(false); java.lang.String[] strArray24 = cSVFormat21.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); }
public void test0530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0530"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.lang.String str23 = cSVFormat22.toString(); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.Quote quote35 = null; java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat46 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote35, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray44, true); org.apache.commons.csv.CSVFormat cSVFormat48 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote26, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray44, true); java.util.Map<java.lang.String, java.lang.Integer> strMap49 = null; org.apache.commons.csv.CSVRecord cSVRecord52 = new org.apache.commons.csv.CSVRecord(strArray44, strMap49, "", (long) ' '); java.lang.String[] strArray53 = cSVRecord52.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap54 = null; org.apache.commons.csv.CSVRecord cSVRecord57 = new org.apache.commons.csv.CSVRecord(strArray53, strMap54, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat22.withHeader(strArray53); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str23, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0531"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString(""); boolean boolean21 = cSVFormat20.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test0532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0532"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat17.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean54 = cSVFormat17.isCommentingEnabled(); java.io.Reader reader55 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = cSVFormat17.parse(reader55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); }
public void test0533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0533"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); }
public void test0534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0534"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0535"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0536"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withCommentStart('a'); boolean boolean37 = cSVFormat36.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = null; org.apache.commons.csv.CSVRecord cSVRecord66 = new org.apache.commons.csv.CSVRecord(strArray58, strMap63, "", (long) ' '); java.lang.String[] strArray67 = cSVRecord66.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat36.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreSurroundingSpaces(true); java.lang.String str71 = cSVFormat70.toString(); java.lang.String str72 = cSVFormat70.getRecordSeparator(); boolean boolean73 = cSVFormat70.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote76 = null; java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote76, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray85, true); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); boolean boolean89 = cSVFormat87.isEscaping(); java.lang.String[] strArray90 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat18.withHeader(strArray90); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser93 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat92); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str71, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(cSVFormat92); }
public void test0537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0537"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withSkipHeaderRecord(false); boolean boolean24 = cSVFormat14.isQuoting(); org.apache.commons.csv.Quote quote25 = cSVFormat14.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withNullString(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNull(quote25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0538"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "", (long) 10); boolean boolean15 = cSVRecord13.isSet("hi!"); int int16 = cSVRecord13.size(); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord13.spliterator(); java.lang.String[] strArray18 = cSVRecord13.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) 'a', false, true, "", " ", strArray18, true); java.io.Reader reader21 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = cSVFormat20.parse(reader21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); }
public void test0539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0539"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray10 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null; org.apache.commons.csv.CSVRecord cSVRecord14 = new org.apache.commons.csv.CSVRecord(strArray10, strMap11, "", (long) 10); boolean boolean16 = cSVRecord14.isSet("hi!"); int int17 = cSVRecord14.size(); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord14.spliterator(); java.lang.String[] strArray19 = cSVRecord14.values(); org.apache.commons.csv.CSVFormat cSVFormat21 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) 'a', false, true, "", " ", strArray19, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); }
public void test0540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0540"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote23 = null; java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote23, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape('4'); boolean boolean41 = cSVFormat15.equals((java.lang.Object) cSVFormat38); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test0541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0541"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces(); boolean boolean34 = cSVFormat32.isEscaping(); java.lang.String[] strArray35 = cSVFormat32.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat14.withHeader(strArray35); org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat50 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote39, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray48, true); boolean boolean51 = cSVFormat50.getIgnoreSurroundingSpaces(); boolean boolean52 = cSVFormat50.isEscaping(); java.lang.String[] strArray53 = cSVFormat50.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat50.withDelimiter('4'); java.lang.String[] strArray56 = cSVFormat55.getHeader(); boolean boolean57 = cSVFormat55.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat55.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat55.withIgnoreSurroundingSpaces(false); boolean boolean62 = cSVFormat14.equals((java.lang.Object) cSVFormat61); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); }
public void test0542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0542"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean16 = cSVFormat13.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withEscape('#'); boolean boolean21 = cSVFormat13.isNullHandling(); java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "", (long) 10); boolean boolean27 = cSVRecord26.isConsistent(); java.util.Spliterator<java.lang.String> strSpliterator28 = cSVRecord26.spliterator(); java.lang.String str29 = cSVRecord26.toString(); boolean boolean31 = cSVRecord26.isMapped("hi!"); java.lang.String[] strArray32 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat13.withHeader(strArray32); char char34 = cSVFormat33.getDelimiter(); boolean boolean35 = cSVFormat33.getSkipHeaderRecord(); java.io.Reader reader36 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = cSVFormat33.parse(reader36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(strSpliterator28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + char34 + "' != '" + 'a' + "'", char34 == 'a'); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); }
public void test0543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0543"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test0544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0544"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withEscape((java.lang.Character) 'a'); java.io.Reader reader61 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser62 = cSVFormat60.parse(reader61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); }
public void test0545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0545"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean59 = cSVFormat51.getIgnoreSurroundingSpaces(); boolean boolean60 = cSVFormat51.getIgnoreEmptyLines(); java.io.Reader reader61 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser62 = cSVFormat51.parse(reader61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); }
public void test0546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0546"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); }
public void test0547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0547"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean60 = cSVFormat52.getIgnoreSurroundingSpaces(); boolean boolean61 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat52.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0548"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); java.lang.String str24 = cSVFormat21.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]" + "'", str24, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); }
public void test0549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0549"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isEscaping(); java.lang.String[] strArray16 = cSVFormat13.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withDelimiter('4'); java.lang.String[] strArray19 = cSVFormat18.getHeader(); boolean boolean20 = cSVFormat18.isNullHandling(); java.lang.String str21 = cSVFormat18.toString(); java.io.Reader reader22 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat18.parse(reader22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str21, "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0550"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null; org.apache.commons.csv.Lexer lexer19 = new org.apache.commons.csv.Lexer(cSVFormat15, extendedBufferedReader18); boolean boolean20 = cSVFormat15.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0551"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withSkipHeaderRecord(false); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat24.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0552"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean16 = cSVFormat13.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withEscape('4'); boolean boolean39 = cSVFormat13.equals((java.lang.Object) cSVFormat36); java.lang.String str40 = cSVFormat36.toString(); java.io.Reader reader41 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = cSVFormat36.parse(reader41); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str40, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); }
public void test0553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0553"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean22 = cSVFormat21.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0554"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator(""); boolean boolean21 = cSVFormat20.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0555"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isEscaping(); java.lang.String[] strArray18 = cSVFormat15.getHeader(); boolean boolean19 = cSVFormat15.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test0556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0556"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); }
public void test0557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0557"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); boolean boolean56 = cSVFormat53.getIgnoreEmptyLines(); java.lang.Object obj57 = null; boolean boolean58 = cSVFormat53.equals(obj57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withEscape((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); }
public void test0558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0558"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); boolean boolean70 = cSVFormat69.getIgnoreSurroundingSpaces(); boolean boolean71 = cSVFormat69.isEscaping(); java.lang.String[] strArray72 = cSVFormat69.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat52.withHeader(strArray72); org.apache.commons.csv.Quote quote74 = cSVFormat73.getQuotePolicy(); org.apache.commons.csv.Quote quote75 = cSVFormat73.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat73); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNull(quote74); org.junit.Assert.assertNull(quote75); }
public void test0559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0559"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null; org.apache.commons.csv.Lexer lexer17 = new org.apache.commons.csv.Lexer(cSVFormat13, extendedBufferedReader16); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withIgnoreSurroundingSpaces(true); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat13.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0560"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.Quote quote13 = null; org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote13, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat37 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) ' ', quote4, (java.lang.Character) 'a', (java.lang.Character) 'a', false, true, "hi!", "", strArray31, false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat39); }
public void test0561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0561"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withCommentStart('a'); boolean boolean37 = cSVFormat36.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = null; org.apache.commons.csv.CSVRecord cSVRecord66 = new org.apache.commons.csv.CSVRecord(strArray58, strMap63, "", (long) ' '); java.lang.String[] strArray67 = cSVRecord66.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat36.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreSurroundingSpaces(true); java.lang.String str71 = cSVFormat70.toString(); java.lang.String str72 = cSVFormat70.getRecordSeparator(); boolean boolean73 = cSVFormat70.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote76 = null; java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote76, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray85, true); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); boolean boolean89 = cSVFormat87.isEscaping(); java.lang.String[] strArray90 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat18.withHeader(strArray90); boolean boolean93 = cSVFormat92.getIgnoreSurroundingSpaces(); boolean boolean94 = cSVFormat92.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat96 = cSVFormat92.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser97 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat92); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str71, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(cSVFormat92); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); org.junit.Assert.assertNotNull(cSVFormat96); }
public void test0562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0562"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withEscape('#'); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withQuotePolicy(quote22); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]", cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0563"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); java.lang.String str22 = cSVFormat19.toString(); java.lang.String[] strArray23 = cSVFormat19.getHeader(); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat19.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]" + "'", str22, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray23); }
public void test0564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0564"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.Quote quote20 = cSVFormat19.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNull(quote20); }
public void test0565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0565"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat51.withCommentStart(' '); java.lang.String str57 = cSVFormat56.toString(); java.io.Reader reader58 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = cSVFormat56.parse(reader58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str57, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0566"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#'); java.lang.String[] strArray23 = cSVFormat22.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); }
public void test0567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0567"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean17 = cSVFormat15.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withEscape('#'); java.io.Reader reader32 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = cSVFormat31.parse(reader32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test0568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0568"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0569"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); java.lang.String str52 = cSVFormat17.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat17.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withCommentStart('#'); java.io.Reader reader57 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = cSVFormat54.parse(reader57); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, ""); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0570"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.Quote quote51 = cSVFormat50.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat50); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNull(quote51); }
public void test0571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0571"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote12, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat36 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) 'a', false, true, "hi!", "", strArray30, false); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start and the escape character cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test0572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0572"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withEscape('4'); boolean boolean21 = cSVFormat18.getSkipHeaderRecord(); boolean boolean22 = cSVFormat18.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test0573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0573"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test0574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0574"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean16 = cSVFormat13.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withEscape('#'); java.lang.String str21 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat13.withRecordSeparator(' '); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat13.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0575"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); boolean boolean20 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withSkipHeaderRecord(false); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader23); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0576"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean17 = cSVFormat15.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withCommentStart((java.lang.Character) ' '); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat19.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0577"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); java.io.Reader reader16 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = cSVFormat13.parse(reader16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0578"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); java.lang.String[] strArray22 = cSVFormat21.getHeader(); boolean boolean23 = cSVFormat21.isQuoting(); java.lang.String str24 = cSVFormat21.getRecordSeparator(); java.lang.String str25 = cSVFormat21.getRecordSeparator(); java.io.Reader reader26 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = cSVFormat21.parse(reader26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!"); }
public void test0579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0579"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces(); boolean boolean35 = cSVFormat33.isEscaping(); java.lang.String[] strArray36 = cSVFormat33.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat15.withHeader(strArray36); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat37.withHeader(strArray58); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat63); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0580"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); boolean boolean17 = cSVFormat13.getSkipHeaderRecord(); java.lang.String str18 = cSVFormat13.getRecordSeparator(); boolean boolean19 = cSVFormat13.isNullHandling(); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat13.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test0581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0581"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat16.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0582"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); char char19 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0583"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); boolean boolean20 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0584"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean16 = cSVFormat13.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withSkipHeaderRecord(false); java.io.Reader reader23 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = cSVFormat20.parse(reader23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0585"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); boolean boolean60 = cSVFormat59.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote63 = null; org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat59.withQuotePolicy(quote63); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); }
public void test0586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0586"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); boolean boolean22 = cSVFormat21.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test0587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0587"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat18, ""); boolean boolean21 = cSVFormat18.getIgnoreSurroundingSpaces(); boolean boolean22 = cSVFormat18.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0588"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withEscape((java.lang.Character) 'a'); boolean boolean62 = cSVFormat59.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat59.withCommentStart(' '); boolean boolean65 = cSVFormat64.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser66 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); }
public void test0589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0589"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); java.lang.String str20 = cSVFormat14.getNullString(); org.apache.commons.csv.Quote quote23 = null; java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote23, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withEscape((java.lang.Character) '#'); java.lang.String[] strArray43 = cSVFormat42.getHeader(); boolean boolean44 = cSVFormat42.isQuoting(); java.lang.String str45 = cSVFormat42.getRecordSeparator(); java.lang.String str46 = cSVFormat42.getRecordSeparator(); boolean boolean47 = cSVFormat14.equals((java.lang.Object) str46); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test0590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0590"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) 'a'); java.lang.String str23 = cSVFormat22.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]", cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test0591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0591"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) 'a'); java.lang.String str23 = cSVFormat22.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test0592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0592"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat17.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); char char54 = cSVFormat53.getDelimiter(); java.io.Reader reader55 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = cSVFormat53.parse(reader55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + char54 + "' != '" + 'a' + "'", char54 == 'a'); }
public void test0593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0593"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat17.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean54 = cSVFormat17.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat17.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat17.withEscape('#'); java.io.Reader reader59 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = cSVFormat58.parse(reader59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0594"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuotePolicy(quote26); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0595"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0596"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); boolean boolean32 = cSVFormat31.getIgnoreSurroundingSpaces(); boolean boolean33 = cSVFormat31.isEscaping(); java.lang.String[] strArray34 = cSVFormat31.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat13.withHeader(strArray34); org.apache.commons.csv.Quote quote38 = null; org.apache.commons.csv.Quote quote47 = null; java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat58 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote47, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray56, true); org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote38, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray56, true); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat35.withHeader(strArray56); org.apache.commons.csv.Quote quote62 = cSVFormat35.getQuotePolicy(); java.io.Reader reader63 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = cSVFormat35.parse(reader63); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNull(quote62); }
public void test0597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0597"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat14.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withRecordSeparator(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0598"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withQuoteChar(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0599"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withEscape((java.lang.Character) 'a'); boolean boolean61 = cSVFormat60.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withRecordSeparator("[, hi!]"); java.io.Reader reader64 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = cSVFormat60.parse(reader64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0600"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.Quote quote50 = cSVFormat49.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat49.withRecordSeparator('a'); java.io.Reader reader55 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = cSVFormat54.parse(reader55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNull(quote50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0601"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]", cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0602"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat14.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withEscape(' '); char char23 = cSVFormat22.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'a' + "'", char23 == 'a'); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0603"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); }
public void test0604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0604"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); java.lang.String str24 = cSVFormat21.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str24, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); }
public void test0605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0605"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); boolean boolean52 = cSVFormat17.isEscaping(); java.lang.String[] strArray53 = cSVFormat17.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat17.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat17.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); boolean boolean58 = cSVFormat57.getIgnoreSurroundingSpaces(); java.io.Reader reader59 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = cSVFormat57.parse(reader59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); }
public void test0606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0606"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); boolean boolean60 = cSVFormat59.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); }
public void test0607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0607"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); java.lang.String[] strArray17 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "", (long) 10); boolean boolean22 = cSVRecord21.isConsistent(); java.lang.String[] strArray23 = cSVRecord21.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", (long) (short) -1); java.lang.String[] strArray28 = cSVRecord27.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat16.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test0608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0608"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.Quote quote13 = null; java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat24 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote13, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray22, true); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat24.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); boolean boolean43 = cSVFormat42.getIgnoreSurroundingSpaces(); boolean boolean44 = cSVFormat42.isEscaping(); java.lang.String[] strArray45 = cSVFormat42.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat24.withHeader(strArray45); org.apache.commons.csv.Quote quote49 = null; org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote49, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray67, true); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat46.withHeader(strArray67); java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray67, strMap73, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", (long) 10); org.apache.commons.csv.CSVFormat cSVFormat78 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote4, (java.lang.Character) ' ', (java.lang.Character) ' ', false, false, "hi!", "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]", strArray67, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat78); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat72); }
public void test0609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0609"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0610"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); }
public void test0611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0611"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.Quote quote58 = null; org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withQuotePolicy(quote58); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat57); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0612"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0613"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator(' '); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat17, ""); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat17.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); }
public void test0614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0614"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean17 = cSVFormat15.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withSkipHeaderRecord(false); java.lang.String str24 = cSVFormat23.getRecordSeparator(); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat23.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); }
public void test0615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0615"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); boolean boolean56 = cSVFormat53.getIgnoreEmptyLines(); java.lang.Object obj57 = null; boolean boolean58 = cSVFormat53.equals(obj57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withEscape((java.lang.Character) '#'); boolean boolean61 = cSVFormat60.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0616"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Quote quote56 = null; java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat67 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote56, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray65, true); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat67.withEscape('#'); boolean boolean70 = cSVFormat51.equals((java.lang.Object) cSVFormat69); java.lang.String[] strArray71 = cSVFormat69.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat69.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat69.withQuoteChar('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat75); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVFormat75); }
public void test0617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0617"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat15.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0618"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0619"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0620"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withRecordSeparator(""); boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean23 = cSVFormat19.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test0621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0621"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean31 = cSVFormat27.equals((java.lang.Object) "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test0622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0622"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withEscape('#'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat14, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0623"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat14.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withRecordSeparator(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0624"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0625"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuoteChar((java.lang.Character) ' '); java.io.Reader reader19 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = cSVFormat18.parse(reader19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0626"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuotePolicy(quote26); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0627"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withDelimiter('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0628"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote23 = null; java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote23, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape('4'); boolean boolean41 = cSVFormat15.equals((java.lang.Object) cSVFormat38); java.lang.String str42 = cSVFormat38.toString(); boolean boolean43 = cSVFormat38.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withEscape('a'); org.apache.commons.csv.Quote quote46 = null; org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withQuotePolicy(quote46); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str42, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test0629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0629"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreEmptyLines(false); boolean boolean34 = cSVFormat31.isEscaping(); boolean boolean35 = cSVFormat17.equals((java.lang.Object) cSVFormat31); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat17.withIgnoreEmptyLines(true); boolean boolean38 = cSVFormat17.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat17.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat17.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat42); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); }
public void test0630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0630"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withCommentStart('a'); boolean boolean37 = cSVFormat36.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = null; org.apache.commons.csv.CSVRecord cSVRecord66 = new org.apache.commons.csv.CSVRecord(strArray58, strMap63, "", (long) ' '); java.lang.String[] strArray67 = cSVRecord66.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat36.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreSurroundingSpaces(true); java.lang.String str71 = cSVFormat70.toString(); java.lang.String str72 = cSVFormat70.getRecordSeparator(); boolean boolean73 = cSVFormat70.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote76 = null; java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote76, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray85, true); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); boolean boolean89 = cSVFormat87.isEscaping(); java.lang.String[] strArray90 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat18.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat94 = cSVFormat92.withNullString("[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser95 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat94); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str71, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(cSVFormat92); org.junit.Assert.assertNotNull(cSVFormat94); }
public void test0631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0631"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuoteChar((java.lang.Character) ' '); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyLines(false); char char36 = cSVFormat33.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat33.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat33.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart((java.lang.Character) '4'); boolean boolean43 = cSVFormat16.equals((java.lang.Object) cSVFormat40); java.io.Reader reader44 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = cSVFormat40.parse(reader44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + char36 + "' != '" + 'a' + "'", char36 == 'a'); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test0632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0632"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0633"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withIgnoreEmptyLines(true); char char20 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat15.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + char20 + "' != '" + 'a' + "'", char20 == 'a'); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0634"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); boolean boolean17 = cSVFormat13.getSkipHeaderRecord(); java.lang.String str18 = cSVFormat13.toString(); java.lang.String str19 = cSVFormat13.toString(); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat13.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str18, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str19, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0635"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withNullString("hi!"); boolean boolean22 = cSVFormat15.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat15, extendedBufferedReader23); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat15.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test0636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0636"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withCommentStart('a'); boolean boolean22 = cSVFormat17.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withEscape((java.lang.Character) ' '); char char25 = cSVFormat17.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + char25 + "' != '" + 'a' + "'", char25 == 'a'); }
public void test0637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0637"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); java.lang.String[] strArray54 = cSVFormat18.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat18.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0638"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0639"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); java.lang.String[] strArray54 = cSVFormat18.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat18.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat18.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); boolean boolean59 = cSVFormat58.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test0640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0640"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.Quote quote52 = null; java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat63 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote52, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray61, true); boolean boolean64 = cSVFormat63.getIgnoreSurroundingSpaces(); boolean boolean65 = cSVFormat63.isEscaping(); java.lang.String[] strArray66 = cSVFormat63.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat49.withHeader(strArray66); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat67.withRecordSeparator('4'); java.io.Reader reader70 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser71 = cSVFormat67.parse(reader70); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat69); }
public void test0641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0641"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray11 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) ' ', (java.lang.Character) 'a', true, true, "[, hi!]", "Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray11, false); org.apache.commons.csv.Quote quote16 = null; java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote16, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray25, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withCommentStart('a'); boolean boolean32 = cSVFormat31.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote35 = null; org.apache.commons.csv.Quote quote44 = null; java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat55 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote44, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray53, true); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote35, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray53, true); java.util.Map<java.lang.String, java.lang.Integer> strMap58 = null; org.apache.commons.csv.CSVRecord cSVRecord61 = new org.apache.commons.csv.CSVRecord(strArray53, strMap58, "", (long) ' '); java.lang.String[] strArray62 = cSVRecord61.values(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat31.withHeader(strArray62); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat31.withNullString("hi!"); boolean boolean66 = cSVFormat13.equals((java.lang.Object) "hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test0642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0642"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0643"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); boolean boolean19 = cSVFormat16.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withQuoteChar(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=< > SkipHeaderRecord:true Header:[, hi!]", cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0644"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreEmptyLines(false); boolean boolean34 = cSVFormat31.isEscaping(); boolean boolean35 = cSVFormat17.equals((java.lang.Object) cSVFormat31); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat17.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withCommentStart((java.lang.Character) 'a'); boolean boolean40 = cSVFormat39.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); }
public void test0645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0645"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withDelimiter('#'); boolean boolean22 = cSVFormat18.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test0646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0646"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withCommentStart('a'); boolean boolean37 = cSVFormat36.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = null; org.apache.commons.csv.CSVRecord cSVRecord66 = new org.apache.commons.csv.CSVRecord(strArray58, strMap63, "", (long) ' '); java.lang.String[] strArray67 = cSVRecord66.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat36.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreSurroundingSpaces(true); java.lang.String str71 = cSVFormat70.toString(); java.lang.String str72 = cSVFormat70.getRecordSeparator(); boolean boolean73 = cSVFormat70.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote76 = null; java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote76, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray85, true); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); boolean boolean89 = cSVFormat87.isEscaping(); java.lang.String[] strArray90 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat93 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote12, (java.lang.Character) ' ', (java.lang.Character) 'a', false, true, "hi!", "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray90, true); org.apache.commons.csv.CSVFormat cSVFormat95 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) 'a', true, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "", strArray90, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser96 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat95); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str71, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(cSVFormat91); }
public void test0647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0647"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); java.lang.String str22 = cSVFormat19.toString(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str22, "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0648"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); }
public void test0649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0649"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape('4'); boolean boolean22 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withSkipHeaderRecord(false); org.apache.commons.csv.Quote quote27 = null; java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote27, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray36, true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart('a'); boolean boolean43 = cSVFormat42.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withNullString(""); java.lang.String str48 = cSVFormat45.toString(); boolean boolean49 = cSVFormat24.equals((java.lang.Object) str48); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]" + "'", str48, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test0650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0650"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start and the escape character cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0651"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withNullString("hi!"); boolean boolean23 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0652"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test0653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0653"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote12, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray30, true); java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray30, strMap35, "", (long) ' '); org.apache.commons.csv.CSVFormat cSVFormat40 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) '#', true, true, "", "", strArray30, false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withDelimiter('#'); boolean boolean43 = cSVFormat42.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat42); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test0654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0654"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('a'); java.lang.String[] strArray21 = cSVFormat20.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withQuoteChar((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0655"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); boolean boolean52 = cSVFormat17.isEscaping(); java.lang.String[] strArray53 = cSVFormat17.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat17.withDelimiter('#'); java.io.Reader reader56 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = cSVFormat17.parse(reader56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(cSVFormat55); }
public void test0656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0656"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withSkipHeaderRecord(true); java.lang.String str62 = cSVFormat61.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str62, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0657"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape('4'); boolean boolean40 = cSVFormat14.equals((java.lang.Object) cSVFormat37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat14.withEscape((java.lang.Character) ' '); org.apache.commons.csv.Quote quote43 = null; org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withQuotePolicy(quote43); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat46); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); }
public void test0658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0658"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); boolean boolean24 = cSVFormat23.isCommentingEnabled(); boolean boolean25 = cSVFormat23.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat23.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0659"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withDelimiter('#'); java.lang.String[] strArray23 = cSVFormat19.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); }
public void test0660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0660"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withRecordSeparator('a'); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat19.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0661"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart('a'); boolean boolean23 = cSVFormat20.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test0662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0662"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat52.withCommentStart((java.lang.Character) 'a'); boolean boolean62 = cSVFormat52.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote63 = null; org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat52.withQuotePolicy(quote63); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(cSVFormat64); }
public void test0663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0663"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote62 = null; java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat73 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote62, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray71, true); boolean boolean74 = cSVFormat73.getIgnoreSurroundingSpaces(); boolean boolean75 = cSVFormat73.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat73.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat77.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean80 = cSVFormat59.equals((java.lang.Object) cSVFormat79); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser81 = org.apache.commons.csv.CSVParser.parse("", cSVFormat79); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start and the escape character cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); }
public void test0664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0664"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.Quote quote54 = null; java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat65 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote54, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray63, true); boolean boolean66 = cSVFormat65.getIgnoreSurroundingSpaces(); boolean boolean67 = cSVFormat65.isEscaping(); java.lang.String[] strArray68 = cSVFormat65.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat51.withHeader(strArray68); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat69.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser74 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat73); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVFormat73); }
public void test0665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0665"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withEscape((java.lang.Character) '#'); boolean boolean25 = cSVFormat24.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); }
public void test0666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0666"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null; org.apache.commons.csv.Lexer lexer17 = new org.apache.commons.csv.Lexer(cSVFormat13, extendedBufferedReader16); boolean boolean18 = cSVFormat13.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withQuoteChar((java.lang.Character) 'a'); java.lang.String str21 = cSVFormat20.getNullString(); boolean boolean22 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withCommentStart('4'); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat24.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0667"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withSkipHeaderRecord(false); java.io.Reader reader57 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = cSVFormat54.parse(reader57); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0668"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withCommentStart('a'); org.apache.commons.csv.Quote quote25 = null; java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat36 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote25, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray34, true); boolean boolean37 = cSVFormat36.getIgnoreSurroundingSpaces(); boolean boolean38 = cSVFormat36.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader39 = null; org.apache.commons.csv.Lexer lexer40 = new org.apache.commons.csv.Lexer(cSVFormat36, extendedBufferedReader39); boolean boolean42 = lexer40.isEndOfFile((int) '#'); boolean boolean44 = lexer40.isCommentStart((int) (short) 1); boolean boolean46 = lexer40.isEndOfFile((int) (byte) -1); boolean boolean48 = lexer40.isQuoteChar((int) (short) 100); boolean boolean50 = lexer40.isEndOfFile((int) ' '); boolean boolean51 = cSVFormat22.equals((java.lang.Object) lexer40); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); }
public void test0669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0669"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape('#'); java.lang.String str60 = cSVFormat59.toString(); char char61 = cSVFormat59.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat59.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat63); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]" + "'", str60, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertTrue("'" + char61 + "' != '" + 'a' + "'", char61 == 'a'); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0670"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); }
public void test0671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0671"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces(); boolean boolean34 = cSVFormat32.isEscaping(); java.lang.String[] strArray35 = cSVFormat32.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat14.withHeader(strArray35); org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat50 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote39, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray48, true); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat52.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withEscape((java.lang.Character) '#'); java.lang.String[] strArray59 = cSVFormat58.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat14.withHeader(strArray59); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); }
public void test0672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0672"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); boolean boolean24 = cSVFormat23.isNullHandling(); org.apache.commons.csv.Quote quote27 = null; java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote27, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray36, true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart('a'); boolean boolean43 = cSVFormat42.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote46 = null; org.apache.commons.csv.Quote quote55 = null; java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat66 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote55, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray64, true); org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote46, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray64, true); java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray64, strMap69, "", (long) ' '); java.lang.String[] strArray73 = cSVRecord72.values(); org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat42.withHeader(strArray73); org.apache.commons.csv.Quote quote77 = null; java.lang.String[] strArray86 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat88 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote77, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray86, true); boolean boolean89 = cSVFormat88.getIgnoreSurroundingSpaces(); boolean boolean90 = cSVFormat88.isEscaping(); java.lang.String[] strArray91 = cSVFormat88.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat74.withHeader(strArray91); org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat23.withHeader(strArray91); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser94 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertNotNull(cSVFormat74); org.junit.Assert.assertNotNull(strArray86); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true); org.junit.Assert.assertNotNull(strArray91); org.junit.Assert.assertNotNull(cSVFormat92); org.junit.Assert.assertNotNull(cSVFormat93); }
public void test0673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0673"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0674"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator(' '); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withCommentStart('a'); boolean boolean36 = cSVFormat35.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote39 = null; org.apache.commons.csv.Quote quote48 = null; java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote48, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray57, true); org.apache.commons.csv.CSVFormat cSVFormat61 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote39, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray57, true); java.util.Map<java.lang.String, java.lang.Integer> strMap62 = null; org.apache.commons.csv.CSVRecord cSVRecord65 = new org.apache.commons.csv.CSVRecord(strArray57, strMap62, "", (long) ' '); java.lang.String[] strArray66 = cSVRecord65.values(); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat35.withHeader(strArray66); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat67.withIgnoreSurroundingSpaces(true); java.lang.String str70 = cSVFormat69.toString(); java.lang.String str71 = cSVFormat69.getRecordSeparator(); boolean boolean72 = cSVFormat69.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote75 = null; java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat86 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote75, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray84, true); boolean boolean87 = cSVFormat86.getIgnoreSurroundingSpaces(); boolean boolean88 = cSVFormat86.isEscaping(); java.lang.String[] strArray89 = cSVFormat86.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat69.withHeader(strArray89); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat17.withHeader(strArray89); org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat17.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat95 = cSVFormat93.withIgnoreEmptyLines(false); java.io.Reader reader96 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser97 = cSVFormat95.parse(reader96); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str70, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!"); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertNotNull(strArray84); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(cSVFormat90); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(cSVFormat93); org.junit.Assert.assertNotNull(cSVFormat95); }
public void test0675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0675"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator('#'); java.io.Reader reader22 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat21.parse(reader22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0676"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat16.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withQuoteChar((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test0677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0677"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); boolean boolean24 = cSVFormat23.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test0678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0678"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withNullString(""); java.lang.String str22 = cSVFormat19.toString(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withEscape((java.lang.Character) 'a'); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat24.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str22, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0679"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); boolean boolean56 = cSVFormat53.getIgnoreEmptyLines(); java.lang.Object obj57 = null; boolean boolean58 = cSVFormat53.equals(obj57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat66); }
public void test0680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0680"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote62 = null; java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat73 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote62, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray71, true); boolean boolean74 = cSVFormat73.getIgnoreSurroundingSpaces(); boolean boolean75 = cSVFormat73.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat73.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat77.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean80 = cSVFormat59.equals((java.lang.Object) cSVFormat79); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser81 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat79); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start and the escape character cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); }
public void test0681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0681"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); boolean boolean22 = cSVFormat21.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test0682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0682"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str19 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.Quote quote20 = cSVFormat14.getQuotePolicy(); boolean boolean21 = cSVFormat14.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.lang.String str24 = cSVFormat23.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNull(quote20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str24, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0683"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); boolean boolean16 = cSVFormat13.isEscaping(); org.apache.commons.csv.Quote quote17 = null; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withQuotePolicy(quote17); java.io.Reader reader19 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = cSVFormat13.parse(reader19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0684"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.Quote quote13 = null; org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote13, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray31, true); java.util.Map<java.lang.String, java.lang.Integer> strMap36 = null; org.apache.commons.csv.CSVRecord cSVRecord39 = new org.apache.commons.csv.CSVRecord(strArray31, strMap36, "", (long) ' '); java.lang.String[] strArray40 = cSVRecord39.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat46 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '4', quote4, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "[, hi!]", "", strArray40, false); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withQuoteChar((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat48); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test0685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0685"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0686"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0687"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withCommentStart('a'); boolean boolean37 = cSVFormat36.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = null; org.apache.commons.csv.CSVRecord cSVRecord66 = new org.apache.commons.csv.CSVRecord(strArray58, strMap63, "", (long) ' '); java.lang.String[] strArray67 = cSVRecord66.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat36.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreSurroundingSpaces(true); java.lang.String str71 = cSVFormat70.toString(); java.lang.String str72 = cSVFormat70.getRecordSeparator(); boolean boolean73 = cSVFormat70.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote76 = null; java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote76, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray85, true); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); boolean boolean89 = cSVFormat87.isEscaping(); java.lang.String[] strArray90 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat18.withHeader(strArray90); boolean boolean93 = cSVFormat92.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat95 = cSVFormat92.withEscape((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser96 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat92); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str71, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(cSVFormat92); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertNotNull(cSVFormat95); }
public void test0688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0688"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); java.lang.String[] strArray54 = cSVFormat18.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat18.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0689"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote12, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat36 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) 'a', false, true, "hi!", "", strArray30, false); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test0690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0690"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean16 = cSVFormat13.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withEscape('#'); java.lang.String str21 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat13.withIgnoreEmptyLines(false); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat23.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!"); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0691"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); boolean boolean18 = cSVFormat15.isEscaping(); org.apache.commons.csv.Quote quote19 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withQuotePolicy(quote19); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0692"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0693"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withEscape('4'); boolean boolean19 = cSVFormat18.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withCommentStart(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0694"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote3, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray21, true); boolean boolean26 = cSVFormat25.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); }
public void test0695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0695"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape('#'); boolean boolean60 = cSVFormat59.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(cSVFormat62); }
public void test0696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0696"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0697"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); boolean boolean52 = cSVFormat17.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat17.withEscape((java.lang.Character) ' '); org.apache.commons.csv.Quote quote55 = null; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat17.withQuotePolicy(quote55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat17.withEscape('4'); java.io.Reader reader59 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = cSVFormat17.parse(reader59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0698"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.Quote quote53 = null; java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat64 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote53, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray62, true); boolean boolean65 = cSVFormat64.getIgnoreSurroundingSpaces(); boolean boolean66 = cSVFormat64.isEscaping(); java.lang.String[] strArray67 = cSVFormat64.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat50.withHeader(strArray67); boolean boolean69 = cSVFormat68.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withDelimiter('a'); java.lang.String str72 = cSVFormat71.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser73 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat71); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); }
public void test0699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0699"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote19 = null; java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat30 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote19, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray28, true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withIgnoreEmptyLines(false); boolean boolean33 = cSVFormat30.isEscaping(); boolean boolean34 = cSVFormat16.equals((java.lang.Object) cSVFormat30); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat16.withIgnoreEmptyLines(true); java.io.Reader reader37 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = cSVFormat36.parse(reader37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(cSVFormat36); }
public void test0700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0700"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "", (long) 10); boolean boolean14 = cSVRecord13.isConsistent(); java.lang.String[] strArray15 = cSVRecord13.values(); org.apache.commons.csv.CSVFormat cSVFormat17 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) 'a', quote2, (java.lang.Character) 'a', (java.lang.Character) ' ', false, true, " ", "", strArray15, false); boolean boolean18 = cSVFormat17.getSkipHeaderRecord(); java.io.Reader reader19 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = cSVFormat17.parse(reader19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0701"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withDelimiter('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0702"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreEmptyLines(false); boolean boolean34 = cSVFormat31.isEscaping(); boolean boolean35 = cSVFormat17.equals((java.lang.Object) cSVFormat31); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat17.withQuoteChar('4'); java.lang.String[] strArray38 = null; org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withHeader(strArray38); org.apache.commons.csv.Quote quote40 = cSVFormat39.getQuotePolicy(); boolean boolean41 = cSVFormat39.isCommentingEnabled(); boolean boolean42 = cSVFormat39.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNull(quote40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); }
public void test0703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0703"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withDelimiter('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test0704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0704"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat57); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0705"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); boolean boolean54 = cSVFormat53.isCommentingEnabled(); org.apache.commons.csv.Quote quote55 = null; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuotePolicy(quote55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat53.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); }
public void test0706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0706"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat19.withNullString("hi!"); boolean boolean54 = cSVFormat19.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat19.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0707"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces(); boolean boolean35 = cSVFormat33.isEscaping(); java.lang.String[] strArray36 = cSVFormat33.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat15.withHeader(strArray36); org.apache.commons.csv.Quote quote40 = null; java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat51 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote40, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray49, true); boolean boolean52 = cSVFormat51.getIgnoreSurroundingSpaces(); boolean boolean53 = cSVFormat51.isEscaping(); java.lang.String[] strArray54 = cSVFormat51.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat51.withDelimiter('4'); java.lang.String[] strArray57 = cSVFormat56.getHeader(); boolean boolean58 = cSVFormat56.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat56.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat56.withIgnoreSurroundingSpaces(false); boolean boolean63 = cSVFormat15.equals((java.lang.Object) cSVFormat62); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat62.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser66 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVFormat65); }
public void test0708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0708"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat50 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote39, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray48, true); boolean boolean51 = cSVFormat50.getIgnoreSurroundingSpaces(); boolean boolean52 = cSVFormat50.isEscaping(); java.lang.String[] strArray53 = cSVFormat50.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat32.withHeader(strArray53); org.apache.commons.csv.Quote quote57 = null; java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote57, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray66, true); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat70.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat70.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat74.withEscape((java.lang.Character) '#'); java.lang.String[] strArray77 = cSVFormat76.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat32.withHeader(strArray77); org.apache.commons.csv.CSVFormat cSVFormat80 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote12, (java.lang.Character) 'a', (java.lang.Character) 'a', true, true, "hi!", "", strArray77, true); org.apache.commons.csv.CSVFormat cSVFormat82 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, true, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray77, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser83 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat82); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertNotNull(cSVFormat72); org.junit.Assert.assertNotNull(cSVFormat74); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertNotNull(cSVFormat78); }
public void test0709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0709"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withCommentStart('a'); boolean boolean37 = cSVFormat36.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.Quote quote49 = null; java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote49, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray58, true); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote40, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray58, true); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = null; org.apache.commons.csv.CSVRecord cSVRecord66 = new org.apache.commons.csv.CSVRecord(strArray58, strMap63, "", (long) ' '); java.lang.String[] strArray67 = cSVRecord66.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat36.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreSurroundingSpaces(true); java.lang.String str71 = cSVFormat70.toString(); java.lang.String str72 = cSVFormat70.getRecordSeparator(); boolean boolean73 = cSVFormat70.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote76 = null; java.lang.String[] strArray85 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote76, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray85, true); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); boolean boolean89 = cSVFormat87.isEscaping(); java.lang.String[] strArray90 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat18.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat94 = cSVFormat92.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat96 = cSVFormat92.withEscape((java.lang.Character) ' '); boolean boolean97 = cSVFormat92.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser98 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat92); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str71, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(cSVFormat92); org.junit.Assert.assertNotNull(cSVFormat94); org.junit.Assert.assertNotNull(cSVFormat96); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true); }
public void test0710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0710"); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.Quote quote11 = null; java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat22 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote11, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray20, true); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat24.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withEscape((java.lang.Character) '#'); java.lang.String[] strArray31 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) ' ', quote2, (java.lang.Character) '#', (java.lang.Character) ' ', true, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "[, hi!]", strArray31, true); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = null; org.apache.commons.csv.Lexer lexer35 = new org.apache.commons.csv.Lexer(cSVFormat33, extendedBufferedReader34); java.io.Reader reader36 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = cSVFormat33.parse(reader36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray31); }
public void test0711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0711"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withEscape((java.lang.Character) '#'); java.lang.String[] strArray32 = cSVFormat31.getHeader(); java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", 0L); org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) ' ', quote3, (java.lang.Character) '4', (java.lang.Character) 'a', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", strArray32, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray32); }
public void test0712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0712"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withRecordSeparator('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0713"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withEscape('#'); java.lang.String str22 = cSVFormat21.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); }
public void test0714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0714"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0715"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean23 = cSVFormat22.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat22.withQuoteChar(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0716"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat60.withCommentStart((java.lang.Character) 'a'); java.lang.String[] strArray65 = cSVFormat60.getHeader(); java.io.Reader reader66 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = cSVFormat60.parse(reader66); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(strArray65); }
public void test0717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0717"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0718"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withQuoteChar('a'); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat15.withQuotePolicy(quote22); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0719"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat57.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat57.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat63); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0720"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0721"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat51.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withIgnoreEmptyLines(true); java.io.Reader reader59 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = cSVFormat51.parse(reader59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0722"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withIgnoreSurroundingSpaces(false); java.lang.String str26 = cSVFormat14.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!"); }
public void test0723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0723"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape('4'); boolean boolean40 = cSVFormat14.equals((java.lang.Object) cSVFormat37); java.lang.String str41 = cSVFormat37.toString(); java.lang.String[] strArray42 = cSVFormat37.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str41, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray42); }
public void test0724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0724"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str19 = cSVFormat14.getRecordSeparator(); java.lang.String str20 = cSVFormat14.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); }
public void test0725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0725"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray10 = null; org.apache.commons.csv.CSVFormat cSVFormat12 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '4', quote3, (java.lang.Character) 'a', (java.lang.Character) '#', true, false, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray10, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0726"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.Quote quote58 = null; org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withQuotePolicy(quote58); cSVFormat59.validate(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat62); }
public void test0727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0727"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0728"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat18.withEscape((java.lang.Character) ' '); org.apache.commons.csv.Quote quote56 = null; org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withQuotePolicy(quote56); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat57); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); }
public void test0729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0729"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withEscape('#'); java.lang.String str23 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat15.withRecordSeparator(' '); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat15.withQuoteChar('a'); org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withCommentStart('a'); boolean boolean46 = cSVFormat45.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote49 = null; org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote49, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray67, true); java.util.Map<java.lang.String, java.lang.Integer> strMap72 = null; org.apache.commons.csv.CSVRecord cSVRecord75 = new org.apache.commons.csv.CSVRecord(strArray67, strMap72, "", (long) ' '); java.lang.String[] strArray76 = cSVRecord75.values(); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat45.withHeader(strArray76); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat77.withIgnoreSurroundingSpaces(true); java.lang.String str80 = cSVFormat79.toString(); java.lang.String str81 = cSVFormat79.getRecordSeparator(); boolean boolean82 = cSVFormat79.getIgnoreEmptyLines(); java.lang.Object obj83 = null; boolean boolean84 = cSVFormat79.equals(obj83); org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat79.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat88 = cSVFormat86.withEscape((java.lang.Character) 'a'); boolean boolean89 = cSVFormat88.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat88.withRecordSeparator("[, hi!]"); java.lang.String[] strArray92 = cSVFormat88.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat15.withHeader(strArray92); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser94 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!"); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str80, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!"); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(cSVFormat86); org.junit.Assert.assertNotNull(cSVFormat88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertNotNull(strArray92); org.junit.Assert.assertNotNull(cSVFormat93); }
public void test0730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0730"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withEscape((java.lang.Character) 'a'); boolean boolean61 = cSVFormat60.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withRecordSeparator("[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withDelimiter('#'); java.io.Reader reader66 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = cSVFormat65.parse(reader66); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); }
public void test0731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0731"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuoteChar((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0732"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean17 = cSVFormat15.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withCommentStart((java.lang.Character) 'a'); java.lang.String[] strArray22 = cSVFormat21.getHeader(); boolean boolean23 = cSVFormat21.isCommentingEnabled(); org.apache.commons.csv.Quote quote24 = null; org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withQuotePolicy(quote24); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuoteChar('a'); java.io.Reader reader28 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = cSVFormat27.parse(reader28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0733"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces(); boolean boolean34 = cSVFormat32.isEscaping(); java.lang.String[] strArray35 = cSVFormat32.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat14.withHeader(strArray35); org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat50 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote39, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray48, true); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat52.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withEscape((java.lang.Character) '#'); java.lang.String[] strArray59 = cSVFormat58.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat14.withHeader(strArray59); java.lang.String str61 = cSVFormat60.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str61, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0734"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat49.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat49.withIgnoreEmptyLines(true); java.io.Reader reader55 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = cSVFormat54.parse(reader55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0735"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '4'); boolean boolean23 = cSVFormat20.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withCommentStart('#'); org.apache.commons.csv.Quote quote30 = null; org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat50 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote39, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray48, true); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withEscape('#'); boolean boolean53 = cSVFormat50.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat50.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat55.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean58 = cSVFormat57.getIgnoreEmptyLines(); java.lang.String[] strArray59 = cSVFormat57.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat61 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) 'a', quote30, (java.lang.Character) '#', (java.lang.Character) 'a', true, true, "", "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray59, false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat25.withHeader(strArray59); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(cSVFormat62); }
public void test0736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0736"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); java.lang.String[] strArray17 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "", (long) 10); boolean boolean22 = cSVRecord21.isConsistent(); java.lang.String[] strArray23 = cSVRecord21.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", (long) (short) -1); java.lang.String[] strArray28 = cSVRecord27.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat16.withHeader(strArray28); java.lang.String str30 = cSVFormat16.toString(); char char31 = cSVFormat16.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str30, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertTrue("'" + char31 + "' != '" + 'a' + "'", char31 == 'a'); }
public void test0737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0737"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withSkipHeaderRecord(false); boolean boolean25 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0738"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withCommentStart((java.lang.Character) '4'); char char26 = cSVFormat21.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + char26 + "' != '" + 'a' + "'", char26 == 'a'); }
public void test0739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0739"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart('#'); java.lang.String str29 = cSVFormat28.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); }
public void test0740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0740"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape((java.lang.Character) '#'); java.lang.String str60 = cSVFormat57.toString(); org.apache.commons.csv.Quote quote63 = null; java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote63, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray72, true); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat74.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat76.withCommentStart('a'); boolean boolean79 = cSVFormat78.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat78.withDelimiter('#'); java.lang.String[] strArray82 = cSVFormat78.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat57.withHeader(strArray82); org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat83.withIgnoreEmptyLines(false); java.lang.String[] strArray86 = cSVFormat85.getHeader(); boolean boolean87 = cSVFormat85.isCommentingEnabled(); java.lang.String[] strArray88 = null; org.apache.commons.csv.CSVFormat cSVFormat89 = cSVFormat85.withHeader(strArray88); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat89.withCommentStart((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser92 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat91); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str60, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(cSVFormat81); org.junit.Assert.assertNotNull(strArray82); org.junit.Assert.assertNotNull(cSVFormat83); org.junit.Assert.assertNotNull(cSVFormat85); org.junit.Assert.assertNotNull(strArray86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true); org.junit.Assert.assertNotNull(cSVFormat89); org.junit.Assert.assertNotNull(cSVFormat91); }
public void test0741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0741"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str19 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray49, strMap50, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat14.withHeader(strArray49); java.lang.String[] strArray55 = null; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withHeader(strArray55); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0742"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); boolean boolean16 = cSVFormat13.isEscaping(); org.apache.commons.csv.Quote quote17 = null; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withQuotePolicy(quote17); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withCommentStart(' '); java.io.Reader reader21 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = cSVFormat20.parse(reader21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0743"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0744"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withQuotePolicy(quote21); boolean boolean23 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0745"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Quote quote54 = null; java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat65 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote54, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray63, true); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat65.withEscape('#'); boolean boolean68 = cSVFormat49.equals((java.lang.Object) cSVFormat67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat67.withCommentStart('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader73 = null; org.apache.commons.csv.Lexer lexer74 = new org.apache.commons.csv.Lexer(cSVFormat72, extendedBufferedReader73); java.io.Reader reader75 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser76 = cSVFormat72.parse(reader75); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertNotNull(cSVFormat72); }
public void test0746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0746"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.Quote quote25 = null; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withQuotePolicy(quote25); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0747"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); java.lang.String str22 = cSVFormat21.toString(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withDelimiter('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str22, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0748"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); boolean boolean53 = cSVFormat51.getIgnoreSurroundingSpaces(); java.lang.Object obj54 = null; boolean boolean55 = cSVFormat51.equals(obj54); java.io.Reader reader56 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = cSVFormat51.parse(reader56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test0749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0749"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat56.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat56.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean63 = cSVFormat62.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); }
public void test0750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0750"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withIgnoreSurroundingSpaces(false); boolean boolean57 = cSVFormat56.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); }
public void test0751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0751"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withRecordSeparator(' '); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat19, ""); boolean boolean22 = cSVFormat19.getIgnoreSurroundingSpaces(); char char23 = cSVFormat19.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'a' + "'", char23 == 'a'); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0752"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); java.lang.String[] strArray54 = cSVFormat18.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat18.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat18.withEscape('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0753"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); char char19 = cSVFormat14.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:false Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); }
public void test0754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0754"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); boolean boolean70 = cSVFormat69.getIgnoreSurroundingSpaces(); boolean boolean71 = cSVFormat69.isEscaping(); java.lang.String[] strArray72 = cSVFormat69.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat52.withHeader(strArray72); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat73.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat73.withDelimiter('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser78 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat77); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertNotNull(cSVFormat77); }
public void test0755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0755"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean55 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote62 = null; java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat73 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote62, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray71, true); boolean boolean74 = cSVFormat73.getIgnoreSurroundingSpaces(); boolean boolean75 = cSVFormat73.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat73.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat77.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean80 = cSVFormat59.equals((java.lang.Object) cSVFormat79); org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat59.withDelimiter('4'); java.lang.String[] strArray83 = cSVFormat82.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser84 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat82); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertNotNull(cSVFormat82); org.junit.Assert.assertNotNull(strArray83); }
public void test0756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0756"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0757"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); char char19 = cSVFormat14.getDelimiter(); org.apache.commons.csv.Quote quote20 = null; org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuotePolicy(quote20); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0758"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreEmptyLines(false); boolean boolean35 = cSVFormat32.isEscaping(); boolean boolean36 = cSVFormat18.equals((java.lang.Object) cSVFormat32); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat18.withIgnoreEmptyLines(true); boolean boolean39 = cSVFormat18.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat18.withDelimiter('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat41); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(cSVFormat41); }
public void test0759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0759"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(' '); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat18, ""); boolean boolean21 = cSVFormat18.getIgnoreSurroundingSpaces(); char char22 = cSVFormat18.getDelimiter(); boolean boolean23 = cSVFormat18.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + char22 + "' != '" + 'a' + "'", char22 == 'a'); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); }
public void test0760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0760"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.Quote quote50 = cSVFormat49.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader53 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser54 = cSVFormat52.parse(reader53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNull(quote50); org.junit.Assert.assertNotNull(cSVFormat52); }
public void test0761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0761"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat18.withEscape((java.lang.Character) ' '); org.apache.commons.csv.Quote quote56 = cSVFormat18.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat18.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNull(quote56); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0762"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); boolean boolean56 = cSVFormat53.getIgnoreEmptyLines(); java.lang.Object obj57 = null; boolean boolean58 = cSVFormat53.equals(obj57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withIgnoreEmptyLines(false); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat62, "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); }
public void test0763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0763"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean24 = cSVFormat23.isNullHandling(); org.apache.commons.csv.Quote quote27 = null; java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote27, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray36, true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat40.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean49 = cSVFormat23.equals((java.lang.Object) cSVFormat44); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test0764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0764"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart('#'); java.lang.String str29 = cSVFormat28.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); }
public void test0765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0765"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0766"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray10 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null; org.apache.commons.csv.CSVRecord cSVRecord14 = new org.apache.commons.csv.CSVRecord(strArray10, strMap11, "", (long) 10); org.apache.commons.csv.CSVFormat cSVFormat16 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '#', true, true, "", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray10, true); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0767"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreEmptyLines(false); boolean boolean34 = cSVFormat31.isEscaping(); boolean boolean35 = cSVFormat17.equals((java.lang.Object) cSVFormat31); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat31.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat31.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); }
public void test0768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0768"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getNullString(); org.apache.commons.csv.Quote quote19 = null; java.lang.String[] strArray26 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap27 = null; org.apache.commons.csv.CSVRecord cSVRecord30 = new org.apache.commons.csv.CSVRecord(strArray26, strMap27, "", (long) 10); boolean boolean32 = cSVRecord30.isSet("hi!"); int int33 = cSVRecord30.size(); java.util.Spliterator<java.lang.String> strSpliterator34 = cSVRecord30.spliterator(); java.lang.String[] strArray35 = cSVRecord30.values(); org.apache.commons.csv.CSVFormat cSVFormat37 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote19, (java.lang.Character) ' ', (java.lang.Character) 'a', false, true, "", " ", strArray35, true); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat15.withHeader(strArray35); boolean boolean39 = cSVFormat15.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat15.withRecordSeparator('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(strSpliterator34); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(cSVFormat41); }
public void test0769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0769"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "", (long) 10); org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '#', true, true, "", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray9, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat19.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0770"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('4'); boolean boolean18 = cSVFormat17.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withEscape((java.lang.Character) '4'); java.io.Reader reader21 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = cSVFormat17.parse(reader21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0771"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); boolean boolean20 = cSVFormat19.isEscaping(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat19, extendedBufferedReader21); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test0772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0772"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str19 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.Quote quote20 = cSVFormat14.getQuotePolicy(); boolean boolean21 = cSVFormat14.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null; org.apache.commons.csv.Lexer lexer25 = new org.apache.commons.csv.Lexer(cSVFormat23, extendedBufferedReader24); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNull(quote20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0773"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.Quote quote51 = cSVFormat50.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat50); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNull(quote51); }
public void test0774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0774"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString(""); boolean boolean21 = cSVFormat20.isEscaping(); org.apache.commons.csv.Quote quote22 = cSVFormat20.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNull(quote22); }
public void test0775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0775"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat18.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); }
public void test0776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0776"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#'); java.lang.String str23 = cSVFormat20.toString(); java.lang.String[] strArray24 = cSVFormat20.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]" + "'", str23, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray24); }
public void test0777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0777"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote24 = null; java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote24, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray33, true); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withEscape('#'); boolean boolean38 = cSVFormat35.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat35.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.lang.String str43 = cSVFormat42.toString(); org.apache.commons.csv.Quote quote46 = null; org.apache.commons.csv.Quote quote55 = null; java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat66 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote55, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray64, true); org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote46, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray64, true); java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray64, strMap69, "", (long) ' '); java.lang.String[] strArray73 = cSVRecord72.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap74 = null; org.apache.commons.csv.CSVRecord cSVRecord77 = new org.apache.commons.csv.CSVRecord(strArray73, strMap74, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat42.withHeader(strArray73); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat14.withHeader(strArray73); org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat79.withSkipHeaderRecord(true); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader82 = null; org.apache.commons.csv.Lexer lexer83 = new org.apache.commons.csv.Lexer(cSVFormat79, extendedBufferedReader82); org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat79.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser88 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat87); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str43, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertNotNull(cSVFormat81); org.junit.Assert.assertNotNull(cSVFormat85); org.junit.Assert.assertNotNull(cSVFormat87); }
public void test0778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0778"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withQuotePolicy(quote21); boolean boolean23 = cSVFormat22.isCommentingEnabled(); java.lang.String str24 = cSVFormat22.getRecordSeparator(); org.apache.commons.csv.Quote quote25 = null; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withQuotePolicy(quote25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!"); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test0779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0779"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat13.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote27 = cSVFormat26.getQuotePolicy(); boolean boolean28 = cSVFormat26.isQuoting(); java.io.Reader reader29 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = cSVFormat26.parse(reader29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNull(quote27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test0780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0780"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Quote quote54 = null; java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat65 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote54, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray63, true); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat65.withEscape('#'); boolean boolean68 = cSVFormat49.equals((java.lang.Object) cSVFormat67); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat67.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat72.withRecordSeparator("Delimiter=< > Escape=<4> QuoteChar=<a> CommentStart=< > NullString=<> RecordSeparator=<> SkipHeaderRecord:true"); java.io.Reader reader75 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser76 = cSVFormat74.parse(reader75); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertNotNull(cSVFormat72); org.junit.Assert.assertNotNull(cSVFormat74); }
public void test0781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0781"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); boolean boolean70 = cSVFormat69.getIgnoreSurroundingSpaces(); boolean boolean71 = cSVFormat69.isEscaping(); java.lang.String[] strArray72 = cSVFormat69.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat52.withHeader(strArray72); org.apache.commons.csv.Quote quote74 = cSVFormat73.getQuotePolicy(); org.apache.commons.csv.Quote quote75 = cSVFormat73.getQuotePolicy(); boolean boolean76 = cSVFormat73.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser77 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat73); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNull(quote74); org.junit.Assert.assertNull(quote75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); }
public void test0782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0782"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces(); boolean boolean34 = cSVFormat32.isEscaping(); java.lang.String[] strArray35 = cSVFormat32.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat14.withHeader(strArray35); org.apache.commons.csv.Quote quote37 = null; org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withQuotePolicy(quote37); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test0783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0783"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0784"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=< > SkipHeaderRecord:true Header:[, hi!]", cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0785"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); boolean boolean19 = cSVFormat15.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray50, strMap51, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat15.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat55.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0786"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0787"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); boolean boolean32 = cSVFormat31.getIgnoreSurroundingSpaces(); boolean boolean33 = cSVFormat31.isEscaping(); java.lang.String[] strArray34 = cSVFormat31.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat13.withHeader(strArray34); org.apache.commons.csv.Quote quote38 = null; java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat49 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote38, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray47, true); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat51.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat55.withEscape((java.lang.Character) '#'); java.lang.String[] strArray58 = cSVFormat57.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat13.withHeader(strArray58); org.apache.commons.csv.Quote quote60 = cSVFormat59.getQuotePolicy(); boolean boolean61 = cSVFormat59.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader62 = null; org.apache.commons.csv.Lexer lexer63 = new org.apache.commons.csv.Lexer(cSVFormat59, extendedBufferedReader62); java.io.Reader reader64 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = cSVFormat59.parse(reader64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNull(quote60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); }
public void test0788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0788"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat13.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat13.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote27 = cSVFormat26.getQuotePolicy(); boolean boolean28 = cSVFormat26.isQuoting(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat26, ""); java.io.Reader reader31 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = cSVFormat26.parse(reader31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNull(quote27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test0789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0789"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "", (long) 10); boolean boolean15 = cSVRecord13.isSet("hi!"); int int16 = cSVRecord13.size(); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord13.spliterator(); boolean boolean18 = cSVRecord13.isConsistent(); java.util.Iterator<java.lang.String> strItor19 = cSVRecord13.iterator(); boolean boolean20 = cSVRecord13.isConsistent(); java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord13.spliterator(); long long22 = cSVRecord13.getRecordNumber(); java.util.Spliterator<java.lang.String> strSpliterator23 = cSVRecord13.spliterator(); java.lang.String[] strArray24 = cSVRecord13.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) 'a', true, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", strArray24, false); java.io.Reader reader27 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = cSVFormat26.parse(reader27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(strItor19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strSpliterator21); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L); org.junit.Assert.assertNotNull(strSpliterator23); org.junit.Assert.assertNotNull(strArray24); }
public void test0790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0790"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); cSVParser62.close(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); }
public void test0791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0791"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getNullString(); org.apache.commons.csv.Quote quote17 = null; java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "", (long) 10); boolean boolean30 = cSVRecord28.isSet("hi!"); int int31 = cSVRecord28.size(); java.util.Spliterator<java.lang.String> strSpliterator32 = cSVRecord28.spliterator(); java.lang.String[] strArray33 = cSVRecord28.values(); org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote17, (java.lang.Character) ' ', (java.lang.Character) 'a', false, true, "", " ", strArray33, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat13.withHeader(strArray33); boolean boolean37 = cSVFormat36.getSkipHeaderRecord(); java.io.Reader reader38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = cSVFormat36.parse(reader38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(strSpliterator32); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test0792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0792"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); java.lang.String str54 = cSVFormat53.toString(); java.lang.String str55 = cSVFormat53.getRecordSeparator(); boolean boolean56 = cSVFormat53.getIgnoreEmptyLines(); java.lang.Object obj57 = null; boolean boolean58 = cSVFormat53.equals(obj57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat53.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean61 = cSVFormat53.getIgnoreSurroundingSpaces(); boolean boolean62 = cSVFormat53.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat53.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withCommentStart((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str54, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat66); }
public void test0793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0793"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); boolean boolean70 = cSVFormat69.getIgnoreSurroundingSpaces(); boolean boolean71 = cSVFormat69.isEscaping(); java.lang.String[] strArray72 = cSVFormat69.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat52.withHeader(strArray72); org.apache.commons.csv.Quote quote74 = cSVFormat73.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat73.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser77 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", cSVFormat73); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNull(quote74); org.junit.Assert.assertNotNull(cSVFormat76); }
public void test0794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0794"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); boolean boolean33 = cSVFormat32.getIgnoreSurroundingSpaces(); boolean boolean34 = cSVFormat32.isEscaping(); java.lang.String[] strArray35 = cSVFormat32.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat14.withHeader(strArray35); org.apache.commons.csv.Quote quote37 = null; org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withQuotePolicy(quote37); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test0795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0795"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withEscape((java.lang.Character) 'a'); boolean boolean62 = cSVFormat59.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat59.withCommentStart(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(cSVFormat64); }
public void test0796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0796"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '4'); boolean boolean23 = cSVFormat20.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withIgnoreEmptyLines(false); boolean boolean28 = cSVFormat25.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test0797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0797"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.String str56 = cSVFormat52.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat52.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withNullString(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); }
public void test0798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0798"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0799"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); boolean boolean20 = cSVFormat19.getIgnoreSurroundingSpaces(); boolean boolean21 = cSVFormat19.isQuoting(); boolean boolean22 = cSVFormat19.getSkipHeaderRecord(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat19, extendedBufferedReader23); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(" ", cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test0800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0800"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat51.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withEscape((java.lang.Character) '#'); java.lang.String str59 = cSVFormat56.toString(); java.io.Reader reader60 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = cSVFormat56.parse(reader60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str59, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0801"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); char char55 = cSVFormat54.getDelimiter(); java.lang.String str56 = cSVFormat54.getRecordSeparator(); boolean boolean57 = cSVFormat54.isNullHandling(); char char58 = cSVFormat54.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withQuoteChar((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + char55 + "' != '" + 'a' + "'", char55 == 'a'); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str56, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertTrue("'" + char58 + "' != '" + 'a' + "'", char58 == 'a'); org.junit.Assert.assertNotNull(cSVFormat60); }
public void test0802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0802"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null; org.apache.commons.csv.Lexer lexer17 = new org.apache.commons.csv.Lexer(cSVFormat13, extendedBufferedReader16); boolean boolean18 = cSVFormat13.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; org.apache.commons.csv.Quote quote39 = null; org.apache.commons.csv.Quote quote48 = null; java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote48, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray57, true); org.apache.commons.csv.CSVFormat cSVFormat61 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote39, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray57, true); java.util.Map<java.lang.String, java.lang.Integer> strMap62 = null; org.apache.commons.csv.CSVRecord cSVRecord65 = new org.apache.commons.csv.CSVRecord(strArray57, strMap62, "", (long) ' '); java.lang.String[] strArray66 = cSVRecord65.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap67 = null; org.apache.commons.csv.CSVRecord cSVRecord70 = new org.apache.commons.csv.CSVRecord(strArray66, strMap67, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat72 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '4', quote30, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "[, hi!]", "", strArray66, false); java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray66, strMap73, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", (long) (short) 1); org.apache.commons.csv.CSVFormat cSVFormat78 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote21, (java.lang.Character) 'a', (java.lang.Character) 'a', false, true, "[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", strArray66, true); boolean boolean79 = cSVFormat13.equals((java.lang.Object) "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader80 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser81 = cSVFormat13.parse(reader80); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); }
public void test0803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0803"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape('4'); boolean boolean22 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0804"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withIgnoreEmptyLines(true); java.lang.String str27 = cSVFormat26.toString(); boolean boolean28 = cSVFormat26.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str27, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test0805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0805"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat61.withCommentStart(' '); char char66 = cSVFormat65.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat65); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + char66 + "' != '" + 'a' + "'", char66 == 'a'); }
public void test0806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0806"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isEscaping(); java.lang.String[] strArray16 = cSVFormat13.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator(""); java.io.Reader reader21 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = cSVFormat20.parse(reader21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0807"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withCommentStart((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0808"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); long long40 = cSVParser39.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator41 = cSVParser39.spliterator(); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator41); }
public void test0809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0809"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader59 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = cSVFormat51.parse(reader59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0810"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withEscape('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat63); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0811"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote12, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat36 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) 'a', false, true, "hi!", "", strArray30, false); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start and the escape character cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test0812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0812"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote58 = null; java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote58, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray67, true); boolean boolean70 = cSVFormat69.getIgnoreSurroundingSpaces(); boolean boolean71 = cSVFormat69.isEscaping(); java.lang.String[] strArray72 = cSVFormat69.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat52.withHeader(strArray72); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat73.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); java.lang.String str76 = cSVFormat73.toString(); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat73.withEscape('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat78); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str76, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(cSVFormat78); }
public void test0813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0813"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withCommentStart((java.lang.Character) 'a'); boolean boolean21 = cSVFormat20.getSkipHeaderRecord(); java.lang.String str22 = cSVFormat20.toString(); java.io.Reader reader23 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = cSVFormat20.parse(reader23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str22, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0814"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withEscape('#'); org.apache.commons.csv.Quote quote23 = cSVFormat15.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNull(quote23); }
public void test0815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0815"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor66 = cSVParser62.iterator(); org.apache.commons.csv.CSVRecord cSVRecord67 = cSVParser62.nextRecord(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertNotNull(cSVRecordItor66); org.junit.Assert.assertNull(cSVRecord67); }
public void test0816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0816"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote20 = null; java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat31 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote20, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray29, true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreEmptyLines(false); boolean boolean34 = cSVFormat31.isEscaping(); boolean boolean35 = cSVFormat17.equals((java.lang.Object) cSVFormat31); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat31.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat31.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat31.withIgnoreEmptyLines(false); boolean boolean42 = cSVFormat31.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); }
public void test0817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0817"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); boolean boolean17 = cSVFormat13.getSkipHeaderRecord(); char char18 = cSVFormat13.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('a'); org.apache.commons.csv.Quote quote25 = null; java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat36 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote25, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray34, true); boolean boolean37 = cSVFormat36.getIgnoreSurroundingSpaces(); boolean boolean38 = cSVFormat36.isEscaping(); java.lang.String[] strArray39 = cSVFormat36.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat36.withDelimiter('4'); boolean boolean42 = cSVFormat36.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat36.withSkipHeaderRecord(false); java.lang.String str45 = cSVFormat44.getNullString(); org.apache.commons.csv.Quote quote46 = null; org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withQuotePolicy(quote46); boolean boolean48 = cSVFormat22.equals((java.lang.Object) quote46); java.io.Reader reader49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat22.parse(reader49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test0818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0818"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('4'); boolean boolean18 = cSVFormat17.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withDelimiter('4'); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withQuotePolicy(quote21); java.io.Reader reader23 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = cSVFormat22.parse(reader23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0819"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "", (long) 10); boolean boolean5 = cSVRecord4.isConsistent(); java.lang.String str6 = cSVRecord4.toString(); java.lang.String[] strArray7 = cSVRecord4.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null; org.apache.commons.csv.CSVRecord cSVRecord11 = new org.apache.commons.csv.CSVRecord(strArray7, strMap8, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", 1L); java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "", (long) 10); boolean boolean18 = cSVRecord16.isSet("hi!"); int int19 = cSVRecord16.size(); java.util.Spliterator<java.lang.String> strSpliterator20 = cSVRecord16.spliterator(); int int21 = cSVRecord16.size(); java.lang.String[] strArray22 = cSVRecord16.values(); org.apache.commons.csv.Quote quote26 = null; java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat37 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote26, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray35, true); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withCommentStart('a'); boolean boolean42 = cSVFormat41.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote45 = null; org.apache.commons.csv.Quote quote54 = null; java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat65 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote54, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray63, true); org.apache.commons.csv.CSVFormat cSVFormat67 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote45, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray63, true); java.util.Map<java.lang.String, java.lang.Integer> strMap68 = null; org.apache.commons.csv.CSVRecord cSVRecord71 = new org.apache.commons.csv.CSVRecord(strArray63, strMap68, "", (long) ' '); java.lang.String[] strArray72 = cSVRecord71.values(); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat41.withHeader(strArray72); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat73.withIgnoreSurroundingSpaces(true); java.lang.String str76 = cSVFormat75.toString(); java.lang.String str77 = cSVFormat75.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat75.withCommentStart('#'); boolean boolean80 = cSVFormat79.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat79.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat82.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser85 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat82); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList86 = cSVParser85.getRecords(); long long87 = cSVParser85.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator88 = cSVParser85.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap89 = cSVParser85.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord92 = new org.apache.commons.csv.CSVRecord(strArray22, strMap89, "hi!", (long) (short) 1); org.apache.commons.csv.CSVRecord cSVRecord95 = new org.apache.commons.csv.CSVRecord(strArray7, strMap89, "", 0L); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]"); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(strSpliterator20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str76, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!"); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true); org.junit.Assert.assertNotNull(cSVFormat82); org.junit.Assert.assertNotNull(cSVFormat84); org.junit.Assert.assertNotNull(cSVParser85); org.junit.Assert.assertNotNull(cSVRecordList86); org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator88); org.junit.Assert.assertNotNull(strMap89); }
public void test0820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0820"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat17.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat17.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean54 = cSVFormat17.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat17.withIgnoreSurroundingSpaces(true); java.io.Reader reader57 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser58 = cSVFormat17.parse(reader57); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0821"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuoteChar('#'); java.lang.String str22 = cSVFormat21.getRecordSeparator(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat21, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); }
public void test0822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0822"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); boolean boolean28 = cSVParser25.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test0823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0823"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); java.lang.String str52 = cSVFormat51.toString(); java.lang.String str53 = cSVFormat51.getRecordSeparator(); boolean boolean54 = cSVFormat51.getIgnoreEmptyLines(); java.lang.Object obj55 = null; boolean boolean56 = cSVFormat51.equals(obj55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat51.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean59 = cSVFormat51.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat51.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); java.lang.String[] strArray62 = null; org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withHeader(strArray62); java.io.Reader reader64 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = cSVFormat63.parse(reader64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str52, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0824"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withCommentStart('a'); boolean boolean47 = cSVFormat46.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote50 = null; org.apache.commons.csv.Quote quote59 = null; java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote59, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray68, true); org.apache.commons.csv.CSVFormat cSVFormat72 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote50, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray68, true); java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray68, strMap73, "", (long) ' '); java.lang.String[] strArray77 = cSVRecord76.values(); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat46.withHeader(strArray77); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat78.withIgnoreSurroundingSpaces(true); java.lang.String str81 = cSVFormat80.toString(); java.lang.String str82 = cSVFormat80.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat80.withCommentStart('#'); boolean boolean85 = cSVFormat84.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat89 = cSVFormat87.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser90 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat87); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList91 = cSVParser90.getRecords(); long long92 = cSVParser90.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList93 = cSVParser90.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList94 = cSVParser25.getRecords(cSVRecordList93); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList95 = cSVParser25.getRecords(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str81, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!"); org.junit.Assert.assertNotNull(cSVFormat84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertNotNull(cSVFormat87); org.junit.Assert.assertNotNull(cSVFormat89); org.junit.Assert.assertNotNull(cSVParser90); org.junit.Assert.assertNotNull(cSVRecordList91); org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L); org.junit.Assert.assertNotNull(cSVRecordList93); org.junit.Assert.assertNotNull(cSVRecordList94); org.junit.Assert.assertNotNull(cSVRecordList95); }
public void test0825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0825"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat14.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withRecordSeparator(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0826"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); long long26 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); }
public void test0827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0827"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote23 = null; java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote23, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape('4'); boolean boolean41 = cSVFormat15.equals((java.lang.Object) cSVFormat38); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat38.withEscape('#'); org.apache.commons.csv.Quote quote44 = null; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withQuotePolicy(quote44); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat43.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat43); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test0828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0828"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); boolean boolean17 = cSVFormat15.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote20 = null; org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withQuotePolicy(quote20); boolean boolean22 = cSVFormat21.isCommentingEnabled(); java.lang.String str23 = cSVFormat21.getNullString(); org.apache.commons.csv.Quote quote26 = null; java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat37 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote26, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray35, true); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat39.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat39.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat39.withSkipHeaderRecord(false); boolean boolean48 = cSVFormat21.equals((java.lang.Object) cSVFormat47); java.io.Reader reader49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat21.parse(reader49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test0829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0829"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); char char19 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withRecordSeparator(' '); org.apache.commons.csv.Quote quote26 = null; java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat37 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote26, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray35, true); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withRecordSeparator(' '); org.apache.commons.csv.Quote quote44 = null; org.apache.commons.csv.Quote quote53 = null; java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat64 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote53, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray62, true); org.apache.commons.csv.CSVFormat cSVFormat66 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote44, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray62, true); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat39.withHeader(strArray62); boolean boolean68 = cSVFormat14.equals((java.lang.Object) cSVFormat67); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser69 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); }
public void test0830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0830"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); boolean boolean65 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); }
public void test0831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0831"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean60 = cSVFormat52.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat52.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat66); }
public void test0832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0832"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString(""); java.lang.String str24 = cSVFormat23.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str24, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0833"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = cSVParser62.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser62.getRecords(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordList65); org.junit.Assert.assertNotNull(cSVRecordList66); }
public void test0834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0834"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); long long64 = cSVParser62.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord65 = cSVParser62.nextRecord(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L); org.junit.Assert.assertNull(cSVRecord65); }
public void test0835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0835"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = cSVParser62.getRecords(); boolean boolean66 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordList65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test0836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0836"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); boolean boolean19 = cSVFormat15.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.Quote quote21 = cSVFormat15.getQuotePolicy(); boolean boolean22 = cSVFormat15.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat15.withRecordSeparator(' '); org.apache.commons.csv.Quote quote25 = null; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat15.withQuotePolicy(quote25); boolean boolean27 = cSVFormat15.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNull(quote21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); }
public void test0837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0837"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); java.util.Map<java.lang.String, java.lang.Integer> strMap40 = cSVParser39.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor41 = cSVParser39.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList42 = cSVParser39.getRecords(); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(cSVRecordItor41); org.junit.Assert.assertNotNull(cSVRecordList42); }
public void test0838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0838"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean22 = cSVFormat21.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]", cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0839"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); boolean boolean26 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.Quote quote27 = cSVFormat25.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNull(quote27); }
public void test0840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0840"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withEscape((java.lang.Character) ' '); java.lang.String[] strArray59 = null; java.util.Map<java.lang.String, java.lang.Integer> strMap60 = null; org.apache.commons.csv.CSVRecord cSVRecord63 = new org.apache.commons.csv.CSVRecord(strArray59, strMap60, "hi!", (long) (short) 10); java.lang.String[] strArray64 = cSVRecord63.values(); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat58.withHeader(strArray64); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat65.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<#> CommentStart=<4> NullString=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser68 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertNotNull(cSVFormat67); }
public void test0841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0841"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean60 = cSVFormat52.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat52.withDelimiter(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(cSVFormat62); }
public void test0842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0842"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVRecordList63.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); }
public void test0843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0843"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test0844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0844"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); char char19 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withSkipHeaderRecord(true); boolean boolean26 = cSVFormat23.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); }
public void test0845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0845"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord64 = cSVParser62.nextRecord(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNull(cSVRecord64); }
public void test0846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0846"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuoteChar('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0847"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); boolean boolean19 = cSVFormat15.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.Quote quote21 = cSVFormat15.getQuotePolicy(); boolean boolean22 = cSVFormat15.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat15.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNull(quote21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0848"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isEscaping(); java.lang.String[] strArray16 = cSVFormat13.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withDelimiter('4'); java.lang.String[] strArray19 = cSVFormat18.getHeader(); boolean boolean20 = cSVFormat18.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat18.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote25 = null; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withQuotePolicy(quote25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader33 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = cSVFormat32.parse(reader33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test0849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0849"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord65 = cSVParser62.nextRecord(); boolean boolean66 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecord65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test0850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0850"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isEscaping(); java.lang.String[] strArray16 = cSVFormat13.getHeader(); java.lang.String str17 = cSVFormat13.getNullString(); java.io.Reader reader18 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat13.parse(reader18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); }
public void test0851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0851"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); cSVParser62.close(); boolean boolean67 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); }
public void test0852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0852"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = null; java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser62.getRecords(cSVRecordList65); cSVParser62.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator68 = cSVParser62.spliterator(); boolean boolean69 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecordList66); org.junit.Assert.assertNotNull(cSVRecordSpliterator68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); }
public void test0853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0853"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean19 = cSVFormat17.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withCommentStart((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0854"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str19 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.Quote quote20 = cSVFormat14.getQuotePolicy(); boolean boolean21 = cSVFormat14.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNull(quote20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0855"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); java.util.Map<java.lang.String, java.lang.Integer> strMap40 = cSVParser39.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor41 = cSVParser39.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser39.getHeaderMap(); long long43 = cSVParser39.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord44 = cSVParser39.nextRecord(); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(cSVRecordItor41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L); org.junit.Assert.assertNull(cSVRecord44); }
public void test0856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0856"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); boolean boolean17 = cSVFormat13.getSkipHeaderRecord(); java.lang.String str18 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withRecordSeparator(' '); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withCommentStart((java.lang.Character) '#'); char char23 = cSVFormat20.getDelimiter(); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat20.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + char23 + "' != '" + 'a' + "'", char23 == 'a'); }
public void test0857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0857"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); boolean boolean64 = cSVParser62.isClosed(); long long65 = cSVParser62.getRecordNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L); }
public void test0858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0858"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); java.lang.String[] strArray19 = cSVFormat18.getHeader(); boolean boolean20 = cSVFormat18.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0859"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withQuotePolicy(quote21); boolean boolean23 = cSVFormat22.isCommentingEnabled(); java.lang.String str24 = cSVFormat22.getNullString(); org.apache.commons.csv.Quote quote27 = null; java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote27, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray36, true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat40.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat40.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat40.withSkipHeaderRecord(false); boolean boolean49 = cSVFormat22.equals((java.lang.Object) cSVFormat48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat22.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat22.withCommentStart((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser54 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); }
public void test0860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0860"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withEscape('#'); java.lang.String str22 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat14.withRecordSeparator(' '); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat14.withQuoteChar('a'); org.apache.commons.csv.Quote quote29 = null; java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat40 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote29, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray38, true); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withCommentStart('a'); boolean boolean45 = cSVFormat44.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote48 = null; org.apache.commons.csv.Quote quote57 = null; java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote57, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray66, true); org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote48, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray66, true); java.util.Map<java.lang.String, java.lang.Integer> strMap71 = null; org.apache.commons.csv.CSVRecord cSVRecord74 = new org.apache.commons.csv.CSVRecord(strArray66, strMap71, "", (long) ' '); java.lang.String[] strArray75 = cSVRecord74.values(); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat44.withHeader(strArray75); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat76.withIgnoreSurroundingSpaces(true); java.lang.String str79 = cSVFormat78.toString(); java.lang.String str80 = cSVFormat78.getRecordSeparator(); boolean boolean81 = cSVFormat78.getIgnoreEmptyLines(); java.lang.Object obj82 = null; boolean boolean83 = cSVFormat78.equals(obj82); org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat78.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat85.withEscape((java.lang.Character) 'a'); boolean boolean88 = cSVFormat87.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat90 = cSVFormat87.withRecordSeparator("[, hi!]"); java.lang.String[] strArray91 = cSVFormat87.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat92 = cSVFormat14.withHeader(strArray91); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader93 = null; org.apache.commons.csv.Lexer lexer94 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader93); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser95 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(strArray75); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str79, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!"); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(cSVFormat85); org.junit.Assert.assertNotNull(cSVFormat87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true); org.junit.Assert.assertNotNull(cSVFormat90); org.junit.Assert.assertNotNull(strArray91); org.junit.Assert.assertNotNull(cSVFormat92); }
public void test0861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0861"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); int int49 = cSVRecord48.size(); java.lang.String[] strArray50 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat14.withHeader(strArray50); boolean boolean52 = cSVFormat51.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat51); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0862"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withEscape('#'); java.lang.String str22 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat14.withRecordSeparator(' '); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat14.withQuoteChar('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0863"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); long long26 = cSVParser25.getRecordNumber(); long long27 = cSVParser25.getCurrentLineNumber(); long long28 = cSVParser25.getRecordNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L); }
public void test0864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0864"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); long long65 = cSVParser62.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap66 = cSVParser62.getHeaderMap(); cSVParser62.close(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L); org.junit.Assert.assertNotNull(strMap66); }
public void test0865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0865"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('#'); java.lang.String str23 = cSVFormat20.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!"); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0866"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); cSVParser62.close(); long long67 = cSVParser62.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap68 = cSVParser62.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor69 = cSVParser62.iterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L); org.junit.Assert.assertNotNull(strMap68); org.junit.Assert.assertNotNull(cSVRecordItor69); }
public void test0867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0867"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = null; java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser62.getRecords(cSVRecordList65); cSVParser62.close(); boolean boolean68 = cSVParser62.isClosed(); cSVParser62.close(); org.apache.commons.csv.Quote quote73 = null; java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat84 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote73, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray82, true); java.lang.String str85 = cSVFormat84.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat89 = cSVFormat87.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat89.withEscape((java.lang.Character) '#'); boolean boolean92 = cSVFormat91.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat94 = cSVFormat91.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser95 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat94); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator96 = cSVParser95.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList97 = cSVParser95.getRecords(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList98 = cSVParser62.getRecords(cSVRecordList97); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecordList66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(strArray82); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!"); org.junit.Assert.assertNotNull(cSVFormat87); org.junit.Assert.assertNotNull(cSVFormat89); org.junit.Assert.assertNotNull(cSVFormat91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); org.junit.Assert.assertNotNull(cSVFormat94); org.junit.Assert.assertNotNull(cSVParser95); org.junit.Assert.assertNotNull(cSVRecordSpliterator96); org.junit.Assert.assertNotNull(cSVRecordList97); }
public void test0868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0868"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) '#'); java.lang.String[] strArray23 = cSVFormat22.getHeader(); boolean boolean24 = cSVFormat22.isQuoting(); java.lang.String str25 = cSVFormat22.getRecordSeparator(); boolean boolean26 = cSVFormat22.isNullHandling(); java.lang.String[] strArray27 = cSVFormat22.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat22.withQuoteChar((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0869"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); cSVParser62.close(); long long67 = cSVParser62.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap68 = cSVParser62.getHeaderMap(); cSVParser62.close(); long long70 = cSVParser62.getCurrentLineNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L); org.junit.Assert.assertNotNull(strMap68); org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L); }
public void test0870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0870"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuotePolicy(quote26); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0871"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); boolean boolean52 = cSVFormat51.isCommentingEnabled(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat51.withCommentStart(' '); boolean boolean57 = cSVFormat51.isCommentingEnabled(); java.io.Reader reader58 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = cSVFormat51.parse(reader58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); }
public void test0872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0872"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote24 = null; org.apache.commons.csv.Quote quote33 = null; org.apache.commons.csv.Quote quote42 = null; java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat53 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote42, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray51, true); org.apache.commons.csv.CSVFormat cSVFormat55 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote33, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray51, true); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) ' ', quote24, (java.lang.Character) 'a', (java.lang.Character) 'a', false, true, "hi!", "", strArray51, false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat21.withHeader(strArray51); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat21.withNullString("hi!"); java.lang.String[] strArray61 = null; org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat21.withHeader(strArray61); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat62); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); }
public void test0873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0873"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); long long65 = cSVParser62.getCurrentLineNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L); }
public void test0874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0874"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape('4'); boolean boolean40 = cSVFormat14.equals((java.lang.Object) cSVFormat37); java.lang.String str41 = cSVFormat37.toString(); boolean boolean42 = cSVFormat37.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat37.withEscape('a'); org.apache.commons.csv.Quote quote45 = null; org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withQuotePolicy(quote45); java.lang.String str47 = cSVFormat44.toString(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat44.withRecordSeparator('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str41, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]" + "'", str47, "Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]"); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test0875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0875"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser62.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertNotNull(cSVRecordSpliterator66); }
public void test0876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0876"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat53.withQuoteChar('a'); java.io.Reader reader56 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = cSVFormat53.parse(reader56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVFormat55); }
public void test0877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0877"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withNullString("hi!"); java.lang.String str23 = cSVFormat16.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat16.withNullString(" "); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!"); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0878"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); java.util.Map<java.lang.String, java.lang.Integer> strMap40 = cSVParser39.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord41 = cSVParser39.nextRecord(); cSVParser39.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor43 = cSVParser39.iterator(); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNull(cSVRecord41); org.junit.Assert.assertNotNull(cSVRecordItor43); }
public void test0879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0879"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote24 = null; java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote24, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray33, true); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withEscape('#'); boolean boolean38 = cSVFormat35.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat35.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.lang.String str43 = cSVFormat42.toString(); org.apache.commons.csv.Quote quote46 = null; org.apache.commons.csv.Quote quote55 = null; java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat66 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote55, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray64, true); org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote46, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray64, true); java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray64, strMap69, "", (long) ' '); java.lang.String[] strArray73 = cSVRecord72.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap74 = null; org.apache.commons.csv.CSVRecord cSVRecord77 = new org.apache.commons.csv.CSVRecord(strArray73, strMap74, "", (long) (byte) 0); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat42.withHeader(strArray73); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat14.withHeader(strArray73); org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat79.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat81.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat81.withRecordSeparator('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser86 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat85); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str43, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertNotNull(cSVFormat81); org.junit.Assert.assertNotNull(cSVFormat83); org.junit.Assert.assertNotNull(cSVFormat85); }
public void test0880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0880"); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.Quote quote11 = null; java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat22 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote11, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray20, true); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat24.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withEscape((java.lang.Character) '#'); java.lang.String[] strArray31 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) ' ', quote2, (java.lang.Character) '#', (java.lang.Character) ' ', true, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "[, hi!]", strArray31, true); java.io.Reader reader34 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = cSVFormat33.parse(reader34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray31); }
public void test0881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0881"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test0882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0882"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withNullString(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0883"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withCommentStart((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat50); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0884"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isEscaping(); java.lang.String[] strArray18 = cSVFormat15.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('4'); java.lang.String[] strArray21 = cSVFormat20.getHeader(); boolean boolean22 = cSVFormat20.isNullHandling(); java.lang.String str23 = cSVFormat20.toString(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote26 = cSVFormat25.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withRecordSeparator('a'); java.lang.String str29 = cSVFormat28.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str23, "Delimiter=<4> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNull(quote26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); }
public void test0885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0885"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); long long64 = cSVParser62.getRecordNumber(); long long65 = cSVParser62.getCurrentLineNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L); }
public void test0886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0886"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "", (long) 10); boolean boolean6 = cSVRecord4.isSet("hi!"); int int7 = cSVRecord4.size(); java.util.Spliterator<java.lang.String> strSpliterator8 = cSVRecord4.spliterator(); boolean boolean9 = cSVRecord4.isConsistent(); java.util.Iterator<java.lang.String> strItor10 = cSVRecord4.iterator(); boolean boolean11 = cSVRecord4.isConsistent(); boolean boolean13 = cSVRecord4.isMapped(""); java.lang.String str14 = cSVRecord4.getComment(); java.lang.String str15 = cSVRecord4.toString(); long long16 = cSVRecord4.getRecordNumber(); boolean boolean17 = cSVRecord4.isConsistent(); java.lang.String[] strArray18 = cSVRecord4.values(); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat37.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote41 = null; org.apache.commons.csv.Quote quote50 = null; java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat61 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote50, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray59, true); org.apache.commons.csv.CSVFormat cSVFormat63 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote41, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray59, true); java.util.Map<java.lang.String, java.lang.Integer> strMap64 = null; org.apache.commons.csv.CSVRecord cSVRecord67 = new org.apache.commons.csv.CSVRecord(strArray59, strMap64, "", (long) ' '); java.lang.String[] strArray68 = cSVRecord67.values(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat37.withHeader(strArray68); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withIgnoreSurroundingSpaces(true); java.lang.String str72 = cSVFormat71.toString(); java.lang.String str73 = cSVFormat71.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat71.withCommentStart('#'); boolean boolean76 = cSVFormat75.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat75.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat78.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser81 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat78); boolean boolean82 = cSVParser81.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator83 = cSVParser81.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap84 = cSVParser81.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord87 = new org.apache.commons.csv.CSVRecord(strArray18, strMap84, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", (long) 'a'); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(strSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strItor10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]"); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str72, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!"); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertNotNull(cSVParser81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator83); org.junit.Assert.assertNotNull(strMap84); }
public void test0887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0887"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "", (long) 10); boolean boolean6 = cSVRecord4.isSet("hi!"); int int7 = cSVRecord4.size(); java.util.Spliterator<java.lang.String> strSpliterator8 = cSVRecord4.spliterator(); boolean boolean9 = cSVRecord4.isConsistent(); java.lang.String str10 = cSVRecord4.getComment(); boolean boolean11 = cSVRecord4.isConsistent(); java.lang.String[] strArray12 = cSVRecord4.values(); org.apache.commons.csv.Quote quote16 = null; java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote16, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray25, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withCommentStart('a'); boolean boolean32 = cSVFormat31.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote35 = null; org.apache.commons.csv.Quote quote44 = null; java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat55 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote44, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray53, true); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote35, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray53, true); java.util.Map<java.lang.String, java.lang.Integer> strMap58 = null; org.apache.commons.csv.CSVRecord cSVRecord61 = new org.apache.commons.csv.CSVRecord(strArray53, strMap58, "", (long) ' '); java.lang.String[] strArray62 = cSVRecord61.values(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat31.withHeader(strArray62); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withIgnoreSurroundingSpaces(true); java.lang.String str66 = cSVFormat65.toString(); java.lang.String str67 = cSVFormat65.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat65.withCommentStart('#'); boolean boolean70 = cSVFormat69.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat69.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat72.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat72); boolean boolean76 = cSVParser75.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator77 = cSVParser75.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord78 = cSVParser75.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap79 = cSVParser75.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord82 = new org.apache.commons.csv.CSVRecord(strArray12, strMap79, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", (long) '#'); java.lang.Enum<org.apache.commons.csv.Quote> quoteEnum83 = null; // The following exception was thrown during execution in test generation try { java.lang.String str84 = cSVRecord82.get(quoteEnum83); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(strSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str66, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!"); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(cSVFormat72); org.junit.Assert.assertNotNull(cSVFormat74); org.junit.Assert.assertNotNull(cSVParser75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator77); org.junit.Assert.assertNull(cSVRecord78); org.junit.Assert.assertNotNull(strMap79); }
public void test0888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0888"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withRecordSeparator(""); boolean boolean19 = cSVFormat18.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withQuoteChar((java.lang.Character) '#'); java.io.Reader reader22 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat18.parse(reader22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0889"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0890"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); long long64 = cSVParser62.getRecordNumber(); long long65 = cSVParser62.getRecordNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L); }
public void test0891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0891"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withDelimiter('#'); java.lang.String[] strArray23 = cSVFormat19.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withQuoteChar('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0892"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat52.withNullString("hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); }
public void test0893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0893"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord65 = cSVParser62.nextRecord(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList66 = null; java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList67 = cSVParser62.getRecords(cSVRecordList66); // The following exception was thrown during execution in test generation try { java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator68 = cSVRecordList67.spliterator(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecord65); org.junit.Assert.assertNull(cSVRecordList67); }
public void test0894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0894"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('4'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withQuoteChar(' '); java.io.Reader reader27 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = cSVFormat26.parse(reader27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0895"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); long long65 = cSVParser62.getCurrentLineNumber(); long long66 = cSVParser62.getCurrentLineNumber(); cSVParser62.close(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L); org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L); }
public void test0896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0896"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<a> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0897"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat50.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat50.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); }
public void test0898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0898"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withDelimiter('4'); java.lang.String[] strArray20 = cSVFormat19.getHeader(); boolean boolean21 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuotePolicy(quote26); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<#> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0899"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0900"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0901"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); boolean boolean65 = cSVParser62.isClosed(); cSVParser62.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator67 = cSVParser62.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator67); }
public void test0902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0902"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor65 = cSVParser62.iterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNotNull(cSVRecordItor65); }
public void test0903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0903"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser25.iterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser25.nextRecord(); cSVParser25.close(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNull(cSVRecord27); }
public void test0904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0904"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); boolean boolean53 = cSVFormat52.isCommentingEnabled(); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat52.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withQuoteChar((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0905"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); boolean boolean54 = cSVFormat53.isCommentingEnabled(); org.apache.commons.csv.Quote quote55 = null; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuotePolicy(quote55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat53.withCommentStart(' '); java.lang.String str59 = cSVFormat58.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str59, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0906"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); cSVParser62.close(); cSVParser62.close(); long long67 = cSVParser62.getCurrentLineNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L); }
public void test0907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0907"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); long long65 = cSVParser62.getCurrentLineNumber(); long long66 = cSVParser62.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord67 = cSVParser62.nextRecord(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L); org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L); org.junit.Assert.assertNull(cSVRecord67); }
public void test0908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0908"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withQuotePolicy(quote21); boolean boolean23 = cSVFormat22.isCommentingEnabled(); java.lang.String str24 = cSVFormat22.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withRecordSeparator(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0909"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withCommentStart('a'); boolean boolean47 = cSVFormat46.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote50 = null; org.apache.commons.csv.Quote quote59 = null; java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote59, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray68, true); org.apache.commons.csv.CSVFormat cSVFormat72 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote50, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray68, true); java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray68, strMap73, "", (long) ' '); java.lang.String[] strArray77 = cSVRecord76.values(); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat46.withHeader(strArray77); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat78.withIgnoreSurroundingSpaces(true); java.lang.String str81 = cSVFormat80.toString(); java.lang.String str82 = cSVFormat80.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat80.withCommentStart('#'); boolean boolean85 = cSVFormat84.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat89 = cSVFormat87.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser90 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat87); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList91 = cSVParser90.getRecords(); long long92 = cSVParser90.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList93 = cSVParser90.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList94 = cSVParser25.getRecords(cSVRecordList93); boolean boolean95 = cSVParser25.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str81, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!"); org.junit.Assert.assertNotNull(cSVFormat84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertNotNull(cSVFormat87); org.junit.Assert.assertNotNull(cSVFormat89); org.junit.Assert.assertNotNull(cSVParser90); org.junit.Assert.assertNotNull(cSVRecordList91); org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L); org.junit.Assert.assertNotNull(cSVRecordList93); org.junit.Assert.assertNotNull(cSVRecordList94); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false); }
public void test0910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0910"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor63 = cSVParser62.iterator(); boolean boolean64 = cSVParser62.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser62.getRecords(cSVRecordList65); boolean boolean67 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordItor63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNull(cSVRecordList66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); }
public void test0911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0911"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); boolean boolean64 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); boolean boolean66 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test0912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0912"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); cSVParser39.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap41 = cSVParser39.getHeaderMap(); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(strMap41); }
public void test0913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0913"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator(""); boolean boolean21 = cSVFormat20.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.Quote quote24 = cSVFormat23.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNull(quote24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0914"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat18.withEscape((java.lang.Character) ' '); org.apache.commons.csv.Quote quote56 = null; org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat18.withQuotePolicy(quote56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat18.withEscape('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0915"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isNullHandling(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null; org.apache.commons.csv.Lexer lexer18 = new org.apache.commons.csv.Lexer(cSVFormat14, extendedBufferedReader17); boolean boolean19 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); boolean boolean22 = cSVFormat21.isNullHandling(); boolean boolean23 = cSVFormat21.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test0916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0916"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); boolean boolean34 = cSVFormat33.getIgnoreSurroundingSpaces(); boolean boolean35 = cSVFormat33.isEscaping(); java.lang.String[] strArray36 = cSVFormat33.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat15.withHeader(strArray36); org.apache.commons.csv.Quote quote40 = null; java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat51 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote40, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray49, true); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat53.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withEscape((java.lang.Character) '#'); java.lang.String[] strArray60 = cSVFormat59.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat15.withHeader(strArray60); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat15.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(strArray60); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0917"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader22); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0918"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withDelimiter('#'); boolean boolean23 = cSVFormat19.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0919"); java.lang.String[] strArray0 = null; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "", (-1L)); java.lang.String[] strArray5 = cSVRecord4.values(); java.lang.String[] strArray6 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null; org.apache.commons.csv.CSVRecord cSVRecord10 = new org.apache.commons.csv.CSVRecord(strArray6, strMap7, "", (long) 10); boolean boolean12 = cSVRecord10.isSet("hi!"); int int13 = cSVRecord10.size(); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord10.spliterator(); boolean boolean15 = cSVRecord10.isConsistent(); java.lang.String str16 = cSVRecord10.toString(); long long17 = cSVRecord10.getRecordNumber(); java.lang.String str18 = cSVRecord10.toString(); java.lang.String[] strArray19 = cSVRecord10.values(); org.apache.commons.csv.Quote quote23 = null; java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote23, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withCommentStart('a'); boolean boolean39 = cSVFormat38.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote42 = null; org.apache.commons.csv.Quote quote51 = null; java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote51, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray60, true); org.apache.commons.csv.CSVFormat cSVFormat64 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote42, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray60, true); java.util.Map<java.lang.String, java.lang.Integer> strMap65 = null; org.apache.commons.csv.CSVRecord cSVRecord68 = new org.apache.commons.csv.CSVRecord(strArray60, strMap65, "", (long) ' '); java.lang.String[] strArray69 = cSVRecord68.values(); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat38.withHeader(strArray69); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat70.withIgnoreSurroundingSpaces(true); java.lang.String str73 = cSVFormat72.toString(); java.lang.String str74 = cSVFormat72.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat72.withCommentStart('#'); boolean boolean77 = cSVFormat76.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat76.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat81 = cSVFormat79.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat79); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList83 = cSVParser82.getRecords(); long long84 = cSVParser82.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator85 = cSVParser82.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap86 = cSVParser82.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord89 = new org.apache.commons.csv.CSVRecord(strArray19, strMap86, "Delimiter=< > Escape=<4> QuoteChar=<a> CommentStart=< > NullString=<> RecordSeparator=<> SkipHeaderRecord:true", (long) (byte) 0); org.apache.commons.csv.CSVRecord cSVRecord92 = new org.apache.commons.csv.CSVRecord(strArray5, strMap86, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=< > SkipHeaderRecord:true Header:[, hi!]", (long) 1); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]"); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]"); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(strArray60); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertNotNull(cSVFormat72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str73, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!"); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertNotNull(cSVFormat81); org.junit.Assert.assertNotNull(cSVParser82); org.junit.Assert.assertNotNull(cSVRecordList83); org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator85); org.junit.Assert.assertNotNull(strMap86); }
public void test0920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0920"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null; org.apache.commons.csv.Lexer lexer17 = new org.apache.commons.csv.Lexer(cSVFormat15, extendedBufferedReader16); java.lang.String str18 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withRecordSeparator(' '); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat24.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0921"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); cSVParser62.close(); cSVParser62.close(); long long67 = cSVParser62.getRecordNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L); }
public void test0922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0922"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat59.withDelimiter('4'); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVFormat64); }
public void test0923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0923"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = null; java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser62.getRecords(cSVRecordList65); cSVParser62.close(); boolean boolean68 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator69 = cSVParser62.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecordList66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(cSVRecordSpliterator69); }
public void test0924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0924"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); boolean boolean65 = cSVParser62.isClosed(); cSVParser62.close(); long long67 = cSVParser62.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator68 = cSVParser62.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L); org.junit.Assert.assertNotNull(cSVRecordSpliterator68); }
public void test0925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0925"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat19.isCommentingEnabled(); java.lang.String[] strArray23 = cSVFormat19.getHeader(); org.apache.commons.csv.Quote quote27 = null; java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote27, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray36, true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart('a'); boolean boolean43 = cSVFormat42.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote46 = null; org.apache.commons.csv.Quote quote55 = null; java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat66 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote55, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray64, true); org.apache.commons.csv.CSVFormat cSVFormat68 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote46, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray64, true); java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray64, strMap69, "", (long) ' '); java.lang.String[] strArray73 = cSVRecord72.values(); org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat42.withHeader(strArray73); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat74.withIgnoreSurroundingSpaces(true); java.lang.String str77 = cSVFormat76.toString(); java.lang.String str78 = cSVFormat76.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat76.withCommentStart('#'); boolean boolean81 = cSVFormat80.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat83 = cSVFormat80.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat85 = cSVFormat83.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser86 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat83); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList87 = cSVParser86.getRecords(); long long88 = cSVParser86.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator89 = cSVParser86.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap90 = cSVParser86.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord93 = new org.apache.commons.csv.CSVRecord(strArray23, strMap90, "Delimiter=<#> Escape=<a> QuoteChar=< > CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", (long) 1); java.lang.String[] strArray94 = cSVRecord93.values(); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertNotNull(cSVFormat74); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str77, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!"); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(cSVFormat83); org.junit.Assert.assertNotNull(cSVFormat85); org.junit.Assert.assertNotNull(cSVParser86); org.junit.Assert.assertNotNull(cSVRecordList87); org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator89); org.junit.Assert.assertNotNull(strMap90); org.junit.Assert.assertNotNull(strArray94); }
public void test0926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0926"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isEscaping(); java.lang.String[] strArray18 = cSVFormat15.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator(""); boolean boolean23 = cSVFormat20.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withCommentStart((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0927"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.Quote quote13 = null; java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat24 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote13, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray22, true); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withEscape((java.lang.Character) '#'); java.lang.String[] strArray33 = cSVFormat32.getHeader(); java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", 0L); org.apache.commons.csv.CSVFormat cSVFormat39 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '#', quote4, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", "", strArray33, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(strArray33); }
public void test0928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0928"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); java.lang.String[] strArray54 = cSVFormat18.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat18.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat18.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat18.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withCommentStart(' '); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat62); cSVParser63.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord65 = cSVParser63.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); }
public void test0929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0929"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); char char16 = cSVFormat13.getDelimiter(); boolean boolean17 = cSVFormat13.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat13.withQuotePolicy(quote22); boolean boolean24 = cSVFormat13.isCommentingEnabled(); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat13.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); }
public void test0930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0930"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); long long26 = cSVParser25.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap27 = cSVParser25.getHeaderMap(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L); org.junit.Assert.assertNotNull(strMap27); }
public void test0931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0931"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyLines(true); char char19 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withRecordSeparator(' '); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat14.withDelimiter(' '); org.apache.commons.csv.Quote quote28 = cSVFormat14.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNull(quote28); }
public void test0932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0932"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord65 = cSVParser62.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap66 = cSVParser62.getHeaderMap(); boolean boolean67 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecord65); org.junit.Assert.assertNotNull(strMap66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); }
public void test0933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0933"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser62.spliterator(); cSVParser62.close(); long long67 = cSVParser62.getRecordNumber(); cSVParser62.close(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L); }
public void test0934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0934"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); long long64 = cSVParser62.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap65 = cSVParser62.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap66 = cSVParser62.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord67 = cSVParser62.nextRecord(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(strMap65); org.junit.Assert.assertNotNull(strMap66); org.junit.Assert.assertNull(cSVRecord67); }
public void test0935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0935"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.Map<java.lang.String, java.lang.Integer> strMap63 = cSVParser62.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); boolean boolean65 = cSVParser62.isClosed(); boolean boolean66 = cSVParser62.isClosed(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(strMap63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test0936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0936"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); org.apache.commons.csv.CSVRecord cSVRecord63 = cSVParser62.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor64 = cSVParser62.iterator(); long long65 = cSVParser62.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap66 = cSVParser62.getHeaderMap(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNull(cSVRecord63); org.junit.Assert.assertNotNull(cSVRecordItor64); org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L); org.junit.Assert.assertNotNull(strMap66); }
public void test0937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0937"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "", (long) 10); boolean boolean5 = cSVRecord4.isConsistent(); java.lang.String[] strArray6 = cSVRecord4.values(); long long7 = cSVRecord4.getRecordNumber(); java.util.Iterator<java.lang.String> strItor8 = cSVRecord4.iterator(); java.lang.String[] strArray9 = cSVRecord4.values(); org.apache.commons.csv.Quote quote13 = null; java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat24 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote13, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray22, true); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart('a'); boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote32 = null; org.apache.commons.csv.Quote quote41 = null; java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote41, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray50, true); org.apache.commons.csv.CSVFormat cSVFormat54 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote32, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray50, true); java.util.Map<java.lang.String, java.lang.Integer> strMap55 = null; org.apache.commons.csv.CSVRecord cSVRecord58 = new org.apache.commons.csv.CSVRecord(strArray50, strMap55, "", (long) ' '); java.lang.String[] strArray59 = cSVRecord58.values(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat28.withHeader(strArray59); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withIgnoreSurroundingSpaces(true); java.lang.String str63 = cSVFormat62.toString(); java.lang.String str64 = cSVFormat62.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat62.withCommentStart('#'); boolean boolean67 = cSVFormat66.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat69); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList73 = cSVParser72.getRecords(); long long74 = cSVParser72.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator75 = cSVParser72.spliterator(); cSVParser72.close(); long long77 = cSVParser72.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap78 = cSVParser72.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord81 = new org.apache.commons.csv.CSVRecord(strArray9, strMap78, "Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, hi!]", 1L); boolean boolean82 = cSVRecord81.isConsistent(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L); org.junit.Assert.assertNotNull(strItor8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str63, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!"); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVParser72); org.junit.Assert.assertNotNull(cSVRecordList73); org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator75); org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L); org.junit.Assert.assertNotNull(strMap78); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); }
public void test0938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0938"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuoteChar((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape((java.lang.Character) '#'); boolean boolean22 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[]", cSVFormat24); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser25.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); }
public void test0939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0939"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.Quote quote30 = null; java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote30, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray39, true); org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote21, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray39, true); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray39, strMap44, "", (long) ' '); java.lang.String[] strArray48 = cSVRecord47.values(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray48); org.apache.commons.csv.Quote quote52 = null; java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat63 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote52, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray61, true); boolean boolean64 = cSVFormat63.getIgnoreSurroundingSpaces(); boolean boolean65 = cSVFormat63.isEscaping(); java.lang.String[] strArray66 = cSVFormat63.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat49.withHeader(strArray66); boolean boolean68 = cSVFormat67.isQuoting(); java.io.Reader reader69 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser70 = cSVFormat67.parse(reader69); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); }
public void test0940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0940"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "", (long) 10); org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '#', true, true, "", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray9, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false); java.io.Reader reader18 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat15.parse(reader18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat17); }
public void test0941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0941"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); char char18 = cSVFormat15.getDelimiter(); boolean boolean19 = cSVFormat15.getSkipHeaderRecord(); java.lang.String str20 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.Quote quote21 = cSVFormat15.getQuotePolicy(); boolean boolean22 = cSVFormat15.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat15.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat15.withQuoteChar((java.lang.Character) 'a'); boolean boolean27 = cSVFormat15.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + 'a' + "'", char18 == 'a'); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!"); org.junit.Assert.assertNull(quote21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); }
public void test0942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0942"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); boolean boolean53 = cSVFormat18.isEscaping(); java.lang.String[] strArray54 = cSVFormat18.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat18.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat18.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat18.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withCommentStart(' '); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat62); org.apache.commons.csv.Quote quote66 = null; java.lang.String[] strArray73 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap74 = null; org.apache.commons.csv.CSVRecord cSVRecord77 = new org.apache.commons.csv.CSVRecord(strArray73, strMap74, "", (long) 10); boolean boolean79 = cSVRecord77.isSet("hi!"); int int80 = cSVRecord77.size(); java.util.Spliterator<java.lang.String> strSpliterator81 = cSVRecord77.spliterator(); boolean boolean82 = cSVRecord77.isConsistent(); java.util.Iterator<java.lang.String> strItor83 = cSVRecord77.iterator(); boolean boolean84 = cSVRecord77.isConsistent(); java.util.Spliterator<java.lang.String> strSpliterator85 = cSVRecord77.spliterator(); long long86 = cSVRecord77.getRecordNumber(); java.util.Spliterator<java.lang.String> strSpliterator87 = cSVRecord77.spliterator(); java.lang.String[] strArray88 = cSVRecord77.values(); org.apache.commons.csv.CSVFormat cSVFormat90 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '#', quote66, (java.lang.Character) '#', (java.lang.Character) ' ', false, false, "", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", strArray88, false); java.lang.String str91 = cSVFormat62.format((java.lang.Object[]) strArray88); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); org.junit.Assert.assertNotNull(strArray73); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0); org.junit.Assert.assertNotNull(strSpliterator81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true); org.junit.Assert.assertNotNull(strItor83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNotNull(strSpliterator85); org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L); org.junit.Assert.assertNotNull(strSpliterator87); org.junit.Assert.assertNotNull(strArray88); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!"); }
public void test0943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0943"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.Quote quote21 = null; java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat32 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote21, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray30, true); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote12, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray30, true); java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray30, strMap35, "", (long) ' '); org.apache.commons.csv.CSVFormat cSVFormat40 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) '#', true, true, "", "", strArray30, false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat40.withQuoteChar((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test0944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0944"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); java.util.Map<java.lang.String, java.lang.Integer> strMap40 = cSVParser39.getHeaderMap(); cSVParser39.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor42 = cSVParser39.iterator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord43 = cSVParser39.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(cSVRecordItor42); }
public void test0945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0945"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0946"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList63 = cSVParser62.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); cSVParser62.close(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNotNull(cSVRecordList63); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); }
public void test0947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0947"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withEscape((java.lang.Character) '#'); java.lang.String[] strArray32 = cSVFormat31.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) ' ', quote3, (java.lang.Character) '#', (java.lang.Character) ' ', true, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "[, hi!]", strArray32, true); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader35 = null; org.apache.commons.csv.Lexer lexer36 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader35); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray32); }
public void test0948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0948"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote17 = null; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuotePolicy(quote17); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withDelimiter('a'); boolean boolean23 = cSVFormat20.getIgnoreEmptyLines(); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat20.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); }
public void test0949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0949"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withIgnoreSurroundingSpaces(true); java.io.Reader reader30 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = cSVFormat29.parse(reader30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0950"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('#'); boolean boolean26 = cSVFormat23.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); java.lang.String[] strArray32 = cSVFormat30.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ' ', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', false, false, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]> SkipHeaderRecord:true Header:[, hi!]", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuoteChar('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null; org.apache.commons.csv.Lexer lexer38 = new org.apache.commons.csv.Lexer(cSVFormat34, extendedBufferedReader37); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat34); java.util.Map<java.lang.String, java.lang.Integer> strMap40 = cSVParser39.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor41 = cSVParser39.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap42 = cSVParser39.getHeaderMap(); long long43 = cSVParser39.getRecordNumber(); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(cSVRecordItor41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L); }
public void test0951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0951"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = null; java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser62.getRecords(cSVRecordList65); cSVParser62.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator68 = cSVParser62.spliterator(); long long69 = cSVParser62.getRecordNumber(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecordList66); org.junit.Assert.assertNotNull(cSVRecordSpliterator68); org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L); }
public void test0952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0952"); org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat23 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote12, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray21, true); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withRecordSeparator(' '); org.apache.commons.csv.Quote quote30 = null; org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat50 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote39, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray48, true); org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote30, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray48, true); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat25.withHeader(strArray48); org.apache.commons.csv.CSVFormat cSVFormat55 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) '#', (java.lang.Character) ' ', true, true, "Delimiter=<a> Escape=<#> QuoteChar=<a> CommentStart=<4> NullString=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]> RecordSeparator=<> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, hi!]", "44ahi!hi!", strArray48, false); org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat55); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVParser56); }
public void test0953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0953"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar('#'); char char19 = cSVFormat18.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + 'a' + "'", char19 == 'a'); }
public void test0954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0954"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "", (long) 10); boolean boolean24 = cSVRecord23.isConsistent(); java.lang.String[] strArray25 = cSVRecord23.values(); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote12, (java.lang.Character) '4', (java.lang.Character) 'a', true, true, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=< > SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", strArray25, false); org.apache.commons.csv.CSVFormat cSVFormat29 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]", "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]", strArray25, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray25); }
public void test0955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0955"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withEscape('#'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat14, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> SkipHeaderRecord:true Header:[, hi!]"); java.lang.String[] strArray24 = null; org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat14.withHeader(strArray24); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0956"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withIgnoreEmptyLines(true); java.lang.String str27 = cSVFormat26.toString(); boolean boolean28 = cSVFormat26.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withEscape((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat26.withCommentStart((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str27, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test0957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0957"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withEscape('4'); boolean boolean20 = cSVFormat17.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.Quote quote25 = cSVFormat17.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNull(quote25); }
public void test0958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0958"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); boolean boolean63 = cSVParser62.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser62.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord65 = cSVParser62.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser62.spliterator(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator64); org.junit.Assert.assertNull(cSVRecord65); org.junit.Assert.assertNotNull(cSVRecordSpliterator66); }
public void test0959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0959"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0960"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.Quote quote24 = null; org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withQuotePolicy(quote24); java.io.Reader reader26 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = cSVFormat23.parse(reader26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0961"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0962"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withEscape((java.lang.Character) 'a'); boolean boolean62 = cSVFormat59.isCommentingEnabled(); org.apache.commons.csv.Quote quote63 = null; org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat59.withQuotePolicy(quote63); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(cSVFormat64); }
public void test0963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0963"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); boolean boolean16 = cSVFormat15.getIgnoreSurroundingSpaces(); boolean boolean17 = cSVFormat15.isEscaping(); java.lang.String[] strArray18 = cSVFormat15.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('4'); boolean boolean21 = cSVFormat15.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat15.withRecordSeparator(" "); java.lang.String str24 = cSVFormat23.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); }
public void test0964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0964"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat52.withCommentStart('#'); boolean boolean57 = cSVFormat56.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat59); org.apache.commons.csv.CSVRecord cSVRecord63 = cSVParser62.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap64 = cSVParser62.getHeaderMap(); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertNull(cSVRecord63); org.junit.Assert.assertNotNull(strMap64); }
public void test0965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0965"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test0966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0966"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0967"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withEscape((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test0968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0968"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote33 = null; java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray45, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray45, strMap52, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote33, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray45, false); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withEscape((java.lang.Character) '#'); boolean boolean64 = cSVFormat30.equals((java.lang.Object) cSVFormat63); java.io.Reader reader65 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser66 = cSVFormat63.parse(reader65); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); }
public void test0969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0969"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0970"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote33 = null; java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray45, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray45, strMap52, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote33, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray45, false); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withEscape((java.lang.Character) '#'); boolean boolean64 = cSVFormat30.equals((java.lang.Object) cSVFormat63); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat66.withIgnoreEmptyLines(false); java.io.Reader reader69 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser70 = cSVFormat66.parse(reader69); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertNotNull(cSVFormat68); }
public void test0971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0971"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote33 = null; java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray45, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray45, strMap52, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote33, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray45, false); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withEscape((java.lang.Character) '#'); boolean boolean64 = cSVFormat30.equals((java.lang.Object) cSVFormat63); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat66.withIgnoreEmptyLines(false); java.io.Reader reader69 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser70 = cSVFormat68.parse(reader69); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertNotNull(cSVFormat68); }
public void test0972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0972"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test0973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0973"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0974"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean30 = cSVFormat27.getSkipHeaderRecord(); boolean boolean31 = cSVFormat27.getIgnoreSurroundingSpaces(); boolean boolean32 = cSVFormat27.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); }
public void test0975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0975"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.Quote quote30 = cSVFormat29.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNull(quote30); }
public void test0976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0976"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray15, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); }
public void test0977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0977"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); boolean boolean29 = cSVFormat26.getIgnoreSurroundingSpaces(); java.io.Reader reader30 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = cSVFormat26.parse(reader30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test0978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0978"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); java.lang.String str31 = cSVFormat28.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); }
public void test0979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0979"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean30 = cSVFormat27.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); }
public void test0980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0980"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withEscape((java.lang.Character) '#'); java.lang.String str34 = cSVFormat31.getRecordSeparator(); java.lang.String str35 = cSVFormat31.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[, , , , ]" + "'", str34, "[, , , , ]"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); }
public void test0981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0981"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat43); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); }
public void test0982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0982"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); boolean boolean29 = cSVFormat26.getSkipHeaderRecord(); java.io.Reader reader30 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = cSVFormat26.parse(reader30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test0983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0983"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withCommentStart((java.lang.Character) '4'); java.lang.String str33 = cSVFormat28.getNullString(); org.apache.commons.csv.Quote quote34 = cSVFormat28.getQuotePolicy(); org.apache.commons.csv.Quote quote37 = null; java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray49, strMap50, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray49, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap56 = null; org.apache.commons.csv.CSVRecord cSVRecord59 = new org.apache.commons.csv.CSVRecord(strArray49, strMap56, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat61 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote37, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray49, false); java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap68 = null; org.apache.commons.csv.CSVRecord cSVRecord71 = new org.apache.commons.csv.CSVRecord(strArray67, strMap68, "", (long) 0); boolean boolean73 = cSVRecord71.isSet(""); boolean boolean74 = cSVFormat61.equals((java.lang.Object) cSVRecord71); java.lang.String str75 = cSVFormat61.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat61.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat77.withEscape(' '); boolean boolean80 = cSVFormat79.isQuoting(); boolean boolean81 = cSVFormat28.equals((java.lang.Object) boolean80); java.io.Reader reader82 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser83 = cSVFormat28.parse(reader82); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(quote34); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, ""); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); }
public void test0984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0984"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test0985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0985"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withEscape((java.lang.Character) '4'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat28, extendedBufferedReader31); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test0986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0986"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.Quote quote32 = null; org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withQuotePolicy(quote32); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test0987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0987"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) ' ', (java.lang.Character) ' ', false, true, "hi!", "hi!", strArray15, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=<4> NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); }
public void test0988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0988"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); java.lang.Object obj32 = null; boolean boolean33 = cSVFormat31.equals(obj32); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); }
public void test0989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0989"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '4'); org.apache.commons.csv.Quote quote30 = null; org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withQuotePolicy(quote30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat27.withCommentStart('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test0990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0990"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withCommentStart((java.lang.Character) '4'); java.lang.String str33 = cSVFormat28.getNullString(); org.apache.commons.csv.Quote quote34 = cSVFormat28.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat28.withIgnoreSurroundingSpaces(false); java.io.Reader reader37 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = cSVFormat28.parse(reader37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(quote34); org.junit.Assert.assertNotNull(cSVFormat36); }
public void test0991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0991"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote35 = null; java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap48 = null; org.apache.commons.csv.CSVRecord cSVRecord51 = new org.apache.commons.csv.CSVRecord(strArray47, strMap48, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray47, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap54 = null; org.apache.commons.csv.CSVRecord cSVRecord57 = new org.apache.commons.csv.CSVRecord(strArray47, strMap54, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote35, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray47, false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withEscape((java.lang.Character) '#'); boolean boolean66 = cSVFormat32.equals((java.lang.Object) cSVFormat65); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat65.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat68.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat68); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertNotNull(cSVFormat72); }
public void test0992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0992"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); java.lang.String str42 = cSVFormat28.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat50); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); }
public void test0993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0993"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); java.lang.String[] strArray37 = cSVFormat36.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray37); }
public void test0994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0994"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); java.lang.String str42 = cSVFormat28.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test0995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0995"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withCommentStart((java.lang.Character) '4'); java.lang.String str33 = cSVFormat28.getNullString(); org.apache.commons.csv.Quote quote34 = cSVFormat28.getQuotePolicy(); java.lang.String str35 = cSVFormat28.getNullString(); boolean boolean36 = cSVFormat28.getIgnoreSurroundingSpaces(); boolean boolean37 = cSVFormat28.isCommentingEnabled(); java.io.Reader reader38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = cSVFormat28.parse(reader38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(quote34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test0996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0996"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat28.withQuoteChar((java.lang.Character) '4'); char char44 = cSVFormat28.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat28.withCommentStart((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + char44 + "' != '" + 'a' + "'", char44 == 'a'); org.junit.Assert.assertNotNull(cSVFormat46); }
public void test0997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0997"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test0998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0998"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart(' '); org.apache.commons.csv.Quote quote44 = null; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat27.withQuotePolicy(quote44); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test0999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0999"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test1000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test1000"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); java.lang.String str31 = cSVFormat28.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat28.withSkipHeaderRecord(false); java.lang.String[] strArray38 = cSVFormat28.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(strArray38); }
public void test1001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1001"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test1002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1002"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); java.lang.Object obj33 = null; boolean boolean34 = cSVFormat32.equals(obj33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test1003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1003"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat27.getDelimiter(); boolean boolean44 = cSVFormat27.getIgnoreEmptyLines(); java.lang.String str45 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat27.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse("", cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(cSVFormat47); }
public void test1004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1004"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); java.lang.String str40 = cSVFormat26.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); java.io.Reader reader49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat46.parse(reader49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test1005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1005"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote34 = null; java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap47 = null; org.apache.commons.csv.CSVRecord cSVRecord50 = new org.apache.commons.csv.CSVRecord(strArray46, strMap47, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray46, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap53 = null; org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray46, strMap53, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat58 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote34, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray46, false); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withEscape((java.lang.Character) '#'); boolean boolean65 = cSVFormat31.equals((java.lang.Object) cSVFormat64); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat67.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat67.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat71); }
public void test1006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1006"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); java.lang.String str30 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test1007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1007"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withIgnoreEmptyLines(false); java.io.Reader reader51 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = cSVFormat48.parse(reader51); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); }
public void test1008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1008"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test1009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1009"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withNullString("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1010"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); org.apache.commons.csv.Quote quote38 = null; java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray50, strMap51, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray50, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap57 = null; org.apache.commons.csv.CSVRecord cSVRecord60 = new org.apache.commons.csv.CSVRecord(strArray50, strMap57, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote38, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray50, false); java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray68, strMap69, "", (long) 0); boolean boolean74 = cSVRecord72.isSet(""); boolean boolean75 = cSVFormat62.equals((java.lang.Object) cSVRecord72); java.lang.String str76 = cSVFormat62.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat62.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat78.withEscape(' '); boolean boolean81 = cSVFormat80.isQuoting(); boolean boolean82 = cSVFormat29.equals((java.lang.Object) boolean81); org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat29.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat86 = cSVFormat84.withQuoteChar((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat86); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, ""); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(cSVFormat84); org.junit.Assert.assertNotNull(cSVFormat86); }
public void test1011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1011"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); java.lang.String[] strArray36 = cSVFormat35.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(strArray36); }
public void test1012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1012"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat37.withEscape((java.lang.Character) ' '); boolean boolean42 = cSVFormat37.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); }
public void test1013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1013"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withEscape(' '); boolean boolean33 = cSVFormat32.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); }
public void test1014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1014"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote34 = null; java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap47 = null; org.apache.commons.csv.CSVRecord cSVRecord50 = new org.apache.commons.csv.CSVRecord(strArray46, strMap47, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray46, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap53 = null; org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray46, strMap53, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat58 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote34, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray46, false); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withEscape((java.lang.Character) '#'); boolean boolean65 = cSVFormat31.equals((java.lang.Object) cSVFormat64); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat67.withIgnoreEmptyLines(false); boolean boolean70 = cSVFormat69.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser71 = org.apache.commons.csv.CSVParser.parse("[, , , , ]", cSVFormat69); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The header contains duplicate names: [, , , , ]"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); }
public void test1015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1015"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withCommentStart((java.lang.Character) '4'); java.lang.String str35 = cSVFormat30.getNullString(); org.apache.commons.csv.Quote quote36 = cSVFormat30.getQuotePolicy(); boolean boolean37 = cSVFormat30.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat30.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat41); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNull(quote36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); }
public void test1016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1016"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat26.withQuoteChar((java.lang.Character) '4'); char char42 = cSVFormat26.getDelimiter(); boolean boolean43 = cSVFormat26.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat26.withCommentStart(' '); java.io.Reader reader46 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = cSVFormat26.parse(reader46); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test1017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1017"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); boolean boolean36 = cSVFormat29.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat29.withRecordSeparator('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test1018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1018"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); char char42 = cSVFormat28.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); java.lang.String[] strArray47 = cSVFormat46.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat46); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test1019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1019"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); java.lang.Object obj32 = null; boolean boolean33 = cSVFormat31.equals(obj32); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat35.withEscape('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); }
public void test1020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1020"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean45 = cSVFormat44.isNullHandling(); boolean boolean46 = cSVFormat44.isNullHandling(); java.io.Reader reader47 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser48 = cSVFormat44.parse(reader47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); }
public void test1021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1021"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); boolean boolean44 = cSVFormat27.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test1022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1022"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); boolean boolean28 = cSVFormat27.getIgnoreEmptyLines(); boolean boolean29 = cSVFormat27.getSkipHeaderRecord(); boolean boolean30 = cSVFormat27.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); }
public void test1023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1023"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart('4'); boolean boolean43 = cSVFormat26.getIgnoreSurroundingSpaces(); java.lang.String str44 = cSVFormat26.getRecordSeparator(); boolean boolean45 = cSVFormat26.isQuoting(); java.io.Reader reader46 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = cSVFormat26.parse(reader46); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[, , , , ]" + "'", str44, "[, , , , ]"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); }
public void test1024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1024"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat27.getDelimiter(); java.lang.String[] strArray44 = null; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat27.withHeader(strArray44); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat27.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); }
public void test1025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1025"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); java.lang.String str42 = cSVFormat28.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat48); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); }
public void test1026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1026"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); boolean boolean28 = cSVFormat27.getIgnoreEmptyLines(); boolean boolean29 = cSVFormat27.getSkipHeaderRecord(); boolean boolean30 = cSVFormat27.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withQuoteChar((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test1027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1027"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat27.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat27.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat27.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser48 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); }
public void test1028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1028"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray15, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withRecordSeparator('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test1029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1029"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); java.lang.String str30 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); }
public void test1030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1030"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withQuoteChar('4'); java.io.Reader reader49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat42.parse(reader49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test1031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1031"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test1032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1032"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote34 = null; java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap47 = null; org.apache.commons.csv.CSVRecord cSVRecord50 = new org.apache.commons.csv.CSVRecord(strArray46, strMap47, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray46, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap53 = null; org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray46, strMap53, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat58 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote34, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray46, false); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withEscape((java.lang.Character) '#'); boolean boolean65 = cSVFormat31.equals((java.lang.Object) cSVFormat64); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat67.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat67.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser72 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat71); }
public void test1033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1033"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote37 = null; org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withQuotePolicy(quote37); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test1034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1034"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); java.lang.String str40 = cSVFormat26.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat26.getDelimiter(); java.io.Reader reader44 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = cSVFormat26.parse(reader44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); }
public void test1035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1035"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); char char42 = cSVFormat28.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withCommentStart('4'); boolean boolean45 = cSVFormat44.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat44.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test1036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1036"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean30 = cSVFormat27.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withIgnoreEmptyLines(false); java.lang.String str33 = cSVFormat27.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat27.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[, , , , ]" + "'", str33, "[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1037"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) ' ', (java.lang.Character) ' ', false, true, "hi!", "hi!", strArray15, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); }
public void test1038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1038"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) ' ', (java.lang.Character) ' ', false, true, "hi!", "hi!", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray44, strMap45, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray44, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray44, strMap51, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote32, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray44, false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withQuoteChar((java.lang.Character) '#'); boolean boolean61 = cSVFormat27.equals((java.lang.Object) cSVFormat60); char char62 = cSVFormat60.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The header contains duplicate names: [, , , , ]"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + char62 + "' != '" + 'a' + "'", char62 == 'a'); }
public void test1039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1039"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); boolean boolean30 = cSVFormat28.getSkipHeaderRecord(); boolean boolean31 = cSVFormat28.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); }
public void test1040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1040"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat28.withQuoteChar((java.lang.Character) '4'); char char44 = cSVFormat28.getDelimiter(); boolean boolean45 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat28.withCommentStart(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + char44 + "' != '" + 'a' + "'", char44 == 'a'); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(cSVFormat47); }
public void test1041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1041"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.Quote quote32 = null; org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withQuotePolicy(quote32); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test1042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1042"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat29.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); }
public void test1043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1043"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart('#'); boolean boolean34 = cSVFormat29.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); }
public void test1044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1044"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); boolean boolean36 = cSVFormat29.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat29.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat29.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=<4> NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat29.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); }
public void test1045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1045"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1046"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); java.lang.String[] strArray20 = cSVRecord19.values(); boolean boolean22 = cSVRecord19.isSet("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); int int23 = cSVRecord19.size(); java.lang.String[] strArray24 = cSVRecord19.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) 'a', (java.lang.Character) ' ', true, true, "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", strArray24, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5); org.junit.Assert.assertNotNull(strArray24); }
public void test1047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1047"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withEscape(' '); boolean boolean31 = cSVFormat30.isNullHandling(); org.apache.commons.csv.Quote quote32 = cSVFormat30.getQuotePolicy(); java.io.Reader reader33 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = cSVFormat30.parse(reader33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNull(quote32); }
public void test1048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1048"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withNullString("hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test1049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1049"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); char char41 = cSVFormat27.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + char41 + "' != '" + 'a' + "'", char41 == 'a'); org.junit.Assert.assertNotNull(cSVFormat43); }
public void test1050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1050"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean45 = cSVFormat42.getSkipHeaderRecord(); java.io.Reader reader46 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = cSVFormat42.parse(reader46); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); }
public void test1051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1051"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat27.getDelimiter(); boolean boolean44 = cSVFormat27.getIgnoreEmptyLines(); java.lang.String str45 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat27.withDelimiter('a'); org.apache.commons.csv.Quote quote48 = cSVFormat47.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNull(quote48); }
public void test1052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1052"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withRecordSeparator(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat42); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test1053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1053"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withRecordSeparator('#'); boolean boolean41 = cSVFormat38.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); }
public void test1054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1054"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); java.lang.Object obj32 = null; boolean boolean33 = cSVFormat31.equals(obj32); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); }
public void test1055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1055"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) ' ', (java.lang.Character) ' ', false, true, "hi!", "hi!", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test1056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1056"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); }
public void test1057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1057"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray15, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); char char30 = cSVFormat29.getDelimiter(); boolean boolean31 = cSVFormat29.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart('4'); boolean boolean34 = cSVFormat33.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + char30 + "' != '" + ' ' + "'", char30 == ' '); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); }
public void test1058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1058"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean30 = cSVFormat27.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withIgnoreEmptyLines(false); java.lang.String str33 = cSVFormat27.getRecordSeparator(); java.lang.String[] strArray34 = cSVFormat27.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean37 = cSVFormat27.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("[Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]]", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[, , , , ]" + "'", str33, "[, , , , ]"); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test1059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1059"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat27.getDelimiter(); java.lang.String[] strArray44 = null; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat27.withHeader(strArray44); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test1060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1060"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test1061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1061"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); boolean boolean36 = cSVFormat29.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test1062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1062"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.Quote quote34 = null; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuotePolicy(quote34); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1063"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withQuoteChar((java.lang.Character) '4'); java.io.Reader reader53 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser54 = cSVFormat52.parse(reader53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); }
public void test1064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1064"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) ' ', (java.lang.Character) ' ', false, true, "hi!", "hi!", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray44, strMap45, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray44, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray44, strMap51, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote32, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray44, false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withQuoteChar((java.lang.Character) '#'); boolean boolean61 = cSVFormat27.equals((java.lang.Object) cSVFormat60); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser62 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); }
public void test1065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1065"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat28.withQuoteChar((java.lang.Character) '4'); char char44 = cSVFormat28.getDelimiter(); boolean boolean45 = cSVFormat28.getIgnoreEmptyLines(); java.lang.String str46 = cSVFormat28.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat28.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + char44 + "' != '" + 'a' + "'", char44 == 'a'); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test1066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1066"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test1067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1067"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat28.withQuoteChar((java.lang.Character) '4'); boolean boolean44 = cSVFormat28.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); }
public void test1068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1068"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); char char42 = cSVFormat28.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean47 = cSVFormat44.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat44.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test1069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1069"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar((java.lang.Character) '#'); java.lang.String str32 = cSVFormat31.toString(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader33 = null; org.apache.commons.csv.Lexer lexer34 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withEscape('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=<a> CommentStart=< > NullString=<hi!> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The header contains duplicate names: [, , , , ]"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str32, "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat36); }
public void test1070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1070"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=< > QuoteChar=<a> CommentStart=< > NullString=<hi!> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test1071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1071"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withEscape((java.lang.Character) '#'); java.lang.String str34 = cSVFormat31.getRecordSeparator(); java.lang.String str35 = cSVFormat31.getNullString(); boolean boolean36 = cSVFormat31.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[, , , , ]" + "'", str34, "[, , , , ]"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test1072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1072"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); java.lang.Object obj32 = null; boolean boolean33 = cSVFormat31.equals(obj32); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '#'); boolean boolean36 = cSVFormat31.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote37 = null; org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withQuotePolicy(quote37); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test1073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1073"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withEscape(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1074"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote33 = null; java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray45, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray45, strMap52, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote33, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray45, false); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withEscape((java.lang.Character) '#'); boolean boolean64 = cSVFormat30.equals((java.lang.Object) cSVFormat63); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withCommentStart('4'); boolean boolean67 = cSVFormat66.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withEscape((java.lang.Character) '4'); java.io.Reader reader70 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser71 = cSVFormat66.parse(reader70); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(cSVFormat69); }
public void test1075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1075"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray15, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withRecordSeparator('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test1076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1076"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); boolean boolean36 = cSVFormat29.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat29.withRecordSeparator('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=< > QuoteChar=<a> CommentStart=< > NullString=<hi!> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test1077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1077"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.Quote quote13 = null; java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap26 = null; org.apache.commons.csv.CSVRecord cSVRecord29 = new org.apache.commons.csv.CSVRecord(strArray25, strMap26, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray25, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap32 = null; org.apache.commons.csv.CSVRecord cSVRecord35 = new org.apache.commons.csv.CSVRecord(strArray25, strMap32, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat37 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote13, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray25, true); org.apache.commons.csv.CSVFormat cSVFormat39 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "hi!", strArray25, false); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat41.withQuoteChar('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test1078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1078"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat26.withQuoteChar((java.lang.Character) '4'); char char42 = cSVFormat26.getDelimiter(); boolean boolean43 = cSVFormat26.getIgnoreEmptyLines(); java.lang.String str44 = cSVFormat26.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat26.withDelimiter('a'); java.lang.String[] strArray47 = cSVFormat46.getHeader(); java.io.Reader reader48 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = cSVFormat46.parse(reader48); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(strArray47); }
public void test1079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1079"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withIgnoreSurroundingSpaces(true); java.io.Reader reader35 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = cSVFormat34.parse(reader35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test1080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1080"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); char char41 = cSVFormat27.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withIgnoreSurroundingSpaces(false); boolean boolean46 = cSVFormat45.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + char41 + "' != '" + 'a' + "'", char41 == 'a'); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); }
public void test1081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1081"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat27.withQuoteChar((java.lang.Character) '4'); char char43 = cSVFormat27.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat27.withQuoteChar('a'); char char46 = cSVFormat27.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("#", cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + char43 + "' != '" + 'a' + "'", char43 == 'a'); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + char46 + "' != '" + 'a' + "'", char46 == 'a'); }
public void test1082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1082"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote37 = null; org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withQuotePolicy(quote37); org.apache.commons.csv.Quote quote39 = null; org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withQuotePolicy(quote39); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test1083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1083"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray15, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withDelimiter(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]", cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test1084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1084"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); java.lang.Object obj32 = null; boolean boolean33 = cSVFormat31.equals(obj32); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); }
public void test1085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1085"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.Quote quote12 = null; java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray24, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap31 = null; org.apache.commons.csv.CSVRecord cSVRecord34 = new org.apache.commons.csv.CSVRecord(strArray24, strMap31, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat36 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote12, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray24, true); org.apache.commons.csv.CSVFormat cSVFormat38 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "hi!", strArray24, false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withCommentStart('#'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); }
public void test1086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1086"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); boolean boolean31 = cSVFormat28.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); }
public void test1087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1087"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); char char40 = cSVFormat26.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat26.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat26.withQuoteChar((java.lang.Character) '#'); java.io.Reader reader45 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = cSVFormat44.parse(reader45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + char40 + "' != '" + 'a' + "'", char40 == 'a'); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test1088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1088"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); java.lang.Object obj32 = null; boolean boolean33 = cSVFormat31.equals(obj32); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat35.withEscape('4'); java.lang.String str40 = cSVFormat39.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]" + "'", str40, "Delimiter=<a> Escape=<4> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]"); }
public void test1089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1089"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat47.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.Quote quote50 = null; org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withQuotePolicy(quote50); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same ('#')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); }
public void test1090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1090"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withQuoteChar((java.lang.Character) '#'); java.io.Reader reader31 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = cSVFormat28.parse(reader31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test1091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1091"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withEscape(' '); boolean boolean46 = cSVFormat45.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withQuoteChar((java.lang.Character) 'a'); boolean boolean49 = cSVFormat45.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=<4> NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test1092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1092"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat47.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.Quote quote50 = null; org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withQuotePolicy(quote50); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); }
public void test1093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1093"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); java.lang.String str36 = cSVFormat29.getNullString(); boolean boolean37 = cSVFormat29.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test1094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1094"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote34 = null; java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap47 = null; org.apache.commons.csv.CSVRecord cSVRecord50 = new org.apache.commons.csv.CSVRecord(strArray46, strMap47, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray46, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap53 = null; org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray46, strMap53, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat58 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote34, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray46, false); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withEscape((java.lang.Character) '#'); boolean boolean65 = cSVFormat31.equals((java.lang.Object) cSVFormat64); boolean boolean66 = cSVFormat31.isNullHandling(); boolean boolean67 = cSVFormat31.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser68 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); }
public void test1095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1095"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar((java.lang.Character) '#'); java.lang.String str32 = cSVFormat31.toString(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader33 = null; org.apache.commons.csv.Lexer lexer34 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withQuoteChar(' '); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str32, "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test1096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1096"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart(' '); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat27.withEscape(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test1097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1097"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote38 = null; java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray50, strMap51, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray50, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap57 = null; org.apache.commons.csv.CSVRecord cSVRecord60 = new org.apache.commons.csv.CSVRecord(strArray50, strMap57, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat62 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote38, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray50, false); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withIgnoreEmptyLines(true); java.lang.String str65 = cSVFormat62.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat62.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat62.withIgnoreEmptyLines(true); java.lang.Object obj70 = null; boolean boolean71 = cSVFormat69.equals(obj70); boolean boolean72 = cSVFormat29.equals((java.lang.Object) cSVFormat69); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); }
public void test1098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1098"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); boolean boolean36 = cSVFormat29.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat29.withRecordSeparator('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test1099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1099"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withEscape((java.lang.Character) '4'); boolean boolean36 = cSVFormat31.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test1100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1100"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); boolean boolean30 = cSVFormat29.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("[, , , , ]", cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); }
public void test1101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1101"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1102"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withEscape(' '); boolean boolean32 = cSVFormat31.isNullHandling(); java.lang.String str33 = cSVFormat31.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); }
public void test1103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1103"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat26.withQuoteChar((java.lang.Character) '4'); char char42 = cSVFormat26.getDelimiter(); boolean boolean43 = cSVFormat26.getIgnoreEmptyLines(); java.lang.String str44 = cSVFormat26.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat26.withDelimiter('a'); java.lang.String str47 = cSVFormat26.getRecordSeparator(); boolean boolean48 = cSVFormat26.isCommentingEnabled(); java.io.Reader reader49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat26.parse(reader49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[, , , , ]" + "'", str47, "[, , , , ]"); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); }
public void test1104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1104"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '4'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat29, "Delimiter=< > Escape=<a> QuoteChar=<a> CommentStart=<#> NullString=<Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]> RecordSeparator=<[, , , , ]> SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("[Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]]", cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test1105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1105"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withDelimiter('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=<4> NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); }
public void test1106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1106"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat38.withEscape((java.lang.Character) ' '); boolean boolean43 = cSVFormat38.getIgnoreSurroundingSpaces(); char char44 = cSVFormat38.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertTrue("'" + char44 + "' != '" + 'a' + "'", char44 == 'a'); }
public void test1107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1107"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.Quote quote34 = null; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuotePolicy(quote34); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); }
public void test1108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1108"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withIgnoreEmptyLines(false); boolean boolean36 = cSVFormat29.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test1109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1109"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); }
public void test1110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1110"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) 0); boolean boolean40 = cSVRecord38.isSet(""); boolean boolean41 = cSVFormat28.equals((java.lang.Object) cSVRecord38); char char42 = cSVFormat28.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat28.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean47 = cSVFormat46.isNullHandling(); boolean boolean48 = cSVFormat46.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat46.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat50); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + char42 + "' != '" + 'a' + "'", char42 == 'a'); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(cSVFormat50); }
public void test1111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1111"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat29.withIgnoreSurroundingSpaces(false); boolean boolean38 = cSVFormat29.isQuoting(); java.lang.String str39 = cSVFormat29.toString(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat29.withQuotePolicy(quote40); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat41); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str39, "Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat41); }
public void test1112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1112"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withIgnoreSurroundingSpaces(false); java.lang.String[] strArray32 = cSVFormat31.getHeader(); boolean boolean33 = cSVFormat31.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); }
public void test1113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1113"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "", (long) 0); boolean boolean38 = cSVRecord36.isSet(""); boolean boolean39 = cSVFormat26.equals((java.lang.Object) cSVRecord36); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat26.withQuoteChar((java.lang.Character) '4'); java.lang.String str42 = cSVFormat41.toString(); org.apache.commons.csv.Quote quote45 = null; java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap58 = null; org.apache.commons.csv.CSVRecord cSVRecord61 = new org.apache.commons.csv.CSVRecord(strArray57, strMap58, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray57, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap64 = null; org.apache.commons.csv.CSVRecord cSVRecord67 = new org.apache.commons.csv.CSVRecord(strArray57, strMap64, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat69 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote45, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray57, false); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat69.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat71.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat71.withCommentStart((java.lang.Character) '4'); java.lang.String str76 = cSVFormat71.getNullString(); org.apache.commons.csv.Quote quote77 = cSVFormat71.getQuotePolicy(); java.lang.String str78 = cSVFormat71.getNullString(); java.lang.String str79 = cSVFormat71.getNullString(); boolean boolean80 = cSVFormat41.equals((java.lang.Object) str79); org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormat41.withQuoteChar((java.lang.Character) '#'); java.io.Reader reader83 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser84 = cSVFormat82.parse(reader83); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str42, "Delimiter=<a> Escape=<#> QuoteChar=<4> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, ""); org.junit.Assert.assertNull(quote77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertNotNull(cSVFormat82); }
public void test1114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1114"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); boolean boolean31 = cSVFormat28.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withEscape((java.lang.Character) '#'); org.apache.commons.csv.Quote quote36 = null; java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap49 = null; org.apache.commons.csv.CSVRecord cSVRecord52 = new org.apache.commons.csv.CSVRecord(strArray48, strMap49, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray48, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap55 = null; org.apache.commons.csv.CSVRecord cSVRecord58 = new org.apache.commons.csv.CSVRecord(strArray48, strMap55, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat60 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote36, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray48, false); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withIgnoreEmptyLines(true); boolean boolean63 = cSVFormat60.getSkipHeaderRecord(); boolean boolean64 = cSVFormat60.getIgnoreSurroundingSpaces(); boolean boolean65 = cSVFormat60.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withIgnoreEmptyLines(false); java.lang.String[] strArray68 = cSVFormat60.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat28.withHeader(strArray68); boolean boolean70 = cSVFormat28.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser71 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); }
public void test1115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1115"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat37.withEscape((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withQuoteChar(' '); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat43); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test1116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1116"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote35 = null; java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap48 = null; org.apache.commons.csv.CSVRecord cSVRecord51 = new org.apache.commons.csv.CSVRecord(strArray47, strMap48, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray47, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap54 = null; org.apache.commons.csv.CSVRecord cSVRecord57 = new org.apache.commons.csv.CSVRecord(strArray47, strMap54, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote35, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray47, false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withEscape((java.lang.Character) '#'); boolean boolean66 = cSVFormat32.equals((java.lang.Object) cSVFormat65); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat65.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat68.withIgnoreEmptyLines(false); boolean boolean71 = cSVFormat70.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat70); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); }
public void test1117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1117"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat47.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat47.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); }
public void test1118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1118"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withEscape((java.lang.Character) '4'); java.io.Reader reader29 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = cSVFormat28.parse(reader29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test1119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1119"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote3, (java.lang.Character) ' ', (java.lang.Character) ' ', false, true, "hi!", "hi!", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray44, strMap45, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray44, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray44, strMap51, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote32, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray44, false); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withQuoteChar((java.lang.Character) '#'); boolean boolean61 = cSVFormat27.equals((java.lang.Object) cSVFormat60); char char62 = cSVFormat60.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat60); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + char62 + "' != '" + 'a' + "'", char62 == 'a'); }
public void test1120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1120"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withEscape((java.lang.Character) '#'); java.lang.String str34 = cSVFormat31.getRecordSeparator(); java.lang.String str35 = cSVFormat31.getNullString(); boolean boolean36 = cSVFormat31.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser37 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[, , , , ]" + "'", str34, "[, , , , ]"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test1121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1121"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withQuoteChar((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); java.io.Reader reader33 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = cSVFormat32.parse(reader33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test1122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1122"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<a> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1123"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withNullString("hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<Delimiter=<a> Escape=< > QuoteChar=<a> CommentStart=< > NullString=<hi!> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]", cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test1124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1124"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withCommentStart((java.lang.Character) '4'); java.lang.String str33 = cSVFormat28.getNullString(); org.apache.commons.csv.Quote quote34 = cSVFormat28.getQuotePolicy(); boolean boolean35 = cSVFormat28.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat28.withEscape('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader38 = null; org.apache.commons.csv.Lexer lexer39 = new org.apache.commons.csv.Lexer(cSVFormat37, extendedBufferedReader38); java.lang.String str40 = cSVFormat37.toString(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat37.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withCommentStart((java.lang.Character) ' '); java.io.Reader reader45 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = cSVFormat42.parse(reader45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNull(quote34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Delimiter=<a> Escape=<a> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str40, "Delimiter=<a> Escape=<a> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test1125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1125"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); boolean boolean44 = cSVFormat27.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test1126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1126"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); boolean boolean31 = cSVFormat28.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withIgnoreEmptyLines(false); java.lang.String str34 = cSVFormat28.getRecordSeparator(); boolean boolean36 = cSVFormat28.equals((java.lang.Object) "hi!"); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat28.withRecordSeparator("[, , , , ]"); boolean boolean39 = cSVFormat28.getSkipHeaderRecord(); boolean boolean40 = cSVFormat28.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[, , , , ]" + "'", str34, "[, , , , ]"); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); }
public void test1127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1127"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar((java.lang.Character) '#'); java.lang.String str32 = cSVFormat31.toString(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader33 = null; org.apache.commons.csv.Lexer lexer34 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withQuoteChar(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str32, "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test1128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1128"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) 'a', quote3, (java.lang.Character) '4', (java.lang.Character) ' ', false, false, "", "", strArray15, true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean30 = cSVFormat29.getIgnoreEmptyLines(); char char31 = cSVFormat29.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withEscape((java.lang.Character) '4'); org.apache.commons.csv.Quote quote36 = null; org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat29.withQuotePolicy(quote36); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + char31 + "' != '" + ' ' + "'", char31 == ' '); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); }
public void test1129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1129"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); java.lang.String str41 = cSVFormat27.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat47.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat47.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse("", cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same ('#')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); }
public void test1130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1130"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withEscape((java.lang.Character) '#'); java.lang.String str33 = cSVFormat30.getRecordSeparator(); java.lang.String str34 = cSVFormat30.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withCommentStart((java.lang.Character) '4'); java.io.Reader reader39 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = cSVFormat38.parse(reader39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[, , , , ]" + "'", str33, "[, , , , ]"); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test1131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1131"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); boolean boolean30 = cSVFormat27.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test1132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1132"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote39 = null; java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray51, strMap52, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray51, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap58 = null; org.apache.commons.csv.CSVRecord cSVRecord61 = new org.apache.commons.csv.CSVRecord(strArray51, strMap58, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat63 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote39, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray51, false); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withIgnoreEmptyLines(true); java.lang.String str66 = cSVFormat63.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat63.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat63.withIgnoreEmptyLines(true); java.lang.Object obj71 = null; boolean boolean72 = cSVFormat70.equals(obj71); boolean boolean73 = cSVFormat30.equals((java.lang.Object) cSVFormat70); char char74 = cSVFormat30.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertTrue("'" + char74 + "' != '" + 'a' + "'", char74 == 'a'); }
public void test1133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1133"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreEmptyLines(true); boolean boolean31 = cSVFormat28.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat28.withNullString("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test1134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1134"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean35 = cSVFormat30.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat30.withRecordSeparator('#'); java.io.Reader reader38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = cSVFormat37.parse(reader38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); }
public void test1135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1135"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withCommentStart((java.lang.Character) '4'); java.lang.String str34 = cSVFormat29.getNullString(); org.apache.commons.csv.Quote quote35 = cSVFormat29.getQuotePolicy(); boolean boolean36 = cSVFormat29.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat29.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat29.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=<4> NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat29.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNull(quote35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test1136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1136"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); char char41 = cSVFormat27.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat47.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + char41 + "' != '" + 'a' + "'", char41 == 'a'); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat51); }
public void test1137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1137"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar((java.lang.Character) '#'); java.lang.String str32 = cSVFormat31.toString(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader33 = null; org.apache.commons.csv.Lexer lexer34 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat31.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat31.withQuoteChar(' '); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<#> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]", cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]" + "'", str32, "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); }
public void test1138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1138"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray16, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray16, strMap23, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray16, false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withNullString(""); org.apache.commons.csv.Quote quote33 = null; org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withQuotePolicy(quote33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat30.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat36.withQuoteChar(' '); boolean boolean41 = cSVFormat40.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); }
public void test1139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1139"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); boolean boolean28 = cSVFormat27.getIgnoreEmptyLines(); boolean boolean29 = cSVFormat27.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test1140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1140"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "", (long) 0); boolean boolean39 = cSVRecord37.isSet(""); boolean boolean40 = cSVFormat27.equals((java.lang.Object) cSVRecord37); char char41 = cSVFormat27.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); java.lang.String[] strArray46 = cSVFormat45.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser51 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat48); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + char41 + "' != '" + 'a' + "'", char41 == 'a'); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); }
public void test1141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1141"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray14 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray14, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray14, strMap21, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat26 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote2, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray14, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.Quote quote33 = null; java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray45, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray45, strMap52, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote33, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray45, false); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withEscape((java.lang.Character) '#'); boolean boolean64 = cSVFormat30.equals((java.lang.Object) cSVFormat63); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat63.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat66.withRecordSeparator("Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean69 = cSVFormat66.isCommentingEnabled(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat66, "Delimiter=<a> Escape=<#> QuoteChar=<#> CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[, , , , ]"); boolean boolean72 = cSVFormat66.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat74 = cSVFormat66.withDelimiter(' '); java.io.Reader reader75 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser76 = cSVFormat66.parse(reader75); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertNotNull(cSVFormat74); }
public void test1142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1142"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) 0); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray15, "[, , , , ]"); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray15, strMap22, "", (long) (byte) 1); org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) ' ', quote3, (java.lang.Character) ' ', (java.lang.Character) '#', true, false, "[, , , , ]", "", strArray15, false); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat31.withQuoteChar(' '); org.apache.commons.csv.Quote quote38 = null; org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withQuotePolicy(quote38); boolean boolean40 = cSVFormat39.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=< > CommentStart=< > NullString=<> RecordSeparator=<[, , , , ]> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, , , , ]", cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same (' ')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); }
public void test0001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0001"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); }
public void test0002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0002"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat0.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test0003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0003"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withCommentStart((java.lang.Character) '#'); char char6 = cSVFormat3.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'a' + "'", char6 == 'a'); }
public void test0004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0004"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); }
public void test0005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0005"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withCommentStart((java.lang.Character) '\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test0006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0006"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat10, "10"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0007"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.Quote quote5 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuotePolicy(quote5); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + quote5 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote5.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0008"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreEmptyLines(true); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat13.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote8.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0009"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0010"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("10a", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0011"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0012"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test0013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0013"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentStart((java.lang.Character) '#'); java.io.Reader reader4 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat3.parse(reader4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); }
public void test0014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0014"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); org.apache.commons.csv.Quote quote11 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray18 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote11, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray18, false); // The following exception was thrown during execution in test generation try { java.lang.String str21 = cSVRecord8.get((java.lang.Enum<org.apache.commons.csv.Quote>) quote11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + quote11 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote11.equals(org.apache.commons.csv.Quote.NONE)); }
public void test0015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0015"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withRecordSeparator('\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0016"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString("\205"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0017"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); boolean boolean8 = cSVFormat7.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0018"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0019"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); boolean boolean7 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean9 = cSVFormat8.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); boolean boolean18 = cSVFormat6.equals((java.lang.Object) cSVFormat17); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0020"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat9, "10"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuoteChar((java.lang.Character) 'a'); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat9.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0021"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); java.lang.String str9 = cSVFormat6.toString(); char char10 = cSVFormat6.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str9, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\t' + "'", char10 == '\t'); }
public void test0022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0022"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('\\'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null; org.apache.commons.csv.Lexer lexer14 = new org.apache.commons.csv.Lexer(cSVFormat10, extendedBufferedReader13); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0023"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); java.lang.String[] strArray8 = cSVFormat2.getHeader(); org.apache.commons.csv.Quote quote11 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray18 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote11, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray18, false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat2.withQuotePolicy(quote11); java.lang.String[] strArray23 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap28 = null; org.apache.commons.csv.CSVRecord cSVRecord31 = new org.apache.commons.csv.CSVRecord(strArray23, strMap28, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", (long) (byte) 1); java.lang.String str32 = cSVFormat2.format((java.lang.Object[]) strArray23); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertTrue("'" + quote11 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote11.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\205" + "'", str32, "\205"); }
public void test0024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0024"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart((java.lang.Character) '\\'); boolean boolean11 = cSVFormat8.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0025"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); boolean boolean10 = cSVFormat9.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('#'); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote8.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0026"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0027"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0028"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0029"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null; org.apache.commons.csv.Lexer lexer4 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader3); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null; org.apache.commons.csv.Lexer lexer6 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader5); java.lang.String str7 = cSVFormat2.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test0030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0030"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean4 = cSVFormat3.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString("[\205]"); boolean boolean13 = cSVFormat12.isQuoting(); org.apache.commons.csv.Quote quote14 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat12.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat12); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + quote14 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote14.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); }
public void test0031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0031"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); boolean boolean11 = cSVFormat2.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean13 = cSVFormat12.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat12.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withCommentStart('a'); boolean boolean22 = cSVFormat19.getIgnoreSurroundingSpaces(); java.lang.String[] strArray24 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap29 = null; org.apache.commons.csv.CSVRecord cSVRecord32 = new org.apache.commons.csv.CSVRecord(strArray24, strMap29, "", (long) '\\'); java.lang.String str33 = cSVFormat19.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat2.withHeader(strArray24); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\\\205\\a" + "'", str33, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test0032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0032"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0033"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean4 = cSVFormat3.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withQuoteChar('\\'); java.lang.String[] strArray9 = cSVFormat3.getHeader(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray19 = null; org.apache.commons.csv.CSVFormat cSVFormat21 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote12, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray19, false); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat3.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean30 = cSVFormat29.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat29.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withCommentStart('a'); boolean boolean39 = cSVFormat36.getIgnoreSurroundingSpaces(); java.lang.String[] strArray41 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap42 = null; org.apache.commons.csv.CSVRecord cSVRecord45 = new org.apache.commons.csv.CSVRecord(strArray41, strMap42, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) '\\'); java.lang.String str50 = cSVFormat36.format((java.lang.Object[]) strArray41); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray41, strMap51, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray41, "[10]"); org.apache.commons.csv.CSVFormat cSVFormat58 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) 'a', quote12, (java.lang.Character) 'a', (java.lang.Character) '\t', true, true, "\r\n", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", strArray41, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\\\205\\a" + "'", str50, "\\\205\\a"); }
public void test0034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0034"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); boolean boolean7 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0035"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); boolean boolean8 = cSVFormat2.isQuoting(); java.lang.String str9 = cSVFormat2.toString(); java.lang.String str10 = cSVFormat2.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str9, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n"); }
public void test0036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0036"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); long long9 = cSVParser7.getRecordNumber(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList10 = null; // The following exception was thrown during execution in test generation try { java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser7.getRecords(cSVRecordList10); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test0037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0037"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean5 = cSVFormat4.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentStart('a'); boolean boolean14 = cSVFormat1.equals((java.lang.Object) cSVFormat13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withQuoteChar(','); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0038"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean4 = cSVFormat3.getIgnoreSurroundingSpaces(); cSVFormat3.validate(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test0039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0039"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); boolean boolean7 = cSVFormat1.isQuoting(); java.lang.String str8 = cSVFormat1.toString(); java.lang.String str9 = cSVFormat1.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str8, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test0040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0040"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0041"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); boolean boolean18 = cSVParser16.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0042"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean10 = cSVFormat1.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); java.lang.Character char11 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat1.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0043"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); java.lang.String[] strArray8 = cSVFormat2.getHeader(); org.apache.commons.csv.Quote quote11 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray18 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote11, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray18, false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat2.withQuotePolicy(quote11); java.lang.String[] strArray23 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap28 = null; org.apache.commons.csv.CSVRecord cSVRecord31 = new org.apache.commons.csv.CSVRecord(strArray23, strMap28, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", (long) (byte) 1); java.lang.String str32 = cSVFormat2.format((java.lang.Object[]) strArray23); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); token33.isReady = false; token33.isReady = true; java.lang.StringBuilder stringBuilder38 = token33.content; boolean boolean39 = token33.isReady; java.lang.String str40 = token33.toString(); token33.reset(); org.apache.commons.csv.Token.Type type42 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type42; java.lang.Class<?> wildcardClass44 = token33.getClass(); boolean boolean45 = cSVFormat2.equals((java.lang.Object) wildcardClass44); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertTrue("'" + quote11 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote11.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\205" + "'", str32, "\205"); org.junit.Assert.assertNotNull(stringBuilder38); org.junit.Assert.assertEquals(stringBuilder38.toString(), ""); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "INVALID []" + "'", str40, "INVALID []"); org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type42.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(wildcardClass44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); }
public void test0044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0044"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0045"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser7.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVRecordList9.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVRecordList9.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); }
public void test0046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0046"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser7.spliterator(); boolean boolean10 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0047"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withRecordSeparator(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0048"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); boolean boolean10 = cSVFormat9.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withIgnoreSurroundingSpaces(false); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote8.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0049"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote10 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuotePolicy(quote10); boolean boolean12 = cSVFormat11.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat11.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + quote10 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote10.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0050"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape(' '); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", cSVFormat8); cSVParser9.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser9.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); }
public void test0051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0051"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); boolean boolean15 = cSVFormat14.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test0052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0052"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getCurrentLineNumber(); long long16 = cSVParser14.getCurrentLineNumber(); cSVParser14.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); }
public void test0053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0053"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(','); org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean6 = cSVFormat5.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat10); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser11.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser11.getRecords(); boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVRecordList13); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNotNull(cSVRecordList13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0054"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\\ \\\t10a"); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat4.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test0055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0055"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) ','); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0056"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.lang.Character char3 = cSVFormat1.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(char3); }
public void test0057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0057"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor4 = cSVParser2.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordItor4); }
public void test0058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0058"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); long long9 = cSVParser7.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser7.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test0059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0059"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withNullString("[\205]"); java.lang.String str10 = cSVFormat9.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuoteChar((java.lang.Character) '#'); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[\205]" + "'", str10, "[\205]"); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0060"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); java.lang.String[] strArray7 = cSVFormat1.getHeader(); org.apache.commons.csv.Quote quote10 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray17 = null; org.apache.commons.csv.CSVFormat cSVFormat19 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote10, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray17, false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat1.withQuotePolicy(quote10); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertTrue("'" + quote10 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote10.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0061"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean19 = cSVRecord18.isConsistent(); // The following exception was thrown during execution in test generation try { java.lang.String str21 = cSVRecord18.get(100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test0062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0062"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); java.lang.String str6 = cSVFormat4.getRecordSeparator(); boolean boolean7 = cSVFormat4.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0063"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat(' '); boolean boolean4 = cSVFormat3.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test0064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0064"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180; java.lang.String str1 = cSVFormat0.getRecordSeparator(); boolean boolean2 = cSVFormat0.isNullHandling(); java.lang.String[] strArray4 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null; org.apache.commons.csv.CSVRecord cSVRecord8 = new org.apache.commons.csv.CSVRecord(strArray4, strMap5, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null; org.apache.commons.csv.CSVRecord cSVRecord12 = new org.apache.commons.csv.CSVRecord(strArray4, strMap9, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", (long) (byte) 1); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray4, strMap13, "\n", (long) 1); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat0.withHeader(strArray4); java.io.Reader reader18 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat17.parse(reader18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\r\n" + "'", str1, "\r\n"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(cSVFormat17); }
public void test0065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0065"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\\ \\\t10a"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withQuoteChar((java.lang.Character) '\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0066"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withQuotePolicy(quote15); java.lang.String[] strArray17 = cSVFormat16.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withEscape('\036'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0067"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); boolean boolean8 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0068"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0069"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0070"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null; org.apache.commons.csv.Lexer lexer4 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader3); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.Quote quote7 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("\205"); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat2.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(quote7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0071"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); long long3 = cSVParser2.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test0072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0072"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); java.lang.String str5 = cSVFormat2.getNullString(); boolean boolean6 = cSVFormat2.getIgnoreEmptyLines(); boolean boolean7 = cSVFormat2.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(str5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test0073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0073"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withCommentStart('\b'); char char14 = cSVFormat13.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\t' + "'", char14 == '\t'); }
public void test0074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0074"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0075"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true); java.lang.Character char6 = cSVFormat0.getQuoteChar(); char char7 = cSVFormat0.getDelimiter(); java.io.Reader reader8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat0.parse(reader8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\t' + "'", char7 == '\t'); }
public void test0076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0076"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withRecordSeparator("Delimiter=<#> Escape=<\\> QuoteChar=<a> RecordSeparator=<\n> SkipHeaderRecord:false"); java.io.Reader reader9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat0.parse(reader9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0077"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0078"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean10 = cSVFormat1.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null; org.apache.commons.csv.Lexer lexer15 = new org.apache.commons.csv.Lexer(cSVFormat13, extendedBufferedReader14); boolean boolean16 = cSVFormat12.equals((java.lang.Object) extendedBufferedReader14); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test0079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0079"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); boolean boolean17 = cSVParser16.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0080"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces(); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray12, strMap17, "", (long) '\\'); java.lang.String str21 = cSVFormat7.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat7.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat7.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withEscape((java.lang.Character) 'a'); java.io.Reader reader28 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = cSVFormat27.parse(reader28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\\\205\\a" + "'", str21, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0081"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); boolean boolean3 = cSVFormat1.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("Delimiter=<#> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withDelimiter('\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0082"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withSkipHeaderRecord(false); boolean boolean12 = cSVFormat6.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test0083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0083"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentStart((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0084"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); boolean boolean6 = cSVFormat0.isQuoting(); java.lang.String str7 = cSVFormat0.toString(); java.lang.Character char8 = cSVFormat0.getQuoteChar(); java.io.Reader reader9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat0.parse(reader9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNull(char8); }
public void test0085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0085"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withRecordSeparator("\u2028"); org.apache.commons.csv.Quote quote11 = cSVFormat10.getQuotePolicy(); boolean boolean12 = cSVFormat10.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) '\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNull(quote11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0086"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); java.lang.String str5 = cSVFormat2.getNullString(); boolean boolean6 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null; org.apache.commons.csv.Lexer lexer8 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader7); org.apache.commons.csv.Quote quote9 = cSVFormat2.getQuotePolicy(); java.lang.String str10 = cSVFormat2.getRecordSeparator(); java.lang.Character char11 = cSVFormat2.getEscape(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(str5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNull(str10); org.junit.Assert.assertNull(char11); }
public void test0087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0087"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); boolean boolean7 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\\Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false\\4\\Delimiter=<\t> Escape=<\\\\> QuoteChar=<\\\\> RecordSeparator=<a> SkipHeaderRecord:false\\4COMMENTa", cSVFormat6); boolean boolean11 = cSVFormat6.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0088"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); java.lang.String str4 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withCommentStart((java.lang.Character) '4'); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0089"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); boolean boolean8 = cSVFormat7.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0090"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.lang.String str8 = cSVFormat6.getNullString(); java.lang.String str9 = cSVFormat6.toString(); char char10 = cSVFormat6.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(str8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false" + "'", str9, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false"); org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\t' + "'", char10 == '\t'); }
public void test0091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0091"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); cSVFormat1.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\\ \\\t10a"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0092"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); boolean boolean6 = cSVFormat0.isQuoting(); java.lang.String str7 = cSVFormat0.toString(); java.lang.Character char8 = cSVFormat0.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat0.withNullString("\\ \\\t10a"); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0093"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat17.getIgnoreSurroundingSpaces(); java.lang.String[] strArray22 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap27 = null; org.apache.commons.csv.CSVRecord cSVRecord30 = new org.apache.commons.csv.CSVRecord(strArray22, strMap27, "", (long) '\\'); java.lang.String str31 = cSVFormat17.format((java.lang.Object[]) strArray22); java.util.Map<java.lang.String, java.lang.Integer> strMap32 = null; org.apache.commons.csv.CSVRecord cSVRecord35 = new org.apache.commons.csv.CSVRecord(strArray22, strMap32, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.util.Map<java.lang.String, java.lang.Integer> strMap36 = null; org.apache.commons.csv.CSVRecord cSVRecord39 = new org.apache.commons.csv.CSVRecord(strArray22, strMap36, "hi!", (long) ' '); org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) '\\', quote3, (java.lang.Character) '\f', (java.lang.Character) 'a', false, true, "\"\205\"", "\205", strArray22, true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat41); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\\\205\\a" + "'", str31, "\\\205\\a"); }
public void test0094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0094"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(','); boolean boolean4 = cSVFormat0.isEscaping(); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat0.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test0095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0095"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList3 = cSVParser2.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNotNull(cSVRecordList3); }
public void test0096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0096"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean4 = cSVFormat3.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote5 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withQuotePolicy(quote5); java.lang.String[] strArray7 = cSVFormat6.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + quote5 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote5.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); }
public void test0097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0097"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withEscape((java.lang.Character) '\037'); java.io.Reader reader3 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser4 = cSVFormat2.parse(reader3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); }
public void test0098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0098"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVRecordList8.spliterator(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVRecordList8, "Delimiter=<\t> Escape=<\\> QuoteChar=<#> NullString=<[\205]> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test0099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0099"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord4 = cSVParser2.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser2.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser2.iterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser2.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecord4); org.junit.Assert.assertNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertNull(cSVRecord8); }
public void test0100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0100"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null; org.apache.commons.csv.Lexer lexer19 = new org.apache.commons.csv.Lexer(cSVFormat17, extendedBufferedReader18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withEscape('\"'); boolean boolean22 = cSVFormat12.equals((java.lang.Object) cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator("[10]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withCommentStart(' '); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0101"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader1 = null; org.apache.commons.csv.Lexer lexer2 = new org.apache.commons.csv.Lexer(cSVFormat0, extendedBufferedReader1); cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false"); java.io.Reader reader6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat0.parse(reader6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test0102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0102"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); java.lang.String[] strArray8 = cSVFormat2.getHeader(); boolean boolean9 = cSVFormat2.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0103"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); boolean boolean3 = cSVFormat1.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test0104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0104"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); char char17 = cSVFormat10.getDelimiter(); boolean boolean18 = cSVFormat10.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat10.withCommentStart((java.lang.Character) '\r'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\t' + "'", char17 == '\t'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); }
public void test0105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0105"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); char char11 = cSVFormat10.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\t' + "'", char11 == '\t'); }
public void test0106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0106"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser16.getHeaderMap(); java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = null; // The following exception was thrown during execution in test generation try { java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser16.getRecords(cSVRecordList18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNull(strMap17); }
public void test0107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0107"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean4 = cSVFormat3.getIgnoreSurroundingSpaces(); cSVFormat3.validate(); java.lang.String[] strArray6 = cSVFormat3.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(strArray6); }
public void test0108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0108"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentStart('a'); java.lang.String str12 = cSVFormat9.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNull(str12); }
public void test0109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0109"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat3, extendedBufferedReader4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.Quote quote8 = cSVFormat3.getQuotePolicy(); java.lang.Character char9 = cSVFormat3.getEscape(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("10a", cSVFormat3); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser10.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(quote8); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordList11); }
public void test0110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0110"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat10, "10"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) 'a'); char char15 = cSVFormat10.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withDelimiter('\t'); boolean boolean18 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<a> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat10.withQuoteChar((java.lang.Character) ','); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\t' + "'", char15 == '\t'); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0111"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withEscape((java.lang.Character) 'a'); boolean boolean29 = cSVFormat26.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test0112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0112"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); boolean boolean11 = cSVFormat2.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat2.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0113"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser11.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test0114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0114"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withNullString("[\205]"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter(','); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withCommentStart('4'); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat13.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0115"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); char char6 = cSVFormat5.getDelimiter(); boolean boolean7 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withDelimiter(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t'); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0116"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean19 = cSVRecord18.isConsistent(); java.lang.String[] strArray20 = cSVRecord18.values(); boolean boolean22 = cSVRecord18.isSet("Delimiter=<\t> Escape=<a> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test0117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0117"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser11.spliterator(); java.lang.Class<?> wildcardClass14 = cSVRecordSpliterator13.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertNotNull(cSVRecordSpliterator13); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test0118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0118"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote10 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuotePolicy(quote10); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('\\'); boolean boolean14 = cSVFormat11.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + quote10 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote10.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0119"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.lang.String str54 = cSVFormat26.format((java.lang.Object[]) strArray40); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat26.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withNullString("\u2029"); boolean boolean61 = cSVFormat58.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\\\205\\a" + "'", str54, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); }
public void test0120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0120"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuoteChar('\b'); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat9.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0121"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null; org.apache.commons.csv.Lexer lexer3 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader2); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader4); java.lang.String str6 = cSVFormat1.toString(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withDelimiter('\f'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart((java.lang.Character) '\b'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); }
public void test0122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0122"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVParser6); }
public void test0123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0123"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withRecordSeparator("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test0124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0124"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withNullString("\u2029"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0125"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withQuotePolicy(quote15); java.lang.String[] strArray17 = cSVFormat16.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withEscape('\036'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0126"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(','); boolean boolean5 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) '\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0127"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<4> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0128"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0129"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.Quote quote19 = cSVFormat14.getQuotePolicy(); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat14.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + quote19 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote19.equals(org.apache.commons.csv.Quote.MINIMAL)); }
public void test0130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0130"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); char char6 = cSVFormat5.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('a'); boolean boolean9 = cSVFormat8.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withQuoteChar((java.lang.Character) '\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\t' + "'", char6 == '\t'); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0131"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('\"'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0132"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); long long5 = cSVParser2.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVRecordList6.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); }
public void test0133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0133"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[10, Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0134"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser7.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser7.getHeaderMap(); long long11 = cSVParser7.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(strMap10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test0135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0135"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withRecordSeparator("\u2028"); org.apache.commons.csv.Quote quote9 = cSVFormat8.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar((java.lang.Character) '\"'); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat8.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0136"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser7.spliterator(); cSVParser7.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test0137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0137"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); long long8 = cSVParser7.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test0138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0138"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withRecordSeparator("10a"); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat13.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0139"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); boolean boolean8 = cSVFormat7.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null; org.apache.commons.csv.Lexer lexer14 = new org.apache.commons.csv.Lexer(cSVFormat12, extendedBufferedReader13); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser15); }
public void test0140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0140"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); boolean boolean8 = cSVFormat2.isQuoting(); java.lang.Character char9 = cSVFormat2.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentStart('\f'); org.apache.commons.csv.Quote quote14 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean17 = cSVFormat16.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withCommentStart('\f'); org.apache.commons.csv.Quote quote20 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withQuotePolicy(quote20); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withQuotePolicy(quote20); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat2.withQuotePolicy(quote20); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + quote14 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote14.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + quote20 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote20.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0141"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("[\205]"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withNullString("\205"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0142"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean5 = cSVFormat4.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote6 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuotePolicy(quote6); java.lang.String[] strArray14 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote6, (java.lang.Character) '\b', (java.lang.Character) '\r', false, false, "Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false", "EORECORD []", strArray14, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + quote6 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote6.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0143"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean4 = cSVFormat3.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString("[\205]"); boolean boolean13 = cSVFormat12.isQuoting(); org.apache.commons.csv.Quote quote14 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat12.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat12); char char19 = cSVFormat12.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + quote14 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote14.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\t' + "'", char19 == '\t'); }
public void test0144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0144"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); int int6 = cSVRecord5.size(); java.util.Iterator<java.lang.String> strItor7 = cSVRecord5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(strItor7); }
public void test0145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0145"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean2 = cSVFormat1.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote3 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withQuotePolicy(quote3); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat4.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + quote3 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote3.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test0146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0146"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<a> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVParser8); }
public void test0147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0147"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withIgnoreSurroundingSpaces(true); boolean boolean17 = cSVFormat16.isCommentingEnabled(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0148"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getCurrentLineNumber(); long long16 = cSVParser14.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser14.getHeaderMap(); cSVParser14.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser14.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNull(strMap17); }
public void test0149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0149"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat3, extendedBufferedReader4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.Quote quote8 = cSVFormat3.getQuotePolicy(); java.lang.Character char9 = cSVFormat3.getEscape(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("10a", cSVFormat3); java.lang.Class<?> wildcardClass11 = cSVParser10.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(quote8); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test0150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0150"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); long long13 = cSVParser11.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord14 = cSVParser11.nextRecord(); long long15 = cSVParser11.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecord14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L); }
public void test0151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0151"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentStart((java.lang.Character) '\037'); java.lang.String str4 = cSVFormat1.getNullString(); boolean boolean5 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = null; org.apache.commons.csv.Lexer lexer7 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader6); org.apache.commons.csv.Quote quote8 = cSVFormat1.getQuotePolicy(); boolean boolean9 = cSVFormat1.isCommentingEnabled(); java.lang.String[] strArray10 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withSkipHeaderRecord(false); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat1.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNull(str4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNull(quote8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0152"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); long long17 = cSVParser16.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); }
public void test0153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0153"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.lang.String str54 = cSVFormat26.format((java.lang.Object[]) strArray40); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat26.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('\f'); java.lang.String str59 = cSVFormat56.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat56.withCommentStart((java.lang.Character) '\b'); boolean boolean62 = cSVFormat56.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\\\205\\a" + "'", str54, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNull(str59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); }
public void test0154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0154"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); boolean boolean8 = cSVFormat2.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test0155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0155"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null; org.apache.commons.csv.Lexer lexer4 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader3); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.Quote quote7 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("\205"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat2.withQuoteChar((java.lang.Character) '\"'); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat2.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(quote7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0156"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser16.nextRecord(); boolean boolean21 = cSVRecord19.isSet("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertNotNull(cSVRecord19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test0157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0157"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); cSVFormat1.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\\ \\\t10a"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuoteChar(' '); boolean boolean10 = cSVFormat7.isEscaping(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("EORECORD []", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withEscape((java.lang.Character) 'a'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0158"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('4'); boolean boolean6 = cSVFormat3.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withQuoteChar('\036'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape('\036'); java.io.Reader reader11 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat8.parse(reader11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0159"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withNullString("a"); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat9.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote8.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0160"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); long long9 = cSVParser7.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser7.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test0161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0161"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); int int6 = cSVRecord5.size(); java.lang.Class<?> wildcardClass7 = cSVRecord5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test0162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0162"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); long long5 = cSVParser2.getRecordNumber(); boolean boolean6 = cSVParser2.isClosed(); cSVParser2.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser2.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test0163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0163"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); boolean boolean8 = cSVFormat7.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('a'); java.lang.String[] strArray11 = cSVFormat10.getHeader(); boolean boolean12 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean15 = cSVFormat14.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withRecordSeparator(""); boolean boolean18 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean19 = cSVFormat14.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote22 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withQuotePolicy(quote22); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withNullString(""); boolean boolean26 = cSVFormat23.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23); boolean boolean28 = cSVFormat10.equals((java.lang.Object) ""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNull(strArray11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + quote22 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote22.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test0164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0164"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); long long5 = cSVParser2.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords(); long long7 = cSVParser2.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); }
public void test0165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0165"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); boolean boolean7 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\\Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false\\4\\Delimiter=<\t> Escape=<\\\\> QuoteChar=<\\\\> RecordSeparator=<a> SkipHeaderRecord:false\\4COMMENTa", cSVFormat6); boolean boolean11 = cSVFormat6.isEscaping(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0166"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote10 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuotePolicy(quote10); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withNullString(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + quote10 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote10.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); }
public void test0167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0167"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); boolean boolean7 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\\Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false\\4\\Delimiter=<\t> Escape=<\\\\> QuoteChar=<\\\\> RecordSeparator=<a> SkipHeaderRecord:false\\4COMMENTa", cSVFormat6); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray12, strMap17, "", (long) '\\'); boolean boolean22 = cSVRecord20.isSet(""); java.util.Iterator<java.lang.String> strItor23 = cSVRecord20.iterator(); java.util.Iterator<java.lang.String> strItor24 = cSVRecord20.iterator(); boolean boolean25 = cSVRecord20.isConsistent(); boolean boolean27 = cSVRecord20.isSet("10a"); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVRecord20, "Delimiter=<\t> Escape=<\\> NullString=<[\205]> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"); java.util.Spliterator<java.lang.String> strSpliterator30 = cSVRecord20.spliterator(); boolean boolean31 = cSVFormat6.equals((java.lang.Object) cSVRecord20); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strItor23); org.junit.Assert.assertNotNull(strItor24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(strSpliterator30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test0168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0168"); java.lang.String[] strArray1 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap2 = null; org.apache.commons.csv.CSVRecord cSVRecord5 = new org.apache.commons.csv.CSVRecord(strArray1, strMap2, "\205", 100L); boolean boolean7 = cSVRecord5.isSet("\u2029"); long long8 = cSVRecord5.getRecordNumber(); long long9 = cSVRecord5.getRecordNumber(); boolean boolean10 = cSVRecord5.isConsistent(); boolean boolean12 = cSVRecord5.isSet("\r\n"); boolean boolean13 = cSVRecord5.isConsistent(); boolean boolean15 = cSVRecord5.isMapped("Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean18 = cSVFormat17.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withRecordSeparator(""); boolean boolean21 = cSVFormat17.getIgnoreSurroundingSpaces(); boolean boolean22 = cSVFormat17.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote25 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withQuotePolicy(quote25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withEscape((java.lang.Character) '4'); boolean boolean31 = cSVFormat30.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat30); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.Quote quote35 = cSVFormat30.getQuotePolicy(); // The following exception was thrown during execution in test generation try { java.lang.String str36 = cSVRecord5.get((java.lang.Enum<org.apache.commons.csv.Quote>) quote35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + quote25 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote25.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + quote35 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote35.equals(org.apache.commons.csv.Quote.MINIMAL)); }
public void test0169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0169"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); boolean boolean7 = cSVFormat1.isQuoting(); java.lang.String str8 = cSVFormat1.toString(); java.lang.String str9 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withEscape('\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str8, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0170"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser7.iterator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser7.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordItor9); }
public void test0171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0171"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); cSVFormat5.validate(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0172"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withCommentStart('\b'); boolean boolean14 = cSVFormat13.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0173"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('\"'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreEmptyLines(false); java.lang.String[] strArray14 = cSVFormat13.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator('\t'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withEscape('\\'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withQuoteChar('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0174"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart((java.lang.Character) '\\'); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat7.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0175"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.lang.String[] strArray12 = cSVFormat6.getHeader(); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat6.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strArray12); }
public void test0176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0176"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(','); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withEscape((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0177"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(','); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test0178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0178"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); java.lang.Character char3 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withNullString("\n"); java.lang.Character char9 = cSVFormat8.getCommentStart(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(char3); org.junit.Assert.assertNotNull(cSVParser4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(char9); }
public void test0179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0179"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat10.withRecordSeparator(' '); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<a> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); }
public void test0180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0180"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); java.lang.Character char3 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(char3); org.junit.Assert.assertNotNull(cSVParser4); org.junit.Assert.assertNotNull(cSVRecordList5); }
public void test0181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0181"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null; org.apache.commons.csv.Lexer lexer3 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader2); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader4); java.lang.String str6 = cSVFormat1.toString(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withDelimiter('\f'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withDelimiter('\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0182"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); long long3 = cSVParser2.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); }
public void test0183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0183"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withSkipHeaderRecord(false); boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0184"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat3, extendedBufferedReader4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.Quote quote8 = cSVFormat3.getQuotePolicy(); java.lang.Character char9 = cSVFormat3.getEscape(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("10a", cSVFormat3); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser10.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(quote8); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); }
public void test0185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0185"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser16.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNull(strMap18); }
public void test0186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0186"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); java.lang.String[] strArray7 = cSVFormat1.getHeader(); boolean boolean8 = cSVFormat1.isQuoting(); char char9 = cSVFormat1.getDelimiter(); java.lang.String[] strArray10 = cSVFormat1.getHeader(); java.lang.String str11 = cSVFormat1.toString(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat1.withRecordSeparator("Delimiter=<\t> Escape=<\\> NullString=<[\205]> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\t' + "'", char9 == '\t'); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str11, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0187"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); java.lang.String str5 = cSVFormat4.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentStart((java.lang.Character) '4'); char char8 = cSVFormat7.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t'); }
public void test0188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0188"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean4 = cSVFormat3.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat3.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat8); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0189"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getCurrentLineNumber(); long long16 = cSVParser14.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser14.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertNull(cSVRecord18); }
public void test0190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0190"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); long long10 = cSVParser7.getRecordNumber(); boolean boolean11 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0191"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.lang.String str17 = cSVFormat10.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat10.withRecordSeparator('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat10); org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser20.nextRecord(); // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.String, java.lang.String> strMap22 = cSVRecord21.toMap(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a\205a" + "'", str17, "a\205a"); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVRecord21); }
public void test0192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0192"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat10, "10"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) 'a'); char char15 = cSVFormat10.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withDelimiter('\t'); boolean boolean18 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<a> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat10.withNullString("Delimiter=<a> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\t' + "'", char15 == '\t'); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0193"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser7.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); java.lang.Class<?> wildcardClass11 = cSVRecordSpliterator10.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test0194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0194"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.lang.String str54 = cSVFormat26.format((java.lang.Object[]) strArray40); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat26.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('\f'); java.lang.String str59 = cSVFormat56.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat56.withCommentStart((java.lang.Character) '\b'); cSVFormat61.validate(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\\\205\\a" + "'", str54, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNull(str59); org.junit.Assert.assertNotNull(cSVFormat61); }
public void test0195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0195"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL; org.apache.commons.csv.Quote quote4 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray11 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote4, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray11, false); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat1.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + quote4 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote4.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0196"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\t'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withCommentStart((java.lang.Character) '\036'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test0197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0197"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); boolean boolean9 = cSVFormat0.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat17.getIgnoreSurroundingSpaces(); java.lang.String[] strArray22 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap27 = null; org.apache.commons.csv.CSVRecord cSVRecord30 = new org.apache.commons.csv.CSVRecord(strArray22, strMap27, "", (long) '\\'); java.lang.String str31 = cSVFormat17.format((java.lang.Object[]) strArray22); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat0.withHeader(strArray22); boolean boolean33 = cSVFormat32.isQuoting(); java.io.Reader reader34 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser35 = cSVFormat32.parse(reader34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\\\205\\a" + "'", str31, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test0198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0198"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); boolean boolean9 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0199"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray14 = new java.lang.String[] { "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", "\u2029", "\r\n" }; org.apache.commons.csv.CSVFormat cSVFormat16 = new org.apache.commons.csv.CSVFormat('\t', (java.lang.Character) '#', quote4, (java.lang.Character) '#', (java.lang.Character) ',', false, false, "\u2029", "", strArray14, false); java.lang.String[] strArray17 = cSVFormat16.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + quote4 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote4.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray17); }
public void test0200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0200"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord4 = cSVParser2.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser2.iterator(); long long7 = cSVParser2.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecord4); org.junit.Assert.assertNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); }
public void test0201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0201"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); boolean boolean3 = cSVFormat1.isNullHandling(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<\r> QuoteChar=<a> CommentStart=<\b> NullString=<EORECORD []> RecordSeparator=<Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVParser5); }
public void test0202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0202"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentStart((java.lang.Character) '\037'); java.lang.String str4 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\"'); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat1.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNull(str4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0203"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); }
public void test0204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0204"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); long long10 = cSVParser7.getRecordNumber(); cSVParser7.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser7.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L); org.junit.Assert.assertNull(strMap12); }
public void test0205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0205"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); char char4 = cSVFormat3.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('a'); boolean boolean7 = cSVFormat6.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('a'); java.lang.String[] strArray10 = cSVFormat9.getHeader(); boolean boolean11 = cSVFormat9.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean14 = cSVFormat13.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator(""); boolean boolean17 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean18 = cSVFormat13.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote21 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withQuotePolicy(quote21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withNullString(""); boolean boolean25 = cSVFormat22.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); boolean boolean27 = cSVFormat9.equals((java.lang.Object) ""); java.lang.Character char28 = cSVFormat9.getQuoteChar(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t'); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + quote21 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote21.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNull(char28); }
public void test0206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0206"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withQuoteChar((java.lang.Character) '\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0207"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser7.iterator(); long long10 = cSVParser7.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser7.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNull(cSVRecord11); }
public void test0208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0208"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); boolean boolean13 = cSVParser11.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0209"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); long long9 = cSVParser7.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); cSVParser7.close(); long long12 = cSVParser7.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test0210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0210"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); boolean boolean8 = cSVFormat7.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0211"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean10 = cSVFormat1.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("\\ \\\t10a", cSVFormat1); cSVParser13.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); }
public void test0212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0212"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) ','); java.lang.String str10 = cSVFormat7.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> QuoteChar=<\"> CommentStart=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat7); boolean boolean12 = cSVParser11.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a" + "'", str10, "a"); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0213"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); java.lang.Character char13 = cSVFormat12.getQuoteChar(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(char13); }
public void test0214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0214"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\b'); org.apache.commons.csv.Quote quote3 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuoteChar('\t'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentStart((java.lang.Character) '\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0215"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); cSVParser2.close(); cSVParser2.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); }
public void test0216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0216"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withSkipHeaderRecord(true); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0217"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); boolean boolean8 = cSVFormat5.getSkipHeaderRecord(); java.io.Reader reader9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat5.parse(reader9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test0218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0218"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); long long10 = cSVParser7.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser7.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser7.iterator(); boolean boolean13 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); org.junit.Assert.assertNotNull(cSVRecordItor12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0219"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); boolean boolean28 = cSVParser27.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test0220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0220"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withCommentStart((java.lang.Character) '#'); boolean boolean6 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0221"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean5 = cSVFormat4.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote6 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withQuotePolicy(quote6); java.lang.String[] strArray14 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote6, (java.lang.Character) '\b', (java.lang.Character) '\r', false, false, "Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false", "EORECORD []", strArray14, false); boolean boolean17 = cSVFormat16.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + quote6 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote6.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); }
public void test0222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0222"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape(' '); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", cSVFormat8); cSVParser9.close(); cSVParser9.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser9.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVRecordSpliterator12); }
public void test0223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0223"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withQuoteChar('\037'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withRecordSeparator("10a"); org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat28); java.util.Map<java.lang.String, java.lang.Integer> strMap30 = cSVParser29.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord31 = cSVParser29.nextRecord(); long long32 = cSVParser29.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVParser29); org.junit.Assert.assertNull(strMap30); org.junit.Assert.assertNotNull(cSVRecord31); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L); }
public void test0224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0224"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser2.nextRecord(); boolean boolean8 = cSVRecord6.isSet("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertNotNull(cSVRecord6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test0225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0225"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('\"'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreEmptyLines(false); java.lang.String[] strArray14 = cSVFormat13.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator('\t'); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat13); boolean boolean18 = cSVParser17.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0226"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); java.lang.String[] strArray12 = cSVFormat10.getHeader(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strArray12); }
public void test0227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0227"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getSkipHeaderRecord(); java.lang.String[] strArray8 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null; org.apache.commons.csv.CSVRecord cSVRecord12 = new org.apache.commons.csv.CSVRecord(strArray8, strMap9, "\205", 100L); boolean boolean14 = cSVRecord12.isSet("\u2029"); long long15 = cSVRecord12.getRecordNumber(); long long16 = cSVRecord12.getRecordNumber(); boolean boolean17 = cSVRecord12.isConsistent(); boolean boolean19 = cSVRecord12.isSet("\r\n"); java.lang.String str20 = cSVRecord12.toString(); java.util.Iterator<java.lang.String> strItor21 = cSVRecord12.iterator(); boolean boolean22 = cSVFormat1.equals((java.lang.Object) cSVRecord12); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[\205]" + "'", str20, "[\205]"); org.junit.Assert.assertNotNull(strItor21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVParser23); }
public void test0228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0228"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withIgnoreSurroundingSpaces(true); boolean boolean17 = cSVFormat12.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0229"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); cSVFormat1.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\\ \\\t10a"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuoteChar(' '); boolean boolean10 = cSVFormat7.isEscaping(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("EORECORD []", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withCommentStart((java.lang.Character) '\t'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0230"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean10 = cSVFormat1.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat1.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean17 = cSVFormat16.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator(""); boolean boolean20 = cSVFormat16.getIgnoreSurroundingSpaces(); boolean boolean21 = cSVFormat16.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat16.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote24 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withQuotePolicy(quote24); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) '4'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("\205", cSVFormat29); boolean boolean31 = cSVFormat14.equals((java.lang.Object) "\205"); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("\205\"", cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + quote24 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote24.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVParser32); }
public void test0231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0231"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); boolean boolean5 = cSVParser2.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0232"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart((java.lang.Character) '\\'); boolean boolean11 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withEscape((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.Quote quote18 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray25 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote18, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray25, false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat15.withQuotePolicy(quote18); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat13.withQuotePolicy(quote18); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + quote18 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote18.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0233"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser7.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecord9); }
public void test0234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0234"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); long long10 = cSVParser7.getRecordNumber(); long long11 = cSVParser7.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test0235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0235"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean20 = cSVRecord18.isSet(""); java.lang.String str22 = cSVRecord18.get(0); boolean boolean23 = cSVRecord18.isConsistent(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<" + "'", str22, "Delimiter=<"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); }
public void test0236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0236"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; boolean boolean2 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart((java.lang.Character) '\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test0237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0237"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean2 = cSVFormat1.getIgnoreSurroundingSpaces(); cSVFormat1.validate(); java.lang.String[] strArray4 = cSVFormat1.getHeader(); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat1.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray4); }
public void test0238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0238"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' '); java.io.Reader reader2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat1.parse(reader2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); }
public void test0239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0239"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getCurrentLineNumber(); long long10 = cSVParser7.getCurrentLineNumber(); boolean boolean11 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0240"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.lang.String str54 = cSVFormat26.format((java.lang.Object[]) strArray40); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat26.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('\f'); java.lang.String str59 = cSVFormat56.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat56.withCommentStart((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat61.withIgnoreEmptyLines(true); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\\\205\\a" + "'", str54, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNull(str59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); }
public void test0241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0241"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('4'); boolean boolean6 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat15); org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser20.nextRecord(); java.lang.String str22 = cSVRecord21.toString(); boolean boolean23 = cSVRecord21.isConsistent(); boolean boolean25 = cSVRecord21.isMapped("[\205]"); boolean boolean26 = cSVFormat8.equals((java.lang.Object) cSVRecord21); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat8.withEscape(','); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVRecord21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]" + "'", str22, "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test0242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0242"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); boolean boolean7 = cSVFormat1.isQuoting(); java.lang.Character char8 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean10 = cSVFormat9.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withCommentStart('\f'); org.apache.commons.csv.Quote quote13 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat9.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean16 = cSVFormat15.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withCommentStart('\f'); org.apache.commons.csv.Quote quote19 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat1.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withRecordSeparator('\f'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<\036> RecordSeparator=<\r> SkipHeaderRecord:false", cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + quote13 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote13.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + quote19 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote19.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); }
public void test0243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0243"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat7); java.lang.String str9 = cSVFormat7.getNullString(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2028", cSVFormat7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser10.iterator(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVParser8); org.junit.Assert.assertNull(str9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test0244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0244"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0245"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean19 = cSVRecord18.isConsistent(); boolean boolean21 = cSVRecord18.isMapped("\\Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false\\4\\Delimiter=<\t> Escape=<\\\\> QuoteChar=<\\\\> RecordSeparator=<a> SkipHeaderRecord:false\\4COMMENTa"); boolean boolean23 = cSVRecord18.isSet("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test0246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0246"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); java.util.Spliterator<java.lang.String> strSpliterator9 = cSVRecord8.spliterator(); java.util.Spliterator<java.lang.String> strSpliterator10 = cSVRecord8.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertNotNull(strSpliterator9); org.junit.Assert.assertNotNull(strSpliterator10); }
public void test0247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0247"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); char char4 = cSVFormat3.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('a'); boolean boolean7 = cSVFormat6.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreSurroundingSpaces(true); boolean boolean12 = cSVFormat11.getIgnoreEmptyLines(); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat11.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t'); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0248"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean20 = cSVRecord18.isMapped("[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); long long21 = cSVRecord18.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L); }
public void test0249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0249"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0250"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); long long6 = cSVParser2.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser2.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecord7); }
public void test0251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0251"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); java.lang.String str5 = cSVFormat4.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentStart((java.lang.Character) '4'); char char8 = cSVFormat7.getDelimiter(); java.lang.String[] strArray9 = cSVFormat7.getHeader(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("a", cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t'); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertNotNull(cSVParser10); }
public void test0252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0252"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0253"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean20 = cSVRecord18.isSet(""); java.lang.String str22 = cSVRecord18.get(0); java.lang.String[] strArray23 = cSVRecord18.values(); boolean boolean25 = cSVRecord18.isSet("Delimiter=<a> CommentStart=<\t> SkipHeaderRecord:false Header:[\205]"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<" + "'", str22, "Delimiter=<"); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test0254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0254"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withQuoteChar((java.lang.Character) '\r'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0255"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.lang.String[] strArray13 = cSVRecord12.values(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertNotNull(strArray13); }
public void test0256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0256"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); java.lang.String str23 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat8.withDelimiter('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The quoteChar character and the delimiter cannot be the same ('\\')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "a" + "'", str23, "a"); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0257"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); boolean boolean11 = cSVFormat2.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withIgnoreEmptyLines(true); boolean boolean16 = cSVFormat15.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test0258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0258"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); boolean boolean34 = cSVFormat28.isQuoting(); java.lang.String str35 = cSVFormat28.toString(); java.lang.Character char36 = cSVFormat28.getCommentStart(); char char37 = cSVFormat28.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean42 = cSVFormat41.getIgnoreSurroundingSpaces(); cSVFormat41.validate(); java.lang.String[] strArray45 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray45, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", (long) (byte) 1); java.lang.String[] strArray54 = cSVRecord53.values(); java.lang.String str55 = cSVFormat41.format((java.lang.Object[]) strArray54); java.lang.String str56 = cSVFormat39.format((java.lang.Object[]) strArray54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat26.withHeader(strArray54); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str35, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNull(char36); org.junit.Assert.assertTrue("'" + char37 + "' != '" + '\t' + "'", char37 == '\t'); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\205" + "'", str55, "\205"); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\205" + "'", str56, "\205"); org.junit.Assert.assertNotNull(cSVFormat57); }
public void test0259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0259"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); boolean boolean7 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\\Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false\\4\\Delimiter=<\t> Escape=<\\\\> QuoteChar=<\\\\> RecordSeparator=<a> SkipHeaderRecord:false\\4COMMENTa", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser10.getRecords(); boolean boolean12 = cSVParser10.isClosed(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0260"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); java.lang.String str10 = cSVFormat7.toString(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withRecordSeparator("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0261"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0262"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); boolean boolean12 = cSVParser11.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser11.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test0263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0263"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withIgnoreSurroundingSpaces(true); boolean boolean17 = cSVFormat12.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0264"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser2.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser2.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertNotNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordItor7); }
public void test0265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0265"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<4> RecordSeparator=<> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0266"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser2.nextRecord(); boolean boolean7 = cSVRecord6.isConsistent(); java.util.Iterator<java.lang.String> strItor8 = cSVRecord6.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertNotNull(cSVRecord6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strItor8); }
public void test0267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0267"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withRecordSeparator('\"'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); boolean boolean10 = cSVFormat9.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withIgnoreEmptyLines(false); java.lang.String[] strArray13 = cSVFormat12.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withRecordSeparator('\t'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat12.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withNullString("\u2028"); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat19.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0268"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); long long19 = cSVRecord18.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.lang.String str21 = cSVRecord18.get((int) '\n'); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L); }
public void test0269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0269"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser2.getRecords(); long long6 = cSVParser2.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordList5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L); }
public void test0270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0270"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); boolean boolean10 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0271"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); cSVParser7.close(); cSVParser7.close(); long long11 = cSVParser7.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test0272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0272"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); boolean boolean3 = cSVFormat1.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("Delimiter=<#> SkipHeaderRecord:false"); java.lang.String str6 = cSVFormat5.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false" + "'", str6, "Delimiter=<#> SkipHeaderRecord:false"); }
public void test0273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0273"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); cSVParser11.close(); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); }
public void test0274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0274"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); char char17 = cSVFormat10.getDelimiter(); boolean boolean18 = cSVFormat10.isNullHandling(); java.lang.Character char19 = cSVFormat10.getQuoteChar(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\t' + "'", char17 == '\t'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNull(char19); }
public void test0275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0275"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withCommentStart((java.lang.Character) '\036'); boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat26); java.lang.String str29 = cSVFormat26.toString(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat26.withQuoteChar('\b'); boolean boolean32 = cSVFormat26.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVParser28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<\036> RecordSeparator=<\r> SkipHeaderRecord:false" + "'", str29, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<\036> RecordSeparator=<\r> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test0276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0276"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.lang.String str13 = cSVRecord12.toString(); boolean boolean14 = cSVRecord12.isConsistent(); long long15 = cSVRecord12.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.lang.String str17 = cSVRecord12.get((int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]" + "'", str13, "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L); }
public void test0277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0277"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); boolean boolean10 = cSVFormat7.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withNullString(""); boolean boolean13 = cSVFormat12.getSkipHeaderRecord(); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat12.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote8.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0278"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withRecordSeparator("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentStart((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0279"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withRecordSeparator("Delimiter=<#> Escape=<\\> QuoteChar=<a> RecordSeparator=<\n> SkipHeaderRecord:false"); boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0280"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); long long9 = cSVParser7.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser7.iterator(); boolean boolean11 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0281"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean10 = cSVFormat1.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("\205a", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); }
public void test0282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0282"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withCommentStart((java.lang.Character) '\036'); boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat26); cSVFormat26.validate(); java.lang.String str30 = cSVFormat26.getRecordSeparator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVParser28); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\r" + "'", str30, "\r"); }
public void test0283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0283"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); char char4 = cSVFormat3.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('a'); boolean boolean7 = cSVFormat6.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('a'); java.lang.String[] strArray10 = cSVFormat9.getHeader(); boolean boolean11 = cSVFormat9.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean14 = cSVFormat13.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator(""); boolean boolean17 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean18 = cSVFormat13.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat13.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote21 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withQuotePolicy(quote21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withNullString(""); boolean boolean25 = cSVFormat22.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); boolean boolean27 = cSVFormat9.equals((java.lang.Object) ""); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withDelimiter('4'); boolean boolean34 = cSVFormat33.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean39 = cSVFormat38.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat38.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat43); org.apache.commons.csv.CSVRecord cSVRecord49 = cSVParser48.nextRecord(); java.lang.String str50 = cSVRecord49.toString(); boolean boolean51 = cSVRecord49.isConsistent(); boolean boolean53 = cSVRecord49.isMapped("[\205]"); boolean boolean54 = cSVFormat36.equals((java.lang.Object) cSVRecord49); java.lang.String[] strArray55 = cSVRecord49.values(); java.lang.String str56 = cSVFormat9.format((java.lang.Object[]) strArray55); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t'); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + quote21 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote21.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVParser48); org.junit.Assert.assertNotNull(cSVRecord49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]" + "'", str50, "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Delimiter=<\t> Escape=<\\\\> QuoteChar=<\b> RecordSeparator=<a" + "'", str56, "Delimiter=<\t> Escape=<\\\\> QuoteChar=<\b> RecordSeparator=<a"); }
public void test0284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0284"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); java.lang.String[] strArray7 = cSVFormat1.getHeader(); boolean boolean8 = cSVFormat1.isQuoting(); char char9 = cSVFormat1.getDelimiter(); java.lang.String[] strArray10 = cSVFormat1.getHeader(); java.lang.String str11 = cSVFormat1.toString(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat1.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\t' + "'", char9 == '\t'); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str11, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); }
public void test0285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0285"); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean5 = cSVFormat4.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withQuoteChar('\\'); java.lang.String[] strArray10 = cSVFormat4.getHeader(); org.apache.commons.csv.Quote quote13 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray20 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote13, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray20, false); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat4.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat30.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withCommentStart('a'); boolean boolean40 = cSVFormat37.getIgnoreSurroundingSpaces(); java.lang.String[] strArray42 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap47 = null; org.apache.commons.csv.CSVRecord cSVRecord50 = new org.apache.commons.csv.CSVRecord(strArray42, strMap47, "", (long) '\\'); java.lang.String str51 = cSVFormat37.format((java.lang.Object[]) strArray42); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray42, strMap52, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray42, "[10]"); org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) 'a', quote13, (java.lang.Character) 'a', (java.lang.Character) '\t', true, true, "\r\n", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", strArray42, true); org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean67 = cSVFormat66.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat66.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat71.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat73.withCommentStart('a'); boolean boolean76 = cSVFormat73.getIgnoreSurroundingSpaces(); java.lang.String[] strArray78 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap79 = null; org.apache.commons.csv.CSVRecord cSVRecord82 = new org.apache.commons.csv.CSVRecord(strArray78, strMap79, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap83 = null; org.apache.commons.csv.CSVRecord cSVRecord86 = new org.apache.commons.csv.CSVRecord(strArray78, strMap83, "", (long) '\\'); java.lang.String str87 = cSVFormat73.format((java.lang.Object[]) strArray78); org.apache.commons.csv.CSVFormat cSVFormat89 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) 'a', quote13, (java.lang.Character) '4', (java.lang.Character) ' ', false, true, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", "", strArray78, false); org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat89.withCommentStart((java.lang.Character) 'a'); java.io.Reader reader92 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser93 = cSVFormat89.parse(reader92); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertTrue("'" + quote13 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote13.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\\\205\\a" + "'", str51, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(strArray78); org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\\\205\\a" + "'", str87, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat91); }
public void test0286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0286"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean6 = cSVFormat5.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator(""); boolean boolean9 = cSVFormat5.getIgnoreSurroundingSpaces(); boolean boolean10 = cSVFormat5.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote13 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withEscape((java.lang.Character) '4'); boolean boolean19 = cSVFormat18.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat18); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat18.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.Quote quote23 = cSVFormat18.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean31 = cSVFormat30.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat30.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withCommentStart('a'); boolean boolean40 = cSVFormat37.getIgnoreSurroundingSpaces(); java.lang.String[] strArray42 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap47 = null; org.apache.commons.csv.CSVRecord cSVRecord50 = new org.apache.commons.csv.CSVRecord(strArray42, strMap47, "", (long) '\\'); java.lang.String str51 = cSVFormat37.format((java.lang.Object[]) strArray42); java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray42, strMap52, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray42, "\\\205\\a"); org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat('\t', (java.lang.Character) '\b', quote23, (java.lang.Character) ' ', (java.lang.Character) '\037', false, false, "EORECORD []", "a", strArray42, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + quote13 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote13.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + quote23 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote23.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\\\205\\a" + "'", str51, "\\\205\\a"); }
public void test0287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0287"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.util.Spliterator<java.lang.String> strSpliterator13 = cSVRecord12.spliterator(); int int14 = cSVRecord12.size(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertNotNull(strSpliterator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); }
public void test0288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0288"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces(); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray12, strMap17, "", (long) '\\'); java.lang.String str21 = cSVFormat7.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat7.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat7.withQuoteChar('\037'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withRecordSeparator("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"); java.io.Reader reader28 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = cSVFormat25.parse(reader28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\\\205\\a" + "'", str21, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test0289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0289"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); cSVFormat1.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\\ \\\t10a"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuoteChar(' '); boolean boolean10 = cSVFormat7.isEscaping(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("EORECORD []", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreEmptyLines(true); org.apache.commons.csv.Assertions.notNull((java.lang.Object) true, "Delimiter=<\t> Escape=<\\> RecordSeparator=<[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0290"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean19 = cSVRecord18.isConsistent(); java.lang.String[] strArray20 = cSVRecord18.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray20, strMap21, "COMMENT []", (long) '\036'); int int25 = cSVRecord24.size(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2); }
public void test0291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0291"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.lang.String[] strArray12 = cSVFormat6.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withQuoteChar((java.lang.Character) '\b'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0292"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); cSVParser7.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test0293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0293"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\b'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false", cSVFormat8); boolean boolean10 = cSVFormat8.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0294"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); boolean boolean3 = cSVFormat1.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("Delimiter=<#> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withDelimiter('\f'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0295"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withNullString("[\205]"); java.lang.String str10 = cSVFormat9.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withIgnoreSurroundingSpaces(false); java.io.Reader reader15 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = cSVFormat14.parse(reader15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[\205]" + "'", str10, "[\205]"); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0296"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); boolean boolean7 = cSVFormat4.getIgnoreSurroundingSpaces(); boolean boolean8 = cSVFormat4.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<\r> QuoteChar=<a> CommentStart=<\b> NullString=<EORECORD []> RecordSeparator=<Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false> SkipHeaderRecord:false", cSVFormat4); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withQuoteChar('a'); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0297"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withIgnoreEmptyLines(true); java.lang.Character char15 = cSVFormat14.getCommentStart(); java.lang.String str16 = cSVFormat14.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean20 = cSVFormat19.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat19.withRecordSeparator('\t'); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean29 = cSVFormat28.getIgnoreSurroundingSpaces(); cSVFormat28.validate(); java.lang.String[] strArray32 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = null; org.apache.commons.csv.CSVRecord cSVRecord40 = new org.apache.commons.csv.CSVRecord(strArray32, strMap37, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", (long) (byte) 1); java.lang.String[] strArray41 = cSVRecord40.values(); java.lang.String str42 = cSVFormat28.format((java.lang.Object[]) strArray41); java.lang.String str43 = cSVFormat19.format((java.lang.Object[]) strArray41); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat18.withHeader(strArray41); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNull(char15); org.junit.Assert.assertNull(str16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\205" + "'", str42, "\205"); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\205" + "'", str43, "\205"); org.junit.Assert.assertNotNull(cSVFormat44); }
public void test0298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0298"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withNullString("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withQuoteChar('\r'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0299"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat12.isQuoting(); boolean boolean14 = cSVFormat12.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test0300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0300"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withEscape('\"'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("\205a", cSVFormat4); long long10 = cSVParser9.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test0301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0301"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); boolean boolean11 = cSVFormat8.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withRecordSeparator('4'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]", cSVFormat13); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withDelimiter('\b'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0302"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart((java.lang.Character) '\036'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test0303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0303"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.lang.String str17 = cSVFormat10.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat10.withRecordSeparator('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat10); org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser20.nextRecord(); java.lang.String str22 = cSVRecord21.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a\205a" + "'", str17, "a\205a"); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVRecord21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false]" + "'", str22, "[Delimiter=<, > Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false]"); }
public void test0304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0304"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('#'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("hi!"); cSVFormat4.validate(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withNullString("\205a"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test0305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0305"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); java.lang.String[] strArray7 = cSVFormat1.getHeader(); boolean boolean8 = cSVFormat1.isQuoting(); char char9 = cSVFormat1.getDelimiter(); java.lang.String[] strArray10 = cSVFormat1.getHeader(); java.lang.String str11 = cSVFormat1.toString(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat1.withCommentStart('\036'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("[Delimiter=<, > Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false]", cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\t' + "'", char9 == '\t'); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str11, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); }
public void test0306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0306"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser11.spliterator(); boolean boolean14 = cSVParser11.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertNotNull(cSVRecordSpliterator13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0307"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); long long19 = cSVRecord18.getRecordNumber(); long long20 = cSVRecord18.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.lang.String str22 = cSVRecord18.get("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L); }
public void test0308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0308"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("[\205]"); boolean boolean12 = cSVFormat11.isQuoting(); org.apache.commons.csv.Quote quote13 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat11.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat11); char char18 = cSVFormat11.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + quote13 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote13.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\t' + "'", char18 == '\t'); }
public void test0309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0309"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat12.withNullString("[10, Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false]"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0310"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); boolean boolean19 = cSVFormat18.isEscaping(); boolean boolean20 = cSVFormat18.isCommentingEnabled(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test0311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0311"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.lang.String str17 = cSVFormat10.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat10.withRecordSeparator('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat10); boolean boolean21 = cSVFormat10.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a\205a" + "'", str17, "a\205a"); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test0312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0312"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); long long13 = cSVParser11.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser11.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordList14); }
public void test0313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0313"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean10 = cSVFormat1.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("\\ \\\t10a", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat1.withNullString("Delimiter=<\t> Escape=<\\> QuoteChar=<a> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0314"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withNullString("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('\f'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0315"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.lang.String str17 = cSVFormat10.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat10.withRecordSeparator('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat10); long long21 = cSVParser20.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = cSVParser20.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a\205a" + "'", str17, "a\205a"); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertNull(strMap22); }
public void test0316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0316"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser11.iterator(); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test0317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0317"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withIgnoreSurroundingSpaces(false); boolean boolean19 = cSVFormat16.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test0318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0318"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\b'); org.apache.commons.csv.Quote quote3 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuoteChar('\t'); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat2); java.lang.Class<?> wildcardClass7 = cSVFormat2.getClass(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVParser6); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test0319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0319"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) ','); java.lang.String str10 = cSVFormat7.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> QuoteChar=<\"> CommentStart=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat7); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a" + "'", str10, "a"); org.junit.Assert.assertNotNull(cSVParser11); }
public void test0320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0320"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<#> NullString=<[\205]> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0321"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); java.lang.Character char3 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser4.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(char3); org.junit.Assert.assertNotNull(cSVParser4); org.junit.Assert.assertNotNull(cSVRecord5); }
public void test0322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0322"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); java.lang.String[] strArray6 = cSVFormat0.getHeader(); boolean boolean7 = cSVFormat0.isQuoting(); char char8 = cSVFormat0.getDelimiter(); java.lang.String[] strArray9 = cSVFormat0.getHeader(); java.lang.String str10 = cSVFormat0.toString(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat0.withRecordSeparator('a'); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t'); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0323"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(','); boolean boolean6 = cSVFormat2.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withQuoteChar((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withRecordSeparator("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<\b> RecordSeparator=<a> SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0324"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('a'); boolean boolean6 = cSVFormat5.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Quote quote7 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuotePolicy(quote7); java.lang.String[] strArray15 = null; org.apache.commons.csv.CSVFormat cSVFormat17 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) 'a', quote7, (java.lang.Character) '\b', (java.lang.Character) '\r', false, false, "Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false", "EORECORD []", strArray15, false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + quote7 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote7.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0325"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\036'); boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape('a'); org.apache.commons.csv.Quote quote6 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("EORECORD []", cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(quote6); org.junit.Assert.assertNotNull(cSVParser7); }
public void test0326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0326"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withDelimiter('\\'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.ALL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat9.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote8.equals(org.apache.commons.csv.Quote.ALL)); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0327"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser7.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); }
public void test0328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0328"); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withNullString("[\205]"); boolean boolean20 = cSVFormat19.isQuoting(); org.apache.commons.csv.Quote quote21 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuotePolicy(quote21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat19); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser25.iterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser25.nextRecord(); boolean boolean29 = cSVRecord27.isSet(""); java.lang.String str31 = cSVRecord27.get(0); java.lang.String[] strArray32 = cSVRecord27.values(); org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '4', quote2, (java.lang.Character) '\t', (java.lang.Character) ',', true, false, "", "\205", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withRecordSeparator("Delimiter=<\t> Escape=<\\> CommentStart=<#> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + quote21 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote21.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNotNull(cSVRecord27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Delimiter=<" + "'", str31, "Delimiter=<"); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); }
public void test0329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0329"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); cSVParser16.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser16.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); }
public void test0330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0330"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.lang.String str17 = cSVFormat10.getNullString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[\205]" + "'", str17, "[\205]"); }
public void test0331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0331"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[Delimiter=<, > Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0332"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.lang.String str54 = cSVFormat26.format((java.lang.Object[]) strArray40); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat26.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('\f'); cSVFormat58.validate(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\\\205\\a" + "'", str54, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); }
public void test0333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0333"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); int int6 = cSVRecord5.size(); int int7 = cSVRecord5.size(); java.lang.String str8 = cSVRecord5.toString(); java.util.Iterator<java.lang.String> strItor9 = cSVRecord5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[\205]]" + "'", str8, "[[\205]]"); org.junit.Assert.assertNotNull(strItor9); }
public void test0334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0334"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0335"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape(' '); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withIgnoreSurroundingSpaces(true); cSVFormat9.validate(); java.io.Reader reader11 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat9.parse(reader11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0336"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); long long19 = cSVRecord18.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.lang.String str21 = cSVRecord18.get("\n"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L); }
public void test0337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0337"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withCommentStart((java.lang.Character) '\036'); boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces(); boolean boolean28 = cSVFormat26.getIgnoreEmptyLines(); java.lang.String[] strArray30 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap31 = null; org.apache.commons.csv.CSVRecord cSVRecord34 = new org.apache.commons.csv.CSVRecord(strArray30, strMap31, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray30, strMap35, "Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", (long) (byte) 1); java.lang.String[] strArray39 = cSVRecord38.values(); java.util.Iterator<java.lang.String> strItor40 = cSVRecord38.iterator(); boolean boolean41 = cSVRecord38.isConsistent(); java.lang.String[] strArray42 = cSVRecord38.values(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat26.withHeader(strArray42); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat43); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strItor40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(cSVFormat43); }
public void test0338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0338"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords(); long long7 = cSVParser2.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser2.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser2.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordItor9); }
public void test0339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0339"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); boolean boolean6 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\n"); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withRecordSeparator('#'); java.lang.String[] strArray14 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "\205", 100L); boolean boolean19 = cSVRecord18.isConsistent(); java.lang.String str20 = cSVRecord18.getComment(); long long21 = cSVRecord18.getRecordNumber(); java.lang.String[] strArray22 = cSVRecord18.values(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat8.withHeader(strArray22); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\205" + "'", str20, "\205"); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0340"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("[\205]"); boolean boolean12 = cSVFormat11.isQuoting(); org.apache.commons.csv.Quote quote13 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuoteChar((java.lang.Character) '\t'); boolean boolean17 = cSVFormat16.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + quote13 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote13.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0341"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('4'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withCommentStart((java.lang.Character) 'a'); boolean boolean7 = cSVFormat1.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test0342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0342"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); long long9 = cSVParser7.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser7.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser7.getHeaderMap(); long long12 = cSVParser7.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser7.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L); org.junit.Assert.assertNotNull(cSVRecordSpliterator13); }
public void test0343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0343"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat10, "10"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) 'a'); char char15 = cSVFormat10.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat10.withDelimiter('\t'); boolean boolean18 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<a> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); long long20 = cSVParser19.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\t' + "'", char15 == '\t'); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test0344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0344"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\b'); org.apache.commons.csv.Quote quote3 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuoteChar('\t'); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat2); boolean boolean7 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withRecordSeparator('4'); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVParser6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0345"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); java.lang.String str10 = cSVFormat6.getNullString(); java.lang.String str11 = cSVFormat6.getNullString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(str10); org.junit.Assert.assertNull(str11); }
public void test0346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0346"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser7.spliterator(); long long10 = cSVParser7.getCurrentLineNumber(); cSVParser7.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test0347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0347"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('#'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0348"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0349"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null; org.apache.commons.csv.Lexer lexer19 = new org.apache.commons.csv.Lexer(cSVFormat17, extendedBufferedReader18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withEscape('\"'); boolean boolean22 = cSVFormat12.equals((java.lang.Object) cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator("[10]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withNullString("EOF []"); cSVFormat24.validate(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test0350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0350"); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean4 = cSVFormat3.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator(""); boolean boolean7 = cSVFormat3.getIgnoreSurroundingSpaces(); boolean boolean8 = cSVFormat3.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote11 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuotePolicy(quote11); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape((java.lang.Character) '4'); boolean boolean17 = cSVFormat16.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat16); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.Quote quote21 = cSVFormat16.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray40, "\\\205\\a"); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat('\t', (java.lang.Character) '\b', quote21, (java.lang.Character) ' ', (java.lang.Character) '\037', false, false, "EORECORD []", "a", strArray40, false); cSVFormat57.validate(); char char59 = cSVFormat57.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + quote11 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote11.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + quote21 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote21.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertTrue("'" + char59 + "' != '" + '\t' + "'", char59 == '\t'); }
public void test0351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0351"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('\"'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.lang.String str10 = cSVFormat1.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); }
public void test0352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0352"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); cSVParser7.close(); boolean boolean10 = cSVParser7.isClosed(); long long11 = cSVParser7.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test0353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0353"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); java.lang.String str5 = cSVFormat2.getNullString(); boolean boolean6 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null; org.apache.commons.csv.Lexer lexer8 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader7); java.lang.Character char9 = cSVFormat2.getCommentStart(); org.apache.commons.csv.Quote quote10 = cSVFormat2.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(str5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNull(quote10); }
public void test0354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0354"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withEscape((java.lang.Character) 'a'); boolean boolean29 = cSVFormat26.isQuoting(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(cSVParser30); }
public void test0355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0355"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withQuoteChar('\037'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withRecordSeparator("10a"); org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat28); java.util.Map<java.lang.String, java.lang.Integer> strMap30 = cSVParser29.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord31 = cSVParser29.nextRecord(); boolean boolean32 = cSVParser29.isClosed(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) boolean32, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:falseaDelimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SkipHeaderRecord:falseaCOMMENT"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVParser29); org.junit.Assert.assertNull(strMap30); org.junit.Assert.assertNotNull(cSVRecord31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test0356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0356"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\036'); boolean boolean2 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator('\\'); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0357"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser16, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false"); long long21 = cSVParser16.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L); }
public void test0358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0358"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withQuoteChar('\037'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withRecordSeparator("10a"); org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat28); org.apache.commons.csv.Quote quote30 = cSVFormat28.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVParser29); org.junit.Assert.assertNull(quote30); }
public void test0359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0359"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.lang.String str13 = cSVRecord12.toString(); boolean boolean14 = cSVRecord12.isConsistent(); long long15 = cSVRecord12.getRecordNumber(); boolean boolean16 = cSVRecord12.isConsistent(); java.lang.String[] strArray17 = cSVRecord12.values(); java.lang.String[] strArray18 = cSVRecord12.values(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]" + "'", str13, "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(strArray18); }
public void test0360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0360"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("[\205]"); java.lang.Character char12 = cSVFormat9.getQuoteChar(); java.lang.String str13 = cSVFormat9.getNullString(); boolean boolean14 = cSVFormat9.isQuoting(); boolean boolean15 = cSVFormat9.isCommentingEnabled(); boolean boolean16 = cSVFormat9.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNull(char12); org.junit.Assert.assertNull(str13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); }
public void test0361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0361"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); long long5 = cSVParser2.getRecordNumber(); boolean boolean6 = cSVParser2.isClosed(); cSVParser2.close(); boolean boolean8 = cSVParser2.isClosed(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser2.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test0362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0362"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); long long5 = cSVParser2.getRecordNumber(); long long6 = cSVParser2.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test0363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0363"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withCommentStart((java.lang.Character) '\037'); java.lang.String str6 = cSVFormat3.getNullString(); java.lang.Character char7 = cSVFormat3.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(str6); org.junit.Assert.assertNull(char7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test0364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0364"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); boolean boolean7 = cSVFormat1.isQuoting(); java.lang.Character char8 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean10 = cSVFormat9.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withCommentStart('\f'); org.apache.commons.csv.Quote quote13 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat9.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean16 = cSVFormat15.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withCommentStart('\f'); org.apache.commons.csv.Quote quote19 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat1.withQuotePolicy(quote19); boolean boolean23 = cSVFormat1.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + quote13 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote13.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + quote19 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote19.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test0365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0365"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); char char4 = cSVFormat3.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator('a'); boolean boolean7 = cSVFormat6.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = null; org.apache.commons.csv.Lexer lexer13 = new org.apache.commons.csv.Lexer(cSVFormat11, extendedBufferedReader12); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat11.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\t' + "'", char4 == '\t'); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test0366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0366"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); boolean boolean7 = cSVFormat1.isQuoting(); java.lang.String str8 = cSVFormat1.toString(); java.lang.Character char9 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withSkipHeaderRecord(false); java.lang.String str12 = cSVFormat11.getNullString(); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> SkipHeaderRecord:false Header:[\205]", cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str8, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNull(str12); org.junit.Assert.assertNotNull(cSVParser13); }
public void test0367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0367"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser2.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNull(cSVRecord7); }
public void test0368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0368"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuoteChar('\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0369"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<4> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat5); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withEscape((java.lang.Character) '\n'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVParser8); }
public void test0370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0370"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat8.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("[10]", cSVFormat26); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); java.lang.String str54 = cSVFormat26.format((java.lang.Object[]) strArray40); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat26.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean60 = cSVFormat59.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat59.withQuoteChar('\\'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader65 = null; org.apache.commons.csv.Lexer lexer66 = new org.apache.commons.csv.Lexer(cSVFormat64, extendedBufferedReader65); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat64.withDelimiter(','); boolean boolean69 = cSVFormat58.equals((java.lang.Object) ','); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\\\205\\a" + "'", str54, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); }
public void test0371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0371"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords(); long long7 = cSVParser2.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser2.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); org.junit.Assert.assertNull(strMap8); }
public void test0372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0372"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withEscape((java.lang.Character) '\b'); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat9.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0373"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); java.lang.String str5 = cSVFormat2.getNullString(); java.lang.Character char6 = cSVFormat2.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(str5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test0374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0374"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('\b'); boolean boolean12 = cSVFormat9.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0375"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.lang.String str13 = cSVRecord12.toString(); boolean boolean14 = cSVRecord12.isConsistent(); long long15 = cSVRecord12.getRecordNumber(); boolean boolean16 = cSVRecord12.isConsistent(); boolean boolean18 = cSVRecord12.isMapped("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]" + "'", str13, "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0376"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); java.lang.String str9 = cSVRecord8.toString(); java.util.Iterator<java.lang.String> strItor10 = cSVRecord8.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10]" + "'", str9, "[10]"); org.junit.Assert.assertNotNull(strItor10); }
public void test0377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0377"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.Quote quote6 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean9 = cSVFormat8.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withCommentStart('\f'); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withQuotePolicy(quote12); org.apache.commons.csv.Quote quote15 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean25 = cSVFormat24.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat24.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withNullString("[\205]"); boolean boolean34 = cSVFormat33.isQuoting(); org.apache.commons.csv.Quote quote35 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withQuotePolicy(quote35); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat33.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat33); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor40 = cSVParser39.iterator(); org.apache.commons.csv.CSVRecord cSVRecord41 = cSVParser39.nextRecord(); boolean boolean43 = cSVRecord41.isMapped("[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); java.lang.String[] strArray44 = cSVRecord41.values(); org.apache.commons.csv.CSVFormat cSVFormat46 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote15, (java.lang.Character) '\036', (java.lang.Character) '\b', true, false, "", "Delimiter=<\"> SkipHeaderRecord:true", strArray44, true); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withSkipHeaderRecord(false); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + quote6 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote6.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote12.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + quote15 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote15.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + quote35 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote35.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertNotNull(cSVRecordItor40); org.junit.Assert.assertNotNull(cSVRecord41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test0378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0378"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser2.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser2.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(strMap8); }
public void test0379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0379"); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withNullString("[\205]"); boolean boolean20 = cSVFormat19.isQuoting(); org.apache.commons.csv.Quote quote21 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withQuotePolicy(quote21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat19); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser25.iterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser25.nextRecord(); boolean boolean28 = cSVRecord27.isConsistent(); java.lang.String[] strArray29 = cSVRecord27.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap30 = null; org.apache.commons.csv.CSVRecord cSVRecord33 = new org.apache.commons.csv.CSVRecord(strArray29, strMap30, "COMMENT []", (long) '\036'); org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat('\f', (java.lang.Character) ',', quote2, (java.lang.Character) '\t', (java.lang.Character) 'a', false, true, "", "\205a", strArray29, true); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + quote21 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote21.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNotNull(cSVRecord27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray29); }
public void test0380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0380"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); boolean boolean10 = cSVFormat9.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withCommentStart('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean14 = cSVFormat13.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withRecordSeparator('a'); boolean boolean21 = cSVFormat12.equals((java.lang.Object) cSVFormat18); java.io.Reader reader22 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat12.parse(reader22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test0381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0381"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getCurrentLineNumber(); long long16 = cSVParser14.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean20 = cSVFormat19.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat24); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser14.getRecords(cSVRecordList27); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVRecordList28); }
public void test0382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0382"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser2.nextRecord(); boolean boolean7 = cSVRecord6.isConsistent(); // The following exception was thrown during execution in test generation try { java.lang.String str9 = cSVRecord6.get((int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertNotNull(cSVRecord6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test0383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0383"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser7.iterator(); long long10 = cSVParser7.getCurrentLineNumber(); long long11 = cSVParser7.getCurrentLineNumber(); boolean boolean12 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0384"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); cSVParser7.close(); long long9 = cSVParser7.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); boolean boolean11 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test0385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0385"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); cSVParser16.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser16.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); }
public void test0386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0386"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); long long9 = cSVParser7.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser7.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser7.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser7.nextRecord(); long long13 = cSVParser7.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertNull(cSVRecord12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test0387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0387"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null; org.apache.commons.csv.Lexer lexer3 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader2); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader4); java.lang.String str6 = cSVFormat1.toString(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withDelimiter('\f'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withDelimiter('\t'); boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test0388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0388"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.Quote quote19 = cSVFormat14.getQuotePolicy(); java.lang.String str20 = cSVFormat14.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + quote19 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote19.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Delimiter=<\t> Escape=<4> QuoteChar=<a> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str20, "Delimiter=<\t> Escape=<4> QuoteChar=<a> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false"); }
public void test0389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0389"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser7.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser7.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser7.iterator(); boolean boolean12 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordItor11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0390"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); java.lang.String str3 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(str3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test0391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0391"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote8 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withQuotePolicy(quote8); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreEmptyLines(true); java.lang.Character char14 = cSVFormat13.getCommentStart(); java.lang.String str15 = cSVFormat13.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withCommentStart('\\'); boolean boolean20 = cSVFormat19.isCommentingEnabled(); java.io.Reader reader21 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = cSVFormat19.parse(reader21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + quote8 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote8.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNull(char14); org.junit.Assert.assertNull(str15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test0392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0392"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat10, "10"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) 'a'); java.lang.String[] strArray15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withHeader(strArray15); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); }
public void test0393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0393"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); java.lang.String str8 = cSVFormat7.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar((java.lang.Character) '\"'); boolean boolean11 = cSVFormat10.isEscaping(); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("\205a", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) '\f'); java.lang.Character char15 = cSVFormat10.getCommentStart(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(str8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNull(char15); }
public void test0394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0394"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean20 = cSVRecord18.isSet(""); java.lang.String str22 = cSVRecord18.get(0); java.lang.String[] strArray23 = cSVRecord18.values(); int int24 = cSVRecord18.size(); int int25 = cSVRecord18.size(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<" + "'", str22, "Delimiter=<"); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2); }
public void test0395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0395"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); java.lang.String str5 = cSVFormat4.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withCommentStart((java.lang.Character) '4'); java.lang.String str8 = cSVFormat4.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<\r> QuoteChar=<a> CommentStart=<\b> NullString=<EORECORD []> RecordSeparator=<Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false> SkipHeaderRecord:false", cSVFormat4); long long10 = cSVParser9.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test0396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0396"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser2.nextRecord(); int int6 = cSVRecord5.size(); boolean boolean7 = cSVRecord5.isConsistent(); java.util.Iterator<java.lang.String> strItor8 = cSVRecord5.iterator(); boolean boolean10 = cSVRecord5.isSet("EORECORD []"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strItor8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0397"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withQuoteChar((java.lang.Character) ','); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0398"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); long long9 = cSVParser7.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser7.iterator(); long long11 = cSVParser7.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L); }
public void test0399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0399"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) '4'); boolean boolean15 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("a\205a", cSVFormat14); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.RFC4180; boolean boolean20 = cSVFormat19.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean24 = cSVFormat23.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withQuoteChar('\\'); java.lang.String[] strArray29 = cSVFormat23.getHeader(); org.apache.commons.csv.Quote quote32 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray39 = null; org.apache.commons.csv.CSVFormat cSVFormat41 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote32, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray39, false); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat23.withQuotePolicy(quote32); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean50 = cSVFormat49.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat49.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart('a'); boolean boolean59 = cSVFormat56.getIgnoreSurroundingSpaces(); java.lang.String[] strArray61 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap62 = null; org.apache.commons.csv.CSVRecord cSVRecord65 = new org.apache.commons.csv.CSVRecord(strArray61, strMap62, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap66 = null; org.apache.commons.csv.CSVRecord cSVRecord69 = new org.apache.commons.csv.CSVRecord(strArray61, strMap66, "", (long) '\\'); java.lang.String str70 = cSVFormat56.format((java.lang.Object[]) strArray61); java.util.Map<java.lang.String, java.lang.Integer> strMap71 = null; org.apache.commons.csv.CSVRecord cSVRecord74 = new org.apache.commons.csv.CSVRecord(strArray61, strMap71, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray61, "[10]"); org.apache.commons.csv.CSVFormat cSVFormat78 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) 'a', quote32, (java.lang.Character) 'a', (java.lang.Character) '\t', true, true, "\r\n", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", strArray61, true); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat19.withQuotePolicy(quote32); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat18.withQuotePolicy(quote32); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNull(strArray29); org.junit.Assert.assertTrue("'" + quote32 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote32.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\\\205\\a" + "'", str70, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertNotNull(cSVFormat80); }
public void test0400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0400"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); long long13 = cSVParser11.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord14 = cSVParser11.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator15 = cSVParser11.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord16 = cSVParser11.nextRecord(); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecord14); org.junit.Assert.assertNotNull(cSVRecordSpliterator15); org.junit.Assert.assertNotNull(cSVRecord16); }
public void test0401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0401"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withCommentStart('\b'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVParser8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0402"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); long long9 = cSVParser7.getRecordNumber(); boolean boolean10 = cSVParser7.isClosed(); boolean boolean11 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0403"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); long long5 = cSVParser2.getRecordNumber(); boolean boolean6 = cSVParser2.isClosed(); cSVParser2.close(); boolean boolean8 = cSVParser2.isClosed(); cSVParser2.close(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat11); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser12.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean17 = cSVFormat16.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser22.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection24 = cSVParser12.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList23); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection25 = cSVParser2.getRecords(cSVRecordCollection24); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNull(strMap13); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNotNull(cSVRecordCollection24); }
public void test0404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0404"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withIgnoreSurroundingSpaces(true); cSVFormat16.validate(); char char18 = cSVFormat16.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withDelimiter('\"'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\t' + "'", char18 == '\t'); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0405"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat0.withNullString(""); boolean boolean10 = cSVFormat9.isEscaping(); boolean boolean11 = cSVFormat9.isCommentingEnabled(); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat9.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0406"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withEscape('\"'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("\205a", cSVFormat4); long long10 = cSVParser9.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test0407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0407"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); boolean boolean6 = cSVFormat0.isQuoting(); java.lang.String str7 = cSVFormat0.toString(); java.lang.Character char8 = cSVFormat0.getCommentStart(); char char9 = cSVFormat0.getDelimiter(); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat0.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNull(char8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\t' + "'", char9 == '\t'); }
public void test0408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0408"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote13 = cSVFormat6.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.Quote quote16 = cSVFormat6.getQuotePolicy(); java.lang.String str17 = cSVFormat6.getNullString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(quote13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNull(quote16); org.junit.Assert.assertNull(str17); }
public void test0409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0409"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean20 = cSVRecord18.isSet(""); java.lang.String str22 = cSVRecord18.get(0); java.lang.String[] strArray23 = cSVRecord18.values(); int int24 = cSVRecord18.size(); boolean boolean25 = cSVRecord18.isConsistent(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<" + "'", str22, "Delimiter=<"); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); }
public void test0410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0410"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentStart('a'); boolean boolean12 = cSVFormat9.getIgnoreSurroundingSpaces(); java.lang.String[] strArray14 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray14, strMap19, "", (long) '\\'); java.lang.String str23 = cSVFormat9.format((java.lang.Object[]) strArray14); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat9.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat9.withIgnoreSurroundingSpaces(false); boolean boolean28 = cSVFormat27.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\\\205\\a" + "'", str23, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test0411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0411"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\\ \\\t10a"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuoteChar(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test0412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0412"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); java.lang.String str8 = cSVFormat7.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar((java.lang.Character) '\"'); java.lang.String str11 = cSVFormat7.getNullString(); cSVFormat7.validate(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(str8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNull(str11); }
public void test0413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0413"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getCurrentLineNumber(); long long16 = cSVParser14.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser14.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser14.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertNotNull(cSVRecordItor18); }
public void test0414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0414"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); boolean boolean8 = cSVFormat2.isQuoting(); java.lang.String str9 = cSVFormat2.toString(); java.lang.Character char10 = cSVFormat2.getQuoteChar(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str9, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNull(char10); }
public void test0415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0415"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart((java.lang.Character) '\\'); boolean boolean11 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withEscape((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withEscape(','); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0416"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); boolean boolean19 = cSVRecord18.isConsistent(); java.lang.String[] strArray20 = cSVRecord18.values(); java.lang.String str21 = cSVRecord18.getComment(); int int22 = cSVRecord18.size(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNull(str21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); }
public void test0417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0417"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces(); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray12, strMap17, "", (long) '\\'); java.lang.String str21 = cSVFormat7.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat7.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat7.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withQuoteChar((java.lang.Character) 'a'); java.io.Reader reader30 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = cSVFormat27.parse(reader30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\\\205\\a" + "'", str21, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test0418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0418"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withDelimiter('\037'); java.lang.String[] strArray17 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray17, strMap22, "", (long) '\\'); boolean boolean27 = cSVRecord25.isSet(""); java.lang.String str28 = cSVRecord25.toString(); int int29 = cSVRecord25.size(); java.lang.String str30 = cSVRecord25.toString(); boolean boolean32 = cSVRecord25.isMapped("[10]"); boolean boolean34 = cSVRecord25.isSet("\\ \\\t10a"); java.lang.String str35 = cSVRecord25.getComment(); java.lang.String[] strArray36 = cSVRecord25.values(); java.lang.String str37 = cSVFormat13.format((java.lang.Object[]) strArray36); java.io.Reader reader38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = cSVFormat13.parse(reader38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[\205]" + "'", str28, "[\205]"); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[\205]" + "'", str30, "[\205]"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\\\205\\a" + "'", str37, "\\\205\\a"); }
public void test0419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0419"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); long long9 = cSVParser7.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser7.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser7.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser7.nextRecord(); long long13 = cSVParser7.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertNull(cSVRecord12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L); }
public void test0420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0420"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces(); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray12, strMap17, "", (long) '\\'); java.lang.String str21 = cSVFormat7.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat7.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat7.withDelimiter('4'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withDelimiter('4'); boolean boolean37 = cSVFormat34.getIgnoreSurroundingSpaces(); boolean boolean38 = cSVFormat34.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<\r> QuoteChar=<a> CommentStart=<\b> NullString=<EORECORD []> RecordSeparator=<Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false> SkipHeaderRecord:false", cSVFormat34); boolean boolean40 = cSVFormat29.equals((java.lang.Object) "Delimiter=<a> Escape=<\r> QuoteChar=<a> CommentStart=<\b> NullString=<EORECORD []> RecordSeparator=<Delimiter=<\t> Escape=<\\\u2028> SkipHeaderRecord:false> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\\\205\\a" + "'", str21, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVParser39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); }
public void test0421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0421"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); java.lang.String[] strArray12 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\205", 100L); java.lang.String str17 = cSVFormat10.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat10.withRecordSeparator('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> CommentStart=<a> RecordSeparator=<a> SkipHeaderRecord:false", cSVFormat10); org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser20.nextRecord(); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList22 = null; java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser20.getRecords(cSVRecordList22); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser20.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a\205a" + "'", str17, "a\205a"); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVRecord21); org.junit.Assert.assertNull(cSVRecordList23); org.junit.Assert.assertNotNull(cSVRecordList24); }
public void test0422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0422"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); boolean boolean12 = cSVParser11.isClosed(); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0423"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withCommentStart((java.lang.Character) '#'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test0424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0424"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); java.lang.String[] strArray6 = cSVFormat0.getHeader(); boolean boolean7 = cSVFormat0.isQuoting(); char char8 = cSVFormat0.getDelimiter(); java.lang.String[] strArray9 = cSVFormat0.getHeader(); java.lang.String str10 = cSVFormat0.toString(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat0.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat0.withIgnoreSurroundingSpaces(false); java.io.Reader reader17 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = cSVFormat0.parse(reader17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\t' + "'", char8 == '\t'); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0425"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat9, "10"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat9.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat9.withRecordSeparator("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean20 = cSVFormat19.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withNullString("[\205]"); boolean boolean29 = cSVFormat28.isQuoting(); org.apache.commons.csv.Quote quote30 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withQuotePolicy(quote30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat28); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat28.withIgnoreEmptyLines(true); boolean boolean37 = cSVFormat36.getIgnoreSurroundingSpaces(); boolean boolean38 = cSVFormat9.equals((java.lang.Object) cSVFormat36); boolean boolean39 = cSVFormat9.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + quote30 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote30.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); }
public void test0426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0426"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean1 = cSVFormat0.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); boolean boolean5 = cSVFormat0.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); boolean boolean9 = cSVFormat0.equals((java.lang.Object) "Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false"); java.lang.Character char10 = cSVFormat0.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat0.withEscape((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat0.withCommentStart((java.lang.Character) '\037'); java.io.Reader reader15 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = cSVFormat0.parse(reader15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0427"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); boolean boolean7 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote10 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withQuotePolicy(quote10); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote16 = null; org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat11.withQuotePolicy(quote16); java.lang.String[] strArray18 = cSVFormat17.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + quote10 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote10.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0428"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\u2028", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0429"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); java.lang.String[] strArray8 = cSVFormat2.getHeader(); org.apache.commons.csv.Quote quote11 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray18 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote11, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray18, false); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat2.withQuotePolicy(quote11); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withCommentStart('a'); boolean boolean38 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray40 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) '\\'); java.lang.String str49 = cSVFormat35.format((java.lang.Object[]) strArray40); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray40, strMap50, "Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", (long) '\037'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray40, "[10]"); org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) 'a', quote11, (java.lang.Character) 'a', (java.lang.Character) '\t', true, true, "\r\n", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", strArray40, true); java.io.Reader reader58 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser59 = cSVFormat57.parse(reader58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertTrue("'" + quote11 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote11.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\\\205\\a" + "'", str49, "\\\205\\a"); }
public void test0430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0430"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); long long10 = cSVParser7.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser7.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L); org.junit.Assert.assertNull(strMap11); }
public void test0431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0431"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); java.lang.String str5 = cSVFormat2.getNullString(); boolean boolean6 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null; org.apache.commons.csv.Lexer lexer8 = new org.apache.commons.csv.Lexer(cSVFormat2, extendedBufferedReader7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape((java.lang.Character) '\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(str5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test0432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0432"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('4'); boolean boolean6 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean11 = cSVFormat10.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat15); org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser20.nextRecord(); java.lang.String str22 = cSVRecord21.toString(); boolean boolean23 = cSVRecord21.isConsistent(); boolean boolean25 = cSVRecord21.isMapped("[\205]"); boolean boolean26 = cSVFormat8.equals((java.lang.Object) cSVRecord21); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord21.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVRecord21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]" + "'", str22, "[Delimiter=<, > Escape=<\\> QuoteChar=<\b> RecordSeparator=<]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(strSpliterator27); }
public void test0433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0433"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('\"'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreEmptyLines(false); java.lang.String[] strArray14 = cSVFormat13.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withRecordSeparator('\t'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withRecordSeparator("Delimiter=<a> SkipHeaderRecord:false Header:[\205]"); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNull(strArray14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0434"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator('\"'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser9.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVRecordItor10); }
public void test0435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0435"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); java.lang.String str5 = cSVFormat2.getNullString(); java.lang.Character char6 = cSVFormat2.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withDelimiter('a'); boolean boolean9 = cSVFormat2.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(str5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0436"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); java.util.Spliterator<java.lang.String> strSpliterator9 = cSVRecord8.spliterator(); boolean boolean10 = cSVRecord8.isConsistent(); boolean boolean12 = cSVRecord8.isMapped(""); java.util.Spliterator<java.lang.String> strSpliterator13 = cSVRecord8.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertNotNull(strSpliterator9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(strSpliterator13); }
public void test0437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0437"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); boolean boolean11 = cSVFormat8.getIgnoreSurroundingSpaces(); java.lang.String[] strArray13 = new java.lang.String[] { "\205" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\205", 100L); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray13, strMap18, "", (long) '\\'); java.lang.String str22 = cSVFormat8.format((java.lang.Object[]) strArray13); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat8.withRecordSeparator('\r'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withCommentStart((java.lang.Character) '\036'); boolean boolean27 = cSVFormat26.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat26); long long29 = cSVParser28.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\\\205\\a" + "'", str22, "\\\205\\a"); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVParser28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); }
public void test0438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0438"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null; org.apache.commons.csv.Lexer lexer19 = new org.apache.commons.csv.Lexer(cSVFormat17, extendedBufferedReader18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withEscape('\"'); boolean boolean22 = cSVFormat12.equals((java.lang.Object) cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withRecordSeparator("[10]"); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat24.withNullString("EOF []"); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat24.withCommentStart((java.lang.Character) '4'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test0439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0439"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser2.getRecords(); long long5 = cSVParser2.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); }
public void test0440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0440"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser7.getRecords(); boolean boolean12 = cSVParser7.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser7.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVRecordList13); }
public void test0441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0441"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withSkipHeaderRecord(false); java.lang.String[] strArray8 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("10\t Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); }
public void test0442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0442"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); long long10 = cSVParser7.getRecordNumber(); cSVParser7.close(); boolean boolean12 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test0443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0443"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withEscape('\f'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withRecordSeparator("\205"); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat8); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean12 = cSVFormat11.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat11.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat16); boolean boolean18 = cSVFormat8.equals((java.lang.Object) cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0444"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat10, "10"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withQuoteChar((java.lang.Character) 'a'); java.lang.String[] strArray15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withHeader(strArray15); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0445"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); java.lang.String str9 = cSVRecord8.toString(); int int10 = cSVRecord8.size(); java.util.Iterator<java.lang.String> strItor11 = cSVRecord8.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[10]" + "'", str9, "[10]"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(strItor11); }
public void test0446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0446"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null; org.apache.commons.csv.Lexer lexer19 = new org.apache.commons.csv.Lexer(cSVFormat17, extendedBufferedReader18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withEscape('\"'); boolean boolean22 = cSVFormat12.equals((java.lang.Object) cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat12.withRecordSeparator('a'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test0447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0447"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withEscape((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withEscape((java.lang.Character) '\037'); boolean boolean17 = cSVFormat16.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0448"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean3 = cSVFormat2.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentStart('a'); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat11, "10"); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withQuoteChar((java.lang.Character) 'a'); char char16 = cSVFormat11.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withQuoteChar('\"'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\t' + "'", char16 == '\t'); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0449"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat3, extendedBufferedReader4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.Quote quote8 = cSVFormat3.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withNullString("\205"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat3.withQuoteChar((java.lang.Character) '\"'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat12); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null; org.apache.commons.csv.Lexer lexer15 = new org.apache.commons.csv.Lexer(cSVFormat12, extendedBufferedReader14); // The following exception was thrown during execution in test generation try { long long16 = lexer15.getCurrentLineNumber(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(quote8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); }
public void test0450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0450"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces(); boolean boolean6 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote9 = org.apache.commons.csv.Quote.MINIMAL; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withQuotePolicy(quote9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withNullString(""); boolean boolean13 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withNullString("Delimiter=<\t> Escape=<\\> QuoteChar=<\\> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat10.withCommentStart((java.lang.Character) '\"'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + quote9 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote9.equals(org.apache.commons.csv.Quote.MINIMAL)); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0451"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser2.nextRecord(); boolean boolean7 = cSVRecord6.isConsistent(); // The following exception was thrown during execution in test generation try { java.lang.String str9 = cSVRecord6.get((int) '\t'); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertNotNull(cSVRecord6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test0452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0452"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); boolean boolean12 = cSVFormat6.isCommentingEnabled(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0453"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); java.lang.String[] strArray7 = cSVFormat1.getHeader(); org.apache.commons.csv.Quote quote10 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray17 = null; org.apache.commons.csv.CSVFormat cSVFormat19 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote10, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray17, false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat1.withQuotePolicy(quote10); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withNullString("a"); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> Escape=<\\> CommentStart=<#> SkipHeaderRecord:false", cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertTrue("'" + quote10 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote10.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); }
public void test0454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0454"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withCommentStart(','); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat10); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.lang.String str13 = cSVRecord12.toString(); boolean boolean14 = cSVRecord12.isConsistent(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test0455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0455"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); char char5 = cSVFormat4.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator('a'); java.lang.String str8 = cSVFormat7.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar((java.lang.Character) '\"'); boolean boolean11 = cSVFormat10.isEscaping(); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("\205a", cSVFormat10); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withIgnoreEmptyLines(true); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\t' + "'", char5 == '\t'); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(str8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test0456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0456"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap3 = cSVParser2.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser2.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser2.nextRecord(); boolean boolean7 = cSVRecord6.isConsistent(); long long8 = cSVRecord6.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVParser2); org.junit.Assert.assertNull(strMap3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(strMap5); org.junit.Assert.assertNotNull(cSVRecord6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L); }
public void test0457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0457"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuoteChar('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withEscape('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> QuoteChar=<\b> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat6); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser11.getHeaderMap(); long long13 = cSVParser11.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord14 = cSVParser11.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator15 = cSVParser11.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord16 = cSVParser11.nextRecord(); // The following exception was thrown during execution in test generation try { java.lang.String str18 = cSVRecord16.get("\\ \\\t10a"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecord14); org.junit.Assert.assertNotNull(cSVRecordSpliterator15); org.junit.Assert.assertNotNull(cSVRecord16); }
public void test0458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0458"); java.io.File file0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); java.lang.Character char4 = cSVFormat1.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(char4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test0459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0459"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL; org.apache.commons.csv.Quote quote5 = org.apache.commons.csv.Quote.NONE; java.lang.String[] strArray12 = null; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat(',', (java.lang.Character) '\t', quote5, (java.lang.Character) ' ', (java.lang.Character) '#', false, true, "\u2029", "", strArray12, false); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withQuotePolicy(quote5); boolean boolean16 = cSVFormat2.getIgnoreSurroundingSpaces(); java.lang.Character char17 = cSVFormat2.getEscape(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + quote5 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote5.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNull(char17); }
public void test0460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0460"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('a'); boolean boolean10 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); boolean boolean13 = cSVFormat12.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0461"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("[\205]"); boolean boolean11 = cSVFormat10.isQuoting(); org.apache.commons.csv.Quote quote12 = org.apache.commons.csv.Quote.NONE; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat10); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser16.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser16.nextRecord(); java.lang.String str20 = cSVRecord19.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + quote12 + "' != '" + org.apache.commons.csv.Quote.NONE + "'", quote12.equals(org.apache.commons.csv.Quote.NONE)); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordItor17); org.junit.Assert.assertNotNull(cSVRecord18); org.junit.Assert.assertNotNull(cSVRecord19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[> SurroundingSpaces:ignored SkipHeaderRecord:false]" + "'", str20, "[> SurroundingSpaces:ignored SkipHeaderRecord:false]"); }
public void test0462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0462"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; boolean boolean2 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator(""); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("10", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser7.getHeaderMap(); long long10 = cSVParser7.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecord8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test0463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0463"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0464"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); }
public void test0465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0465"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); }
public void test0466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0466"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); java.io.Reader reader17 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = cSVFormat13.parse(reader17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test0467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0467"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withNullString("hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0468"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test0469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0469"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); java.lang.String str16 = cSVFormat15.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withQuoteChar((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0470"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat59); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0471"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]", cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The escape character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0472"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withEscape((java.lang.Character) '#'); boolean boolean21 = cSVFormat16.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test0473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0473"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat16.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); }
public void test0474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0474"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat15.withNullString("hi!"); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat15.withQuotePolicy(quote22); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat23.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0475"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); }
public void test0476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0476"); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.Quote quote11 = null; java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat22 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote11, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray20, true); org.apache.commons.csv.CSVFormat cSVFormat24 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray20, true); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat24.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray20); }
public void test0477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0477"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); boolean boolean15 = cSVFormat14.getIgnoreSurroundingSpaces(); boolean boolean16 = cSVFormat14.isEscaping(); java.lang.String[] strArray17 = cSVFormat14.getHeader(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray17); }
public void test0478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0478"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withCommentStart('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); }
public void test0479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0479"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat19.withIgnoreEmptyLines(true); java.io.Reader reader26 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = cSVFormat19.parse(reader26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test0480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0480"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat19.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test0481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0481"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test0482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0482"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); boolean boolean52 = cSVFormat50.equals((java.lang.Object) 10.0d); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser53 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat50); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test0483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0483"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean17 = cSVFormat14.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote22 = null; java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat33 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote22, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray31, true); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withEscape('4'); boolean boolean40 = cSVFormat14.equals((java.lang.Object) cSVFormat37); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); }
public void test0484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0484"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces(); boolean boolean15 = cSVFormat13.isEscaping(); java.lang.String[] strArray16 = cSVFormat13.getHeader(); java.io.Reader reader17 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = cSVFormat13.parse(reader17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray16); }
public void test0485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0485"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withEscape('#'); boolean boolean18 = cSVFormat15.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote23 = null; java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat34 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote23, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray32, true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withEscape('4'); boolean boolean41 = cSVFormat15.equals((java.lang.Object) cSVFormat38); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test0486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0486"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withCommentStart('a'); boolean boolean20 = cSVFormat19.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.Quote quote32 = null; java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote32, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray41, true); org.apache.commons.csv.CSVFormat cSVFormat45 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote23, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray41, true); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray41, strMap46, "", (long) ' '); java.lang.String[] strArray50 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat19.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withIgnoreSurroundingSpaces(true); boolean boolean54 = cSVFormat53.isCommentingEnabled(); org.apache.commons.csv.Quote quote55 = null; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withQuotePolicy(quote55); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat53); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test0487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0487"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); java.lang.String str15 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withRecordSeparator(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0488"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat14.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat14.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0489"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); boolean boolean18 = cSVFormat16.equals((java.lang.Object) false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the quoteChar cannot be the same ('4')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0490"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat18.withRecordSeparator("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0491"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); boolean boolean18 = cSVFormat14.getSkipHeaderRecord(); java.lang.String str19 = cSVFormat14.getRecordSeparator(); org.apache.commons.csv.Quote quote20 = cSVFormat14.getQuotePolicy(); boolean boolean21 = cSVFormat14.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNull(quote20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test0492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0492"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape('#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withNullString("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test0493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0493"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat50.withRecordSeparator('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat54); }
public void test0494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0494"); java.io.Reader reader0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser56 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test0495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0495"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.Quote quote4 = null; java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat15 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote4, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray13, true); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test0496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0496"); java.io.File file0 = null; org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat18.withNullString("hi!"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse(file0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); }
public void test0497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0497"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('a'); boolean boolean19 = cSVFormat18.getIgnoreEmptyLines(); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.Quote quote31 = null; java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote31, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray40, true); org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote22, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray40, true); java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray40, strMap45, "", (long) ' '); java.lang.String[] strArray49 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat18.withHeader(strArray49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withIgnoreSurroundingSpaces(true); java.lang.String str53 = cSVFormat52.toString(); java.lang.String str54 = cSVFormat52.getRecordSeparator(); boolean boolean55 = cSVFormat52.getIgnoreEmptyLines(); java.lang.Object obj56 = null; boolean boolean57 = cSVFormat52.equals(obj56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat52.withEscape((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<4> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:false Header:[, hi!]", cSVFormat52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str53, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true Header:[, hi!]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); }
public void test0498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0498"); org.apache.commons.csv.Quote quote3 = null; java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat14 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote3, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray12, true); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); char char17 = cSVFormat14.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat14.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart((java.lang.Character) 'a'); java.lang.String str22 = cSVFormat21.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("[, hi!]", cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'a' + "'", char17 == 'a'); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]" + "'", str22, "Delimiter=<a> Escape=<4> QuoteChar=<4> CommentStart=<a> NullString=<> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true Header:[, hi!]"); }
public void test0499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0499"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); java.lang.String str14 = cSVFormat13.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuoteChar((java.lang.Character) ' '); boolean boolean19 = cSVFormat16.isEscaping(); java.io.Reader reader20 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat16.parse(reader20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test0500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0500"); org.apache.commons.csv.Quote quote2 = null; java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote2, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray11, true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withRecordSeparator(' '); org.apache.commons.csv.Quote quote20 = null; org.apache.commons.csv.Quote quote29 = null; java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!" }; org.apache.commons.csv.CSVFormat cSVFormat40 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '4', quote29, (java.lang.Character) '4', (java.lang.Character) '4', false, true, "hi!", "", strArray38, true); org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat('#', (java.lang.Character) '4', quote20, (java.lang.Character) 'a', (java.lang.Character) '#', false, false, "", "", strArray38, true); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat15.withHeader(strArray38); java.io.Reader reader44 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser45 = cSVFormat15.parse(reader44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat43); }
public void testBackslashEscaping() throws IOException { // To avoid confusion over the need for escaping chars in java code, // We will test with a forward slash as the escape char, and a single // quote as the encapsulator. final String code = "one,two,three\n" // 0 + "'',''\n"    // 1) empty encapsulators + "/',/'\n"    // 2) single encapsulators + "'/'','/''\n"  // 3) single encapsulators encapsulated via escape + "'''',''''\n"  // 4) single encapsulators encapsulated via doubling + "/,,/,\n"    // 5) separator escaped + "//,//\n"    // 6) escape escaped + "'//','//'\n"  // 7) escape escaped in encapsulation + "  8  ,  \"quoted \"\" /\" // string\"  \n"   // don't eat spaces + "9,  /\n  \n" // escaped newline + ""; final String[][] res = { {"one", "two", "three"}, // 0 {"", ""},        // 1 {"'", "'"},       // 2 {"'", "'"},       // 3 {"'", "'"},       // 4 {",", ","},       // 5 {"/", "/"},       // 6 {"/", "/"},       // 7 {"  8  ", "  \"quoted \"\" /\" / string\"  "}, {"9", "  \n  "}, };  final CSVFormat format = CSVFormat.newFormat(',').withQuoteChar('\'') .withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines(true); final CSVParser parser = CSVParser.parse(code, format); final List<CSVRecord> records = parser.getRecords(); assertTrue(records.size() > 0); Utils.compare("Records do not match expected result", res, records); parser.close(); }
public void testBackslashEscaping2() throws IOException { // To avoid confusion over the need for escaping chars in java code, // We will test with a forward slash as the escape char, and a single // quote as the encapsulator. final String code = "" + " , , \n"      // 1) + " \t , , \n"    // 2) + " // , /, , /,\n"  // 3) + ""; final String[][] res = { {" ", " ", " "},     // 1 {" \t ", " ", " "},   // 2 {" / ", " , ", " ,"},  // 3 };  final CSVFormat format = CSVFormat.newFormat(',') .withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines(true); final CSVParser parser = CSVParser.parse(code, format); final List<CSVRecord> records = parser.getRecords(); assertTrue(records.size() > 0); Utils.compare("", res, records); parser.close(); }
public void testBackslashEscapingOld() throws IOException { final String code = "one,two,three\n" + "on\\\"e,two\n" + "on\"e,two\n" + "one,\"tw\\\"o\"\n" + "one,\"t\\,wo\"\n" + "one,two,\"th,ree\"\n" + "\"a\\\\\"\n" + "a\\,b\n" + "\"a\\\\,b\""; final String[][] res = { {"one", "two", "three"}, {"on\\\"e", "two"}, {"on\"e", "two"}, {"one", "tw\"o"}, {"one", "t\\,wo"}, // backslash in quotes only escapes a delimiter (",") {"one", "two", "th,ree"}, {"a\\\\"},   // backslash in quotes only escapes a delimiter (",") {"a\\", "b"}, // a backslash must be returnd {"a\\\\,b"}  // backslash in quotes only escapes a delimiter (",") }; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); }
public void testBOM() throws IOException { URL url = ClassLoader.getSystemClassLoader().getResource("CSVFileParser/bom.csv"); final CSVParser parser = CSVParser.parse(url, null, CSVFormat.EXCEL.withHeader()); try { for (CSVRecord record : parser) { final String string = record.get("Date"); Assert.assertNotNull(string); //System.out.println("date: " + record.get("Date")); } } finally { parser.close(); } }
public void testBOMInputStream() {} // Defects4J: flaky method //   @Test //   public void testBOMInputStream() throws IOException { //     URL url = ClassLoader.getSystemClassLoader().getResource("CSVFileParser/bom.csv"); //     Reader reader = new InputStreamReader(new BOMInputStream(url.openStream()), "UTF-8"); //     final CSVParser parser = new CSVParser(reader, CSVFormat.EXCEL.withHeader()); //     try { //       for (CSVRecord record : parser) { //         final String string = record.get("Date"); //         Assert.assertNotNull(string); //         //System.out.println("date: " + record.get("Date")); //       } //     } finally { //       parser.close(); //       reader.close(); //     } //   } @Test public void testCarriageReturnEndings() throws IOException { final String code = "foo\rbaar,\rhello,world\r,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(4, records.size()); parser.close(); } @Test public void testCarriageReturnLineFeedEndings() throws IOException { final String code = "foo\r\nbaar,\r\nhello,world\r\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(4, records.size()); parser.close(); } @Test(expected = NoSuchElementException.class) public void testClose() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final CSVParser parser = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in); final Iterator<CSVRecord> records = parser.iterator(); assertTrue(records.hasNext()); parser.close(); assertFalse(records.hasNext()); records.next(); } @Test public void testCSV57() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); final List<CSVRecord> list = parser.getRecords(); assertNotNull(list); assertEquals(0, list.size()); parser.close(); } @Test public void testDefaultFormat() throws IOException { final String code = "" + "a,b#\n"      // 1) + "\"\n\",\" \",#\n"  // 2) + "#,\"\"\n"     // 3) + "# Final comment\n"// 4) ; final String[][] res = { {"a", "b#"}, {"\n", " ", "#"}, {"#", ""}, {"# Final comment"} }; CSVFormat format = CSVFormat.DEFAULT; assertFalse(format.isCommentingEnabled()); CSVParser parser = CSVParser.parse(code, format); List<CSVRecord> records = parser.getRecords(); assertTrue(records.size() > 0); Utils.compare("Failed to parse without comments", res, records); final String[][] res_comments = { {"a", "b#"}, {"\n", " ", "#"}, }; format = CSVFormat.DEFAULT.withCommentStart('#'); parser.close(); parser = CSVParser.parse(code, format); records = parser.getRecords(); Utils.compare("Failed to parse with comments", res_comments, records); parser.close(); } @Test public void testEmptyFile() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); assertNull(parser.nextRecord()); parser.close(); } @Test public void testEmptyLineBehaviourCSV() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""} // CSV format ignores empty lines }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } } @Test public void testEmptyLineBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""}, {""}, // Excel format does not ignore empty lines {""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } } @Test public void testEndOfFileBehaviorCSV() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, // CSV format ignores empty lines {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } } @Test public void testEndOfFileBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, {""}, // Excel format does not ignore empty lines {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } } @Test public void testExcelFormat1() throws IOException { final String code = "value1,value2,value3,value4\r\na,b,c,d\r\n x,,," + "\r\n\r\n\"\"\"hello\"\"\",\" \"\"world\"\"\",\"abc\ndef\",\r\n"; final String[][] res = { {"value1", "value2", "value3", "value4"}, {"a", "b", "c", "d"}, {" x", "", "", ""}, {""}, {"\"hello\"", " \"world\"", "abc\ndef", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } @Test public void testExcelFormat2() throws Exception { final String code = "foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n"; final String[][] res = { {"foo", "baar"}, {""}, {"hello", ""}, {""}, {"world", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } @Test public void testForEach() throws Exception { final List<CSVRecord> records = new ArrayList<CSVRecord>(); final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); for (final CSVRecord record : CSVFormat.DEFAULT.parse(in)) { records.add(record); } assertEquals(3, records.size()); assertArrayEquals(new String[]{"a", "b", "c"}, records.get(0).values()); assertArrayEquals(new String[]{"1", "2", "3"}, records.get(1).values()); assertArrayEquals(new String[]{"x", "y", "z"}, records.get(2).values()); } @Test public void testGetHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader("A", "B", "C")); final Map<String, Integer> headerMap = parser.getHeaderMap(); final Iterator<String> columnNames = headerMap.keySet().iterator(); // Headers are iterated in column order. Assert.assertEquals("A", columnNames.next()); Assert.assertEquals("B", columnNames.next()); Assert.assertEquals("C", columnNames.next()); final Iterator<CSVRecord> records = parser.iterator(); // Parse to make sure getHeaderMap did not have a side-effect. for (int i = 0; i < 3; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertEquals(record.get(0), record.get("A")); assertEquals(record.get(1), record.get("B")); assertEquals(record.get(2), record.get("C")); } assertFalse(records.hasNext()); parser.close(); } @Test(expected = IllegalStateException.class) public void testDuplicateHeaderEntries() throws Exception { CSVParser.parse("a,b,a\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader(new String[]{})); } @Test public void testGetLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); for (final String[] re : RESULT) { assertArrayEquals(re, parser.nextRecord().values()); } assertNull(parser.nextRecord()); parser.close(); } @Test public void testGetLineNumberWithCR() throws Exception { this.validateLineNumbers(String.valueOf(CR)); } @Test public void testGetLineNumberWithCRLF() throws Exception { this.validateLineNumbers(CRLF); } @Test public void testGetLineNumberWithLF() throws Exception { this.validateLineNumbers(String.valueOf(LF)); } @Test public void testGetOneLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords().get(0); assertArrayEquals(RESULT[0], record.values()); parser.close(); } @Test public void testGetOneLineCustomCollection() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords(new LinkedList<CSVRecord>()).getFirst(); assertArrayEquals(RESULT[0], record.values()); parser.close(); } /** * Tests reusing a parser to process new string records one at a time as they are being discovered. See [CSV-110]. * * @throws IOException */ @Test public void testGetOneLineOneParser() throws IOException { PipedWriter writer = new PipedWriter(); PipedReader reader = new PipedReader(writer); final CSVFormat format = CSVFormat.DEFAULT; final CSVParser parser = new CSVParser(reader, format); try { writer.append(CSV_INPUT_1); writer.append(format.getRecordSeparator()); final CSVRecord record1 = parser.nextRecord(); assertArrayEquals(RESULT[0], record1.values()); writer.append(CSV_INPUT_2); writer.append(format.getRecordSeparator()); final CSVRecord record2 = parser.nextRecord(); assertArrayEquals(RESULT[1], record2.values()); } finally { parser.close(); } } @Test public void testGetRecordNumberWithCR() throws Exception { this.validateRecordNumbers(String.valueOf(CR)); } @Test public void testGetRecordNumberWithCRLF() throws Exception { this.validateRecordNumbers(CRLF); } @Test public void testGetRecordNumberWithLF() throws Exception { this.validateRecordNumbers(String.valueOf(LF)); } @Test public void testGetRecords() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); final List<CSVRecord> records = parser.getRecords(); assertEquals(RESULT.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < RESULT.length; i++) { assertArrayEquals(RESULT[i], records.get(i).values()); } parser.close(); } @Test public void testGetRecordWithMultiLineValues() throws Exception { final CSVParser parser = CSVParser.parse("\"a\r\n1\",\"a\r\n2\"" + CRLF + "\"b\r\n1\",\"b\r\n2\"" + CRLF + "\"c\r\n1\",\"c\r\n2\"", CSVFormat.DEFAULT.withRecordSeparator(CRLF)); CSVRecord record; assertEquals(0, parser.getRecordNumber()); assertEquals(0, parser.getCurrentLineNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(3, parser.getCurrentLineNumber()); assertEquals(1, record.getRecordNumber()); assertEquals(1, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(6, parser.getCurrentLineNumber()); assertEquals(2, record.getRecordNumber()); assertEquals(2, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(8, parser.getCurrentLineNumber()); assertEquals(3, record.getRecordNumber()); assertEquals(3, parser.getRecordNumber()); assertNull(record = parser.nextRecord()); assertEquals(8, parser.getCurrentLineNumber()); assertEquals(3, parser.getRecordNumber()); parser.close(); } @Test public void testHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertEquals(record.get(0), record.get("a")); assertEquals(record.get(1), record.get("b")); assertEquals(record.get(2), record.get("c")); } assertFalse(records.hasNext()); } @Test public void testHeaderComment() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertEquals(record.get(0), record.get("a")); assertEquals(record.get(1), record.get("b")); assertEquals(record.get(2), record.get("c")); } assertFalse(records.hasNext()); } @Test public void testIgnoreEmptyLines() throws IOException { final String code = "\nfoo,baar\n\r\n,\n\n,world\r\n\n"; //String code = "world\r\n\n"; //String code = "foo;baar\r\n\r\nhello;\r\n\r\nworld;\r\n"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(3, records.size()); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testInvalidFormat() throws Exception { final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR); new CSVParser(null, invalidFormat).close(); } @Test public void testIterator() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator(); assertTrue(iterator.hasNext()); try { iterator.remove(); fail("expected UnsupportedOperationException"); } catch (final UnsupportedOperationException expected) { // expected } assertArrayEquals(new String[]{"a", "b", "c"}, iterator.next().values()); assertArrayEquals(new String[]{"1", "2", "3"}, iterator.next().values()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertArrayEquals(new String[]{"x", "y", "z"}, iterator.next().values()); assertFalse(iterator.hasNext()); try { iterator.next(); fail("NoSuchElementException expected"); } catch (final NoSuchElementException e) { // expected } } @Test public void testLineFeedEndings() throws IOException { final String code = "foo\nbaar,\nhello,world\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(4, records.size()); parser.close(); } @Test public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception { final Reader in = new StringReader("a,b,c\n1,2\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").withSkipHeaderRecord(true) .parse(in).iterator(); CSVRecord record; // 1st record record = records.next(); assertTrue(record.isMapped("A")); assertTrue(record.isMapped("B")); assertTrue(record.isMapped("C")); assertTrue(record.isSet("A")); assertTrue(record.isSet("B")); assertFalse(record.isSet("C")); assertEquals("1", record.get("A")); assertEquals("2", record.get("B")); assertFalse(record.isConsistent()); // 2nd record record = records.next(); assertTrue(record.isMapped("A")); assertTrue(record.isMapped("B")); assertTrue(record.isMapped("C")); assertTrue(record.isSet("A")); assertTrue(record.isSet("B")); assertTrue(record.isSet("C")); assertEquals("x", record.get("A")); assertEquals("y", record.get("B")); assertEquals("z", record.get("C")); assertTrue(record.isConsistent()); assertFalse(records.hasNext()); } @Test // TODO this may lead to strange behavior, throw an exception if iterator() has already been called? public void testMultipleIterators() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c" + CR + "d,e,f", CSVFormat.DEFAULT); final Iterator<CSVRecord> itr1 = parser.iterator(); final Iterator<CSVRecord> itr2 = parser.iterator(); final CSVRecord first = itr1.next(); assertEquals("a", first.get(0)); assertEquals("b", first.get(1)); assertEquals("c", first.get(2)); final CSVRecord second = itr2.next(); assertEquals("d", second.get(0)); assertEquals("e", second.get(1)); assertEquals("f", second.get(2)); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testNewCSVParserNullReaderFormat() throws Exception { new CSVParser(null, CSVFormat.DEFAULT).close(); } @Test(expected = IllegalArgumentException.class) public void testNewCSVParserReaderNullFormat() throws Exception { new CSVParser(new StringReader(""), null).close(); } @Test public void testNoHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT); Assert.assertNull(parser.getHeaderMap()); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testParseFileNullFormat() throws Exception { CSVParser.parse(new File(""), null); } @Test(expected = IllegalArgumentException.class) public void testParseNullFileFormat() throws Exception { CSVParser.parse((File) null, CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParseNullStringFormat() throws Exception { CSVParser.parse((String) null, CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParseNullUrlCharsetFormat() throws Exception { CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParserUrlNullCharsetFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http://commons.apache.org"), null, CSVFormat.DEFAULT); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testParseStringNullFormat() throws Exception { CSVParser.parse("csv data", null); } @Test(expected = IllegalArgumentException.class) public void testParseUrlCharsetNullFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http://commons.apache.org"), Charset.defaultCharset(), null); parser.close(); } @Test public void testProvidedHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").parse(in).iterator(); for (int i = 0; i < 3; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertTrue(record.isMapped("A")); assertTrue(record.isMapped("B")); assertTrue(record.isMapped("C")); assertFalse(record.isMapped("NOT MAPPED")); assertEquals(record.get(0), record.get("A")); assertEquals(record.get(1), record.get("B")); assertEquals(record.get(2), record.get("C")); } assertFalse(records.hasNext()); } @Test public void testProvidedHeaderAuto() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertTrue(record.isMapped("a")); assertTrue(record.isMapped("b")); assertTrue(record.isMapped("c")); assertFalse(record.isMapped("NOT MAPPED")); assertEquals(record.get(0), record.get("a")); assertEquals(record.get(1), record.get("b")); assertEquals(record.get(2), record.get("c")); } assertFalse(records.hasNext()); } @Test public void testRoundtrip() throws Exception { final StringWriter out = new StringWriter(); final CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT); final String input = "a,b,c\r\n1,2,3\r\nx,y,z\r\n"; for (final CSVRecord record : CSVParser.parse(input, CSVFormat.DEFAULT)) { printer.printRecord(record); } assertEquals(input, out.toString()); printer.close(); } @Test public void testSkipAutoHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); final CSVRecord record = records.next(); assertEquals("1", record.get("a")); assertEquals("2", record.get("b")); assertEquals("3", record.get("c")); } @Test public void testSkipSetHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("a", "b", "c").withSkipHeaderRecord(true) .parse(in).iterator(); final CSVRecord record = records.next(); assertEquals("1", record.get("a")); assertEquals("2", record.get("b")); assertEquals("3", record.get("c")); } private void validateLineNumbers(final String lineSeparator) throws IOException { final CSVParser parser = CSVParser.parse("a" + lineSeparator + "b" + lineSeparator + "c", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator)); assertEquals(0, parser.getCurrentLineNumber()); assertNotNull(parser.nextRecord()); assertEquals(1, parser.getCurrentLineNumber()); assertNotNull(parser.nextRecord()); assertEquals(2, parser.getCurrentLineNumber()); assertNotNull(parser.nextRecord()); // Still 2 because the last line is does not have EOL chars assertEquals(2, parser.getCurrentLineNumber()); assertNull(parser.nextRecord()); // Still 2 because the last line is does not have EOL chars assertEquals(2, parser.getCurrentLineNumber()); parser.close(); } private void validateRecordNumbers(final String lineSeparator) throws IOException { final CSVParser parser = CSVParser.parse("a" + lineSeparator + "b" + lineSeparator + "c", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator)); CSVRecord record; assertEquals(0, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(1, record.getRecordNumber()); assertEquals(1, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(2, record.getRecordNumber()); assertEquals(2, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(3, record.getRecordNumber()); assertEquals(3, parser.getRecordNumber()); assertNull(record = parser.nextRecord()); assertEquals(3, parser.getRecordNumber()); parser.close(); } }
public void testCarriageReturnEndings() throws IOException { final String code = "foo\rbaar,\rhello,world\r,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(4, records.size()); parser.close(); }
public void testCarriageReturnLineFeedEndings() throws IOException { final String code = "foo\r\nbaar,\r\nhello,world\r\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(4, records.size()); parser.close(); }
public void testClose() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final CSVParser parser = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in); final Iterator<CSVRecord> records = parser.iterator(); assertTrue(records.hasNext()); parser.close(); assertFalse(records.hasNext()); records.next(); }
public void testCSV57() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); final List<CSVRecord> list = parser.getRecords(); assertNotNull(list); assertEquals(0, list.size()); parser.close(); }
public void testDefaultFormat() throws IOException { final String code = "" + "a,b#\n"      // 1) + "\"\n\",\" \",#\n"  // 2) + "#,\"\"\n"     // 3) + "# Final comment\n"// 4) ; final String[][] res = { {"a", "b#"}, {"\n", " ", "#"}, {"#", ""}, {"# Final comment"} }; CSVFormat format = CSVFormat.DEFAULT; assertFalse(format.isCommentingEnabled()); CSVParser parser = CSVParser.parse(code, format); List<CSVRecord> records = parser.getRecords(); assertTrue(records.size() > 0); Utils.compare("Failed to parse without comments", res, records); final String[][] res_comments = { {"a", "b#"}, {"\n", " ", "#"}, }; format = CSVFormat.DEFAULT.withCommentStart('#'); parser.close(); parser = CSVParser.parse(code, format); records = parser.getRecords(); Utils.compare("Failed to parse with comments", res_comments, records); parser.close(); }
public void testEmptyFile() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); assertNull(parser.nextRecord()); parser.close(); }
public void testEmptyLineBehaviourCSV() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""} // CSV format ignores empty lines }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } }
public void testEmptyLineBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""}, {""}, // Excel format does not ignore empty lines {""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } }
public void testEndOfFileBehaviorCSV() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, // CSV format ignores empty lines {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } }
public void testEndOfFileBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, {""}, // Excel format does not ignore empty lines {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); } }
public void testExcelFormat1() throws IOException { final String code = "value1,value2,value3,value4\r\na,b,c,d\r\n x,,," + "\r\n\r\n\"\"\"hello\"\"\",\" \"\"world\"\"\",\"abc\ndef\",\r\n"; final String[][] res = { {"value1", "value2", "value3", "value4"}, {"a", "b", "c", "d"}, {" x", "", "", ""}, {""}, {"\"hello\"", " \"world\"", "abc\ndef", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); }
public void testExcelFormat2() throws Exception { final String code = "foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n"; final String[][] res = { {"foo", "baar"}, {""}, {"hello", ""}, {""}, {"world", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); assertEquals(res.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < res.length; i++) { assertArrayEquals(res[i], records.get(i).values()); } parser.close(); }
public void testForEach() throws Exception { final List<CSVRecord> records = new ArrayList<CSVRecord>(); final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); for (final CSVRecord record : CSVFormat.DEFAULT.parse(in)) { records.add(record); } assertEquals(3, records.size()); assertArrayEquals(new String[]{"a", "b", "c"}, records.get(0).values()); assertArrayEquals(new String[]{"1", "2", "3"}, records.get(1).values()); assertArrayEquals(new String[]{"x", "y", "z"}, records.get(2).values()); }
public void testGetHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader("A", "B", "C")); final Map<String, Integer> headerMap = parser.getHeaderMap(); final Iterator<String> columnNames = headerMap.keySet().iterator(); // Headers are iterated in column order. Assert.assertEquals("A", columnNames.next()); Assert.assertEquals("B", columnNames.next()); Assert.assertEquals("C", columnNames.next()); final Iterator<CSVRecord> records = parser.iterator(); // Parse to make sure getHeaderMap did not have a side-effect. for (int i = 0; i < 3; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertEquals(record.get(0), record.get("A")); assertEquals(record.get(1), record.get("B")); assertEquals(record.get(2), record.get("C")); } assertFalse(records.hasNext()); parser.close(); }
public void testDuplicateHeaderEntries() throws Exception { CSVParser.parse("a,b,a\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader(new String[]{})); }
public void testGetLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); for (final String[] re : RESULT) { assertArrayEquals(re, parser.nextRecord().values()); } assertNull(parser.nextRecord()); parser.close(); }
public void testGetLineNumberWithCR() throws Exception { this.validateLineNumbers(String.valueOf(CR)); }
public void testGetLineNumberWithCRLF() throws Exception { this.validateLineNumbers(CRLF); }
public void testGetLineNumberWithLF() throws Exception { this.validateLineNumbers(String.valueOf(LF)); }
public void testGetOneLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords().get(0); assertArrayEquals(RESULT[0], record.values()); parser.close(); }
public void testGetOneLineCustomCollection() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords(new LinkedList<CSVRecord>()).getFirst(); assertArrayEquals(RESULT[0], record.values()); parser.close(); }
public void testGetOneLineOneParser() throws IOException { PipedWriter writer = new PipedWriter(); PipedReader reader = new PipedReader(writer); final CSVFormat format = CSVFormat.DEFAULT; final CSVParser parser = new CSVParser(reader, format); try { writer.append(CSV_INPUT_1); writer.append(format.getRecordSeparator()); final CSVRecord record1 = parser.nextRecord(); assertArrayEquals(RESULT[0], record1.values()); writer.append(CSV_INPUT_2); writer.append(format.getRecordSeparator()); final CSVRecord record2 = parser.nextRecord(); assertArrayEquals(RESULT[1], record2.values()); } finally { parser.close(); } }
public void testGetRecordNumberWithCR() throws Exception { this.validateRecordNumbers(String.valueOf(CR)); }
public void testGetRecordNumberWithCRLF() throws Exception { this.validateRecordNumbers(CRLF); }
public void testGetRecordNumberWithLF() throws Exception { this.validateRecordNumbers(String.valueOf(LF)); }
public void testGetRecords() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); final List<CSVRecord> records = parser.getRecords(); assertEquals(RESULT.length, records.size()); assertTrue(records.size() > 0); for (int i = 0; i < RESULT.length; i++) { assertArrayEquals(RESULT[i], records.get(i).values()); } parser.close(); }
public void testGetRecordWithMultiLineValues() throws Exception { final CSVParser parser = CSVParser.parse("\"a\r\n1\",\"a\r\n2\"" + CRLF + "\"b\r\n1\",\"b\r\n2\"" + CRLF + "\"c\r\n1\",\"c\r\n2\"", CSVFormat.DEFAULT.withRecordSeparator(CRLF)); CSVRecord record; assertEquals(0, parser.getRecordNumber()); assertEquals(0, parser.getCurrentLineNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(3, parser.getCurrentLineNumber()); assertEquals(1, record.getRecordNumber()); assertEquals(1, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(6, parser.getCurrentLineNumber()); assertEquals(2, record.getRecordNumber()); assertEquals(2, parser.getRecordNumber()); assertNotNull(record = parser.nextRecord()); assertEquals(8, parser.getCurrentLineNumber()); assertEquals(3, record.getRecordNumber()); assertEquals(3, parser.getRecordNumber()); assertNull(record = parser.nextRecord()); assertEquals(8, parser.getCurrentLineNumber()); assertEquals(3, parser.getRecordNumber()); parser.close(); }
public void testHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertEquals(record.get(0), record.get("a")); assertEquals(record.get(1), record.get("b")); assertEquals(record.get(2), record.get("c")); } assertFalse(records.hasNext()); }
public void testHeaderComment() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertEquals(record.get(0), record.get("a")); assertEquals(record.get(1), record.get("b")); assertEquals(record.get(2), record.get("c")); } assertFalse(records.hasNext()); }
public void testIgnoreEmptyLines() throws IOException { final String code = "\nfoo,baar\n\r\n,\n\n,world\r\n\n"; //String code = "world\r\n\n"; //String code = "foo;baar\r\n\r\nhello;\r\n\r\nworld;\r\n"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(3, records.size()); parser.close(); }
public void testInvalidFormat() throws Exception { final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR); new CSVParser(null, invalidFormat).close(); }
public void testIterator() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator(); assertTrue(iterator.hasNext()); try { iterator.remove(); fail("expected UnsupportedOperationException"); } catch (final UnsupportedOperationException expected) { // expected } assertArrayEquals(new String[]{"a", "b", "c"}, iterator.next().values()); assertArrayEquals(new String[]{"1", "2", "3"}, iterator.next().values()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertTrue(iterator.hasNext()); assertArrayEquals(new String[]{"x", "y", "z"}, iterator.next().values()); assertFalse(iterator.hasNext()); try { iterator.next(); fail("NoSuchElementException expected"); } catch (final NoSuchElementException e) { // expected } }
public void testLineFeedEndings() throws IOException { final String code = "foo\nbaar,\nhello,world\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); assertEquals(4, records.size()); parser.close(); }
public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception { final Reader in = new StringReader("a,b,c\n1,2\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").withSkipHeaderRecord(true) .parse(in).iterator(); CSVRecord record; // 1st record record = records.next(); assertTrue(record.isMapped("A")); assertTrue(record.isMapped("B")); assertTrue(record.isMapped("C")); assertTrue(record.isSet("A")); assertTrue(record.isSet("B")); assertFalse(record.isSet("C")); assertEquals("1", record.get("A")); assertEquals("2", record.get("B")); assertFalse(record.isConsistent()); // 2nd record record = records.next(); assertTrue(record.isMapped("A")); assertTrue(record.isMapped("B")); assertTrue(record.isMapped("C")); assertTrue(record.isSet("A")); assertTrue(record.isSet("B")); assertTrue(record.isSet("C")); assertEquals("x", record.get("A")); assertEquals("y", record.get("B")); assertEquals("z", record.get("C")); assertTrue(record.isConsistent()); assertFalse(records.hasNext()); }
public void testMultipleIterators() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c" + CR + "d,e,f", CSVFormat.DEFAULT); final Iterator<CSVRecord> itr1 = parser.iterator(); final Iterator<CSVRecord> itr2 = parser.iterator(); final CSVRecord first = itr1.next(); assertEquals("a", first.get(0)); assertEquals("b", first.get(1)); assertEquals("c", first.get(2)); final CSVRecord second = itr2.next(); assertEquals("d", second.get(0)); assertEquals("e", second.get(1)); assertEquals("f", second.get(2)); parser.close(); }
public void testNewCSVParserNullReaderFormat() throws Exception { new CSVParser(null, CSVFormat.DEFAULT).close(); }
public void testNewCSVParserReaderNullFormat() throws Exception { new CSVParser(new StringReader(""), null).close(); }
public void testNoHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT); Assert.assertNull(parser.getHeaderMap()); parser.close(); }
public void testParseFileNullFormat() throws Exception { CSVParser.parse(new File(""), null); }
public void testParseNullFileFormat() throws Exception { CSVParser.parse((File) null, CSVFormat.DEFAULT); }
public void testParseNullStringFormat() throws Exception { CSVParser.parse((String) null, CSVFormat.DEFAULT); }
public void testParseNullUrlCharsetFormat() throws Exception { CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT); }
public void testParserUrlNullCharsetFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http://commons.apache.org"), null, CSVFormat.DEFAULT); parser.close(); }
public void testParseStringNullFormat() throws Exception { CSVParser.parse("csv data", null); }
public void testParseUrlCharsetNullFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http://commons.apache.org"), Charset.defaultCharset(), null); parser.close(); }
public void testProvidedHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").parse(in).iterator(); for (int i = 0; i < 3; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertTrue(record.isMapped("A")); assertTrue(record.isMapped("B")); assertTrue(record.isMapped("C")); assertFalse(record.isMapped("NOT MAPPED")); assertEquals(record.get(0), record.get("A")); assertEquals(record.get(1), record.get("B")); assertEquals(record.get(2), record.get("C")); } assertFalse(records.hasNext()); }
public void testProvidedHeaderAuto() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { assertTrue(records.hasNext()); final CSVRecord record = records.next(); assertTrue(record.isMapped("a")); assertTrue(record.isMapped("b")); assertTrue(record.isMapped("c")); assertFalse(record.isMapped("NOT MAPPED")); assertEquals(record.get(0), record.get("a")); assertEquals(record.get(1), record.get("b")); assertEquals(record.get(2), record.get("c")); } assertFalse(records.hasNext()); }
public void testRoundtrip() throws Exception { final StringWriter out = new StringWriter(); final CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT); final String input = "a,b,c\r\n1,2,3\r\nx,y,z\r\n"; for (final CSVRecord record : CSVParser.parse(input, CSVFormat.DEFAULT)) { printer.printRecord(record); } assertEquals(input, out.toString()); printer.close(); }
public void testSkipAutoHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); final CSVRecord record = records.next(); assertEquals("1", record.get("a")); assertEquals("2", record.get("b")); assertEquals("3", record.get("c")); }
public void testSkipSetHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("a", "b", "c").withSkipHeaderRecord(true) .parse(in).iterator(); final CSVRecord record = records.next(); assertEquals("1", record.get("a")); assertEquals("2", record.get("b")); assertEquals("3", record.get("c")); }
public void test00() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser$1", cSVFormat0); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test01() throws Throwable { URL uRL0 = MockURL.getHttpExample(); Charset charset0 = Charset.defaultCharset(); CSVFormat cSVFormat0 = CSVFormat.DEFAULT; try { CSVParser.parse(uRL0, charset0, cSVFormat0); fail("Expecting exception: IOException"); } catch(IOException e) { // // Could not find: www.someFakeButWellFormedURL.org // verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e); } }
public void test02() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("The quoteChar cannot be a line break", cSVFormat0); cSVParser0.getRecords(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test03() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; // Undeclared exception! try { CSVParser.parse((File) null, cSVFormat0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Parameter 'file' must not be null! // verifyException("org.apache.commons.csv.Assertions", e); } }
public void test04() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; CSVParser cSVParser0 = CSVParser.parse("hnK7bHe/O]sv4JPUn", cSVFormat0); long long0 = cSVParser0.getCurrentLineNumber(); assertEquals(0L, long0); }
public void test05() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("P5)[,{Fg%zy1", cSVFormat0); long long0 = cSVParser0.getRecordNumber(); assertEquals(0L, long0); } @Test(timeout = 4000) public void test06() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line "); CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1); cSVParser0.nextRecord(); assertEquals(1L, cSVParser0.getRecordNumber()); } @Test(timeout = 4000) public void test07() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("rhz1zl9j1>hfhg*m", cSVFormat0); cSVParser0.close(); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(0L, cSVParser0.getRecordNumber()); } @Test(timeout = 4000) public void test08() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("JK.%/01/Rg31A}Lrr7\"", cSVFormat1); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertEquals(1, map0.size()); assertNotNull(map0); }
public void test06() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVFormat cSVFormat1 = cSVFormat0.withNullString("(line "); CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1); cSVParser0.nextRecord(); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test07() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; CSVParser cSVParser0 = CSVParser.parse("rhz1zl9j1>hfhg*m", cSVFormat0); cSVParser0.close(); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test08() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("JK.%/01/Rg31A}Lrr7\"", cSVFormat1);
public void test09() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("8oHI?)]8`=H.9^", cSVFormat0); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertNull(map0); }
public void test10() throws Throwable { Quote quote0 = Quote.NON_NUMERIC; String[] stringArray0 = new String[1]; CSVFormat cSVFormat0 = new CSVFormat('=', (Character) null, quote0, (Character) null, (Character) null, false, false, " skipheaderrecord:", " skipheaderrecord:", stringArray0, false); CSVParser cSVParser0 = CSVParser.parse(" skipheaderrecord:", cSVFormat0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test11() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test12() throws Throwable { Quote quote0 = Quote.NON_NUMERIC; String[] stringArray0 = new String[1]; CSVFormat cSVFormat0 = new CSVFormat('=', (Character) null, quote0, (Character) null, (Character) null, false, false, " skipheaderrecord:", " skipheaderrecord:", stringArray0, false); CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true); CSVParser cSVParser0 = CSVParser.parse(" skipheaderrecord:", cSVFormat1); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test13() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); // Undeclared exception! try { CSVParser.parse("\"\",,,,,,", cSVFormat1); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // The header contains duplicate names: [, , , , , , ] // verifyException("org.apache.commons.csv.CSVParser", e); } }
public void test14() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[]", cSVRecord0.toString()); }
public void test15() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('W'); CSVParser cSVParser0 = CSVParser.parse("Wd ;Bu9`k1#", cSVFormat1); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertNull(cSVRecord0); assertEquals(0L, cSVParser0.getRecordNumber()); }
