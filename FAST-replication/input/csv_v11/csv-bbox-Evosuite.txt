public void test00() throws Throwable { File file0 = MockFile.createTempFile("format", "format"); Charset charset0 = Charset.defaultCharset(); CSVFormat cSVFormat0 = CSVFormat.newFormat('Z'); CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test01() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("format", cSVFormat0); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test02() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; Charset charset0 = Charset.defaultCharset(); // Undeclared exception! try { CSVParser.parse((URL) null, charset0, cSVFormat0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Parameter 'url' must not be null! // verifyException("org.apache.commons.csv.Assertions", e); } }
public void test03() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; CSVParser cSVParser0 = CSVParser.parse("n9,OfAi|", cSVFormat0); List<CSVRecord> list0 = cSVParser0.getRecords(); assertEquals(1, list0.size()); }
public void test04() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.DEFAULT; CSVParser cSVParser0 = CSVParser.parse("ftfrbw+", cSVFormat0); long long0 = cSVParser0.getCurrentLineNumber(); assertEquals(0L, long0); }
public void test05() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; PipedReader pipedReader0 = new PipedReader(); CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0); long long0 = cSVParser0.getRecordNumber(); assertEquals(0L, long0); }
public void test06() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.DEFAULT; CSVFormat cSVFormat1 = cSVFormat0.withNullString(""); CSVParser cSVParser0 = CSVParser.parse("The comment start character and the quoteChar cannot be the same ('", cSVFormat1); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[The comment start character and the quoteChar cannot be the same (']", cSVRecord0.toString()); }
public void test07() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; CSVFormat cSVFormat1 = cSVFormat0.withNullString("file"); StringReader stringReader0 = new StringReader("file"); CSVParser cSVParser0 = cSVFormat1.parse(stringReader0); CSVRecord cSVRecord0 = cSVParser0.nextRecord(); assertEquals("[null]", cSVRecord0.toString()); }
public void test08() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.EXCEL; String[] stringArray0 = new String[1]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("@FN", cSVFormat1); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertEquals(0L, cSVParser0.getRecordNumber()); assertNotNull(map0); assertEquals(1, map0.size()); }
public void test09() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("~z;gVM3^4Niw9C&|~Ft", cSVFormat0); Map<String, Integer> map0 = cSVParser0.getHeaderMap(); assertNull(map0); }
public void test10() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.TDF; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("D!t0wqt(V%>H", cSVFormat1); assertEquals(1L, cSVParser0.getRecordNumber()); }
public void test11() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.MYSQL; String[] stringArray0 = new String[0]; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test12() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.DEFAULT; String[] stringArray0 = new String[1]; stringArray0[0] = ""; CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0); CSVParser cSVParser0 = CSVParser.parse("The comment start character and the quoteChar cannot be the same ('", cSVFormat1); assertEquals(0L, cSVParser0.getRecordNumber()); }
public void test13() throws Throwable { CSVFormat cSVFormat0 = CSVFormat.RFC4180; CSVParser cSVParser0 = CSVParser.parse("format", cSVFormat0); cSVParser0.close(); Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer()); cSVParser0.forEach(consumer0); assertEquals(0L, cSVParser0.getRecordNumber()); }
