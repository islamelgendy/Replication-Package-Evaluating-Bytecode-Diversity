public void test501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test501"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test502"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test503"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); }
public void test504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test504"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); long long15 = cSVParser12.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); long long17 = cSVParser12.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser12.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser12.getRecords(); boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVParser12); boolean boolean21 = cSVParser12.isClosed(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test505"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); java.lang.String str25 = cSVFormat24.getNullString(); boolean boolean26 = cSVFormat24.isQuoting(); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> NullString=<\r\n> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNull(str25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(cSVParser27); }
public void test506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test506"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord24 = cSVParser5.nextRecord(); long long25 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNull(cSVRecord24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); }
public void test507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test507"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); long long9 = cSVParser3.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser3.getRecords(cSVRecordList44); long long48 = cSVParser3.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord49 = cSVParser3.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = cSVParser3.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser3.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertNull(cSVRecord49); org.junit.Assert.assertNull(strMap50); org.junit.Assert.assertNotNull(cSVRecordList51); }
public void test508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test508"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withQuoteChar('\037'); boolean boolean11 = cSVFormat4.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13); long long15 = cSVParser14.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); }
public void test509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test509"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser3.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser3.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); }
public void test510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test510"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withEscape('\t'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.lang.String[] strArray14 = cSVRecord13.values(); boolean boolean16 = cSVRecord13.isSet("hi!"); java.lang.String[] strArray17 = cSVRecord13.values(); java.lang.String[] strArray18 = cSVRecord13.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat2.withCommentStart('\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test511"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withRecordSeparator('4'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test512"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); // The following exception was thrown during execution in test generation try { java.lang.Class<?> wildcardClass10 = strMap9.getClass(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); }
public void test513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test513"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); java.lang.String[] strArray4 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null; org.apache.commons.csv.CSVRecord cSVRecord8 = new org.apache.commons.csv.CSVRecord(strArray4, strMap5, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator9 = cSVRecord8.spliterator(); int int10 = cSVRecord8.size(); java.lang.String str11 = cSVRecord8.getComment(); java.lang.String[] strArray12 = cSVRecord8.values(); java.lang.String str13 = cSVFormat2.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withSkipHeaderRecord(false); java.lang.String[] strArray16 = cSVFormat2.getHeader(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strSpliterator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNull(strArray16); }
public void test514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test514"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor21 = cSVParser5.iterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertNotNull(cSVRecordItor21); }
public void test515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test515"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNull(strMap10); }
public void test516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test516"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser25, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); cSVParser25.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator29 = cSVParser25.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordSpliterator29); }
public void test517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test517"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); long long8 = cSVParser5.getRecordNumber(); long long9 = cSVParser5.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test518"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test519"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '4'); char char8 = cSVFormat7.getDelimiter(); java.lang.Character char9 = cSVFormat7.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator16 = cSVRecord15.spliterator(); java.lang.String[] strArray17 = cSVRecord15.values(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat10.withHeader(strArray17); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat7.withHeader(strArray17); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null; org.apache.commons.csv.Lexer lexer21 = new org.apache.commons.csv.Lexer(cSVFormat19, extendedBufferedReader20); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); java.io.Reader reader24 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = cSVFormat23.parse(reader24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + ',' + "'", char8 == ','); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strSpliterator16); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat23); }
public void test520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test520"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVRecord cSVRecord23 = cSVParser22.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVRecord23); }
public void test521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test521"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); boolean boolean11 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote16 = null; org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuotePolicy(quote16); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withQuoteChar((java.lang.Character) '4'); char char20 = cSVFormat19.getDelimiter(); java.lang.Character char21 = cSVFormat19.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray23 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator28 = cSVRecord27.spliterator(); java.lang.String[] strArray29 = cSVRecord27.values(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat22.withHeader(strArray29); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat19.withHeader(strArray29); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = null; org.apache.commons.csv.Lexer lexer33 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader32); org.apache.commons.csv.Token token34 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder35 = token34.content; org.apache.commons.csv.Token.Type type36 = org.apache.commons.csv.Token.Type.EORECORD; token34.type = type36; boolean boolean38 = token34.isReady; org.apache.commons.csv.Token.Type type39 = token34.type; java.lang.StringBuilder stringBuilder40 = token34.content; lexer33.trimTrailingSpaces(stringBuilder40); org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat6.print((java.lang.Appendable) stringBuilder40); java.lang.Character char43 = cSVFormat6.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat6.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + char20 + "' != '" + ',' + "'", char20 == ','); org.junit.Assert.assertNull(char21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strSpliterator28); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(stringBuilder35); org.junit.Assert.assertEquals(stringBuilder35.toString(), ""); org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type36.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type39.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder40); org.junit.Assert.assertEquals(stringBuilder40.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter42); org.junit.Assert.assertNull(char43); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test522"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); long long13 = cSVParser5.getCurrentLineNumber(); java.lang.Class<?> wildcardClass14 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test523"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\"Delimiter=<,> Escape=<a> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\",[]", cSVFormat1); java.lang.Character char8 = cSVFormat1.getEscape(); java.lang.Character char9 = cSVFormat1.getCommentStart(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNull(char9); }
public void test524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test524"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); boolean boolean12 = cSVFormat9.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat9.withIgnoreEmptyHeaders(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test525"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote41 = null; org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuotePolicy(quote41); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray45 = cSVFormat42.getHeader(); char char46 = cSVFormat42.getDelimiter(); org.apache.commons.csv.Quote quote47 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withQuotePolicy(quote47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat36.withQuotePolicy(quote47); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader50 = null; org.apache.commons.csv.Lexer lexer51 = new org.apache.commons.csv.Lexer(cSVFormat36, extendedBufferedReader50); // The following exception was thrown during execution in test generation try { int int52 = lexer51.readEscape(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNull(strArray45); org.junit.Assert.assertTrue("'" + char46 + "' != '" + ',' + "'", char46 == ','); org.junit.Assert.assertTrue("'" + quote47 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote47.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test526"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); boolean boolean19 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); long long26 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser33.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection36 = cSVParser25.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList35); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser5.getRecords(cSVRecordList35); long long38 = cSVParser5.getRecordNumber(); cSVParser5.close(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList41 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVRecordCollection36); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); }
public void test527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test527"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator("Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<\037> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test528"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withDelimiter('\b'); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withQuoteChar('\037'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test529"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser14.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser24.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser14.getRecords(cSVRecordList30); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection32 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31); long long33 = cSVParser5.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNull(cSVRecord27); org.junit.Assert.assertNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordCollection32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(cSVRecordList34); }
public void test530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test530"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); long long26 = cSVParser24.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser32.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection35 = cSVParser24.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser5.getRecords(cSVRecordList34); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVRecordList34.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordCollection35); org.junit.Assert.assertNotNull(cSVRecordList36); org.junit.Assert.assertNotNull(cSVRecordSpliterator37); }
public void test531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test531"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(strMap10); }
public void test532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test532"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); boolean boolean5 = cSVParser3.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser3.nextRecord(); long long7 = cSVParser3.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); }
public void test533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test533"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); boolean boolean4 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withCommentStart('\r'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test534"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '#'); java.lang.String[] strArray7 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null; org.apache.commons.csv.CSVRecord cSVRecord11 = new org.apache.commons.csv.CSVRecord(strArray7, strMap8, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator12 = cSVRecord11.spliterator(); int int13 = cSVRecord11.size(); java.lang.String str14 = cSVRecord11.getComment(); java.util.Spliterator<java.lang.String> strSpliterator15 = cSVRecord11.spliterator(); java.lang.String[] strArray17 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "", (long) '#'); java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); int int28 = cSVRecord26.size(); java.lang.String str29 = cSVRecord26.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap30 = cSVRecord26.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap31 = cSVRecord21.putIn(strMap30); java.util.Map<java.lang.String, java.lang.String> strMap32 = cSVRecord11.putIn(strMap31); java.lang.String[] strArray33 = cSVRecord11.values(); java.lang.String[] strArray34 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator39 = cSVRecord38.spliterator(); int int40 = cSVRecord38.size(); java.lang.String str41 = cSVRecord38.getComment(); java.lang.String str42 = cSVRecord38.getComment(); boolean boolean43 = cSVRecord38.isConsistent(); java.lang.String[] strArray44 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray44, strMap45, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator49 = cSVRecord48.spliterator(); int int50 = cSVRecord48.size(); java.lang.String str51 = cSVRecord48.getComment(); java.util.Spliterator<java.lang.String> strSpliterator52 = cSVRecord48.spliterator(); java.lang.String[] strArray54 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap55 = null; org.apache.commons.csv.CSVRecord cSVRecord58 = new org.apache.commons.csv.CSVRecord(strArray54, strMap55, "", (long) '#'); java.lang.String[] strArray59 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap60 = null; org.apache.commons.csv.CSVRecord cSVRecord63 = new org.apache.commons.csv.CSVRecord(strArray59, strMap60, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator64 = cSVRecord63.spliterator(); int int65 = cSVRecord63.size(); java.lang.String str66 = cSVRecord63.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap67 = cSVRecord63.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap68 = cSVRecord58.putIn(strMap67); java.util.Map<java.lang.String, java.lang.String> strMap69 = cSVRecord48.putIn(strMap68); java.util.Map<java.lang.String, java.lang.String> strMap70 = cSVRecord38.putIn(strMap68); java.util.Map<java.lang.String, java.lang.String> strMap71 = cSVRecord11.putIn(strMap68); boolean boolean72 = cSVFormat6.equals((java.lang.Object) cSVRecord11); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strSpliterator12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n"); org.junit.Assert.assertNotNull(strSpliterator15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\r\n" + "'", str29, "\r\n"); org.junit.Assert.assertNotNull(strMap30); org.junit.Assert.assertNotNull(strMap31); org.junit.Assert.assertNotNull(strMap32); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(strSpliterator39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\r\n" + "'", str41, "\r\n"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\r\n" + "'", str42, "\r\n"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(strSpliterator49); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\r\n" + "'", str51, "\r\n"); org.junit.Assert.assertNotNull(strSpliterator52); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(strSpliterator64); org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\r\n" + "'", str66, "\r\n"); org.junit.Assert.assertNotNull(strMap67); org.junit.Assert.assertNotNull(strMap68); org.junit.Assert.assertNotNull(strMap69); org.junit.Assert.assertNotNull(strMap70); org.junit.Assert.assertNotNull(strMap71); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); }
public void test535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test535"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); int int6 = cSVRecord4.size(); java.lang.String str7 = cSVRecord4.getComment(); java.lang.String[] strArray8 = cSVRecord4.values(); java.util.Iterator<java.lang.String> strItor9 = cSVRecord4.iterator(); java.lang.String[] strArray10 = cSVRecord4.values(); java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator16 = cSVRecord15.spliterator(); java.lang.String[] strArray17 = cSVRecord15.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote23 = null; org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withQuotePolicy(quote23); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withQuoteChar((java.lang.Character) '4'); char char27 = cSVFormat26.getDelimiter(); java.lang.Character char28 = cSVFormat26.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray30 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap31 = null; org.apache.commons.csv.CSVRecord cSVRecord34 = new org.apache.commons.csv.CSVRecord(strArray30, strMap31, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator35 = cSVRecord34.spliterator(); java.lang.String[] strArray36 = cSVRecord34.values(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat29.withHeader(strArray36); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat26.withHeader(strArray36); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader39 = null; org.apache.commons.csv.Lexer lexer40 = new org.apache.commons.csv.Lexer(cSVFormat38, extendedBufferedReader39); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat38.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat38); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser43, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap46 = cSVParser43.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray17, strMap46, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord52 = new org.apache.commons.csv.CSVRecord(strArray10, strMap46, "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 32L); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n"); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertNotNull(strItor9); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strSpliterator16); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + char27 + "' != '" + ',' + "'", char27 == ','); org.junit.Assert.assertNull(char28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(strSpliterator35); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVParser43); org.junit.Assert.assertNotNull(strMap46); }
public void test536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test536"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(cSVRecord8); }
public void test537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test537"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); long long7 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNull(cSVRecord8); }
public void test538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test538"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); boolean boolean9 = cSVFormat4.getIgnoreEmptyHeaders(); java.lang.Character char10 = cSVFormat4.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("", cSVFormat4); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser11.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecordSpliterator12); }
public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart((java.lang.Character) '4'); boolean boolean9 = cSVFormat8.isQuoting(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat8); java.lang.String[] strArray12 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "", (long) '#'); java.lang.String str17 = cSVFormat8.format((java.lang.Object[]) strArray12); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); }
public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); long long11 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test541"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test542"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord(); boolean boolean8 = cSVParser5.isClosed(); long long9 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNull(cSVRecord7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test543"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.lang.String[] strArray6 = cSVFormat1.getHeader(); java.lang.String str7 = cSVFormat1.toString(); boolean boolean8 = cSVFormat1.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test544"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); long long9 = cSVParser5.getCurrentLineNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test545"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); java.lang.Object obj46 = null; boolean boolean47 = cSVFormat44.equals(obj46); java.lang.String str48 = cSVFormat44.getRecordSeparator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\r\n" + "'", str48, "\r\n"); }
public void test546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test546"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); }
public void test547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test547"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); cSVParser5.close(); boolean boolean9 = cSVParser5.isClosed(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test548"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord49 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNull(cSVRecord49); }
public void test549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test549"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); long long40 = cSVParser38.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean43 = cSVFormat42.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser46.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection49 = cSVParser38.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList48); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean52 = cSVFormat51.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51); long long56 = cSVParser55.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList57 = cSVParser55.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean60 = cSVFormat59.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("", cSVFormat59); long long64 = cSVParser63.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = cSVParser63.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection66 = cSVParser55.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList65); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator67 = cSVRecordList65.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList68 = cSVParser38.getRecords(cSVRecordList65); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection69 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList68); org.apache.commons.csv.CSVRecord cSVRecord70 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVParser46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordCollection49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVParser55); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L); org.junit.Assert.assertNotNull(cSVRecordList57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordList65); org.junit.Assert.assertNotNull(cSVRecordCollection66); org.junit.Assert.assertNotNull(cSVRecordSpliterator67); org.junit.Assert.assertNotNull(cSVRecordList68); org.junit.Assert.assertNotNull(cSVRecordCollection69); org.junit.Assert.assertNull(cSVRecord70); }
public void test550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test550"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.lang.String[] strArray5 = cSVRecord4.values(); boolean boolean7 = cSVRecord4.isMapped("\u2028"); int int8 = cSVRecord4.size(); int int9 = cSVRecord4.size(); long long10 = cSVRecord4.getRecordNumber(); java.lang.String[] strArray11 = cSVRecord4.values(); java.lang.String[] strArray13 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "", (long) '#'); boolean boolean19 = cSVRecord17.isSet("\r\n"); java.lang.String str20 = cSVRecord17.toString(); boolean boolean21 = cSVRecord17.isConsistent(); java.lang.String[] strArray22 = cSVRecord17.values(); java.lang.String[] strArray23 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator28 = cSVRecord27.spliterator(); int int29 = cSVRecord27.size(); java.lang.String str30 = cSVRecord27.getComment(); java.lang.String str31 = cSVRecord27.getComment(); boolean boolean32 = cSVRecord27.isConsistent(); java.lang.String[] strArray34 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) '#'); java.lang.String str39 = cSVRecord38.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap40 = cSVRecord38.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap41 = cSVRecord27.putIn(strMap40); java.lang.String[] strArray42 = cSVRecord27.values(); java.lang.String[] strArray43 = cSVRecord27.values(); java.lang.String[] strArray44 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null; org.apache.commons.csv.CSVRecord cSVRecord48 = new org.apache.commons.csv.CSVRecord(strArray44, strMap45, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator49 = cSVRecord48.spliterator(); java.lang.String[] strArray50 = cSVRecord48.values(); org.apache.commons.csv.CSVFormat cSVFormat52 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean53 = cSVFormat52.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat52.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote56 = null; org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat55.withQuotePolicy(quote56); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat55.withQuoteChar((java.lang.Character) '4'); char char60 = cSVFormat59.getDelimiter(); java.lang.Character char61 = cSVFormat59.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat62 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray63 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap64 = null; org.apache.commons.csv.CSVRecord cSVRecord67 = new org.apache.commons.csv.CSVRecord(strArray63, strMap64, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator68 = cSVRecord67.spliterator(); java.lang.String[] strArray69 = cSVRecord67.values(); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat62.withHeader(strArray69); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat59.withHeader(strArray69); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader72 = null; org.apache.commons.csv.Lexer lexer73 = new org.apache.commons.csv.Lexer(cSVFormat71, extendedBufferedReader72); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat71.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat71); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser76, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap79 = cSVParser76.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord82 = new org.apache.commons.csv.CSVRecord(strArray50, strMap79, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord85 = new org.apache.commons.csv.CSVRecord(strArray43, strMap79, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); org.apache.commons.csv.CSVRecord cSVRecord88 = new org.apache.commons.csv.CSVRecord(strArray22, strMap79, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[]", (long) 'a'); org.apache.commons.csv.CSVRecord cSVRecord91 = new org.apache.commons.csv.CSVRecord(strArray11, strMap79, "", 52L); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strSpliterator28); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\r\n" + "'", str30, "\r\n"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\r\n" + "'", str31, "\r\n"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(strSpliterator49); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + char60 + "' != '" + ',' + "'", char60 == ','); org.junit.Assert.assertNull(char61); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(strSpliterator68); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(cSVFormat70); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertNotNull(cSVParser76); org.junit.Assert.assertNotNull(strMap79); }
public void test551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test551"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString(""); boolean boolean6 = cSVFormat2.getIgnoreSurroundingSpaces(); char char7 = cSVFormat2.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); }
public void test552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test552"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); org.apache.commons.csv.Quote quote4 = cSVFormat2.getQuotePolicy(); java.lang.String str5 = cSVFormat2.getNullString(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNull(str5); }
public void test553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test553"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart((java.lang.Character) '4'); boolean boolean9 = cSVFormat8.isQuoting(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat8); boolean boolean11 = cSVParser10.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test554"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); java.lang.String[] strArray5 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart('a'); boolean boolean10 = cSVFormat9.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNull(strArray5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord24 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor25 = cSVParser5.iterator(); long long26 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap27 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNull(cSVRecord24); org.junit.Assert.assertNotNull(cSVRecordItor25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNull(strMap27); }
public void test556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test556"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); boolean boolean11 = cSVParser5.isClosed(); long long12 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test557"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); }
public void test558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test558"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('\037'); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray7 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null; org.apache.commons.csv.CSVRecord cSVRecord11 = new org.apache.commons.csv.CSVRecord(strArray7, strMap8, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator12 = cSVRecord11.spliterator(); java.lang.String[] strArray13 = cSVRecord11.values(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withHeader(strArray13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat6.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withEscape('\\'); java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.lang.String[] strArray24 = cSVRecord23.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\u2028", 0L); java.lang.String str29 = cSVFormat18.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat5.withHeader(strArray24); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withQuoteChar((java.lang.Character) '\f'); java.io.Reader reader33 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = cSVFormat30.parse(reader33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strSpliterator12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test559"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); java.lang.String str8 = cSVFormat5.getNullString(); java.lang.String[] strArray10 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null; org.apache.commons.csv.CSVRecord cSVRecord14 = new org.apache.commons.csv.CSVRecord(strArray10, strMap11, "", (long) '#'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat5.withHeader(strArray10); boolean boolean16 = cSVFormat15.isQuoting(); java.io.Reader reader17 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser18 = cSVFormat15.parse(reader17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(str8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); }
public void test560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test560"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = null; org.apache.commons.csv.Lexer lexer26 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withEscape('4'); boolean boolean29 = cSVFormat28.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test561"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) '\036'); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat9.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test562"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); java.lang.String[] strArray6 = cSVRecord4.values(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withQuoteChar((java.lang.Character) '4'); char char16 = cSVFormat15.getDelimiter(); java.lang.Character char17 = cSVFormat15.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord23.spliterator(); java.lang.String[] strArray25 = cSVRecord23.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat15.withHeader(strArray25); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader28 = null; org.apache.commons.csv.Lexer lexer29 = new org.apache.commons.csv.Lexer(cSVFormat27, extendedBufferedReader28); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat27); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser32, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap35 = cSVParser32.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray6, strMap35, "[\205]", (long) (byte) 10); long long39 = cSVRecord38.getRecordNumber(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ','); org.junit.Assert.assertNull(char17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(strMap35); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L); }
public void test563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test563"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); long long9 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test564"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); boolean boolean20 = cSVFormat16.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat16.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat16.withSkipHeaderRecord(false); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); }
public void test565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test565"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser19.nextRecord(); java.util.Spliterator<java.lang.String> strSpliterator23 = cSVRecord22.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecord22); org.junit.Assert.assertNotNull(strSpliterator23); }
public void test566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test566"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) ','); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same (',')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); }
public void test567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test567"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser5.getHeaderMap(); cSVParser5.close(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); long long33 = cSVParser32.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser32.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection35 = cSVParser24.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator36 = cSVParser24.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor37 = cSVParser24.iterator(); org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean40 = cSVFormat39.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("", cSVFormat39); long long44 = cSVParser43.getRecordNumber(); long long45 = cSVParser43.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean48 = cSVFormat47.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat47); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser51.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList53 = cSVParser51.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection54 = cSVParser43.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList53); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList55 = cSVParser24.getRecords(cSVRecordList53); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList56 = cSVParser24.getRecords(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList57 = cSVParser5.getRecords(cSVRecordList56); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordCollection35); org.junit.Assert.assertNotNull(cSVRecordSpliterator36); org.junit.Assert.assertNotNull(cSVRecordItor37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVParser43); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVParser51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertNotNull(cSVRecordList53); org.junit.Assert.assertNotNull(cSVRecordCollection54); org.junit.Assert.assertNotNull(cSVRecordList55); org.junit.Assert.assertNotNull(cSVRecordList56); }
public void test568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test568"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); boolean boolean46 = cSVFormat44.getSkipHeaderRecord(); java.lang.String str47 = cSVFormat44.getNullString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u2028" + "'", str47, "\u2028"); }
public void test569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test569"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getCurrentLineNumber(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test570"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat4.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14); long long19 = cSVParser18.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser18.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean23 = cSVFormat22.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); long long27 = cSVParser26.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser26.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection29 = cSVParser18.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList28); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVParser18.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor31 = cSVParser18.iterator(); org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean34 = cSVFormat33.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33); long long38 = cSVParser37.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator39 = cSVParser37.spliterator(); long long40 = cSVParser37.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor41 = cSVParser37.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList42 = cSVParser37.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator43 = cSVRecordList42.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser18.getRecords(cSVRecordList42); boolean boolean45 = cSVFormat4.equals((java.lang.Object) cSVRecordList44); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordList28); org.junit.Assert.assertNotNull(cSVRecordCollection29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordItor31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVParser37); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator39); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor41); org.junit.Assert.assertNotNull(cSVRecordList42); org.junit.Assert.assertNotNull(cSVRecordSpliterator43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); }
public void test571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test571"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); long long36 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord37 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNull(cSVRecord37); }
public void test572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test572"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isCommentingEnabled(); boolean boolean9 = cSVFormat7.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser10.getHeaderMap(); boolean boolean12 = cSVParser10.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test573"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); cSVParser5.close(); long long12 = cSVParser5.getCurrentLineNumber(); java.lang.Class<?> wildcardClass13 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test574"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); long long12 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test575"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); boolean boolean16 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withNullString("\u2028"); boolean boolean19 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withDelimiter('#'); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD; token24.type = type26; boolean boolean28 = token24.isReady; org.apache.commons.csv.Token.Type type29 = token24.type; java.lang.String str30 = token24.toString(); java.lang.StringBuilder stringBuilder31 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat18.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat13.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat9.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat9.withNullString("hi!"); java.io.Reader reader37 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser38 = cSVFormat9.parse(reader37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter32); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVFormat36); }
public void test576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test576"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat21.withIgnoreEmptyHeaders(true); boolean boolean51 = cSVFormat21.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); }
public void test577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test577"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean28 = cSVFormat27.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("", cSVFormat27); long long32 = cSVParser31.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser31.getRecords(); boolean boolean34 = cSVParser31.isClosed(); boolean boolean35 = cSVParser31.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); long long42 = cSVParser41.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser41.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean46 = cSVFormat45.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); long long50 = cSVParser49.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser49.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection52 = cSVParser41.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator53 = cSVParser41.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor54 = cSVParser41.iterator(); org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean57 = cSVFormat56.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat56.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse("", cSVFormat56); long long61 = cSVParser60.getRecordNumber(); long long62 = cSVParser60.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean65 = cSVFormat64.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat64.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser68 = org.apache.commons.csv.CSVParser.parse("", cSVFormat64); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList69 = cSVParser68.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser68.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection71 = cSVParser60.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList70); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList72 = cSVParser41.getRecords(cSVRecordList70); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList73 = cSVParser31.getRecords(cSVRecordList72); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor74 = cSVParser31.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor75 = cSVParser31.iterator(); org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean78 = cSVFormat77.getIgnoreEmptyHeaders(); boolean boolean79 = cSVFormat77.getSkipHeaderRecord(); boolean boolean80 = cSVFormat77.isQuoting(); org.apache.commons.csv.CSVParser cSVParser81 = org.apache.commons.csv.CSVParser.parse("", cSVFormat77); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator82 = cSVParser81.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList83 = cSVParser81.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList84 = cSVParser31.getRecords(cSVRecordList83); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection85 = cSVParser25.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList84); long long86 = cSVParser25.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVParser31); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVParser49); org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordCollection52); org.junit.Assert.assertNotNull(cSVRecordSpliterator53); org.junit.Assert.assertNotNull(cSVRecordItor54); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVParser60); org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L); org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVParser68); org.junit.Assert.assertNotNull(cSVRecordList69); org.junit.Assert.assertNotNull(cSVRecordList70); org.junit.Assert.assertNotNull(cSVRecordCollection71); org.junit.Assert.assertNotNull(cSVRecordList72); org.junit.Assert.assertNotNull(cSVRecordList73); org.junit.Assert.assertNotNull(cSVRecordItor74); org.junit.Assert.assertNotNull(cSVRecordItor75); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true); org.junit.Assert.assertNotNull(cSVParser81); org.junit.Assert.assertNotNull(cSVRecordSpliterator82); org.junit.Assert.assertNotNull(cSVRecordList83); org.junit.Assert.assertNotNull(cSVRecordList84); org.junit.Assert.assertNotNull(cSVRecordCollection85); org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2L + "'", long86 == 2L); }
public void test578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test578"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '4'); char char8 = cSVFormat7.getDelimiter(); java.lang.Character char9 = cSVFormat7.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator16 = cSVRecord15.spliterator(); java.lang.String[] strArray17 = cSVRecord15.values(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat10.withHeader(strArray17); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat7.withHeader(strArray17); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null; org.apache.commons.csv.Lexer lexer21 = new org.apache.commons.csv.Lexer(cSVFormat19, extendedBufferedReader20); boolean boolean23 = lexer21.readEndOfLine((int) ','); boolean boolean25 = lexer21.isEscape(0); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean28 = cSVFormat27.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse("", cSVFormat27); boolean boolean32 = cSVFormat27.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat27.withCommentStart('\t'); boolean boolean35 = cSVFormat34.getIgnoreSurroundingSpaces(); org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder37 = token36.content; org.apache.commons.csv.Token.Type type38 = org.apache.commons.csv.Token.Type.EORECORD; token36.type = type38; boolean boolean40 = token36.isReady; org.apache.commons.csv.Token token41 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder42 = token41.content; org.apache.commons.csv.Token.Type type43 = org.apache.commons.csv.Token.Type.EORECORD; token41.type = type43; token36.type = type43; token36.isReady = false; org.apache.commons.csv.Token.Type type48 = token36.type; org.apache.commons.csv.Token token49 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder50 = token49.content; org.apache.commons.csv.Token.Type type51 = org.apache.commons.csv.Token.Type.EORECORD; token49.type = type51; boolean boolean53 = token49.isReady; org.apache.commons.csv.Token token54 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder55 = token54.content; org.apache.commons.csv.Token.Type type56 = org.apache.commons.csv.Token.Type.EORECORD; token54.type = type56; token49.type = type56; token36.type = type56; java.lang.StringBuilder stringBuilder60 = token36.content; org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat34.print((java.lang.Appendable) stringBuilder60); lexer21.trimTrailingSpaces(stringBuilder60); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + ',' + "'", char8 == ','); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strSpliterator16); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVParser31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(stringBuilder37); org.junit.Assert.assertEquals(stringBuilder37.toString(), ""); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(stringBuilder42); org.junit.Assert.assertEquals(stringBuilder42.toString(), ""); org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type43.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type48.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder50); org.junit.Assert.assertEquals(stringBuilder50.toString(), ""); org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type51.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(stringBuilder55); org.junit.Assert.assertEquals(stringBuilder55.toString(), ""); org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type56.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder60); org.junit.Assert.assertEquals(stringBuilder60.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter61); }
public void test579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test579"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); java.lang.String[] strArray5 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape('\036'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNull(strArray5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test580"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); boolean boolean9 = cSVParser5.isClosed(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strMap10); }
public void test581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test581"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.EORECORD; token12.type = type14; boolean boolean16 = token12.isReady; org.apache.commons.csv.Token.Type type17 = token12.type; java.lang.String str18 = token12.toString(); java.lang.StringBuilder stringBuilder19 = token12.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat6.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat1.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat1.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat1.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean32 = cSVFormat31.getIgnoreEmptyHeaders(); boolean boolean33 = cSVFormat31.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withNullString("\u2028"); boolean boolean36 = cSVFormat35.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat35.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withDelimiter('#'); boolean boolean49 = cSVFormat46.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat46.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat51); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean56 = cSVFormat55.getIgnoreEmptyHeaders(); boolean boolean57 = cSVFormat55.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat55.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat55.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat55.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withIgnoreEmptyHeaders(false); boolean boolean66 = cSVFormat65.getIgnoreEmptyHeaders(); java.lang.String[] strArray68 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray68, strMap69, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray68, strMap73, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat65.withHeader(strArray68); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat51.withHeader(strArray68); java.lang.String str79 = cSVFormat27.format((java.lang.Object[]) strArray68); java.lang.Character char80 = cSVFormat27.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type14.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type17.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EORECORD []" + "'", str18, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVParser52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!"); org.junit.Assert.assertNull(char80); }
public void test582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test582"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\t> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); }
public void test583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test583"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); long long8 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test584"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); boolean boolean10 = cSVParser5.isClosed(); long long11 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test585"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); boolean boolean14 = cSVFormat6.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test586"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); long long5 = cSVParser3.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser3.spliterator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser12.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("", cSVFormat16); long long21 = cSVParser20.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser20.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection23 = cSVParser12.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList22); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator24 = cSVParser12.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser12.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser12.iterator(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVParser32.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator35 = cSVParser32.spliterator(); long long36 = cSVParser32.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser32.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser32.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList39 = cSVParser12.getRecords(cSVRecordList38); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean42 = cSVFormat41.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat41); long long46 = cSVParser45.getRecordNumber(); long long47 = cSVParser45.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean50 = cSVFormat49.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse("", cSVFormat49); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList54 = cSVParser53.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList55 = cSVParser53.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection56 = cSVParser45.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList55); org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean59 = cSVFormat58.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat58.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("", cSVFormat58); long long63 = cSVParser62.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList64 = cSVParser62.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean67 = cSVFormat66.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat66.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat66); long long71 = cSVParser70.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList72 = cSVParser70.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection73 = cSVParser62.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList72); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator74 = cSVRecordList72.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList75 = cSVParser45.getRecords(cSVRecordList72); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection76 = cSVParser12.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList75); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList77 = cSVParser12.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList78 = cSVParser3.getRecords(cSVRecordList77); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordCollection23); org.junit.Assert.assertNotNull(cSVRecordSpliterator24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordSpliterator35); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertNotNull(cSVRecordList38); org.junit.Assert.assertNotNull(cSVRecordList39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVParser53); org.junit.Assert.assertNotNull(cSVRecordList54); org.junit.Assert.assertNotNull(cSVRecordList55); org.junit.Assert.assertNotNull(cSVRecordCollection56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVParser62); org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L); org.junit.Assert.assertNotNull(cSVRecordList64); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVParser70); org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L); org.junit.Assert.assertNotNull(cSVRecordList72); org.junit.Assert.assertNotNull(cSVRecordCollection73); org.junit.Assert.assertNotNull(cSVRecordSpliterator74); org.junit.Assert.assertNotNull(cSVRecordList75); org.junit.Assert.assertNotNull(cSVRecordCollection76); org.junit.Assert.assertNotNull(cSVRecordList77); org.junit.Assert.assertNotNull(cSVRecordList78); }
public void test587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test587"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat8); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser10.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test588"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); int int6 = cSVRecord4.size(); java.lang.String str7 = cSVRecord4.getComment(); java.lang.String str8 = cSVRecord4.getComment(); boolean boolean9 = cSVRecord4.isConsistent(); java.lang.String[] strArray11 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "", (long) '#'); java.lang.String str16 = cSVRecord15.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap17 = cSVRecord15.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap18 = cSVRecord4.putIn(strMap17); java.lang.String[] strArray19 = cSVRecord4.values(); java.lang.String[] strArray20 = cSVRecord4.values(); java.lang.String[] strArray21 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray21, strMap22, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator26 = cSVRecord25.spliterator(); java.lang.String[] strArray27 = cSVRecord25.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote33 = null; org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withQuotePolicy(quote33); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withQuoteChar((java.lang.Character) '4'); char char37 = cSVFormat36.getDelimiter(); java.lang.Character char38 = cSVFormat36.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray40 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator45 = cSVRecord44.spliterator(); java.lang.String[] strArray46 = cSVRecord44.values(); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat39.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat36.withHeader(strArray46); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader49 = null; org.apache.commons.csv.Lexer lexer50 = new org.apache.commons.csv.Lexer(cSVFormat48, extendedBufferedReader49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat48.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat48); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser53, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap56 = cSVParser53.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord59 = new org.apache.commons.csv.CSVRecord(strArray27, strMap56, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord62 = new org.apache.commons.csv.CSVRecord(strArray20, strMap56, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); boolean boolean63 = cSVRecord62.isConsistent(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\r\n" + "'", str8, "\r\n"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(strMap17); org.junit.Assert.assertNotNull(strMap18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(strSpliterator26); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + char37 + "' != '" + ',' + "'", char37 == ','); org.junit.Assert.assertNull(char38); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strSpliterator45); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVParser53); org.junit.Assert.assertNotNull(strMap56); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); }
public void test589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test589"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); java.lang.String[] strArray5 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("\r", cSVFormat1); cSVParser8.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNull(strArray5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVParser8); }
public void test590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test590"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(false); boolean boolean13 = cSVFormat12.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test591"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null; org.apache.commons.csv.CSVRecord cSVRecord6 = new org.apache.commons.csv.CSVRecord(strArray2, strMap3, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator7 = cSVRecord6.spliterator(); java.lang.String[] strArray8 = cSVRecord6.values(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withHeader(strArray8); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strSpliterator7); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test592"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader1 = null; org.apache.commons.csv.Lexer lexer2 = new org.apache.commons.csv.Lexer(cSVFormat0, extendedBufferedReader1); boolean boolean3 = cSVFormat0.isEscaping(); java.io.Reader reader4 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat0.parse(reader4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test593"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getCurrentLineNumber(); cSVParser5.close(); long long10 = cSVParser5.getCurrentLineNumber(); long long11 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test594"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat3.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withCommentStart((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test595"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); long long8 = cSVParser7.getCurrentLineNumber(); cSVParser7.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test596"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); long long23 = cSVParser22.getCurrentLineNumber(); long long24 = cSVParser22.getCurrentLineNumber(); cSVParser22.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); }
public void test597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test597"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); boolean boolean11 = cSVFormat6.isNullHandling(); boolean boolean12 = cSVFormat6.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test598"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVRecordList4.spliterator(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); }
public void test599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test599"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Map<java.lang.String, java.lang.Integer> strMap48 = cSVParser5.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap49 = cSVParser5.getHeaderMap(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNull(strMap48); org.junit.Assert.assertNull(strMap49); }
public void test600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test600"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser23.spliterator(); long long26 = cSVParser23.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor27 = cSVParser23.iterator(); long long28 = cSVParser23.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord29 = cSVParser23.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection31 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor32 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNull(cSVRecord29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordCollection31); org.junit.Assert.assertNotNull(cSVRecordItor32); }
public void test601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test601"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar('\b'); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection17 = cSVParser14.getRecords(cSVRecordCollection16); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser14.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap19 = cSVParser14.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser14.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor21 = cSVParser14.iterator(); boolean boolean22 = cSVFormat4.equals((java.lang.Object) cSVParser14); java.lang.String str23 = cSVFormat4.toString(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNull(cSVRecordCollection17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNull(strMap19); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordItor21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); // flaky:     org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str23, "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test602"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); long long11 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); boolean boolean13 = cSVParser5.isClosed(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test603"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray3 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap4 = null; org.apache.commons.csv.CSVRecord cSVRecord7 = new org.apache.commons.csv.CSVRecord(strArray3, strMap4, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator8 = cSVRecord7.spliterator(); java.lang.String[] strArray9 = cSVRecord7.values(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withHeader(strArray9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strSpliterator8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test604"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord24 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor25 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord26 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNull(cSVRecord24); org.junit.Assert.assertNotNull(cSVRecordItor25); org.junit.Assert.assertNull(cSVRecord26); }
public void test605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test605"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection11 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection12 = cSVParser5.getRecords(cSVRecordCollection11); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNull(cSVRecordCollection12); }
public void test606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test606"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); }
public void test607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test607"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean18 = cSVFormat17.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17); long long22 = cSVParser21.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser21.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection24 = cSVParser13.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList23); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser13.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser13.iterator(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); long long33 = cSVParser32.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVParser32.spliterator(); long long35 = cSVParser32.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor36 = cSVParser32.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser32.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator38 = cSVRecordList37.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList39 = cSVParser13.getRecords(cSVRecordList37); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList40 = cSVParser5.getRecords(cSVRecordList37); long long41 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVParser21); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNotNull(cSVRecordCollection24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor36); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertNotNull(cSVRecordSpliterator38); org.junit.Assert.assertNotNull(cSVRecordList39); org.junit.Assert.assertNotNull(cSVRecordList40); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); }
public void test608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test608"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser14.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser24.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser14.getRecords(cSVRecordList30); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection32 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31); java.lang.Class<?> wildcardClass33 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNull(cSVRecord27); org.junit.Assert.assertNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordCollection32); org.junit.Assert.assertNotNull(wildcardClass33); }
public void test609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test609"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withCommentStart('\t'); char char14 = cSVFormat11.getDelimiter(); boolean boolean15 = cSVFormat11.isEscaping(); java.io.Reader reader16 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = cSVFormat11.parse(reader16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + char14 + "' != '" + 'a' + "'", char14 == 'a'); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test610"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); boolean boolean20 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean23 = cSVFormat22.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); long long27 = cSVParser26.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser26.spliterator(); long long29 = cSVParser26.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor30 = cSVParser26.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser26.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser26.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator33 = cSVRecordList32.spliterator(); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection34 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordSpliterator33); }
public void test611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test611"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); cSVParser5.close(); boolean boolean13 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test612"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); boolean boolean49 = cSVFormat21.getSkipHeaderRecord(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat21, "EORECORD []"); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat21.withIgnoreSurroundingSpaces(true); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(cSVFormat53); }
public void test613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test613"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser5.getHeaderMap(); long long19 = cSVParser5.getRecordNumber(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); }
public void test614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test614"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test615"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(false); boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test616"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList40 = cSVParser38.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList41 = cSVParser5.getRecords(cSVRecordList40); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator42 = cSVRecordList41.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertNotNull(cSVRecordList40); org.junit.Assert.assertNotNull(cSVRecordList41); org.junit.Assert.assertNotNull(cSVRecordSpliterator42); }
public void test617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test617"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test618"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); java.lang.String[] strArray46 = null; org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withHeader(strArray46); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertNotNull(cSVFormat47); }
public void test619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test619"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test620"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); long long8 = cSVParser3.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test621"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); java.lang.String[] strArray7 = cSVFormat2.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentStart((java.lang.Character) '\\'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; token12.reset(); org.apache.commons.csv.Token.Type type15 = token12.type; token12.reset(); token12.reset(); token12.isReady = false; org.apache.commons.csv.Token.Type type20 = token12.type; org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder22 = token21.content; org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD; token21.type = type23; boolean boolean25 = token21.isReady; org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder27 = token26.content; org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD; token26.type = type28; token21.type = type28; token21.isReady = false; org.apache.commons.csv.Token.Type type33 = token21.type; org.apache.commons.csv.Token token34 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder35 = token34.content; org.apache.commons.csv.Token.Type type36 = org.apache.commons.csv.Token.Type.EORECORD; token34.type = type36; boolean boolean38 = token34.isReady; org.apache.commons.csv.Token token39 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder40 = token39.content; org.apache.commons.csv.Token.Type type41 = org.apache.commons.csv.Token.Type.EORECORD; token39.type = type41; token34.type = type41; token21.type = type41; token21.isReady = true; token21.isReady = false; org.apache.commons.csv.Token.Type type49 = token21.type; org.apache.commons.csv.Token.Type type50 = token21.type; token12.type = type50; boolean boolean52 = cSVFormat9.equals((java.lang.Object) type50); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat9.withEscape('\"'); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withEscape('\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat56); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertNotNull(stringBuilder22); org.junit.Assert.assertEquals(stringBuilder22.toString(), ""); org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(stringBuilder27); org.junit.Assert.assertEquals(stringBuilder27.toString(), ""); org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type33.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder35); org.junit.Assert.assertEquals(stringBuilder35.toString(), ""); org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type36.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(stringBuilder40); org.junit.Assert.assertEquals(stringBuilder40.toString(), ""); org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type41.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type49.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type50.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat56); }
public void test622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test622"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat2.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) '\037'); boolean boolean31 = cSVFormat28.isQuoting(); boolean boolean32 = cSVFormat28.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat28.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<a> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat34); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVParser35); org.junit.Assert.assertNotNull(cSVRecordList36); }
public void test623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test623"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser19.nextRecord(); int int23 = cSVRecord22.size(); java.lang.String str25 = cSVRecord22.get(0); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecord22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Delimiter=<" + "'", str25, "Delimiter=<"); }
public void test624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test624"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String[] strArray2 = cSVFormat0.getHeader(); java.io.Reader reader3 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser4 = cSVFormat0.parse(reader3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNull(strArray2); }
public void test625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test625"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat6); java.lang.Character char12 = cSVFormat6.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withIgnoreEmptyHeaders(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNull(char12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test626"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('4'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord13 = cSVParser12.nextRecord(); boolean boolean14 = cSVParser12.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(cSVRecord13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test627"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray1 = cSVFormat0.getHeader(); boolean boolean2 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.Quote quote3 = cSVFormat0.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(true); java.lang.String str6 = cSVFormat5.toString(); java.lang.Character char7 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withEscape((java.lang.Character) '\t'); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat5.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNull(strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNull(char7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test628"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape('\t'); boolean boolean13 = cSVFormat12.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test629"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(strMap10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertNotNull(cSVRecordItor12); org.junit.Assert.assertNotNull(cSVRecordList13); }
public void test630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test630"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); boolean boolean46 = cSVFormat44.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withRecordSeparator('\r'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); }
public void test631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test631"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNull(strMap14); }
public void test632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test632"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); org.apache.commons.csv.Quote quote4 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape('\f'); boolean boolean7 = cSVFormat6.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test633"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test634"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); long long49 = cSVParser5.getCurrentLineNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L); }
public void test635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test635"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); java.lang.Object obj46 = null; boolean boolean47 = cSVFormat44.equals(obj46); java.lang.Character char48 = cSVFormat44.getEscape(); java.lang.String[] strArray49 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray49, strMap50, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator54 = cSVRecord53.spliterator(); java.lang.String str55 = cSVRecord53.toString(); boolean boolean57 = cSVRecord53.isSet(""); java.lang.String[] strArray58 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap59 = null; org.apache.commons.csv.CSVRecord cSVRecord62 = new org.apache.commons.csv.CSVRecord(strArray58, strMap59, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator63 = cSVRecord62.spliterator(); java.lang.String[] strArray64 = cSVRecord62.values(); java.lang.String[] strArray65 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap66 = null; org.apache.commons.csv.CSVRecord cSVRecord69 = new org.apache.commons.csv.CSVRecord(strArray65, strMap66, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator70 = cSVRecord69.spliterator(); int int71 = cSVRecord69.size(); java.lang.String str72 = cSVRecord69.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap73 = cSVRecord69.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap74 = cSVRecord62.putIn(strMap73); java.util.Map<java.lang.String, java.lang.String> strMap75 = cSVRecord53.putIn(strMap74); java.lang.String[] strArray76 = cSVRecord53.values(); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat44.withHeader(strArray76); boolean boolean78 = cSVFormat77.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNull(char48); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(strSpliterator54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]"); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(strSpliterator63); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertNotNull(strSpliterator70); org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\r\n" + "'", str72, "\r\n"); org.junit.Assert.assertNotNull(strMap73); org.junit.Assert.assertNotNull(strMap74); org.junit.Assert.assertNotNull(strMap75); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test636"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('\037'); boolean boolean6 = cSVFormat5.isEscaping(); boolean boolean7 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withDelimiter('4'); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat5.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test637"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withNullString("\r\n"); boolean boolean12 = cSVFormat6.isNullHandling(); boolean boolean13 = cSVFormat6.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test638"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); long long5 = cSVParser3.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); }
public void test639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test639"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('\037'); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray7 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null; org.apache.commons.csv.CSVRecord cSVRecord11 = new org.apache.commons.csv.CSVRecord(strArray7, strMap8, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator12 = cSVRecord11.spliterator(); java.lang.String[] strArray13 = cSVRecord11.values(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withHeader(strArray13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat6.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withEscape('\\'); java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.lang.String[] strArray24 = cSVRecord23.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\u2028", 0L); java.lang.String str29 = cSVFormat18.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat5.withHeader(strArray24); org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean32 = cSVFormat31.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote35 = null; org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat34.withQuotePolicy(quote35); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat36.withIgnoreSurroundingSpaces(true); boolean boolean39 = cSVFormat38.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuoteChar('\"'); java.lang.String[] strArray42 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "\r\n", (long) 10); java.lang.String[] strArray47 = cSVRecord46.values(); boolean boolean49 = cSVRecord46.isSet("hi!"); long long50 = cSVRecord46.getRecordNumber(); java.lang.String[] strArray51 = cSVRecord46.values(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat38.withHeader(strArray51); java.lang.String[] strArray53 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap54 = null; org.apache.commons.csv.CSVRecord cSVRecord57 = new org.apache.commons.csv.CSVRecord(strArray53, strMap54, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator58 = cSVRecord57.spliterator(); java.lang.String[] strArray59 = cSVRecord57.values(); org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean62 = cSVFormat61.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat61.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote65 = null; org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat64.withQuotePolicy(quote65); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat64.withQuoteChar((java.lang.Character) '4'); char char69 = cSVFormat68.getDelimiter(); java.lang.Character char70 = cSVFormat68.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat71 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray72 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray72, strMap73, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator77 = cSVRecord76.spliterator(); java.lang.String[] strArray78 = cSVRecord76.values(); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat71.withHeader(strArray78); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat68.withHeader(strArray78); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader81 = null; org.apache.commons.csv.Lexer lexer82 = new org.apache.commons.csv.Lexer(cSVFormat80, extendedBufferedReader81); org.apache.commons.csv.CSVFormat cSVFormat84 = cSVFormat80.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser85 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat80); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser85, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap88 = cSVParser85.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord91 = new org.apache.commons.csv.CSVRecord(strArray59, strMap88, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord94 = new org.apache.commons.csv.CSVRecord(strArray51, strMap88, "Delimiter=<,> QuoteChar=<\"> CommentStart=<\b> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 35L); org.apache.commons.csv.CSVRecord cSVRecord97 = new org.apache.commons.csv.CSVRecord(strArray24, strMap88, "Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<\036> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (byte) 100); boolean boolean99 = cSVRecord97.isMapped("Delimiter=<,> Escape=<a> QuoteChar=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strSpliterator12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(strSpliterator58); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertTrue("'" + char69 + "' != '" + ',' + "'", char69 == ','); org.junit.Assert.assertNull(char70); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertNotNull(strSpliterator77); org.junit.Assert.assertNotNull(strArray78); org.junit.Assert.assertNotNull(cSVFormat79); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertNotNull(cSVFormat84); org.junit.Assert.assertNotNull(cSVParser85); org.junit.Assert.assertNotNull(strMap88); org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false); }
public void test640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test640"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); long long19 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser5.spliterator(); boolean boolean21 = cSVParser5.isClosed(); long long22 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); }
public void test641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test641"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getCurrentLineNumber(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "Delimiter=<,> Escape=<a> QuoteChar=<\t> CommentStart=<\f> NullString=<Delimiter=<,> Escape=<\\> QuoteChar=<\f> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test642"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader22); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); }
public void test643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test643"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNull(cSVRecord11); }
public void test644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test644"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); long long33 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); }
public void test645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test645"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Token token8 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder9 = token8.content; org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat5.print((java.lang.Appendable) stringBuilder9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat5.withIgnoreEmptyLines(false); boolean boolean17 = cSVFormat5.getIgnoreEmptyHeaders(); java.lang.String str18 = cSVFormat5.toString(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); boolean boolean22 = cSVFormat20.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat20.withQuoteChar((java.lang.Character) 'a'); boolean boolean27 = cSVFormat26.isNullHandling(); boolean boolean28 = cSVFormat26.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat26); boolean boolean30 = cSVFormat26.getIgnoreEmptyHeaders(); boolean boolean31 = cSVFormat5.equals((java.lang.Object) boolean30); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(stringBuilder9); org.junit.Assert.assertEquals(stringBuilder9.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str18, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(cSVParser29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test646"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test647"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withSkipHeaderRecord(false); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\\> QuoteChar=<\f> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); }
public void test648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test648"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); boolean boolean22 = cSVFormat20.getSkipHeaderRecord(); boolean boolean23 = cSVFormat20.isQuoting(); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser24.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection27 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser5.iterator(); boolean boolean29 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord30 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordCollection27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(cSVRecord30); }
public void test649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test649"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); java.lang.String[] strArray5 = cSVFormat0.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreSurroundingSpaces(true); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat9.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNull(strArray5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test650"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); java.lang.String str6 = cSVRecord4.toString(); java.lang.String[] strArray7 = cSVRecord4.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null; org.apache.commons.csv.CSVRecord cSVRecord11 = new org.apache.commons.csv.CSVRecord(strArray7, strMap8, "[hi!]", (long) (short) -1); java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); int int18 = cSVRecord16.size(); java.lang.String str19 = cSVRecord16.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap20 = cSVRecord16.toMap(); boolean boolean21 = cSVRecord16.isConsistent(); java.util.Iterator<java.lang.String> strItor22 = cSVRecord16.iterator(); java.util.Map<java.lang.String, java.lang.String> strMap23 = cSVRecord16.toMap(); java.lang.String[] strArray24 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote30 = null; org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuotePolicy(quote30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat29.withQuoteChar((java.lang.Character) '4'); char char34 = cSVFormat33.getDelimiter(); java.lang.Character char35 = cSVFormat33.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray37 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap38 = null; org.apache.commons.csv.CSVRecord cSVRecord41 = new org.apache.commons.csv.CSVRecord(strArray37, strMap38, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator42 = cSVRecord41.spliterator(); java.lang.String[] strArray43 = cSVRecord41.values(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat36.withHeader(strArray43); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat33.withHeader(strArray43); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader46 = null; org.apache.commons.csv.Lexer lexer47 = new org.apache.commons.csv.Lexer(cSVFormat45, extendedBufferedReader46); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat45.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat45); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser50, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap53 = cSVParser50.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray24, strMap53, "Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[hi!]", 0L); org.apache.commons.csv.CSVRecord cSVRecord59 = new org.apache.commons.csv.CSVRecord(strArray7, strMap53, "Delimiter=<,> Escape=<a> QuoteChar=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (long) (byte) 100); java.lang.String str60 = cSVRecord59.toString(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]"); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\r\n" + "'", str19, "\r\n"); org.junit.Assert.assertNotNull(strMap20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strItor22); org.junit.Assert.assertNotNull(strMap23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + char34 + "' != '" + ',' + "'", char34 == ','); org.junit.Assert.assertNull(char35); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(strSpliterator42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVParser50); org.junit.Assert.assertNotNull(strMap53); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]"); }
public void test651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test651"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat3.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withCommentStart((java.lang.Character) '\037'); boolean boolean32 = cSVFormat29.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat29.withCommentStart((java.lang.Character) '\f'); boolean boolean35 = cSVFormat29.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test652"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test653"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withEscape((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); boolean boolean13 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat8.withIgnoreEmptyLines(false); org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder19 = token18.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat17.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat0.print((java.lang.Appendable) stringBuilder19); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); }
public void test654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test654"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor21 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertNotNull(cSVRecordItor21); org.junit.Assert.assertNull(strMap22); }
public void test655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test655"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); boolean boolean8 = cSVFormat7.getIgnoreEmptyHeaders(); java.io.Reader reader9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat7.parse(reader9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test656"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); boolean boolean8 = cSVFormat6.isCommentingEnabled(); boolean boolean9 = cSVFormat6.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test657"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); boolean boolean11 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser5.spliterator(); long long13 = cSVParser5.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordList14); }
public void test658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test658"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); long long4 = cSVParser3.getRecordNumber(); long long5 = cSVParser3.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordList6); }
public void test659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test659"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); long long20 = cSVParser5.getCurrentLineNumber(); long long21 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); }
public void test660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test660"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser25, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap28 = cSVParser25.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord29 = cSVParser25.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(strMap28); org.junit.Assert.assertNotNull(cSVRecord29); }
public void test661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test661"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); long long9 = cSVParser3.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser3.getRecords(); boolean boolean11 = cSVParser3.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test662"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); java.lang.Character char11 = cSVFormat5.getCommentStart(); java.lang.String str12 = cSVFormat5.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNull(char11); // flaky:     org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test663"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test664"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); long long10 = cSVParser5.getRecordNumber(); boolean boolean11 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(); long long13 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test665"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart((java.lang.Character) '\037'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test666"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> CommentStart=<\037\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.lang.String[] strArray6 = cSVFormat1.getHeader(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(strArray6); }
public void test667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test667"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); long long15 = cSVParser12.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); long long17 = cSVParser12.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser12.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser12.getRecords(); boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVParser12); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor21 = cSVParser12.iterator(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVRecordItor21); }
public void test668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test668"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withQuoteChar('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\037'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withCommentStart((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test669"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); java.lang.Character char9 = cSVFormat8.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(char9); }
public void test670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test670"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); long long18 = cSVParser16.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection27 = cSVParser16.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser33.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); long long42 = cSVParser41.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser41.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection44 = cSVParser33.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator45 = cSVRecordList43.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser16.getRecords(cSVRecordList43); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator49 = cSVParser5.spliterator(); long long50 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordCollection27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordCollection44); org.junit.Assert.assertNotNull(cSVRecordSpliterator45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordSpliterator49); org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L); }
public void test671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test671"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordList8); }
public void test672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test672"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withNullString(""); java.lang.String[] strArray5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(strArray5); java.lang.String str7 = cSVFormat1.getNullString(); java.lang.Character char8 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); boolean boolean10 = cSVFormat1.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test673"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); boolean boolean8 = cSVFormat1.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test674"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); long long40 = cSVParser38.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean43 = cSVFormat42.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser46.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection49 = cSVParser38.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList48); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean52 = cSVFormat51.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51); long long56 = cSVParser55.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList57 = cSVParser55.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean60 = cSVFormat59.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("", cSVFormat59); long long64 = cSVParser63.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = cSVParser63.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection66 = cSVParser55.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList65); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator67 = cSVRecordList65.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList68 = cSVParser38.getRecords(cSVRecordList65); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection69 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList68); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator70 = cSVRecordCollection69.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVParser46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordCollection49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVParser55); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L); org.junit.Assert.assertNotNull(cSVRecordList57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordList65); org.junit.Assert.assertNotNull(cSVRecordCollection66); org.junit.Assert.assertNotNull(cSVRecordSpliterator67); org.junit.Assert.assertNotNull(cSVRecordList68); org.junit.Assert.assertNotNull(cSVRecordCollection69); org.junit.Assert.assertNotNull(cSVRecordSpliterator70); }
public void test675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test675"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withNullString(""); java.lang.String[] strArray5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(strArray5); java.lang.String str7 = cSVFormat1.getNullString(); java.lang.Character char8 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withCommentStart((java.lang.Character) '4'); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat11.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test676"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withDelimiter('\b'); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser7.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNull(strMap10); }
public void test677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test677"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); boolean boolean4 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withCommentStart('\\'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withDelimiter('\b'); org.apache.commons.csv.Quote quote10 = cSVFormat7.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); }
public void test678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test678"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat20.withCommentStart((java.lang.Character) '\036'); boolean boolean28 = cSVFormat27.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat27.withEscape('\n'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test679"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); long long40 = cSVParser38.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean43 = cSVFormat42.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser46.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection49 = cSVParser38.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList48); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean52 = cSVFormat51.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51); long long56 = cSVParser55.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList57 = cSVParser55.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean60 = cSVFormat59.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("", cSVFormat59); long long64 = cSVParser63.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = cSVParser63.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection66 = cSVParser55.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList65); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator67 = cSVRecordList65.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList68 = cSVParser38.getRecords(cSVRecordList65); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection69 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList68); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor71 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVParser46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordCollection49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVParser55); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L); org.junit.Assert.assertNotNull(cSVRecordList57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordList65); org.junit.Assert.assertNotNull(cSVRecordCollection66); org.junit.Assert.assertNotNull(cSVRecordSpliterator67); org.junit.Assert.assertNotNull(cSVRecordList68); org.junit.Assert.assertNotNull(cSVRecordCollection69); org.junit.Assert.assertNotNull(cSVRecordList70); org.junit.Assert.assertNotNull(cSVRecordItor71); }
public void test680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test680"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat2); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat2); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart('#'); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVParser4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test681"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.lang.String[] strArray6 = cSVFormat1.getHeader(); boolean boolean7 = cSVFormat1.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test682"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); long long9 = cSVParser3.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser3.getRecords(cSVRecordList44); long long48 = cSVParser3.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord49 = cSVParser3.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = cSVParser3.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = cSVParser3.getHeaderMap(); boolean boolean52 = cSVParser3.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertNull(cSVRecord49); org.junit.Assert.assertNull(strMap50); org.junit.Assert.assertNull(strMap51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test683"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r", cSVFormat1); java.lang.Class<?> wildcardClass8 = cSVParser7.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test684"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat12); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; token14.reset(); token14.isReady = true; token14.reset(); token14.isReady = false; org.apache.commons.csv.Token.Type type22 = token14.type; boolean boolean23 = token14.isReady; boolean boolean24 = token14.isReady; token14.reset(); java.lang.StringBuilder stringBuilder26 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat12.print((java.lang.Appendable) stringBuilder26); java.lang.String[] strArray28 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap29 = null; org.apache.commons.csv.CSVRecord cSVRecord32 = new org.apache.commons.csv.CSVRecord(strArray28, strMap29, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator33 = cSVRecord32.spliterator(); java.lang.String str34 = cSVRecord32.toString(); java.lang.String[] strArray35 = cSVRecord32.values(); java.lang.String str36 = cSVFormat12.format((java.lang.Object[]) strArray35); java.lang.String str37 = cSVFormat0.format((java.lang.Object[]) strArray35); boolean boolean38 = cSVFormat0.isCommentingEnabled(); java.lang.String str39 = cSVFormat0.getRecordSeparator(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(strSpliterator33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]"); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\r\n" + "'", str39, "\r\n"); }
public void test685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test685"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); long long10 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser16.getRecords(); boolean boolean19 = cSVParser16.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat21); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator24 = cSVParser23.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser23.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser23.getRecords(cSVRecordList26); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser23.iterator(); long long29 = cSVParser23.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser23.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser16.getRecords(cSVRecordList30); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection32 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31); org.apache.commons.csv.CSVRecord cSVRecord33 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertNotNull(cSVRecordSpliterator24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordCollection32); org.junit.Assert.assertNull(cSVRecord33); }
public void test686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test686"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser5.getHeaderMap(); long long18 = cSVParser5.getRecordNumber(); long long19 = cSVParser5.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordList20); }
public void test687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test687"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withDelimiter('\b'); java.lang.Character char7 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(char7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test688"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '4'); char char8 = cSVFormat7.getDelimiter(); java.lang.Character char9 = cSVFormat7.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator16 = cSVRecord15.spliterator(); java.lang.String[] strArray17 = cSVRecord15.values(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat10.withHeader(strArray17); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat7.withHeader(strArray17); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null; org.apache.commons.csv.Lexer lexer21 = new org.apache.commons.csv.Lexer(cSVFormat19, extendedBufferedReader20); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat19.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape((java.lang.Character) '4'); java.io.Reader reader26 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = cSVFormat23.parse(reader26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + ',' + "'", char8 == ','); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strSpliterator16); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test689"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); long long13 = cSVParser5.getRecordNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test690"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withNullString(""); java.lang.String[] strArray4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withHeader(strArray4); java.lang.Character char6 = cSVFormat0.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null; org.apache.commons.csv.Lexer lexer10 = new org.apache.commons.csv.Lexer(cSVFormat8, extendedBufferedReader9); java.lang.String[] strArray11 = cSVFormat8.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withCommentStart((java.lang.Character) '#'); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat13.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(strArray11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test691"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2); boolean boolean7 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart('\t'); boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVParser6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test692"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = null; org.apache.commons.csv.Lexer lexer7 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader6); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test693"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "INVALID []"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); }
public void test694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test694"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser5.getRecords(cSVRecordList29); long long32 = cSVParser5.getCurrentLineNumber(); boolean boolean33 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test695"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); java.lang.Character char11 = cSVFormat5.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withIgnoreEmptyHeaders(false); java.lang.String str14 = cSVFormat5.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat13); // flaky:     org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<,> QuoteChar=<\"\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test696"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); boolean boolean13 = cSVFormat11.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withNullString("\u2028"); boolean boolean16 = cSVFormat15.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withDelimiter('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat22, extendedBufferedReader23); org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder26 = token25.content; org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.EORECORD; token25.type = type27; boolean boolean29 = token25.isReady; org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder31 = token30.content; org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EORECORD; token30.type = type32; token25.type = type32; token25.isReady = false; org.apache.commons.csv.Token.Type type37 = token25.type; org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder39 = token38.content; org.apache.commons.csv.Token.Type type40 = org.apache.commons.csv.Token.Type.EORECORD; token38.type = type40; boolean boolean42 = token38.isReady; org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder44 = token43.content; org.apache.commons.csv.Token.Type type45 = org.apache.commons.csv.Token.Type.EORECORD; token43.type = type45; token38.type = type45; token25.type = type45; boolean boolean49 = token25.isReady; java.lang.StringBuilder stringBuilder50 = token25.content; lexer24.trimTrailingSpaces(stringBuilder50); org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat1.print((java.lang.Appendable) stringBuilder50); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat1.withNullString("\u2029"); boolean boolean55 = cSVFormat54.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type27.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type32.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type37.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type40.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(stringBuilder44); org.junit.Assert.assertEquals(stringBuilder44.toString(), ""); org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type45.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(stringBuilder50); org.junit.Assert.assertEquals(stringBuilder50.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test697"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(false); java.lang.String[] strArray13 = cSVFormat12.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withNullString("Delimiter=<#> QuoteChar=<\"> NullString=<Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); boolean boolean16 = cSVFormat12.isEscaping(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test698"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withCommentStart((java.lang.Character) '\f'); boolean boolean26 = cSVFormat25.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat25.withEscape('\"'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test699"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); boolean boolean40 = cSVParser5.isClosed(); cSVParser5.close(); boolean boolean42 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); }
public void test700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test700"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); long long38 = cSVParser5.getCurrentLineNumber(); long long39 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); }
public void test701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test701"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); boolean boolean8 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean9 = cSVFormat4.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withEscape('a'); boolean boolean12 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat4.withQuoteChar('a'); java.lang.Character char15 = cSVFormat14.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean18 = cSVFormat17.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat17); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withIgnoreEmptyHeaders(false); java.lang.Character char22 = cSVFormat17.getEscape(); java.lang.String str23 = cSVFormat17.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean25 = cSVFormat24.getIgnoreEmptyHeaders(); java.lang.String[] strArray26 = cSVFormat24.getHeader(); java.lang.String str27 = cSVFormat24.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat24.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); boolean boolean34 = cSVFormat32.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withNullString("\u2028"); boolean boolean37 = cSVFormat36.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withEscape('\037'); java.lang.String[] strArray40 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator45 = cSVRecord44.spliterator(); java.lang.String[] strArray46 = cSVRecord44.values(); java.lang.String str47 = cSVFormat36.format((java.lang.Object[]) strArray46); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat31.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray46); java.lang.String str50 = cSVFormat49.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean54 = cSVFormat53.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote57 = null; org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withQuotePolicy(quote57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray61 = cSVFormat58.getHeader(); char char62 = cSVFormat58.getDelimiter(); org.apache.commons.csv.Quote quote63 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat58.withQuotePolicy(quote63); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat52.withQuotePolicy(quote63); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat14.withQuotePolicy(quote63); boolean boolean67 = cSVFormat14.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNull(char15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNull(char22); org.junit.Assert.assertNull(str23); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(strArray26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\r\n" + "'", str27, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strSpliterator45); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNull(str50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNull(strArray61); org.junit.Assert.assertTrue("'" + char62 + "' != '" + ',' + "'", char62 == ','); org.junit.Assert.assertTrue("'" + quote63 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote63.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); }
public void test702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test702"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord4 = cSVParser3.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); boolean boolean6 = cSVParser3.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(cSVRecord4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test703"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); boolean boolean9 = cSVFormat8.isNullHandling(); boolean boolean10 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString("Delimiter=<,> Escape=<\037> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.lang.String[] strArray14 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "\r\n", (long) 10); java.lang.String[] strArray19 = cSVRecord18.values(); boolean boolean21 = cSVRecord18.isSet("hi!"); long long22 = cSVRecord18.getRecordNumber(); java.lang.String[] strArray23 = cSVRecord18.values(); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord18.spliterator(); java.lang.String str25 = cSVRecord18.toString(); java.lang.String[] strArray26 = cSVRecord18.values(); java.lang.String str27 = cSVFormat8.format((java.lang.Object[]) strArray26); org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<4> NullString=<\205> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]"); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(cSVParser28); }
public void test704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test704"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test705"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean23 = cSVFormat22.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); long long27 = cSVParser26.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser26.getRecords(); boolean boolean29 = cSVParser26.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor30 = cSVParser26.iterator(); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat32); long long37 = cSVParser36.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean41 = cSVFormat40.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("", cSVFormat40); long long45 = cSVParser44.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser44.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection47 = cSVParser36.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList46); boolean boolean48 = cSVParser36.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList49 = cSVParser36.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser36.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser26.getRecords(cSVRecordList50); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser5.getRecords(cSVRecordList50); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordList28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVRecordItor30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVParser36); org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L); org.junit.Assert.assertNotNull(cSVRecordList38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVParser44); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordCollection47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(cSVRecordList49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); }
public void test706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test706"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test707"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withIgnoreEmptyHeaders(true); boolean boolean14 = cSVFormat8.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test708"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); long long11 = cSVParser5.getCurrentLineNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test709"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); java.lang.String[] strArray6 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null; org.apache.commons.csv.CSVRecord cSVRecord10 = new org.apache.commons.csv.CSVRecord(strArray6, strMap7, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator11 = cSVRecord10.spliterator(); java.lang.String str12 = cSVRecord10.toString(); boolean boolean14 = cSVRecord10.isSet(""); boolean boolean16 = cSVRecord10.isSet("\r\n"); boolean boolean17 = cSVRecord10.isConsistent(); java.lang.String[] strArray18 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator23 = cSVRecord22.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap24 = cSVRecord22.toMap(); java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord22.spliterator(); java.util.Spliterator<java.lang.String> strSpliterator26 = cSVRecord22.spliterator(); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord22.spliterator(); java.lang.String[] strArray28 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap29 = null; org.apache.commons.csv.CSVRecord cSVRecord32 = new org.apache.commons.csv.CSVRecord(strArray28, strMap29, "\r\n", (long) 10); java.lang.String[] strArray33 = cSVRecord32.values(); java.lang.String[] strArray34 = cSVRecord32.values(); java.lang.String str35 = cSVRecord32.getComment(); java.lang.String[] strArray37 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap38 = null; org.apache.commons.csv.CSVRecord cSVRecord41 = new org.apache.commons.csv.CSVRecord(strArray37, strMap38, "", (long) '#'); java.lang.String[] strArray42 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator47 = cSVRecord46.spliterator(); int int48 = cSVRecord46.size(); java.lang.String str49 = cSVRecord46.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap50 = cSVRecord46.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap51 = cSVRecord41.putIn(strMap50); java.util.Map<java.lang.String, java.lang.String> strMap52 = cSVRecord32.putIn(strMap51); java.util.Map<java.lang.String, java.lang.String> strMap53 = cSVRecord22.putIn(strMap52); java.util.Map<java.lang.String, java.lang.String> strMap54 = cSVRecord10.putIn(strMap52); java.util.Map<java.lang.String, java.lang.String> strMap55 = cSVRecord5.putIn(strMap52); long long56 = cSVRecord5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strSpliterator11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strSpliterator23); org.junit.Assert.assertNotNull(strMap24); org.junit.Assert.assertNotNull(strSpliterator25); org.junit.Assert.assertNotNull(strSpliterator26); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\r\n" + "'", str35, "\r\n"); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(strSpliterator47); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\r\n" + "'", str49, "\r\n"); org.junit.Assert.assertNotNull(strMap50); org.junit.Assert.assertNotNull(strMap51); org.junit.Assert.assertNotNull(strMap52); org.junit.Assert.assertNotNull(strMap53); org.junit.Assert.assertNotNull(strMap54); org.junit.Assert.assertNotNull(strMap55); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L); }
public void test710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test710"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.EORECORD; token12.type = type14; boolean boolean16 = token12.isReady; org.apache.commons.csv.Token.Type type17 = token12.type; java.lang.String str18 = token12.toString(); java.lang.StringBuilder stringBuilder19 = token12.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat6.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat1.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat1.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat1.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean32 = cSVFormat31.getIgnoreEmptyHeaders(); boolean boolean33 = cSVFormat31.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withNullString("\u2028"); boolean boolean36 = cSVFormat35.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat35.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withDelimiter('#'); boolean boolean49 = cSVFormat46.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat46.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat51); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean56 = cSVFormat55.getIgnoreEmptyHeaders(); boolean boolean57 = cSVFormat55.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat55.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat55.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat55.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withIgnoreEmptyHeaders(false); boolean boolean66 = cSVFormat65.getIgnoreEmptyHeaders(); java.lang.String[] strArray68 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray68, strMap69, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap73 = null; org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray68, strMap73, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat65.withHeader(strArray68); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat51.withHeader(strArray68); java.lang.String str79 = cSVFormat27.format((java.lang.Object[]) strArray68); java.lang.String str80 = cSVFormat27.getRecordSeparator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type14.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type17.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EORECORD []" + "'", str18, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVParser52); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!"); org.junit.Assert.assertNull(str80); }
public void test711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test711"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); }
public void test712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test712"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.lang.String[] strArray5 = cSVRecord4.values(); boolean boolean7 = cSVRecord4.isSet("hi!"); long long8 = cSVRecord4.getRecordNumber(); java.lang.String[] strArray9 = cSVRecord4.values(); java.lang.String[] strArray10 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null; org.apache.commons.csv.CSVRecord cSVRecord14 = new org.apache.commons.csv.CSVRecord(strArray10, strMap11, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator15 = cSVRecord14.spliterator(); int int16 = cSVRecord14.size(); java.lang.String str17 = cSVRecord14.getComment(); java.lang.String str18 = cSVRecord14.getComment(); boolean boolean19 = cSVRecord14.isConsistent(); java.lang.String[] strArray21 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray21, strMap22, "", (long) '#'); java.lang.String str26 = cSVRecord25.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap27 = cSVRecord25.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap28 = cSVRecord14.putIn(strMap27); java.lang.String[] strArray29 = cSVRecord14.values(); java.lang.String[] strArray30 = cSVRecord14.values(); java.lang.String[] strArray31 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap32 = null; org.apache.commons.csv.CSVRecord cSVRecord35 = new org.apache.commons.csv.CSVRecord(strArray31, strMap32, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator36 = cSVRecord35.spliterator(); java.lang.String[] strArray37 = cSVRecord35.values(); org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean40 = cSVFormat39.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote43 = null; org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withQuotePolicy(quote43); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat42.withQuoteChar((java.lang.Character) '4'); char char47 = cSVFormat46.getDelimiter(); java.lang.Character char48 = cSVFormat46.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray50 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null; org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray50, strMap51, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator55 = cSVRecord54.spliterator(); java.lang.String[] strArray56 = cSVRecord54.values(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat49.withHeader(strArray56); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat46.withHeader(strArray56); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader59 = null; org.apache.commons.csv.Lexer lexer60 = new org.apache.commons.csv.Lexer(cSVFormat58, extendedBufferedReader59); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat58.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat58); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser63, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap66 = cSVParser63.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord69 = new org.apache.commons.csv.CSVRecord(strArray37, strMap66, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray30, strMap66, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); org.apache.commons.csv.CSVRecord cSVRecord75 = new org.apache.commons.csv.CSVRecord(strArray9, strMap66, "", (long) (byte) 0); java.util.Map<java.lang.String, java.lang.String> strMap76 = cSVRecord75.toMap(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strSpliterator15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\r\n" + "'", str17, "\r\n"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(strMap27); org.junit.Assert.assertNotNull(strMap28); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(strSpliterator36); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertTrue("'" + char47 + "' != '" + ',' + "'", char47 == ','); org.junit.Assert.assertNull(char48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(strSpliterator55); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); org.junit.Assert.assertNotNull(strMap66); org.junit.Assert.assertNotNull(strMap76); }
public void test713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test713"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withNullString(""); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuoteChar('\"'); java.lang.Character char7 = cSVFormat6.getCommentStart(); java.io.Reader reader8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat6.parse(reader8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(char7); }
public void test714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test714"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); boolean boolean12 = cSVParser11.isClosed(); boolean boolean13 = cSVParser11.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test715"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); long long15 = cSVParser12.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); long long17 = cSVParser12.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser12.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser12.getRecords(); boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVParser12); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat3.withNullString("Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[hi!]"); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test716"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser5.spliterator(); boolean boolean20 = cSVParser5.isClosed(); long long21 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertNull(cSVRecord22); }
public void test717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test717"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); }
public void test718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test718"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); cSVParser19.close(); cSVParser19.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = cSVParser19.getHeaderMap(); long long23 = cSVParser19.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNull(strMap22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); }
public void test719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test719"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withQuoteChar('\"'); org.apache.commons.csv.Quote quote13 = cSVFormat12.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(quote13); }
public void test720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test720"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat2.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); }
public void test721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test721"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); boolean boolean13 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test722"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); long long38 = cSVParser5.getCurrentLineNumber(); boolean boolean39 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); }
public void test723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test723"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); long long8 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser14.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser24.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser14.getRecords(cSVRecordList30); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNull(cSVRecord27); org.junit.Assert.assertNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); }
public void test724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test724"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor40 = cSVParser5.iterator(); long long41 = cSVParser5.getRecordNumber(); long long42 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertNotNull(cSVRecordItor40); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); }
public void test725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test725"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord13 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(strMap12); }
public void test726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test726"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator40 = cSVParser38.spliterator(); long long41 = cSVParser38.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor42 = cSVParser38.iterator(); org.apache.commons.csv.CSVRecord cSVRecord43 = cSVParser38.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean46 = cSVFormat45.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser49.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser38.getRecords(cSVRecordList50); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser5.getRecords(cSVRecordList51); long long53 = cSVParser5.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap54 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator40); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor42); org.junit.Assert.assertNull(cSVRecord43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVParser49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L); org.junit.Assert.assertNull(strMap54); }
public void test727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test727"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test728"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVRecordItor10); }
public void test729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test729"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withDelimiter('#'); org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder27 = token26.content; org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD; token26.type = type28; boolean boolean30 = token26.isReady; org.apache.commons.csv.Token.Type type31 = token26.type; java.lang.String str32 = token26.toString(); java.lang.StringBuilder stringBuilder33 = token26.content; org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat20.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat15.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat11.print((java.lang.Appendable) stringBuilder33); java.lang.String str37 = cSVFormat11.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat11.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat11.withQuoteChar('\036'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(stringBuilder27); org.junit.Assert.assertEquals(stringBuilder27.toString(), ""); org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type31.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "EORECORD []" + "'", str32, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder33); org.junit.Assert.assertEquals(stringBuilder33.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVPrinter35); org.junit.Assert.assertNotNull(cSVPrinter36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u2028" + "'", str37, "\u2028"); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); }
public void test730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test730"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); long long26 = cSVParser24.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser32.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection35 = cSVParser24.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser5.getRecords(cSVRecordList34); long long37 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordCollection35); org.junit.Assert.assertNotNull(cSVRecordList36); org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L); }
public void test731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test731"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); long long4 = cSVParser3.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser3.iterator(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor5); }
public void test732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test732"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); java.lang.Character char8 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(false); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test733"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withDelimiter('\b'); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord(); long long9 = cSVParser7.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test734"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); boolean boolean6 = cSVFormat3.isQuoting(); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat3.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test735"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat2); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat2); boolean boolean8 = cSVFormat2.isEscaping(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVParser4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test736"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); long long11 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); boolean boolean13 = cSVParser5.isClosed(); cSVParser5.close(); boolean boolean15 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); }
public void test737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test737"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser5.getHeaderMap(); long long19 = cSVParser5.getRecordNumber(); cSVParser5.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator21 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator21); }
public void test738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test738"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat8); long long10 = cSVParser9.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser9.getRecords(); long long12 = cSVParser9.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L); }
public void test739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test739"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); long long7 = cSVParser5.getCurrentLineNumber(); long long8 = cSVParser5.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); boolean boolean10 = cSVParser5.isClosed(); long long11 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test740"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withNullString("\r\n"); boolean boolean11 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withIgnoreSurroundingSpaces(true); boolean boolean14 = cSVFormat13.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test741"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean7 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6); long long11 = cSVParser10.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser10.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14); long long19 = cSVParser18.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser18.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection21 = cSVParser10.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection22 = cSVParser3.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser3.getHeaderMap(); long long24 = cSVParser3.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordCollection21); org.junit.Assert.assertNotNull(cSVRecordCollection22); org.junit.Assert.assertNull(strMap23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L); }
public void test742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test742"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); cSVParser5.close(); long long11 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test743"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withNullString("\r"); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat6, "\u2029"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withQuoteChar('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withCommentStart('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test744"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser19.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser19.getHeaderMap(); long long24 = cSVParser19.getRecordNumber(); long long25 = cSVParser19.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator22); org.junit.Assert.assertNull(strMap23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); }
public void test745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test745"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withDelimiter('#'); org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder27 = token26.content; org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD; token26.type = type28; boolean boolean30 = token26.isReady; org.apache.commons.csv.Token.Type type31 = token26.type; java.lang.String str32 = token26.toString(); java.lang.StringBuilder stringBuilder33 = token26.content; org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat20.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat15.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat11.print((java.lang.Appendable) stringBuilder33); java.lang.String str37 = cSVFormat11.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat11.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser40 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat39); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(stringBuilder27); org.junit.Assert.assertEquals(stringBuilder27.toString(), ""); org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type31.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "EORECORD []" + "'", str32, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder33); org.junit.Assert.assertEquals(stringBuilder33.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVPrinter35); org.junit.Assert.assertNotNull(cSVPrinter36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u2028" + "'", str37, "\u2028"); org.junit.Assert.assertNotNull(cSVFormat39); }
public void test746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test746"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withCommentStart('\f'); boolean boolean12 = cSVFormat7.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test747"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord13 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertNotNull(cSVRecordSpliterator12); org.junit.Assert.assertNull(cSVRecord13); }
public void test748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test748"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withCommentStart('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test749"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); long long9 = cSVParser3.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser3.getRecords(cSVRecordList44); long long48 = cSVParser3.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord49 = cSVParser3.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = cSVParser3.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap51 = cSVParser3.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser3.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertNull(cSVRecord49); org.junit.Assert.assertNull(strMap50); org.junit.Assert.assertNull(strMap51); org.junit.Assert.assertNotNull(cSVRecordList52); }
public void test750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test750"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); boolean boolean9 = cSVParser5.isClosed(); long long10 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test751"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNotNull(cSVRecordItor11); org.junit.Assert.assertNotNull(cSVRecordList12); }
public void test752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test752"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withCommentStart((java.lang.Character) '\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test753"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); org.apache.commons.csv.Assertions.notNull((java.lang.Object) strArray30, "\n"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); }
public void test754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test754"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); cSVParser3.close(); boolean boolean9 = cSVParser3.isClosed(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser3.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test755"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat2.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) '\037'); boolean boolean31 = cSVFormat28.isQuoting(); boolean boolean32 = cSVFormat28.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat28.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<a> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat34); java.lang.Appendable appendable36 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat34.print(appendable36); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'out' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVParser35); }
public void test756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test756"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withQuoteChar('\037'); boolean boolean11 = cSVFormat4.isQuoting(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withDelimiter('\f'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test757"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); long long11 = cSVParser5.getCurrentLineNumber(); boolean boolean12 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14); long long19 = cSVParser18.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser18.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean23 = cSVFormat22.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); long long27 = cSVParser26.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser26.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection29 = cSVParser18.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList28); org.apache.commons.csv.CSVRecord cSVRecord30 = cSVParser18.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat32); long long37 = cSVParser36.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList39 = cSVParser18.getRecords(cSVRecordList38); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator40 = cSVRecordList38.spliterator(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection41 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList38); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordList28); org.junit.Assert.assertNotNull(cSVRecordCollection29); org.junit.Assert.assertNull(cSVRecord30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVParser36); org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L); org.junit.Assert.assertNotNull(cSVRecordList38); org.junit.Assert.assertNotNull(cSVRecordList39); org.junit.Assert.assertNotNull(cSVRecordSpliterator40); org.junit.Assert.assertNotNull(cSVRecordCollection41); }
public void test758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test758"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNotNull(cSVRecordItor10); }
public void test759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test759"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); java.lang.String[] strArray9 = cSVFormat8.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13); long long18 = cSVParser17.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser17.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser17.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = cSVParser17.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean24 = cSVFormat23.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23); long long28 = cSVParser27.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator29 = cSVParser27.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord30 = cSVParser27.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords(cSVRecordList31); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser27.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser17.getRecords(cSVRecordList33); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser17.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord36 = cSVParser17.nextRecord(); boolean boolean37 = cSVFormat11.equals((java.lang.Object) cSVParser17); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator38 = cSVParser17.spliterator(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean41 = cSVFormat40.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("", cSVFormat40); long long45 = cSVParser44.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator46 = cSVParser44.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator47 = cSVParser44.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap48 = cSVParser44.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean51 = cSVFormat50.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("", cSVFormat50); long long55 = cSVParser54.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator56 = cSVParser54.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord57 = cSVParser54.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList58 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList59 = cSVParser54.getRecords(cSVRecordList58); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList60 = cSVParser54.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList61 = cSVParser44.getRecords(cSVRecordList60); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList62 = cSVParser44.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord63 = cSVParser44.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor64 = cSVParser44.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList65 = cSVParser44.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList66 = cSVParser17.getRecords(cSVRecordList65); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); org.junit.Assert.assertNull(strMap21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator29); org.junit.Assert.assertNull(cSVRecord30); org.junit.Assert.assertNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(cSVRecord36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVParser44); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator46); org.junit.Assert.assertNotNull(cSVRecordSpliterator47); org.junit.Assert.assertNull(strMap48); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVParser54); org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator56); org.junit.Assert.assertNull(cSVRecord57); org.junit.Assert.assertNull(cSVRecordList59); org.junit.Assert.assertNotNull(cSVRecordList60); org.junit.Assert.assertNotNull(cSVRecordList61); org.junit.Assert.assertNotNull(cSVRecordList62); org.junit.Assert.assertNull(cSVRecord63); org.junit.Assert.assertNotNull(cSVRecordItor64); org.junit.Assert.assertNotNull(cSVRecordList65); org.junit.Assert.assertNotNull(cSVRecordList66); }
public void test760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test760"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); java.lang.Character char8 = cSVFormat1.getCommentStart(); boolean boolean9 = cSVFormat1.isQuoting(); boolean boolean10 = cSVFormat1.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test761"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat21.withIgnoreEmptyHeaders(true); java.lang.String[] strArray52 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap53 = null; org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray52, strMap53, "", (long) '#'); boolean boolean58 = cSVRecord56.isSet("\r\n"); boolean boolean60 = cSVRecord56.isMapped("[hi!]"); int int61 = cSVRecord56.size(); java.util.Map<java.lang.String, java.lang.String> strMap62 = cSVRecord56.toMap(); boolean boolean63 = cSVFormat50.equals((java.lang.Object) strMap62); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1); org.junit.Assert.assertNotNull(strMap62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); }
public void test762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test762"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser7.spliterator(); boolean boolean9 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test763"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); boolean boolean6 = cSVFormat2.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test764"); java.lang.String[] strArray1 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap2 = null; org.apache.commons.csv.CSVRecord cSVRecord5 = new org.apache.commons.csv.CSVRecord(strArray1, strMap2, "", (long) '#'); boolean boolean7 = cSVRecord5.isSet("\r\n"); java.lang.String str8 = cSVRecord5.toString(); boolean boolean9 = cSVRecord5.isConsistent(); java.lang.String[] strArray10 = cSVRecord5.values(); java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator16 = cSVRecord15.spliterator(); int int17 = cSVRecord15.size(); java.lang.String str18 = cSVRecord15.getComment(); java.lang.String str19 = cSVRecord15.getComment(); boolean boolean20 = cSVRecord15.isConsistent(); java.lang.String[] strArray22 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "", (long) '#'); java.lang.String str27 = cSVRecord26.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap28 = cSVRecord26.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap29 = cSVRecord15.putIn(strMap28); java.lang.String[] strArray30 = cSVRecord15.values(); java.lang.String[] strArray31 = cSVRecord15.values(); java.lang.String[] strArray32 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator37 = cSVRecord36.spliterator(); java.lang.String[] strArray38 = cSVRecord36.values(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean41 = cSVFormat40.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote44 = null; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withQuotePolicy(quote44); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat43.withQuoteChar((java.lang.Character) '4'); char char48 = cSVFormat47.getDelimiter(); java.lang.Character char49 = cSVFormat47.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray51 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap52 = null; org.apache.commons.csv.CSVRecord cSVRecord55 = new org.apache.commons.csv.CSVRecord(strArray51, strMap52, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator56 = cSVRecord55.spliterator(); java.lang.String[] strArray57 = cSVRecord55.values(); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat50.withHeader(strArray57); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat47.withHeader(strArray57); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader60 = null; org.apache.commons.csv.Lexer lexer61 = new org.apache.commons.csv.Lexer(cSVFormat59, extendedBufferedReader60); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat59.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat59); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser64, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap67 = cSVParser64.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord70 = new org.apache.commons.csv.CSVRecord(strArray38, strMap67, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord73 = new org.apache.commons.csv.CSVRecord(strArray31, strMap67, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); org.apache.commons.csv.CSVRecord cSVRecord76 = new org.apache.commons.csv.CSVRecord(strArray10, strMap67, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[]", (long) 'a'); boolean boolean78 = cSVRecord76.isMapped("Delimiter=<,> Escape=<a> QuoteChar=<4> NullString=<\205> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[hi!]" + "'", str8, "[hi!]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strSpliterator16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\r\n" + "'", str19, "\r\n"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(strMap28); org.junit.Assert.assertNotNull(strMap29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(strSpliterator37); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + char48 + "' != '" + ',' + "'", char48 == ','); org.junit.Assert.assertNull(char49); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(strSpliterator56); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(cSVParser64); org.junit.Assert.assertNotNull(strMap67); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test765"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreSurroundingSpaces(false); boolean boolean12 = cSVFormat7.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test766"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); boolean boolean13 = cSVFormat11.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withNullString("\u2028"); boolean boolean16 = cSVFormat15.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withDelimiter('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat22, extendedBufferedReader23); org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder26 = token25.content; org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.EORECORD; token25.type = type27; boolean boolean29 = token25.isReady; org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder31 = token30.content; org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EORECORD; token30.type = type32; token25.type = type32; token25.isReady = false; org.apache.commons.csv.Token.Type type37 = token25.type; org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder39 = token38.content; org.apache.commons.csv.Token.Type type40 = org.apache.commons.csv.Token.Type.EORECORD; token38.type = type40; boolean boolean42 = token38.isReady; org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder44 = token43.content; org.apache.commons.csv.Token.Type type45 = org.apache.commons.csv.Token.Type.EORECORD; token43.type = type45; token38.type = type45; token25.type = type45; boolean boolean49 = token25.isReady; java.lang.StringBuilder stringBuilder50 = token25.content; lexer24.trimTrailingSpaces(stringBuilder50); org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat1.print((java.lang.Appendable) stringBuilder50); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat1.withQuoteChar((java.lang.Character) '\n'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type27.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type32.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type37.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type40.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(stringBuilder44); org.junit.Assert.assertEquals(stringBuilder44.toString(), ""); org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type45.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(stringBuilder50); org.junit.Assert.assertEquals(stringBuilder50.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter52); }
public void test767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test767"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat20.withCommentStart((java.lang.Character) '\036'); java.lang.String str28 = cSVFormat20.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat20.withEscape('\"'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNull(str28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test768"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withDelimiter(','); org.apache.commons.csv.Quote quote31 = cSVFormat30.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNull(quote31); }
public void test769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test769"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); long long13 = cSVParser12.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser12.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor15 = cSVParser12.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); cSVParser12.close(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser12, "Delimiter=<,> Escape=<a> QuoteChar=<\b\u2029]> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNull(strMap14); org.junit.Assert.assertNotNull(cSVRecordItor15); org.junit.Assert.assertNotNull(cSVRecordItor16); }
public void test770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test770"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withNullString("\r\n"); boolean boolean10 = cSVFormat4.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat4.withIgnoreSurroundingSpaces(true); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test771"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.lang.String[] strArray8 = cSVFormat6.getHeader(); java.lang.Character char9 = cSVFormat6.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withQuoteChar('\"'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test772"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser25, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); boolean boolean28 = cSVParser25.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test773"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat8); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withCommentStart('#'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test774"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withEscape((java.lang.Character) '\"'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withCommentStart('\037'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> NullString=<> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat4); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); }
public void test775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test775"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isCommentingEnabled(); java.lang.String[] strArray9 = cSVFormat7.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote14 = null; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withQuoteChar((java.lang.Character) '4'); char char18 = cSVFormat17.getDelimiter(); boolean boolean19 = cSVFormat17.getIgnoreEmptyLines(); java.lang.String[] strArray20 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray20, strMap21, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord24.spliterator(); java.lang.String[] strArray26 = cSVRecord24.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap27 = null; org.apache.commons.csv.CSVRecord cSVRecord30 = new org.apache.commons.csv.CSVRecord(strArray26, strMap27, "EORECORD []", (long) (-1)); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat17.withHeader(strArray26); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat7.withHeader(strArray26); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + ',' + "'", char18 == ','); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(strSpliterator25); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); }
public void test776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test776"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); long long12 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNull(strMap10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test777"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser10.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser10.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser10.getRecords(); long long14 = cSVParser10.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertNull(cSVRecord12); org.junit.Assert.assertNotNull(cSVRecordList13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); }
public void test778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test778"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); long long24 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); }
public void test779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test779"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser5.getRecords(cSVRecordList18); long long20 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test780"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); long long10 = cSVParser5.getRecordNumber(); boolean boolean11 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNotNull(cSVRecordList13); }
public void test781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test781"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator50 = cSVParser5.spliterator(); long long51 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNotNull(cSVRecordItor49); org.junit.Assert.assertNotNull(cSVRecordSpliterator50); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L); }
public void test782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test782"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); boolean boolean21 = cSVFormat8.getSkipHeaderRecord(); java.lang.String str22 = cSVFormat8.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNull(str22); }
public void test783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test783"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser3.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); }
public void test784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test784"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator(); boolean boolean10 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(cSVRecordList11); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNull(cSVRecordList12); }
public void test785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test785"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test786"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); boolean boolean9 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test787"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null; org.apache.commons.csv.CSVRecord cSVRecord6 = new org.apache.commons.csv.CSVRecord(strArray2, strMap3, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator7 = cSVRecord6.spliterator(); java.lang.String[] strArray8 = cSVRecord6.values(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withHeader(strArray8); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); boolean boolean14 = cSVFormat12.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat12.withEscape('\t'); java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.lang.String[] strArray24 = cSVRecord23.values(); boolean boolean26 = cSVRecord23.isSet("hi!"); java.lang.String[] strArray27 = cSVRecord23.values(); java.lang.String[] strArray28 = cSVRecord23.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat12.withHeader(strArray28); java.lang.String str30 = cSVFormat1.format((java.lang.Object[]) strArray28); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strSpliterator7); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); }
public void test788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test788"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); java.lang.Character char5 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(char5); org.junit.Assert.assertNotNull(cSVParser6); }
public void test789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test789"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); cSVParser5.close(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser14.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser14.getHeaderMap(); long long19 = cSVParser14.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); long long26 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); boolean boolean28 = cSVParser25.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat30); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator33 = cSVParser32.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVParser32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser32.getRecords(cSVRecordList35); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor37 = cSVParser32.iterator(); long long38 = cSVParser32.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList39 = cSVParser32.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList40 = cSVParser25.getRecords(cSVRecordList39); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection41 = cSVParser14.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList40); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList42 = cSVParser5.getRecords(cSVRecordList40); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(cSVRecordSpliterator33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNull(cSVRecordList36); org.junit.Assert.assertNotNull(cSVRecordItor37); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L); org.junit.Assert.assertNotNull(cSVRecordList39); org.junit.Assert.assertNotNull(cSVRecordList40); org.junit.Assert.assertNotNull(cSVRecordCollection41); }
public void test790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test790"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); long long20 = cSVParser5.getCurrentLineNumber(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test791"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); char char15 = cSVFormat12.getDelimiter(); java.lang.String[] strArray16 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord20.spliterator(); int int22 = cSVRecord20.size(); java.lang.String str23 = cSVRecord20.getComment(); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord20.spliterator(); java.lang.String[] strArray26 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap27 = null; org.apache.commons.csv.CSVRecord cSVRecord30 = new org.apache.commons.csv.CSVRecord(strArray26, strMap27, "", (long) '#'); java.lang.String[] strArray31 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap32 = null; org.apache.commons.csv.CSVRecord cSVRecord35 = new org.apache.commons.csv.CSVRecord(strArray31, strMap32, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator36 = cSVRecord35.spliterator(); int int37 = cSVRecord35.size(); java.lang.String str38 = cSVRecord35.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap39 = cSVRecord35.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap40 = cSVRecord30.putIn(strMap39); java.util.Map<java.lang.String, java.lang.String> strMap41 = cSVRecord20.putIn(strMap40); java.lang.String[] strArray42 = cSVRecord20.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "INVALID []", (long) (byte) -1); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat12.withHeader(strArray42); boolean boolean48 = cSVFormat47.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + char15 + "' != '" + 'a' + "'", char15 == 'a'); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strSpliterator21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\r\n" + "'", str23, "\r\n"); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(strSpliterator36); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\r\n" + "'", str38, "\r\n"); org.junit.Assert.assertNotNull(strMap39); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test792"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withDelimiter(','); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withEscape('\036'); java.lang.Character char33 = cSVFormat30.getCommentStart(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNull(char33); }
public void test793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test793"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyHeaders(true); boolean boolean6 = cSVFormat3.isNullHandling(); boolean boolean7 = cSVFormat3.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test794"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); boolean boolean8 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean9 = cSVFormat4.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withEscape('a'); boolean boolean12 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat4.withQuoteChar('a'); java.lang.Character char15 = cSVFormat14.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean18 = cSVFormat17.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat17); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withIgnoreEmptyHeaders(false); java.lang.Character char22 = cSVFormat17.getEscape(); java.lang.String str23 = cSVFormat17.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean25 = cSVFormat24.getIgnoreEmptyHeaders(); java.lang.String[] strArray26 = cSVFormat24.getHeader(); java.lang.String str27 = cSVFormat24.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat24.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); boolean boolean34 = cSVFormat32.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat32.withNullString("\u2028"); boolean boolean37 = cSVFormat36.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withEscape('\037'); java.lang.String[] strArray40 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator45 = cSVRecord44.spliterator(); java.lang.String[] strArray46 = cSVRecord44.values(); java.lang.String str47 = cSVFormat36.format((java.lang.Object[]) strArray46); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat31.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat17.withHeader(strArray46); java.lang.String str50 = cSVFormat49.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean54 = cSVFormat53.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote57 = null; org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withQuotePolicy(quote57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat58.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray61 = cSVFormat58.getHeader(); char char62 = cSVFormat58.getDelimiter(); org.apache.commons.csv.Quote quote63 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat58.withQuotePolicy(quote63); org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat52.withQuotePolicy(quote63); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat14.withQuotePolicy(quote63); java.lang.String str67 = cSVFormat66.getRecordSeparator(); boolean boolean68 = cSVFormat66.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNull(char15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNull(char22); org.junit.Assert.assertNull(str23); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(strArray26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\r\n" + "'", str27, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strSpliterator45); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNull(str50); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNull(strArray61); org.junit.Assert.assertTrue("'" + char62 + "' != '" + ',' + "'", char62 == ','); org.junit.Assert.assertTrue("'" + quote63 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote63.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\r\n" + "'", str67, "\r\n"); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); }
public void test795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test795"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat5); boolean boolean11 = cSVParser10.isClosed(); boolean boolean12 = cSVParser10.isClosed(); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser10.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNull(strMap13); }
public void test796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test796"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); long long12 = cSVParser5.getRecordNumber(); boolean boolean13 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVRecordList14); }
public void test797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test797"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); java.lang.Object obj46 = null; boolean boolean47 = cSVFormat44.equals(obj46); java.lang.Character char48 = cSVFormat44.getEscape(); java.lang.Character char49 = cSVFormat44.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNull(char48); org.junit.Assert.assertNull(char49); }
public void test798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test798"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); long long36 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord38 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator37); org.junit.Assert.assertNull(cSVRecord38); }
public void test799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test799"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.Quote quote8 = cSVFormat4.getQuotePolicy(); boolean boolean9 = cSVFormat4.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withCommentStart('4'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); boolean boolean16 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withNullString("\u2028"); boolean boolean19 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withDelimiter('#'); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD; token24.type = type26; boolean boolean28 = token24.isReady; org.apache.commons.csv.Token.Type type29 = token24.type; java.lang.String str30 = token24.toString(); java.lang.StringBuilder stringBuilder31 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat18.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat13.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat13.withCommentStart((java.lang.Character) '\f'); boolean boolean36 = cSVFormat35.getIgnoreSurroundingSpaces(); java.lang.String[] strArray37 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap38 = null; org.apache.commons.csv.CSVRecord cSVRecord41 = new org.apache.commons.csv.CSVRecord(strArray37, strMap38, "\r\n", (long) 10); java.lang.String[] strArray42 = cSVRecord41.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (long) (short) 100); long long47 = cSVRecord46.getRecordNumber(); boolean boolean49 = cSVRecord46.isMapped("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.lang.String[] strArray50 = cSVRecord46.values(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat35.withHeader(strArray50); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat11.withHeader(strArray50); java.lang.String str53 = cSVFormat11.getNullString(); java.io.Reader reader54 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = cSVFormat11.parse(reader54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(quote8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter32); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u2028" + "'", str53, "\u2028"); }
public void test800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test800"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); java.lang.String str49 = cSVFormat48.getNullString(); boolean boolean50 = cSVFormat48.getIgnoreEmptyLines(); boolean boolean51 = cSVFormat48.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u2028" + "'", str49, "\u2028"); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); }
public void test801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test801"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test802"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart((java.lang.Character) '\f'); java.lang.String str29 = cSVFormat28.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat28); java.lang.Character char31 = cSVFormat28.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\"'); boolean boolean34 = cSVFormat28.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNull(str29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertNull(char31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); }
public void test803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test803"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); }
public void test804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test804"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); long long13 = cSVParser12.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser12.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor15 = cSVParser12.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); cSVParser12.close(); long long18 = cSVParser12.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection31 = cSVParser12.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNull(strMap14); org.junit.Assert.assertNotNull(cSVRecordItor15); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); }
public void test805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test805"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser7.getRecords(cSVRecordList9); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNull(cSVRecordList10); }
public void test806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test806"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote41 = null; org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuotePolicy(quote41); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray45 = cSVFormat42.getHeader(); char char46 = cSVFormat42.getDelimiter(); org.apache.commons.csv.Quote quote47 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withQuotePolicy(quote47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat36.withQuotePolicy(quote47); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader50 = null; org.apache.commons.csv.Lexer lexer51 = new org.apache.commons.csv.Lexer(cSVFormat36, extendedBufferedReader50); boolean boolean53 = lexer51.isEndOfFile((int) '\n'); boolean boolean55 = lexer51.isQuoteChar((int) '\n'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNull(strArray45); org.junit.Assert.assertTrue("'" + char46 + "' != '" + ',' + "'", char46 == ','); org.junit.Assert.assertTrue("'" + quote47 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote47.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test807"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); boolean boolean8 = cSVFormat6.isCommentingEnabled(); char char9 = cSVFormat6.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); }
public void test808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test808"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote41 = null; org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuotePolicy(quote41); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray45 = cSVFormat42.getHeader(); char char46 = cSVFormat42.getDelimiter(); org.apache.commons.csv.Quote quote47 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withQuotePolicy(quote47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat36.withQuotePolicy(quote47); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader50 = null; org.apache.commons.csv.Lexer lexer51 = new org.apache.commons.csv.Lexer(cSVFormat36, extendedBufferedReader50); boolean boolean53 = lexer51.isEndOfFile((int) '\n'); // The following exception was thrown during execution in test generation try { long long54 = lexer51.getCurrentLineNumber(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNull(strArray45); org.junit.Assert.assertTrue("'" + char46 + "' != '" + ',' + "'", char46 == ','); org.junit.Assert.assertTrue("'" + quote47 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote47.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test809"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat3); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withIgnoreEmptyHeaders(false); boolean boolean8 = cSVFormat3.isEscaping(); char char9 = cSVFormat3.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat3.withIgnoreEmptyLines(false); java.lang.Character char12 = cSVFormat3.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); boolean boolean15 = cSVFormat13.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withNullString("\u2028"); boolean boolean18 = cSVFormat17.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat22.withDelimiter('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = null; org.apache.commons.csv.Lexer lexer26 = new org.apache.commons.csv.Lexer(cSVFormat24, extendedBufferedReader25); org.apache.commons.csv.Token token27 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder28 = token27.content; org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.EORECORD; token27.type = type29; boolean boolean31 = token27.isReady; org.apache.commons.csv.Token token32 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder33 = token32.content; org.apache.commons.csv.Token.Type type34 = org.apache.commons.csv.Token.Type.EORECORD; token32.type = type34; token27.type = type34; token27.isReady = false; org.apache.commons.csv.Token.Type type39 = token27.type; org.apache.commons.csv.Token token40 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder41 = token40.content; org.apache.commons.csv.Token.Type type42 = org.apache.commons.csv.Token.Type.EORECORD; token40.type = type42; boolean boolean44 = token40.isReady; org.apache.commons.csv.Token token45 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder46 = token45.content; org.apache.commons.csv.Token.Type type47 = org.apache.commons.csv.Token.Type.EORECORD; token45.type = type47; token40.type = type47; token27.type = type47; boolean boolean51 = token27.isReady; java.lang.StringBuilder stringBuilder52 = token27.content; lexer26.trimTrailingSpaces(stringBuilder52); org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat3.print((java.lang.Appendable) stringBuilder52); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNull(char12); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(stringBuilder28); org.junit.Assert.assertEquals(stringBuilder28.toString(), ""); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(stringBuilder33); org.junit.Assert.assertEquals(stringBuilder33.toString(), ""); org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type34.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type39.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder41); org.junit.Assert.assertEquals(stringBuilder41.toString(), ""); org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type42.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(stringBuilder46); org.junit.Assert.assertEquals(stringBuilder46.toString(), ""); org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type47.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(stringBuilder52); org.junit.Assert.assertEquals(stringBuilder52.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter54); }
public void test810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test810"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); long long20 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord21 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(cSVRecord21); }
public void test811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test811"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser19.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser19.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecord22); org.junit.Assert.assertNull(strMap23); }
public void test812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test812"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertNull(cSVRecord7); }
public void test813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test813"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); long long18 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNull(cSVRecord19); }
public void test814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test814"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(cSVRecordList10); // The following exception was thrown during execution in test generation try { java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVRecordList11.spliterator(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecordList11); }
public void test815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test815"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); java.lang.String[] strArray7 = cSVFormat2.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); boolean boolean12 = cSVFormat11.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote17 = null; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuotePolicy(quote17); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat18.withSkipHeaderRecord(true); boolean boolean21 = cSVFormat11.equals((java.lang.Object) true); org.apache.commons.csv.Quote quote22 = null; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat11.withQuotePolicy(quote22); boolean boolean24 = cSVFormat23.isQuoting(); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\\> Escape=<a> SkipHeaderRecord:false", cSVFormat23); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(cSVParser25); }
public void test816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test816"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.lang.Class<?> wildcardClass7 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test817"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.lang.String[] strArray8 = cSVFormat6.getHeader(); java.lang.String str9 = cSVFormat6.toString(); boolean boolean10 = cSVFormat6.getIgnoreEmptyLines(); java.lang.Character char11 = cSVFormat6.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str9, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNull(char11); }
public void test818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test818"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); boolean boolean46 = cSVFormat44.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat44.withRecordSeparator("[Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false, []]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test819"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); long long10 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser16.getRecords(); boolean boolean19 = cSVParser16.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat21); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator24 = cSVParser23.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser23.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser23.getRecords(cSVRecordList26); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser23.iterator(); long long29 = cSVParser23.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser23.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser16.getRecords(cSVRecordList30); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection32 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); long long40 = cSVParser38.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap41 = cSVParser38.getHeaderMap(); boolean boolean42 = cSVParser38.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean45 = cSVFormat44.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat44.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); long long49 = cSVParser48.getRecordNumber(); long long50 = cSVParser48.getRecordNumber(); long long51 = cSVParser48.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor52 = cSVParser48.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList53 = cSVParser48.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList54 = cSVParser38.getRecords(cSVRecordList53); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList55 = cSVParser5.getRecords(cSVRecordList53); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertNotNull(cSVRecordSpliterator24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordCollection32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNull(strMap41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVParser48); org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L); org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor52); org.junit.Assert.assertNotNull(cSVRecordList53); org.junit.Assert.assertNotNull(cSVRecordList54); org.junit.Assert.assertNotNull(cSVRecordList55); }
public void test820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test820"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withIgnoreEmptyLines(true); java.lang.String[] strArray29 = null; org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withHeader(strArray29); boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test821"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser25, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap28 = cSVParser25.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser25.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(strMap28); org.junit.Assert.assertNotNull(cSVRecordList29); }
public void test822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test822"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser5.iterator(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNotNull(cSVRecordItor49); }
public void test823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test823"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('\037'); boolean boolean6 = cSVFormat5.isEscaping(); boolean boolean7 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean18 = cSVFormat17.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17); long long22 = cSVParser21.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser21.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection24 = cSVParser13.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList23); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser13.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser13.spliterator(); boolean boolean27 = cSVParser13.isClosed(); long long28 = cSVParser13.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor29 = cSVParser13.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap30 = cSVParser13.getHeaderMap(); boolean boolean31 = cSVFormat5.equals((java.lang.Object) cSVParser13); org.apache.commons.csv.CSVRecord cSVRecord32 = cSVParser13.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVParser21); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNotNull(cSVRecordCollection24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor29); org.junit.Assert.assertNull(strMap30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNull(cSVRecord32); }
public void test824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test824"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test825"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); boolean boolean10 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape('\b'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); }
public void test826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test826"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord(); long long8 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); boolean boolean10 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNull(cSVRecord7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test827"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); int int6 = cSVRecord4.size(); java.lang.String str7 = cSVRecord4.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap8 = cSVRecord4.toMap(); boolean boolean9 = cSVRecord4.isConsistent(); java.util.Iterator<java.lang.String> strItor10 = cSVRecord4.iterator(); java.util.Map<java.lang.String, java.lang.String> strMap11 = cSVRecord4.toMap(); java.lang.String[] strArray12 = cSVRecord4.values(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote18 = null; org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuotePolicy(quote18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuoteChar((java.lang.Character) '4'); char char22 = cSVFormat21.getDelimiter(); java.lang.Character char23 = cSVFormat21.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray25 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap26 = null; org.apache.commons.csv.CSVRecord cSVRecord29 = new org.apache.commons.csv.CSVRecord(strArray25, strMap26, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator30 = cSVRecord29.spliterator(); java.lang.String[] strArray31 = cSVRecord29.values(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat24.withHeader(strArray31); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat21.withHeader(strArray31); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = null; org.apache.commons.csv.Lexer lexer35 = new org.apache.commons.csv.Lexer(cSVFormat33, extendedBufferedReader34); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat33); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser38, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap41 = cSVParser38.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray12, strMap41, "Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[hi!]", 0L); java.lang.String[] strArray45 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator50 = cSVRecord49.spliterator(); java.lang.String str51 = cSVRecord49.toString(); boolean boolean52 = cSVRecord49.isConsistent(); java.lang.String[] strArray53 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap54 = null; org.apache.commons.csv.CSVRecord cSVRecord57 = new org.apache.commons.csv.CSVRecord(strArray53, strMap54, "\r\n", (long) 10); java.lang.String[] strArray58 = cSVRecord57.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap59 = null; org.apache.commons.csv.CSVRecord cSVRecord62 = new org.apache.commons.csv.CSVRecord(strArray58, strMap59, "Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (long) (short) 100); long long63 = cSVRecord62.getRecordNumber(); boolean boolean65 = cSVRecord62.isMapped("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.String> strMap66 = cSVRecord62.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap67 = cSVRecord49.putIn(strMap66); java.util.Map<java.lang.String, java.lang.String> strMap68 = cSVRecord44.putIn(strMap66); // The following exception was thrown during execution in test generation try { java.lang.String str70 = cSVRecord44.get(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mapping for not found, expected one of [Delimiter=<, > Escape=<a> QuoteCh?=<\"> RecordSep??or=<]"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n"); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strItor10); org.junit.Assert.assertNotNull(strMap11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + char22 + "' != '" + ',' + "'", char22 == ','); org.junit.Assert.assertNull(char23); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(strSpliterator30); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(strSpliterator50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(strMap66); org.junit.Assert.assertNotNull(strMap67); org.junit.Assert.assertNotNull(strMap68); }
public void test828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test828"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); java.lang.String[] strArray4 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null; org.apache.commons.csv.CSVRecord cSVRecord8 = new org.apache.commons.csv.CSVRecord(strArray4, strMap5, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator9 = cSVRecord8.spliterator(); int int10 = cSVRecord8.size(); java.lang.String str11 = cSVRecord8.getComment(); java.lang.String[] strArray12 = cSVRecord8.values(); java.lang.String str13 = cSVFormat2.format((java.lang.Object[]) strArray12); org.apache.commons.csv.Quote quote14 = cSVFormat2.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strSpliterator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNull(quote14); }
public void test829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test829"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); long long12 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(strMap10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test830"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat12); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; token14.reset(); token14.isReady = true; token14.reset(); token14.isReady = false; org.apache.commons.csv.Token.Type type22 = token14.type; boolean boolean23 = token14.isReady; boolean boolean24 = token14.isReady; token14.reset(); java.lang.StringBuilder stringBuilder26 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat12.print((java.lang.Appendable) stringBuilder26); java.lang.String[] strArray28 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap29 = null; org.apache.commons.csv.CSVRecord cSVRecord32 = new org.apache.commons.csv.CSVRecord(strArray28, strMap29, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator33 = cSVRecord32.spliterator(); java.lang.String str34 = cSVRecord32.toString(); java.lang.String[] strArray35 = cSVRecord32.values(); java.lang.String str36 = cSVFormat12.format((java.lang.Object[]) strArray35); java.lang.String str37 = cSVFormat0.format((java.lang.Object[]) strArray35); boolean boolean38 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat0.withEscape('\b'); boolean boolean41 = cSVFormat0.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat0.withDelimiter(','); boolean boolean44 = cSVFormat0.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(strSpliterator33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]"); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test831"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); boolean boolean16 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withNullString("\u2028"); boolean boolean19 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withDelimiter('#'); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD; token24.type = type26; boolean boolean28 = token24.isReady; org.apache.commons.csv.Token.Type type29 = token24.type; java.lang.String str30 = token24.toString(); java.lang.StringBuilder stringBuilder31 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat18.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat13.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat9.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat9.withNullString("hi!"); java.lang.String str37 = cSVFormat36.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray42 = cSVFormat41.getHeader(); boolean boolean43 = cSVFormat41.isCommentingEnabled(); org.apache.commons.csv.Quote quote44 = cSVFormat41.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat41.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat46); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator48 = cSVParser47.spliterator(); boolean boolean49 = cSVFormat36.equals((java.lang.Object) cSVParser47); cSVParser47.close(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter32); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!"); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNull(strArray42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNull(quote44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVParser47); org.junit.Assert.assertNotNull(cSVRecordSpliterator48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test832"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); boolean boolean10 = cSVFormat9.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withDelimiter('\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test833"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); cSVParser11.close(); cSVParser11.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); }
public void test834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test834"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); }
public void test835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test835"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString(""); java.lang.Character char7 = cSVFormat1.getCommentStart(); boolean boolean8 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("\"Delimiter=<,> Escape=<a> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\",[]", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser9.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(char7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test836"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withDelimiter('\b'); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser7.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser7.spliterator(); long long10 = cSVParser7.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test837"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord24 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord25 = cSVParser5.nextRecord(); long long26 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNull(cSVRecord24); org.junit.Assert.assertNull(cSVRecord25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); }
public void test838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test838"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar('\"'); java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.lang.String[] strArray16 = cSVRecord15.values(); boolean boolean18 = cSVRecord15.isSet("hi!"); long long19 = cSVRecord15.getRecordNumber(); java.lang.String[] strArray20 = cSVRecord15.values(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat7.withHeader(strArray20); java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote34 = null; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuotePolicy(quote34); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withQuoteChar((java.lang.Character) '4'); char char38 = cSVFormat37.getDelimiter(); java.lang.Character char39 = cSVFormat37.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray41 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap42 = null; org.apache.commons.csv.CSVRecord cSVRecord45 = new org.apache.commons.csv.CSVRecord(strArray41, strMap42, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator46 = cSVRecord45.spliterator(); java.lang.String[] strArray47 = cSVRecord45.values(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat40.withHeader(strArray47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat37.withHeader(strArray47); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader50 = null; org.apache.commons.csv.Lexer lexer51 = new org.apache.commons.csv.Lexer(cSVFormat49, extendedBufferedReader50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat49.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat49); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser54, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap57 = cSVParser54.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord60 = new org.apache.commons.csv.CSVRecord(strArray28, strMap57, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord63 = new org.apache.commons.csv.CSVRecord(strArray20, strMap57, "Delimiter=<,> QuoteChar=<\"> CommentStart=<\b> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 35L); java.lang.String[] strArray64 = cSVRecord63.values(); java.util.Iterator<java.lang.String> strItor65 = cSVRecord63.iterator(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + char38 + "' != '" + ',' + "'", char38 == ','); org.junit.Assert.assertNull(char39); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strSpliterator46); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVParser54); org.junit.Assert.assertNotNull(strMap57); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strItor65); }
public void test839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test839"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); java.lang.String[] strArray6 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test840"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(false); java.lang.String[] strArray13 = cSVFormat12.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withNullString("Delimiter=<#> QuoteChar=<\"> NullString=<Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); char char16 = cSVFormat12.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ','); }
public void test841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test841"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); java.lang.String str7 = cSVFormat6.toString(); java.lang.Character char8 = cSVFormat6.getEscape(); java.lang.Character char9 = cSVFormat6.getEscape(); boolean boolean10 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\t> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNull(char9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVParser11); }
public void test842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test842"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); boolean boolean4 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.Character char5 = cSVFormat1.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(char5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test843"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser14.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser14.getRecords(cSVRecordList18); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser14.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator21 = cSVRecordList20.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVRecordList20, ""); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVRecordList20.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNull(cSVRecordList19); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordSpliterator21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); }
public void test844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test844"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); boolean boolean16 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withNullString("\u2028"); boolean boolean19 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withDelimiter('#'); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD; token24.type = type26; boolean boolean28 = token24.isReady; org.apache.commons.csv.Token.Type type29 = token24.type; java.lang.String str30 = token24.toString(); java.lang.StringBuilder stringBuilder31 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat18.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat13.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat9.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat9.withNullString("hi!"); java.lang.String str37 = cSVFormat36.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray42 = cSVFormat41.getHeader(); boolean boolean43 = cSVFormat41.isCommentingEnabled(); org.apache.commons.csv.Quote quote44 = cSVFormat41.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat41.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat46); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator48 = cSVParser47.spliterator(); boolean boolean49 = cSVFormat36.equals((java.lang.Object) cSVParser47); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat36.withRecordSeparator('\037'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter32); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!"); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNull(strArray42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNull(quote44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVParser47); org.junit.Assert.assertNotNull(cSVRecordSpliterator48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test845"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNull(strMap13); }
public void test846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test846"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); long long17 = cSVParser15.getRecordNumber(); long long18 = cSVParser15.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser15.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser5.getRecords(cSVRecordList20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "Delimiter=<,> Escape=<a> QuoteChar=<\t> NullString=<Delimiter=<,> Escape=<\"> QuoteChar=<\036> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap24 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNull(strMap8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNull(strMap24); }
public void test847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test847"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString("[hi!]"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withDelimiter('\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test848"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat5); boolean boolean11 = cSVParser10.isClosed(); boolean boolean12 = cSVParser10.isClosed(); long long13 = cSVParser10.getRecordNumber(); boolean boolean14 = cSVParser10.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test849"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser7.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser7.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); boolean boolean13 = cSVFormat11.getSkipHeaderRecord(); boolean boolean14 = cSVFormat11.isQuoting(); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser15.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); long long18 = cSVParser15.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser24.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator31 = cSVRecordList30.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser15.getRecords(cSVRecordList30); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser7.getRecords(cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNull(cSVRecord27); org.junit.Assert.assertNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordSpliterator31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); }
public void test850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test850"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyHeaders(true); boolean boolean6 = cSVFormat5.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test851"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser5.getRecords(cSVRecordList29); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator32 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordSpliterator32); }
public void test852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test852"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withNullString("Delimiter=<,> Escape=<\037> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null; org.apache.commons.csv.Lexer lexer14 = new org.apache.commons.csv.Lexer(cSVFormat7, extendedBufferedReader13); boolean boolean16 = lexer14.isStartOfLine((int) (byte) 100); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test853"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); boolean boolean7 = cSVFormat3.isCommentingEnabled(); java.lang.String[] strArray9 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "", (long) '#'); boolean boolean15 = cSVRecord13.isSet("\r\n"); java.lang.String str16 = cSVRecord13.toString(); boolean boolean17 = cSVRecord13.isConsistent(); java.lang.String[] strArray18 = cSVRecord13.values(); java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord23.spliterator(); int int25 = cSVRecord23.size(); java.lang.String str26 = cSVRecord23.getComment(); java.lang.String str27 = cSVRecord23.getComment(); boolean boolean28 = cSVRecord23.isConsistent(); java.lang.String[] strArray30 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap31 = null; org.apache.commons.csv.CSVRecord cSVRecord34 = new org.apache.commons.csv.CSVRecord(strArray30, strMap31, "", (long) '#'); java.lang.String str35 = cSVRecord34.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap36 = cSVRecord34.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap37 = cSVRecord23.putIn(strMap36); java.lang.String[] strArray38 = cSVRecord23.values(); java.lang.String[] strArray39 = cSVRecord23.values(); java.lang.String[] strArray40 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap41 = null; org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray40, strMap41, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator45 = cSVRecord44.spliterator(); java.lang.String[] strArray46 = cSVRecord44.values(); org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean49 = cSVFormat48.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote52 = null; org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat51.withQuotePolicy(quote52); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat51.withQuoteChar((java.lang.Character) '4'); char char56 = cSVFormat55.getDelimiter(); java.lang.Character char57 = cSVFormat55.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray59 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap60 = null; org.apache.commons.csv.CSVRecord cSVRecord63 = new org.apache.commons.csv.CSVRecord(strArray59, strMap60, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator64 = cSVRecord63.spliterator(); java.lang.String[] strArray65 = cSVRecord63.values(); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat58.withHeader(strArray65); org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat55.withHeader(strArray65); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader68 = null; org.apache.commons.csv.Lexer lexer69 = new org.apache.commons.csv.Lexer(cSVFormat67, extendedBufferedReader68); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat67.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat67); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser72, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap75 = cSVParser72.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord78 = new org.apache.commons.csv.CSVRecord(strArray46, strMap75, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord81 = new org.apache.commons.csv.CSVRecord(strArray39, strMap75, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); org.apache.commons.csv.CSVRecord cSVRecord84 = new org.apache.commons.csv.CSVRecord(strArray18, strMap75, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[]", (long) 'a'); java.lang.String str85 = cSVFormat3.format((java.lang.Object[]) strArray18); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[hi!]" + "'", str16, "[hi!]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\r\n" + "'", str26, "\r\n"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\r\n" + "'", str27, "\r\n"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(strMap36); org.junit.Assert.assertNotNull(strMap37); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(strSpliterator45); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertTrue("'" + char56 + "' != '" + ',' + "'", char56 == ','); org.junit.Assert.assertNull(char57); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(strSpliterator64); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertNotNull(cSVFormat66); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVParser72); org.junit.Assert.assertNotNull(strMap75); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!"); }
public void test854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test854"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser19.getRecords(); cSVParser19.close(); boolean boolean22 = cSVParser19.isClosed(); cSVParser19.close(); cSVParser19.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test855"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); long long7 = cSVParser3.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test856"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test857"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); long long9 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test858"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(strMap11); }
public void test859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test859"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(strMap10); org.junit.Assert.assertNull(strMap11); }
public void test860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test860"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); boolean boolean4 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withCommentStart('\\'); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test861"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); java.lang.String str9 = cSVFormat8.getRecordSeparator(); boolean boolean10 = cSVFormat8.getSkipHeaderRecord(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("EORECORD []", cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVParser11); }
public void test862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test862"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test863"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); }
public void test864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test864"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray10 = cSVFormat7.getHeader(); char char11 = cSVFormat7.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + ',' + "'", char11 == ','); }
public void test865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test865"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); boolean boolean16 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withNullString("\u2028"); boolean boolean19 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withDelimiter('#'); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD; token24.type = type26; boolean boolean28 = token24.isReady; org.apache.commons.csv.Token.Type type29 = token24.type; java.lang.String str30 = token24.toString(); java.lang.StringBuilder stringBuilder31 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat18.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat13.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat9.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat9.withNullString("hi!"); java.lang.String str37 = cSVFormat36.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray42 = cSVFormat41.getHeader(); boolean boolean43 = cSVFormat41.isCommentingEnabled(); org.apache.commons.csv.Quote quote44 = cSVFormat41.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat41.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat46); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator48 = cSVParser47.spliterator(); boolean boolean49 = cSVFormat36.equals((java.lang.Object) cSVParser47); boolean boolean50 = cSVParser47.isClosed(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter32); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!"); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNull(strArray42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNull(quote44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVParser47); org.junit.Assert.assertNotNull(cSVRecordSpliterator48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); }
public void test866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test866"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser5.getRecords(); long long20 = cSVParser5.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = cSVParser5.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(strMap21); org.junit.Assert.assertNotNull(cSVRecordList22); }
public void test867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test867"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator50 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNotNull(cSVRecordItor49); org.junit.Assert.assertNotNull(cSVRecordSpliterator50); org.junit.Assert.assertNotNull(cSVRecordList51); }
public void test868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test868"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(false); java.lang.String[] strArray6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withHeader(strArray6); java.io.Reader reader8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat7.parse(reader8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test869"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser14.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser24.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser14.getRecords(cSVRecordList30); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection32 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor33 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNull(cSVRecord27); org.junit.Assert.assertNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordCollection32); org.junit.Assert.assertNotNull(cSVRecordItor33); }
public void test870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test870"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator40 = cSVParser38.spliterator(); long long41 = cSVParser38.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor42 = cSVParser38.iterator(); org.apache.commons.csv.CSVRecord cSVRecord43 = cSVParser38.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean46 = cSVFormat45.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser49.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser38.getRecords(cSVRecordList50); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser5.getRecords(cSVRecordList51); long long53 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord54 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator40); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor42); org.junit.Assert.assertNull(cSVRecord43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVParser49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L); org.junit.Assert.assertNull(cSVRecord54); }
public void test871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test871"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withQuoteChar('\f'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat26.withEscape((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test872"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withDelimiter('#'); org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder27 = token26.content; org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD; token26.type = type28; boolean boolean30 = token26.isReady; org.apache.commons.csv.Token.Type type31 = token26.type; java.lang.String str32 = token26.toString(); java.lang.StringBuilder stringBuilder33 = token26.content; org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat20.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat15.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat11.print((java.lang.Appendable) stringBuilder33); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat11.withEscape('\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat38); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(stringBuilder27); org.junit.Assert.assertEquals(stringBuilder27.toString(), ""); org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type31.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "EORECORD []" + "'", str32, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder33); org.junit.Assert.assertEquals(stringBuilder33.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVPrinter35); org.junit.Assert.assertNotNull(cSVPrinter36); org.junit.Assert.assertNotNull(cSVFormat38); }
public void test873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test873"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator(); boolean boolean10 = cSVParser5.isClosed(); long long11 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNull(cSVRecord12); }
public void test874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test874"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); long long11 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test875"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); boolean boolean46 = cSVFormat44.getSkipHeaderRecord(); char char47 = cSVFormat44.getDelimiter(); boolean boolean48 = cSVFormat44.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + char47 + "' != '" + ',' + "'", char47 == ','); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); }
public void test876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test876"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); java.lang.String[] strArray5 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null; org.apache.commons.csv.Lexer lexer9 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader8); java.lang.String[] strArray10 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("[\205]", cSVFormat1); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser11.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNull(strArray5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecordItor12); }
public void test877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test877"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.Character char10 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); boolean boolean13 = cSVFormat11.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withNullString("\u2028"); boolean boolean16 = cSVFormat15.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withDelimiter('a'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat22, extendedBufferedReader23); org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder26 = token25.content; org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.EORECORD; token25.type = type27; boolean boolean29 = token25.isReady; org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder31 = token30.content; org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EORECORD; token30.type = type32; token25.type = type32; token25.isReady = false; org.apache.commons.csv.Token.Type type37 = token25.type; org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder39 = token38.content; org.apache.commons.csv.Token.Type type40 = org.apache.commons.csv.Token.Type.EORECORD; token38.type = type40; boolean boolean42 = token38.isReady; org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder44 = token43.content; org.apache.commons.csv.Token.Type type45 = org.apache.commons.csv.Token.Type.EORECORD; token43.type = type45; token38.type = type45; token25.type = type45; boolean boolean49 = token25.isReady; java.lang.StringBuilder stringBuilder50 = token25.content; lexer24.trimTrailingSpaces(stringBuilder50); org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat1.print((java.lang.Appendable) stringBuilder50); boolean boolean53 = cSVFormat1.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type27.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type32.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type37.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type40.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(stringBuilder44); org.junit.Assert.assertEquals(stringBuilder44.toString(), ""); org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type45.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(stringBuilder50); org.junit.Assert.assertEquals(stringBuilder50.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test878"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser5.iterator(); boolean boolean12 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNotNull(cSVRecordItor11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test879"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNull(strMap10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertNull(strMap12); }
public void test880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test880"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withQuotePolicy(quote12); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EOF; token14.type = type15; boolean boolean17 = token14.isReady; java.lang.StringBuilder stringBuilder18 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat13.print((java.lang.Appendable) stringBuilder18); boolean boolean20 = cSVFormat13.isCommentingEnabled(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type15.equals(org.apache.commons.csv.Token.Type.EOF)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(stringBuilder18); org.junit.Assert.assertEquals(stringBuilder18.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test881"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withNullString(""); java.lang.String[] strArray5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withHeader(strArray5); java.lang.String str7 = cSVFormat1.getNullString(); java.lang.Character char8 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.lang.String str10 = cSVFormat1.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str10, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test882"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); java.lang.String[] strArray6 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); boolean boolean11 = cSVFormat10.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote16 = null; org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuotePolicy(quote16); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withSkipHeaderRecord(true); boolean boolean20 = cSVFormat10.equals((java.lang.Object) true); org.apache.commons.csv.Quote quote21 = null; org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat10.withQuotePolicy(quote21); boolean boolean23 = cSVFormat22.isQuoting(); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("Delimiter=<\\> Escape=<a> SkipHeaderRecord:false", cSVFormat22); long long25 = cSVParser24.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); }
public void test883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test883"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); long long29 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator40 = cSVParser38.spliterator(); long long41 = cSVParser38.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor42 = cSVParser38.iterator(); org.apache.commons.csv.CSVRecord cSVRecord43 = cSVParser38.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean46 = cSVFormat45.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser49.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser38.getRecords(cSVRecordList50); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser5.getRecords(cSVRecordList51); long long53 = cSVParser5.getCurrentLineNumber(); java.lang.Class<?> wildcardClass54 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator40); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor42); org.junit.Assert.assertNull(cSVRecord43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVParser49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L); org.junit.Assert.assertNotNull(wildcardClass54); }
public void test884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test884"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser14.getRecords(); boolean boolean17 = cSVParser14.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat19); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser21.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator23 = cSVParser21.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser21.getRecords(cSVRecordList24); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser21.iterator(); long long27 = cSVParser21.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser21.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser14.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser5.getRecords(cSVRecordList28); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNull(strMap8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordList16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVParser21); org.junit.Assert.assertNotNull(cSVRecordSpliterator22); org.junit.Assert.assertNotNull(cSVRecordSpliterator23); org.junit.Assert.assertNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L); org.junit.Assert.assertNotNull(cSVRecordList28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); }
public void test885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test885"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord13 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNull(cSVRecord13); }
public void test886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test886"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart((java.lang.Character) '\f'); java.lang.String str29 = cSVFormat28.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat28); java.lang.Character char31 = cSVFormat28.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat28.withQuoteChar('\"'); boolean boolean34 = cSVFormat33.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNull(str29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertNull(char31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); }
public void test887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test887"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withEscape((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test888"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote41 = null; org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuotePolicy(quote41); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray45 = cSVFormat42.getHeader(); char char46 = cSVFormat42.getDelimiter(); org.apache.commons.csv.Quote quote47 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withQuotePolicy(quote47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat36.withQuotePolicy(quote47); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader50 = null; org.apache.commons.csv.Lexer lexer51 = new org.apache.commons.csv.Lexer(cSVFormat36, extendedBufferedReader50); boolean boolean53 = lexer51.isStartOfLine((int) '\"'); boolean boolean55 = lexer51.isStartOfLine(0); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNull(strArray45); org.junit.Assert.assertTrue("'" + char46 + "' != '" + ',' + "'", char46 == ','); org.junit.Assert.assertTrue("'" + quote47 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote47.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test889"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withIgnoreSurroundingSpaces(true); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test890"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = null; org.apache.commons.csv.Lexer lexer26 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader25); // The following exception was thrown during execution in test generation try { boolean boolean27 = lexer26.isClosed(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test891"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); long long12 = cSVParser5.getRecordNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test892"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord28 = cSVParser25.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNull(cSVRecord28); }
public void test893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test893"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withSkipHeaderRecord(true); java.lang.String[] strArray37 = cSVFormat36.getHeader(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(strArray37); }
public void test894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test894"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); long long8 = cSVParser3.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser3.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(strMap9); }
public void test895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test895"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test896"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); long long11 = cSVParser5.getCurrentLineNumber(); long long12 = cSVParser5.getRecordNumber(); long long13 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test897"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String str2 = cSVFormat0.getRecordSeparator(); boolean boolean3 = cSVFormat0.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyHeaders(false); java.io.Reader reader6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat5.parse(reader6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test898"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); java.lang.String[] strArray4 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null; org.apache.commons.csv.CSVRecord cSVRecord8 = new org.apache.commons.csv.CSVRecord(strArray4, strMap5, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator9 = cSVRecord8.spliterator(); int int10 = cSVRecord8.size(); java.lang.String str11 = cSVRecord8.getComment(); java.lang.String[] strArray12 = cSVRecord8.values(); java.lang.String str13 = cSVFormat2.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withSkipHeaderRecord(false); java.lang.String[] strArray16 = cSVFormat15.getHeader(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strSpliterator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNull(strArray16); }
public void test899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test899"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart('a'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('a')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test900"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); cSVParser5.close(); long long10 = cSVParser5.getCurrentLineNumber(); cSVParser5.close(); long long12 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test901"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser3.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap6 = cSVParser3.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser3.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecordList5); org.junit.Assert.assertNull(strMap6); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertNull(strMap8); }
public void test902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test902"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withQuoteChar('\037'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("\"Delimiter=<,> Escape=<a> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\",[]", cSVFormat10); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser11.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser11.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVRecord12); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test903"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean7 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6); long long11 = cSVParser10.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser10.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14); long long19 = cSVParser18.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser18.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection21 = cSVParser10.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection22 = cSVParser3.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20); long long23 = cSVParser3.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap24 = cSVParser3.getHeaderMap(); boolean boolean25 = cSVParser3.isClosed(); long long26 = cSVParser3.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor27 = cSVParser3.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordCollection21); org.junit.Assert.assertNotNull(cSVRecordCollection22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L); org.junit.Assert.assertNull(strMap24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L); org.junit.Assert.assertNotNull(cSVRecordItor27); }
public void test904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test904"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreSurroundingSpaces(false); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat10.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test905"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray10 = cSVFormat7.getHeader(); char char11 = cSVFormat7.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withNullString("INVALID []"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + ',' + "'", char11 == ','); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test906"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test907"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); boolean boolean22 = cSVFormat20.getSkipHeaderRecord(); boolean boolean23 = cSVFormat20.isQuoting(); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser24.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection27 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser5.iterator(); boolean boolean29 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean32 = cSVFormat31.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat31.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat31); long long36 = cSVParser35.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser35.getRecords(); boolean boolean38 = cSVParser35.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean41 = cSVFormat40.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat40); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator43 = cSVParser42.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator44 = cSVParser42.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList45 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser42.getRecords(cSVRecordList45); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor47 = cSVParser42.iterator(); long long48 = cSVParser42.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList49 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser35.getRecords(cSVRecordList49); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser5.getRecords(cSVRecordList49); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordCollection27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVParser35); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordSpliterator43); org.junit.Assert.assertNotNull(cSVRecordSpliterator44); org.junit.Assert.assertNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordItor47); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L); org.junit.Assert.assertNotNull(cSVRecordList49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); }
public void test908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test908"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser19.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord23 = cSVParser19.nextRecord(); long long24 = cSVParser19.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator22); org.junit.Assert.assertNotNull(cSVRecord23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L); }
public void test909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test909"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); long long18 = cSVParser16.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection27 = cSVParser16.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser33.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); long long42 = cSVParser41.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser41.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection44 = cSVParser33.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator45 = cSVRecordList43.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser16.getRecords(cSVRecordList43); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser5.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap49 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor50 = cSVParser5.iterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordCollection27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordCollection44); org.junit.Assert.assertNotNull(cSVRecordSpliterator45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNull(strMap49); org.junit.Assert.assertNotNull(cSVRecordItor50); }
public void test910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test910"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test911"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat12); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor14 = cSVParser13.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordItor14); }
public void test912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test912"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser5.iterator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord14 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test913"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString(""); java.lang.String[] strArray6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(strArray6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart((java.lang.Character) '\037'); org.apache.commons.csv.Token token10 = new org.apache.commons.csv.Token(); org.apache.commons.csv.Token.Type type11 = org.apache.commons.csv.Token.Type.EOF; token10.type = type11; org.apache.commons.csv.Token.Type type13 = token10.type; boolean boolean14 = token10.isReady; java.lang.String str15 = token10.toString(); java.lang.StringBuilder stringBuilder16 = token10.content; org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat2.print((java.lang.Appendable) stringBuilder16); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type11.equals(org.apache.commons.csv.Token.Type.EOF)); org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type13.equals(org.apache.commons.csv.Token.Type.EOF)); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EOF []" + "'", str15, "EOF []"); org.junit.Assert.assertNotNull(stringBuilder16); org.junit.Assert.assertEquals(stringBuilder16.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter17); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test914"); java.lang.String[] strArray0 = null; java.lang.String[] strArray2 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null; org.apache.commons.csv.CSVRecord cSVRecord6 = new org.apache.commons.csv.CSVRecord(strArray2, strMap3, "", (long) '#'); boolean boolean8 = cSVRecord6.isSet("\r\n"); java.lang.String str9 = cSVRecord6.toString(); boolean boolean10 = cSVRecord6.isConsistent(); java.lang.String[] strArray11 = cSVRecord6.values(); java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); int int18 = cSVRecord16.size(); java.lang.String str19 = cSVRecord16.getComment(); java.lang.String str20 = cSVRecord16.getComment(); boolean boolean21 = cSVRecord16.isConsistent(); java.lang.String[] strArray23 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "", (long) '#'); java.lang.String str28 = cSVRecord27.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap29 = cSVRecord27.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap30 = cSVRecord16.putIn(strMap29); java.lang.String[] strArray31 = cSVRecord16.values(); java.lang.String[] strArray32 = cSVRecord16.values(); java.lang.String[] strArray33 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null; org.apache.commons.csv.CSVRecord cSVRecord37 = new org.apache.commons.csv.CSVRecord(strArray33, strMap34, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator38 = cSVRecord37.spliterator(); java.lang.String[] strArray39 = cSVRecord37.values(); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean42 = cSVFormat41.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote45 = null; org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withQuotePolicy(quote45); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat44.withQuoteChar((java.lang.Character) '4'); char char49 = cSVFormat48.getDelimiter(); java.lang.Character char50 = cSVFormat48.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray52 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap53 = null; org.apache.commons.csv.CSVRecord cSVRecord56 = new org.apache.commons.csv.CSVRecord(strArray52, strMap53, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator57 = cSVRecord56.spliterator(); java.lang.String[] strArray58 = cSVRecord56.values(); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat51.withHeader(strArray58); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat48.withHeader(strArray58); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader61 = null; org.apache.commons.csv.Lexer lexer62 = new org.apache.commons.csv.Lexer(cSVFormat60, extendedBufferedReader61); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat60.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat60); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser65, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap68 = cSVParser65.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord71 = new org.apache.commons.csv.CSVRecord(strArray39, strMap68, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord74 = new org.apache.commons.csv.CSVRecord(strArray32, strMap68, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); org.apache.commons.csv.CSVRecord cSVRecord77 = new org.apache.commons.csv.CSVRecord(strArray11, strMap68, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[]", (long) 'a'); org.apache.commons.csv.CSVRecord cSVRecord80 = new org.apache.commons.csv.CSVRecord(strArray0, strMap68, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[]", (long) (byte) 1); java.lang.String[] strArray81 = cSVRecord80.values(); java.lang.String[] strArray82 = cSVRecord80.values(); java.util.Map<java.lang.String, java.lang.String> strMap83 = cSVRecord80.toMap(); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[hi!]" + "'", str9, "[hi!]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\r\n" + "'", str19, "\r\n"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertNotNull(strMap29); org.junit.Assert.assertNotNull(strMap30); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(strSpliterator38); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + char49 + "' != '" + ',' + "'", char49 == ','); org.junit.Assert.assertNull(char50); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(strSpliterator57); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertNotNull(cSVParser65); org.junit.Assert.assertNotNull(strMap68); org.junit.Assert.assertNotNull(strArray81); org.junit.Assert.assertNotNull(strArray82); org.junit.Assert.assertNotNull(strMap83); }
public void test915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test915"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat21.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withSkipHeaderRecord(false); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVFormat52); }
public void test916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test916"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withQuoteChar('\"'); boolean boolean13 = cSVFormat7.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test917"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat4); org.apache.commons.csv.Quote quote6 = cSVFormat4.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withEscape('\f'); java.lang.Character char9 = cSVFormat4.getQuoteChar(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat4.withIgnoreSurroundingSpaces(false); java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); int int18 = cSVRecord16.size(); java.lang.String str19 = cSVRecord16.getComment(); java.lang.String[] strArray20 = cSVRecord16.values(); java.util.Iterator<java.lang.String> strItor21 = cSVRecord16.iterator(); boolean boolean22 = cSVFormat4.equals((java.lang.Object) strItor21); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(quote6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(char9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\r\n" + "'", str19, "\r\n"); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(strItor21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test918"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat3.withEscape((java.lang.Character) 'a'); java.lang.String str28 = cSVFormat27.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Delimiter=<\\> Escape=<a> SkipHeaderRecord:false" + "'", str28, "Delimiter=<\\> Escape=<a> SkipHeaderRecord:false"); }
public void test919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test919"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser5.spliterator(); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean16 = cSVFormat15.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat15); long long20 = cSVParser19.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator21 = cSVParser19.spliterator(); long long22 = cSVParser19.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor23 = cSVParser19.iterator(); long long24 = cSVParser19.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser19.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser19.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); long long33 = cSVParser32.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser32.getRecords(); boolean boolean35 = cSVParser32.isClosed(); boolean boolean36 = cSVParser32.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); long long43 = cSVParser42.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean47 = cSVFormat46.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat46.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse("", cSVFormat46); long long51 = cSVParser50.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser50.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection53 = cSVParser42.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList52); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator54 = cSVParser42.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor55 = cSVParser42.iterator(); org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean58 = cSVFormat57.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse("", cSVFormat57); long long62 = cSVParser61.getRecordNumber(); long long63 = cSVParser61.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean66 = cSVFormat65.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat65.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser69 = org.apache.commons.csv.CSVParser.parse("", cSVFormat65); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser69.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList71 = cSVParser69.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection72 = cSVParser61.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList71); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList73 = cSVParser42.getRecords(cSVRecordList71); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList74 = cSVParser32.getRecords(cSVRecordList73); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor75 = cSVParser32.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor76 = cSVParser32.iterator(); org.apache.commons.csv.CSVFormat cSVFormat78 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean79 = cSVFormat78.getIgnoreEmptyHeaders(); boolean boolean80 = cSVFormat78.getSkipHeaderRecord(); boolean boolean81 = cSVFormat78.isQuoting(); org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse("", cSVFormat78); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator83 = cSVParser82.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList84 = cSVParser82.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList85 = cSVParser32.getRecords(cSVRecordList84); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList86 = cSVParser19.getRecords(cSVRecordList84); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList87 = cSVParser19.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection88 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList87); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNotNull(cSVRecordSpliterator13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator21); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVFormat46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVParser50); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertNotNull(cSVRecordCollection53); org.junit.Assert.assertNotNull(cSVRecordSpliterator54); org.junit.Assert.assertNotNull(cSVRecordItor55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVParser61); org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L); org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L); org.junit.Assert.assertNotNull(cSVFormat65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVParser69); org.junit.Assert.assertNotNull(cSVRecordList70); org.junit.Assert.assertNotNull(cSVRecordList71); org.junit.Assert.assertNotNull(cSVRecordCollection72); org.junit.Assert.assertNotNull(cSVRecordList73); org.junit.Assert.assertNotNull(cSVRecordList74); org.junit.Assert.assertNotNull(cSVRecordItor75); org.junit.Assert.assertNotNull(cSVRecordItor76); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(cSVParser82); org.junit.Assert.assertNotNull(cSVRecordSpliterator83); org.junit.Assert.assertNotNull(cSVRecordList84); org.junit.Assert.assertNotNull(cSVRecordList85); org.junit.Assert.assertNotNull(cSVRecordList86); org.junit.Assert.assertNotNull(cSVRecordList87); org.junit.Assert.assertNotNull(cSVRecordCollection88); }
public void test920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test920"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); }
public void test921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test921"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); boolean boolean46 = cSVFormat44.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); }
public void test922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test922"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser5.iterator(); long long14 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNotNull(cSVRecordItor13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); }
public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.io.Reader reader6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat1.parse(reader6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat4.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray11 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "", (long) '#'); java.lang.String str16 = cSVFormat9.format((java.lang.Object[]) strArray11); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!"); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String str2 = cSVFormat0.getRecordSeparator(); java.io.Reader reader3 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser4 = cSVFormat0.parse(reader3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n"); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); boolean boolean10 = cSVFormat6.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\205", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) '\n'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.lang.Class<?> wildcardClass8 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString(""); java.lang.String str7 = cSVFormat1.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n"); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '\b'); boolean boolean7 = cSVFormat6.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4'); java.io.Reader reader2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat1.parse(reader2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces(false); char char7 = cSVFormat6.getDelimiter(); boolean boolean8 = cSVFormat6.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withQuoteChar((java.lang.Character) '4'); char char8 = cSVFormat7.getDelimiter(); java.io.Reader reader9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat7.parse(reader9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + ',' + "'", char8 == ','); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String[] strArray2 = cSVFormat0.getHeader(); java.lang.String str3 = cSVFormat0.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withNullString(""); java.lang.String str6 = cSVFormat0.getRecordSeparator(); java.lang.String str7 = cSVFormat0.getNullString(); java.io.Reader reader8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat0.parse(reader8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNull(str7); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String[] strArray2 = cSVFormat0.getHeader(); java.lang.String str3 = cSVFormat0.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withSkipHeaderRecord(false); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat9.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withQuoteChar('\r'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); cSVParser5.close(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); boolean boolean21 = cSVFormat19.getSkipHeaderRecord(); boolean boolean22 = cSVFormat19.isQuoting(); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator24 = cSVParser23.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser23.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVRecordList26.spliterator(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser5.getRecords(cSVRecordList26); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertNotNull(cSVRecordSpliterator24); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); java.lang.String[] strArray6 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(strArray6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\"Delimiter=<,> Escape=<a> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\",[]", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); // The following exception was thrown during execution in test generation try { java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVRecordCollection8.spliterator(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); java.lang.Character char2 = cSVFormat1.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat1.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(char2); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray3 = cSVFormat2.getHeader(); boolean boolean4 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.Quote quote5 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(quote5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withEscape('\t'); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat0.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withQuoteChar('a'); boolean boolean26 = cSVFormat3.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); boolean boolean10 = cSVFormat6.getSkipHeaderRecord(); java.lang.Character char11 = cSVFormat6.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withQuoteChar((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.lang.Class<?> wildcardClass48 = cSVRecordList46.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(wildcardClass48); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray3 = cSVFormat2.getHeader(); boolean boolean4 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.Quote quote5 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(quote5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); // The following exception was thrown during execution in test generation try { java.lang.Class<?> wildcardClass9 = cSVRecord8.getClass(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray3 = cSVFormat2.getHeader(); boolean boolean4 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.Quote quote5 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(quote5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser19.nextRecord(); // The following exception was thrown during execution in test generation try { java.lang.String str24 = cSVRecord22.get((int) '\t'); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecord22); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withNullString("\r\n"); boolean boolean11 = cSVFormat5.isNullHandling(); boolean boolean12 = cSVFormat5.getIgnoreEmptyLines(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); java.lang.Class<?> wildcardClass10 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar('\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); org.apache.commons.csv.Quote quote9 = cSVFormat8.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVRecordList9.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withCommentStart((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Token token9 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder10 = token9.content; org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat6.print((java.lang.Appendable) stringBuilder10); java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "EORECORD []", (long) (-1)); boolean boolean23 = cSVFormat6.equals((java.lang.Object) strMap19); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser24 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(stringBuilder10); org.junit.Assert.assertEquals(stringBuilder10.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); cSVParser19.close(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean23 = cSVFormat22.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); long long27 = cSVParser26.getRecordNumber(); long long28 = cSVParser26.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser34.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser34.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection37 = cSVParser26.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList36); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser19.getRecords(cSVRecordList36); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVRecordList36); org.junit.Assert.assertNotNull(cSVRecordCollection37); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.lang.Class<?> wildcardClass5 = cSVRecordSpliterator4.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withCommentStart('\t'); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); java.lang.Class<?> wildcardClass7 = cSVFormat1.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); long long9 = cSVParser3.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser3.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser3.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote7 = null; org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuotePolicy(quote7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withQuoteChar((java.lang.Character) '4'); char char11 = cSVFormat10.getDelimiter(); java.lang.Character char12 = cSVFormat10.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray14 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator19 = cSVRecord18.spliterator(); java.lang.String[] strArray20 = cSVRecord18.values(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat13.withHeader(strArray20); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat10.withHeader(strArray20); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat22, extendedBufferedReader23); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat22); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat22.withCommentStart((java.lang.Character) '\036'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + ',' + "'", char11 == ','); org.junit.Assert.assertNull(char12); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strSpliterator19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser5.getHeaderMap(); boolean boolean19 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); boolean boolean19 = cSVParser5.isClosed(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withQuoteChar('\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); boolean boolean10 = cSVFormat6.getIgnoreEmptyHeaders(); boolean boolean11 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withEscape('a'); boolean boolean14 = cSVFormat6.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); boolean boolean8 = cSVFormat6.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withQuoteChar((java.lang.Character) '4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray3 = cSVFormat2.getHeader(); boolean boolean4 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.Quote quote5 = cSVFormat2.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines(true); java.lang.String str8 = cSVFormat7.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNull(quote5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str8, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withEscape((java.lang.Character) '\036'); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat5.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(true); char char6 = cSVFormat1.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + char6 + "' != '" + ',' + "'", char6 == ','); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); cSVParser3.close(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser14.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection25 = cSVParser14.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList24); org.apache.commons.csv.CSVRecord cSVRecord26 = cSVParser14.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); long long33 = cSVParser32.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser32.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser14.getRecords(cSVRecordList34); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection36 = cSVParser3.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList35); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordList16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVRecordCollection25); org.junit.Assert.assertNull(cSVRecord26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordList35); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); boolean boolean10 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap6 = cSVParser3.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(strMap6); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withNullString("\r\n"); boolean boolean12 = cSVFormat6.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3); boolean boolean8 = cSVFormat3.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat3.withCommentStart('\t'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4'); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('\r'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); boolean boolean9 = cSVParser5.isClosed(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strMap10); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); boolean boolean10 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat6); java.lang.String str12 = cSVFormat6.getNullString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u2028" + "'", str12, "\u2028"); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); long long7 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.lang.Class<?> wildcardClass9 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withNullString(""); java.lang.Character char7 = cSVFormat1.getCommentStart(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(char7); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Token token10 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder11 = token10.content; org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat7.print((java.lang.Appendable) stringBuilder11); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(stringBuilder11); org.junit.Assert.assertEquals(stringBuilder11.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter12); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar('\"'); java.io.Reader reader11 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat7.parse(reader11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String[] strArray4 = cSVFormat2.getHeader(); java.lang.String str5 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withDelimiter('\036'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withNullString("\r"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser3.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNull(strMap7); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withIgnoreSurroundingSpaces(false); boolean boolean12 = cSVFormat5.getSkipHeaderRecord(); boolean boolean13 = cSVFormat5.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); java.lang.Class<?> wildcardClass8 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNull(cSVRecord19); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser5.getRecords(cSVRecordList29); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); boolean boolean9 = cSVParser7.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); boolean boolean19 = cSVParser5.isClosed(); long long20 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser25, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser25.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordSpliterator28); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean6 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5); long long10 = cSVParser9.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser9.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser9.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser3.getRecords(cSVRecordList12); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); org.junit.Assert.assertNotNull(cSVRecordList12); org.junit.Assert.assertNotNull(cSVRecordList13); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); long long10 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); cSVParser5.close(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser14.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection25 = cSVParser14.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList24); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser14.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor27 = cSVParser14.iterator(); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); long long35 = cSVParser33.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList42 = cSVParser41.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser41.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection44 = cSVParser33.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList45 = cSVParser14.getRecords(cSVRecordList43); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection46 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList45); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordList16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVRecordCollection25); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNotNull(cSVRecordItor27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertNotNull(cSVRecordList42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordCollection44); org.junit.Assert.assertNotNull(cSVRecordList45); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); long long7 = cSVParser5.getCurrentLineNumber(); boolean boolean8 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String[] strArray2 = cSVFormat0.getHeader(); java.lang.String str3 = cSVFormat0.getRecordSeparator(); org.apache.commons.csv.Quote quote4 = org.apache.commons.csv.Quote.ALL; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withQuotePolicy(quote4); java.io.Reader reader6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat0.parse(reader6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + quote4 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote4.equals(org.apache.commons.csv.Quote.ALL)); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); boolean boolean11 = cSVParser5.isClosed(); boolean boolean12 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); java.lang.Character char11 = cSVFormat5.getCommentStart(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withRecordSeparator(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNull(char11); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.EORECORD; token12.type = type14; boolean boolean16 = token12.isReady; org.apache.commons.csv.Token.Type type17 = token12.type; java.lang.String str18 = token12.toString(); java.lang.StringBuilder stringBuilder19 = token12.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat6.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat1.print((java.lang.Appendable) stringBuilder19); java.io.Reader reader22 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = cSVFormat1.parse(reader22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type14.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type17.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EORECORD []" + "'", str18, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(cSVRecordList17); org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser5.nextRecord(); long long20 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNull(cSVRecord19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray1 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap2 = null; org.apache.commons.csv.CSVRecord cSVRecord5 = new org.apache.commons.csv.CSVRecord(strArray1, strMap2, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator6 = cSVRecord5.spliterator(); java.lang.String[] strArray7 = cSVRecord5.values(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withHeader(strArray7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape('\\'); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat12.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strSpliterator6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator24 = cSVRecordList23.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNotNull(cSVRecordSpliterator24); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser5.spliterator(); long long12 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); boolean boolean7 = cSVFormat0.isQuoting(); java.io.Reader reader8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat0.parse(reader8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat8.withDelimiter(','); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String[] strArray4 = cSVFormat2.getHeader(); java.lang.String str5 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.Quote quote6 = org.apache.commons.csv.Quote.ALL; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withQuotePolicy(quote6); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n"); org.junit.Assert.assertTrue("'" + quote6 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote6.equals(org.apache.commons.csv.Quote.ALL)); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); boolean boolean12 = cSVFormat9.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String[] strArray2 = cSVFormat0.getHeader(); java.lang.String str3 = cSVFormat0.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); boolean boolean10 = cSVFormat8.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withNullString("\u2028"); boolean boolean13 = cSVFormat12.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape('\037'); java.lang.String[] strArray16 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord20.spliterator(); java.lang.String[] strArray22 = cSVRecord20.values(); java.lang.String str23 = cSVFormat12.format((java.lang.Object[]) strArray22); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat7.withHeader(strArray22); java.io.Reader reader25 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = cSVFormat24.parse(reader25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strSpliterator21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); boolean boolean9 = cSVParser5.isClosed(); java.lang.Class<?> wildcardClass10 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator("INVALID []"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); cSVParser19.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = cSVParser19.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNull(strMap21); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNull(cSVRecord9); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser3.getRecords(); long long6 = cSVParser3.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecordList5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withQuotePolicy(quote12); boolean boolean14 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat6.withQuoteChar((java.lang.Character) 'a'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord4 = cSVParser3.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser3.iterator(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser3.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(cSVRecord4); org.junit.Assert.assertNotNull(cSVRecordItor5); org.junit.Assert.assertNull(cSVRecord6); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withNullString(""); java.io.Reader reader4 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat3.parse(reader4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordItor19); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); long long26 = cSVParser25.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser25.spliterator(); long long28 = cSVParser25.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor29 = cSVParser25.iterator(); org.apache.commons.csv.CSVRecord cSVRecord30 = cSVParser25.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat32); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser36.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser25.getRecords(cSVRecordList37); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList39 = cSVParser5.getRecords(cSVRecordList37); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor29); org.junit.Assert.assertNull(cSVRecord30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVParser36); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertNotNull(cSVRecordList38); org.junit.Assert.assertNotNull(cSVRecordList39); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.EORECORD; token12.type = type14; boolean boolean16 = token12.isReady; org.apache.commons.csv.Token.Type type17 = token12.type; java.lang.String str18 = token12.toString(); java.lang.StringBuilder stringBuilder19 = token12.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat6.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat1.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat1.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat1.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withSkipHeaderRecord(false); java.io.Reader reader30 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = cSVFormat27.parse(reader30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type14.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type17.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EORECORD []" + "'", str18, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isCommentingEnabled(); boolean boolean9 = cSVFormat7.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7); boolean boolean11 = cSVParser10.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); boolean boolean12 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withEscape('4'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null; org.apache.commons.csv.Lexer lexer5 = new org.apache.commons.csv.Lexer(cSVFormat1, extendedBufferedReader4); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("\"Delimiter=<,> Escape=<a> QuoteChar=<\"\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\",[]", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord15 = cSVParser12.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser12.getRecords(cSVRecordList16); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser12.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser6.getRecords(cSVRecordList18); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVParser6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertNull(cSVRecord15); org.junit.Assert.assertNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordList19); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); boolean boolean11 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote16 = null; org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuotePolicy(quote16); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withQuoteChar((java.lang.Character) '4'); char char20 = cSVFormat19.getDelimiter(); java.lang.Character char21 = cSVFormat19.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray23 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator28 = cSVRecord27.spliterator(); java.lang.String[] strArray29 = cSVRecord27.values(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat22.withHeader(strArray29); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat19.withHeader(strArray29); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = null; org.apache.commons.csv.Lexer lexer33 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader32); org.apache.commons.csv.Token token34 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder35 = token34.content; org.apache.commons.csv.Token.Type type36 = org.apache.commons.csv.Token.Type.EORECORD; token34.type = type36; boolean boolean38 = token34.isReady; org.apache.commons.csv.Token.Type type39 = token34.type; java.lang.StringBuilder stringBuilder40 = token34.content; lexer33.trimTrailingSpaces(stringBuilder40); org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat6.print((java.lang.Appendable) stringBuilder40); java.lang.Character char43 = cSVFormat6.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat6.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + char20 + "' != '" + ',' + "'", char20 == ','); org.junit.Assert.assertNull(char21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strSpliterator28); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(stringBuilder35); org.junit.Assert.assertEquals(stringBuilder35.toString(), ""); org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type36.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type39.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder40); org.junit.Assert.assertEquals(stringBuilder40.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter42); org.junit.Assert.assertNull(char43); org.junit.Assert.assertNotNull(cSVFormat45); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray9 = cSVFormat6.getHeader(); char char10 = cSVFormat6.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withNullString("INVALID []"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false); char char8 = cSVFormat7.getDelimiter(); boolean boolean9 = cSVFormat7.isCommentingEnabled(); boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); java.lang.String[] strArray13 = cSVFormat11.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuoteChar((java.lang.Character) '\f'); boolean boolean18 = cSVFormat7.equals((java.lang.Object) '\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + char8 + "' != '" + ',' + "'", char8 == ','); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); java.lang.Class<?> wildcardClass20 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordItor19); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser19.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser19.getHeaderMap(); long long24 = cSVParser19.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator22); org.junit.Assert.assertNull(strMap23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); java.io.Reader reader2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat1.parse(reader2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); long long11 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat13); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser5.getRecords(cSVRecordList16); long long18 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertNotNull(cSVRecordList16); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNull(cSVRecord10); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); boolean boolean14 = cSVFormat12.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withNullString("\u2028"); boolean boolean17 = cSVFormat16.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withEscape('\037'); java.lang.String[] strArray20 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray20, strMap21, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord24.spliterator(); java.lang.String[] strArray26 = cSVRecord24.values(); java.lang.String str27 = cSVFormat16.format((java.lang.Object[]) strArray26); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withHeader(strArray26); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withIgnoreEmptyHeaders(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(strSpliterator25); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote7 = null; org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuotePolicy(quote7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withQuoteChar((java.lang.Character) '4'); char char11 = cSVFormat10.getDelimiter(); java.lang.Character char12 = cSVFormat10.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray14 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null; org.apache.commons.csv.CSVRecord cSVRecord18 = new org.apache.commons.csv.CSVRecord(strArray14, strMap15, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator19 = cSVRecord18.spliterator(); java.lang.String[] strArray20 = cSVRecord18.values(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat13.withHeader(strArray20); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat10.withHeader(strArray20); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null; org.apache.commons.csv.Lexer lexer24 = new org.apache.commons.csv.Lexer(cSVFormat22, extendedBufferedReader23); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat22); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat22); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + ',' + "'", char11 == ','); org.junit.Assert.assertNull(char12); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(strSpliterator19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getSkipHeaderRecord(); java.lang.Character char10 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withIgnoreEmptyHeaders(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNull(cSVRecord5); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); java.lang.String str49 = cSVFormat48.getNullString(); char char50 = cSVFormat48.getDelimiter(); org.apache.commons.csv.Token token51 = new org.apache.commons.csv.Token(); org.apache.commons.csv.Token.Type type52 = org.apache.commons.csv.Token.Type.EOF; token51.type = type52; org.apache.commons.csv.Token.Type type54 = token51.type; token51.isReady = true; java.lang.StringBuilder stringBuilder57 = token51.content; org.apache.commons.csv.CSVPrinter cSVPrinter58 = cSVFormat48.print((java.lang.Appendable) stringBuilder57); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u2028" + "'", str49, "\u2028"); org.junit.Assert.assertTrue("'" + char50 + "' != '" + '\036' + "'", char50 == '\036'); org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type52.equals(org.apache.commons.csv.Token.Type.EOF)); org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type54.equals(org.apache.commons.csv.Token.Type.EOF)); org.junit.Assert.assertNotNull(stringBuilder57); org.junit.Assert.assertEquals(stringBuilder57.toString(), "hi!\r\n"); org.junit.Assert.assertNotNull(cSVPrinter58); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); long long8 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator23 = cSVRecordList21.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordSpliterator23); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(cSVRecord10); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); boolean boolean8 = cSVParser3.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); java.lang.String[] strArray7 = cSVFormat2.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withCommentStart((java.lang.Character) '\\'); boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(strArray7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean40 = cSVFormat39.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat39.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("", cSVFormat39); long long44 = cSVParser43.getRecordNumber(); long long45 = cSVParser43.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean48 = cSVFormat47.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("", cSVFormat47); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser51.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList53 = cSVParser51.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection54 = cSVParser43.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList53); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection55 = cSVParser5.getRecords(cSVRecordCollection54); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVParser43); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVParser51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertNotNull(cSVRecordList53); org.junit.Assert.assertNotNull(cSVRecordCollection54); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyHeaders(false); boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces(); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat10.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String str4 = cSVFormat2.getRecordSeparator(); boolean boolean5 = cSVFormat2.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyHeaders(false); boolean boolean8 = cSVFormat7.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withEscape('\t'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.lang.String[] strArray14 = cSVRecord13.values(); boolean boolean16 = cSVRecord13.isSet("hi!"); java.lang.String[] strArray17 = cSVRecord13.values(); java.lang.String[] strArray18 = cSVRecord13.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat2.withHeader(strArray18); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.lang.Class<?> wildcardClass9 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat26.withQuoteChar('\f'); boolean boolean31 = cSVFormat30.isEscaping(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); boolean boolean12 = cSVParser5.isClosed(); long long13 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); boolean boolean6 = cSVParser3.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection7 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = cSVParser5.getRecords(cSVRecordCollection7); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNull(cSVRecordCollection8); org.junit.Assert.assertNull(cSVRecord9); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); boolean boolean9 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); boolean boolean8 = cSVFormat6.getSkipHeaderRecord(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecord5); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Quote quote26 = cSVFormat20.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat20.withCommentStart('\b'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNull(quote26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray1 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap2 = null; org.apache.commons.csv.CSVRecord cSVRecord5 = new org.apache.commons.csv.CSVRecord(strArray1, strMap2, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator6 = cSVRecord5.spliterator(); java.lang.String[] strArray7 = cSVRecord5.values(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withHeader(strArray7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat0.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withEscape('\\'); java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.lang.String[] strArray18 = cSVRecord17.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "\u2028", 0L); java.lang.String str23 = cSVFormat12.format((java.lang.Object[]) strArray18); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat12.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); java.io.Reader reader26 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser27 = cSVFormat12.parse(reader26); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strSpliterator6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); org.apache.commons.csv.Quote quote4 = cSVFormat2.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withDelimiter('\n'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(quote4); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean52 = cSVFormat51.getIgnoreEmptyHeaders(); boolean boolean53 = cSVFormat51.getSkipHeaderRecord(); boolean boolean54 = cSVFormat51.isQuoting(); org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator56 = cSVParser55.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList57 = cSVParser55.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList58 = cSVParser5.getRecords(cSVRecordList57); boolean boolean59 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNotNull(cSVRecordItor49); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(cSVParser55); org.junit.Assert.assertNotNull(cSVRecordSpliterator56); org.junit.Assert.assertNotNull(cSVRecordList57); org.junit.Assert.assertNotNull(cSVRecordList58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withEscape('\t'); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); boolean boolean9 = cSVFormat7.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withDelimiter('#'); boolean boolean20 = cSVFormat17.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat17.withDelimiter('\036'); boolean boolean23 = cSVFormat22.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray25 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap26 = null; org.apache.commons.csv.CSVRecord cSVRecord29 = new org.apache.commons.csv.CSVRecord(strArray25, strMap26, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator30 = cSVRecord29.spliterator(); java.lang.String[] strArray31 = cSVRecord29.values(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat24.withHeader(strArray31); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat24.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); boolean boolean37 = cSVFormat35.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat35.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat35.withEscape('\t'); java.lang.String[] strArray42 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray42, strMap43, "\r\n", (long) 10); java.lang.String[] strArray47 = cSVRecord46.values(); boolean boolean49 = cSVRecord46.isSet("hi!"); java.lang.String[] strArray50 = cSVRecord46.values(); java.lang.String[] strArray51 = cSVRecord46.values(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat35.withHeader(strArray51); java.lang.String str53 = cSVFormat24.format((java.lang.Object[]) strArray51); org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean55 = cSVFormat54.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat54.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat59.withIgnoreSurroundingSpaces(true); java.lang.String str62 = cSVFormat59.getNullString(); java.lang.String[] strArray64 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap65 = null; org.apache.commons.csv.CSVRecord cSVRecord68 = new org.apache.commons.csv.CSVRecord(strArray64, strMap65, "", (long) '#'); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat59.withHeader(strArray64); java.util.Map<java.lang.String, java.lang.Integer> strMap70 = null; org.apache.commons.csv.CSVRecord cSVRecord73 = new org.apache.commons.csv.CSVRecord(strArray64, strMap70, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", (long) ','); java.lang.String str74 = cSVFormat24.format((java.lang.Object[]) strArray64); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat22.withHeader(strArray64); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat75); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(strSpliterator30); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(cSVFormat52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertNotNull(cSVFormat61); org.junit.Assert.assertNull(str62); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!"); org.junit.Assert.assertNotNull(cSVFormat75); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertNull(cSVRecord9); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; java.lang.String str1 = cSVFormat0.getNullString(); java.lang.String str2 = cSVFormat0.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentStart('\\'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreEmptyHeaders(false); boolean boolean9 = cSVFormat6.isCommentingEnabled(); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat6.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNull(str1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withEscape('\t'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\f'); boolean boolean9 = cSVFormat6.isEscaping(); java.lang.String str10 = cSVFormat6.getNullString(); java.io.Reader reader11 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = cSVFormat6.parse(reader11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNull(str10); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withEscape((java.lang.Character) 'a'); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat13.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordItor12); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser5.spliterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); org.junit.Assert.assertNotNull(cSVRecordSpliterator12); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.EORECORD; token12.type = type14; boolean boolean16 = token12.isReady; org.apache.commons.csv.Token.Type type17 = token12.type; java.lang.String str18 = token12.toString(); java.lang.StringBuilder stringBuilder19 = token12.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat6.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat1.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat1.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withCommentStart((java.lang.Character) '\f'); java.io.Reader reader28 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = cSVFormat27.parse(reader28); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type14.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type17.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EORECORD []" + "'", str18, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); boolean boolean4 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withCommentStart('\\'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart(','); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the delimiter cannot be the same (',')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser19.nextRecord(); int int23 = cSVRecord22.size(); // The following exception was thrown during execution in test generation try { java.lang.String str25 = cSVRecord22.get("Delimiter=<,> Escape=<a> QuoteChar=<\t> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name"); } catch (java.lang.IllegalStateException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecord22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); boolean boolean11 = cSVFormat6.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); long long36 = cSVParser5.getRecordNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); long long15 = cSVParser12.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); long long17 = cSVParser12.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser12.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser12.getRecords(); boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVParser12); long long21 = cSVParser12.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); long long8 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser14.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser14.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord27 = cSVParser24.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(cSVRecordList28); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser14.getRecords(cSVRecordList30); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser5.getRecords(cSVRecordList31); boolean boolean33 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(strMap18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertNull(cSVRecord27); org.junit.Assert.assertNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); long long5 = cSVParser3.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withNullString("\r\n"); boolean boolean11 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder20 = token19.content; org.apache.commons.csv.Token.Type type21 = org.apache.commons.csv.Token.Type.EORECORD; token19.type = type21; token14.type = type21; token14.isReady = false; org.apache.commons.csv.Token.Type type26 = token14.type; org.apache.commons.csv.Assertions.notNull((java.lang.Object) token14, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.lang.StringBuilder stringBuilder29 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat13.print((java.lang.Appendable) stringBuilder29); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type21.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder29); org.junit.Assert.assertEquals(stringBuilder29.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter30); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String[] strArray4 = cSVFormat2.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuoteChar((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(strArray4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord(false); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertNotNull(cSVRecordItor12); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser19.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser19.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator22); org.junit.Assert.assertNotNull(cSVRecordList23); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.TDF; java.lang.String str3 = cSVFormat2.getNullString(); java.lang.String str4 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withCommentStart('\\'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyHeaders(false); boolean boolean11 = cSVFormat8.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNull(str3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNull(strMap8); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); long long7 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat10); long long15 = cSVParser14.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator(); long long17 = cSVParser14.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser14.iterator(); org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser14.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser25.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser14.getRecords(cSVRecordList26); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection28 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNull(cSVRecord19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVRecordCollection28); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); long long20 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = cSVParser5.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(strMap21); org.junit.Assert.assertNull(strMap22); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); long long9 = cSVParser5.getRecordNumber(); long long10 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote7 = null; org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuotePolicy(quote7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat13); org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder16 = token15.content; token15.reset(); token15.isReady = true; token15.reset(); token15.isReady = false; org.apache.commons.csv.Token.Type type23 = token15.type; boolean boolean24 = token15.isReady; boolean boolean25 = token15.isReady; token15.reset(); java.lang.StringBuilder stringBuilder27 = token15.content; org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat13.print((java.lang.Appendable) stringBuilder27); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat13.withIgnoreEmptyLines(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertNotNull(stringBuilder16); org.junit.Assert.assertEquals(stringBuilder16.toString(), ""); org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(stringBuilder27); org.junit.Assert.assertEquals(stringBuilder27.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); boolean boolean12 = cSVParser5.isClosed(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord13 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); cSVParser3.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser3.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray1 = cSVFormat0.getHeader(); boolean boolean2 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.Quote quote3 = cSVFormat0.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withQuoteChar((java.lang.Character) '4'); char char16 = cSVFormat15.getDelimiter(); java.lang.Character char17 = cSVFormat15.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord23.spliterator(); java.lang.String[] strArray25 = cSVRecord23.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat15.withHeader(strArray25); java.util.Map<java.lang.String, java.lang.Integer> strMap28 = null; org.apache.commons.csv.CSVRecord cSVRecord31 = new org.apache.commons.csv.CSVRecord(strArray25, strMap28, "\r\n", (long) ' '); java.lang.String str32 = cSVFormat5.format((java.lang.Object[]) strArray25); java.io.Reader reader33 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = cSVFormat5.parse(reader33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNull(strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ','); org.junit.Assert.assertNull(char17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); long long48 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNotNull(cSVRecordItor10); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat12); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; token14.reset(); token14.isReady = true; token14.reset(); token14.isReady = false; org.apache.commons.csv.Token.Type type22 = token14.type; boolean boolean23 = token14.isReady; boolean boolean24 = token14.isReady; token14.reset(); java.lang.StringBuilder stringBuilder26 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat12.print((java.lang.Appendable) stringBuilder26); java.lang.String[] strArray28 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap29 = null; org.apache.commons.csv.CSVRecord cSVRecord32 = new org.apache.commons.csv.CSVRecord(strArray28, strMap29, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator33 = cSVRecord32.spliterator(); java.lang.String str34 = cSVRecord32.toString(); java.lang.String[] strArray35 = cSVRecord32.values(); java.lang.String str36 = cSVFormat12.format((java.lang.Object[]) strArray35); java.lang.String str37 = cSVFormat0.format((java.lang.Object[]) strArray35); boolean boolean38 = cSVFormat0.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat0.withRecordSeparator("\u2029"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(strSpliterator33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]"); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); long long4 = cSVParser3.getCurrentLineNumber(); boolean boolean5 = cSVParser3.isClosed(); long long6 = cSVParser3.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser12.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(cSVRecordItor13); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreEmptyHeaders(false); boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); long long18 = cSVParser16.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection27 = cSVParser16.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser33.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); long long42 = cSVParser41.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser41.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection44 = cSVParser33.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator45 = cSVRecordList43.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser16.getRecords(cSVRecordList43); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); org.apache.commons.csv.CSVRecord cSVRecord48 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordCollection27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordCollection44); org.junit.Assert.assertNotNull(cSVRecordSpliterator45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNull(cSVRecord48); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String[] strArray4 = cSVFormat2.getHeader(); java.lang.String str5 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withNullString(""); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withIgnoreSurroundingSpaces(false); boolean boolean11 = cSVFormat10.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat12); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; token14.reset(); token14.isReady = true; token14.reset(); token14.isReady = false; org.apache.commons.csv.Token.Type type22 = token14.type; boolean boolean23 = token14.isReady; boolean boolean24 = token14.isReady; token14.reset(); java.lang.StringBuilder stringBuilder26 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat12.print((java.lang.Appendable) stringBuilder26); java.lang.String[] strArray28 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap29 = null; org.apache.commons.csv.CSVRecord cSVRecord32 = new org.apache.commons.csv.CSVRecord(strArray28, strMap29, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator33 = cSVRecord32.spliterator(); java.lang.String str34 = cSVRecord32.toString(); java.lang.String[] strArray35 = cSVRecord32.values(); java.lang.String str36 = cSVFormat12.format((java.lang.Object[]) strArray35); java.lang.String str37 = cSVFormat0.format((java.lang.Object[]) strArray35); boolean boolean38 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat0.withEscape('\b'); boolean boolean41 = cSVFormat0.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(strSpliterator33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]"); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Quote quote26 = cSVFormat20.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat20.withCommentStart('a'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start and the escape character cannot be the same ('a')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNull(quote26); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('4'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat6.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) ','); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character and the delimiter cannot be the same (',')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); boolean boolean10 = cSVFormat6.getSkipHeaderRecord(); java.lang.Character char11 = cSVFormat6.getEscape(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNull(char11); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); boolean boolean19 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVRecordItor20); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.io.Reader reader2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat0.parse(reader2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); boolean boolean24 = cSVParser5.isClosed(); long long25 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); boolean boolean10 = cSVFormat1.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat1.withIgnoreSurroundingSpaces(false); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String[] strArray4 = cSVFormat2.getHeader(); java.lang.String str5 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreEmptyLines(false); java.lang.String str14 = cSVFormat9.getNullString(); java.lang.Character char15 = cSVFormat9.getEscape(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNull(char15); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); long long13 = cSVParser12.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap14 = cSVParser12.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("", cSVFormat16); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser20.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser12.getRecords(cSVRecordList21); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNull(strMap14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean18 = cSVFormat17.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17); long long22 = cSVParser21.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser21.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection24 = cSVParser13.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList23); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser13.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor26 = cSVParser13.iterator(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean29 = cSVFormat28.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28); long long33 = cSVParser32.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVParser32.spliterator(); long long35 = cSVParser32.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor36 = cSVParser32.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser32.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator38 = cSVRecordList37.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList39 = cSVParser13.getRecords(cSVRecordList37); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList40 = cSVParser5.getRecords(cSVRecordList37); org.apache.commons.csv.CSVRecord cSVRecord41 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVParser21); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNotNull(cSVRecordCollection24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNotNull(cSVRecordItor26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor36); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertNotNull(cSVRecordSpliterator38); org.junit.Assert.assertNotNull(cSVRecordList39); org.junit.Assert.assertNotNull(cSVRecordList40); org.junit.Assert.assertNull(cSVRecord41); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreEmptyLines(true); char char14 = cSVFormat13.getDelimiter(); boolean boolean15 = cSVFormat13.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + char14 + "' != '" + ',' + "'", char14 == ','); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); org.apache.commons.csv.Quote quote5 = org.apache.commons.csv.Quote.ALL; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withQuotePolicy(quote5); boolean boolean7 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withDelimiter('\f'); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertTrue("'" + quote5 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote5.equals(org.apache.commons.csv.Quote.ALL)); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVParser10); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); java.lang.String[] strArray2 = cSVFormat0.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat6.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withIgnoreEmptyHeaders(true); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser3, "Delimiter=<,> QuoteChar=<\"> NullString=<\r\n> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); boolean boolean49 = cSVFormat21.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader22); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withCommentStart((java.lang.Character) '\036'); boolean boolean29 = cSVFormat28.isQuoting(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat28); boolean boolean31 = cSVParser30.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator32 = cSVParser30.spliterator(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator32); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser5, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); java.lang.Class<?> wildcardClass40 = cSVParser5.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertNotNull(wildcardClass40); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); long long9 = cSVParser3.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser3.getRecords(cSVRecordList44); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser3.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser5.getRecords(); long long51 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNotNull(cSVRecordItor49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getSkipHeaderRecord(); java.lang.Character char10 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withEscape('4'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withIgnoreEmptyHeaders(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder23 = token22.content; org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.EORECORD; token22.type = type24; boolean boolean26 = token22.isReady; org.apache.commons.csv.Token.Type type27 = token22.type; java.lang.StringBuilder stringBuilder28 = token22.content; org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat9.print((java.lang.Appendable) stringBuilder28); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(stringBuilder23); org.junit.Assert.assertEquals(stringBuilder23.toString(), ""); org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type24.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type27.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder28); org.junit.Assert.assertEquals(stringBuilder28.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter29); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); boolean boolean11 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote16 = null; org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuotePolicy(quote16); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withQuoteChar((java.lang.Character) '4'); char char20 = cSVFormat19.getDelimiter(); java.lang.Character char21 = cSVFormat19.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray23 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap24 = null; org.apache.commons.csv.CSVRecord cSVRecord27 = new org.apache.commons.csv.CSVRecord(strArray23, strMap24, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator28 = cSVRecord27.spliterator(); java.lang.String[] strArray29 = cSVRecord27.values(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat22.withHeader(strArray29); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat19.withHeader(strArray29); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = null; org.apache.commons.csv.Lexer lexer33 = new org.apache.commons.csv.Lexer(cSVFormat31, extendedBufferedReader32); org.apache.commons.csv.Token token34 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder35 = token34.content; org.apache.commons.csv.Token.Type type36 = org.apache.commons.csv.Token.Type.EORECORD; token34.type = type36; boolean boolean38 = token34.isReady; org.apache.commons.csv.Token.Type type39 = token34.type; java.lang.StringBuilder stringBuilder40 = token34.content; lexer33.trimTrailingSpaces(stringBuilder40); org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat6.print((java.lang.Appendable) stringBuilder40); java.lang.Character char43 = cSVFormat6.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser47 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + char20 + "' != '" + ',' + "'", char20 == ','); org.junit.Assert.assertNull(char21); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(strSpliterator28); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(stringBuilder35); org.junit.Assert.assertEquals(stringBuilder35.toString(), ""); org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type36.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type39.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder40); org.junit.Assert.assertEquals(stringBuilder40.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter42); org.junit.Assert.assertNull(char43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVParser46); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); long long49 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); java.lang.Object[] objArray35 = null; // The following exception was thrown during execution in test generation try { java.lang.String str36 = cSVFormat33.format(objArray35); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser12.getRecords(); boolean boolean15 = cSVParser12.isClosed(); boolean boolean16 = cSVParser12.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVParser22.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor35 = cSVParser22.iterator(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); long long42 = cSVParser41.getRecordNumber(); long long43 = cSVParser41.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean46 = cSVFormat45.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat45.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser49.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser49.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection52 = cSVParser41.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList53 = cSVParser22.getRecords(cSVRecordList51); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList54 = cSVParser12.getRecords(cSVRecordList53); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection55 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList54); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator56 = cSVRecordList54.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordItor35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVParser49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordCollection52); org.junit.Assert.assertNotNull(cSVRecordList53); org.junit.Assert.assertNotNull(cSVRecordList54); org.junit.Assert.assertNotNull(cSVRecordCollection55); org.junit.Assert.assertNotNull(cSVRecordSpliterator56); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); boolean boolean12 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); boolean boolean13 = cSVFormat11.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withNullString("\u2028"); boolean boolean16 = cSVFormat15.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape('\037'); java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord23.spliterator(); java.lang.String[] strArray25 = cSVRecord23.values(); java.lang.String str26 = cSVFormat15.format((java.lang.Object[]) strArray25); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat10.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withCommentStart((java.lang.Character) ' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser30 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser3.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser3.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat9.getQuotePolicy(); java.lang.String str11 = cSVFormat9.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); long long9 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNull(strMap10); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat8); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withRecordSeparator('a'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNotNull(cSVParser10); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String[] strArray3 = cSVFormat1.getHeader(); java.lang.String str4 = cSVFormat1.getRecordSeparator(); java.lang.String[] strArray5 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("\r", cSVFormat1); boolean boolean9 = cSVFormat1.isEscaping(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n"); org.junit.Assert.assertNull(strArray5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVParser8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser5.getRecords(cSVRecordList29); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor32 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordItor32); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); cSVParser5.close(); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean23 = cSVFormat22.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat22.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat22); long long27 = cSVParser26.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser26.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser34.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection37 = cSVParser26.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList36); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator38 = cSVParser26.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor39 = cSVParser26.iterator(); org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean42 = cSVFormat41.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat41.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat41); long long46 = cSVParser45.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator47 = cSVParser45.spliterator(); long long48 = cSVParser45.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser45.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser45.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator51 = cSVRecordList50.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser26.getRecords(cSVRecordList50); // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection53 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList52); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordList28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertNotNull(cSVRecordList36); org.junit.Assert.assertNotNull(cSVRecordCollection37); org.junit.Assert.assertNotNull(cSVRecordSpliterator38); org.junit.Assert.assertNotNull(cSVRecordItor39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator47); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordSpliterator51); org.junit.Assert.assertNotNull(cSVRecordList52); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser3.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordItor5); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); boolean boolean10 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); java.lang.Character char20 = cSVFormat18.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat21.withHeader(strArray28); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat18.withHeader(strArray28); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null; org.apache.commons.csv.Lexer lexer32 = new org.apache.commons.csv.Lexer(cSVFormat30, extendedBufferedReader31); org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder34 = token33.content; org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.EORECORD; token33.type = type35; boolean boolean37 = token33.isReady; org.apache.commons.csv.Token.Type type38 = token33.type; java.lang.StringBuilder stringBuilder39 = token33.content; lexer32.trimTrailingSpaces(stringBuilder39); org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat5.print((java.lang.Appendable) stringBuilder39); java.lang.Character char42 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44); java.lang.Object obj46 = null; boolean boolean47 = cSVFormat44.equals(obj46); java.io.Reader reader48 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = cSVFormat44.parse(reader48); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertNull(char20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(stringBuilder34); org.junit.Assert.assertEquals(stringBuilder34.toString(), ""); org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type35.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertNotNull(stringBuilder39); org.junit.Assert.assertEquals(stringBuilder39.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter41); org.junit.Assert.assertNull(char42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNotNull(cSVParser45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withSkipHeaderRecord(true); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat9.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); cSVParser5.close(); boolean boolean10 = cSVParser5.isClosed(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean6 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5); long long10 = cSVParser9.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser9.getRecords(); boolean boolean12 = cSVParser9.isClosed(); boolean boolean13 = cSVParser9.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean16 = cSVFormat15.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat15); long long20 = cSVParser19.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser19.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean24 = cSVFormat23.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23); long long28 = cSVParser27.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser27.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection30 = cSVParser19.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator31 = cSVParser19.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor32 = cSVParser19.iterator(); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); long long40 = cSVParser38.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean43 = cSVFormat42.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser46.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection49 = cSVParser38.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList48); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser19.getRecords(cSVRecordList48); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser9.getRecords(cSVRecordList50); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser3.getRecords(cSVRecordList50); long long53 = cSVParser3.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordCollection30); org.junit.Assert.assertNotNull(cSVRecordSpliterator31); org.junit.Assert.assertNotNull(cSVRecordItor32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVParser46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordCollection49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertNull(strMap8); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords(); long long7 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withNullString("\r\n"); boolean boolean11 = cSVFormat5.isNullHandling(); boolean boolean12 = cSVFormat5.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat5.withCommentStart((java.lang.Character) '\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(cSVFormat14); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); java.lang.Character char9 = cSVFormat6.getCommentStart(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(char9); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withCommentStart((java.lang.Character) '#'); boolean boolean10 = cSVFormat1.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVParser11); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); long long11 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withRecordSeparator('a'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withCommentStart('\t'); char char16 = cSVFormat13.getDelimiter(); java.lang.String[] strArray17 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator22 = cSVRecord21.spliterator(); int int23 = cSVRecord21.size(); java.lang.String str24 = cSVRecord21.getComment(); java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord21.spliterator(); java.lang.String[] strArray27 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap28 = null; org.apache.commons.csv.CSVRecord cSVRecord31 = new org.apache.commons.csv.CSVRecord(strArray27, strMap28, "", (long) '#'); java.lang.String[] strArray32 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator37 = cSVRecord36.spliterator(); int int38 = cSVRecord36.size(); java.lang.String str39 = cSVRecord36.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap40 = cSVRecord36.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap41 = cSVRecord31.putIn(strMap40); java.util.Map<java.lang.String, java.lang.String> strMap42 = cSVRecord21.putIn(strMap41); java.lang.String[] strArray43 = cSVRecord21.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray43, strMap44, "INVALID []", (long) (byte) -1); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat13.withHeader(strArray43); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(strSpliterator22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\r\n" + "'", str24, "\r\n"); org.junit.Assert.assertNotNull(strSpliterator25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(strSpliterator37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\r\n" + "'", str39, "\r\n"); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(cSVFormat48); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); boolean boolean9 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVRecordItor10); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); boolean boolean9 = cSVFormat4.getIgnoreEmptyHeaders(); java.lang.Character char10 = cSVFormat4.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("", cSVFormat4); cSVParser11.close(); long long13 = cSVParser11.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Token token10 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder11 = token10.content; org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat7.print((java.lang.Appendable) stringBuilder11); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat7.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat7.withIgnoreEmptyLines(false); boolean boolean19 = cSVFormat7.getIgnoreEmptyHeaders(); java.lang.String str20 = cSVFormat7.toString(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(stringBuilder11); org.junit.Assert.assertEquals(stringBuilder11.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str20, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart((java.lang.Character) '4'); boolean boolean9 = cSVFormat8.isQuoting(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat8); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withRecordSeparator('#'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVParser10); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVRecordList10.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean16 = cSVFormat15.getIgnoreEmptyHeaders(); boolean boolean17 = cSVFormat15.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat15.withNullString("\u2028"); boolean boolean20 = cSVFormat19.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withDelimiter('#'); org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder26 = token25.content; org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.EORECORD; token25.type = type27; boolean boolean29 = token25.isReady; org.apache.commons.csv.Token.Type type30 = token25.type; java.lang.String str31 = token25.toString(); java.lang.StringBuilder stringBuilder32 = token25.content; org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat19.print((java.lang.Appendable) stringBuilder32); org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat14.print((java.lang.Appendable) stringBuilder32); org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat10.print((java.lang.Appendable) stringBuilder32); java.lang.String str36 = cSVFormat10.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat10.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat10.withQuoteChar('a'); boolean boolean41 = cSVFormat10.isQuoting(); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> CommentStart=<\037\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(stringBuilder26); org.junit.Assert.assertEquals(stringBuilder26.toString(), ""); org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type27.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type30.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "EORECORD []" + "'", str31, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder32); org.junit.Assert.assertEquals(stringBuilder32.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertNotNull(cSVPrinter35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\r\n" + "'", str36, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(cSVParser42); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); boolean boolean14 = cSVFormat6.isEscaping(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); long long7 = cSVParser3.getCurrentLineNumber(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser3.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); long long15 = cSVParser12.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); long long17 = cSVParser12.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser12.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser12.getRecords(); boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVParser12); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat3.withDelimiter('\b'); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat5.withIgnoreEmptyLines(false); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); java.util.Iterator<java.lang.String> strItor6 = cSVRecord5.iterator(); java.util.Iterator<java.lang.String> strItor7 = cSVRecord5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(strItor6); org.junit.Assert.assertNotNull(strItor7); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> NullString=<Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); org.apache.commons.csv.CSVRecord cSVRecord48 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap49 = cSVParser5.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator50 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNull(cSVRecord48); org.junit.Assert.assertNull(strMap49); org.junit.Assert.assertNotNull(cSVRecordSpliterator50); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser3.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser3.iterator(); long long10 = cSVParser3.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser3.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNull(cSVRecord11); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withCommentStart('\t'); char char16 = cSVFormat13.getDelimiter(); java.lang.String[] strArray17 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null; org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator22 = cSVRecord21.spliterator(); int int23 = cSVRecord21.size(); java.lang.String str24 = cSVRecord21.getComment(); java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord21.spliterator(); java.lang.String[] strArray27 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap28 = null; org.apache.commons.csv.CSVRecord cSVRecord31 = new org.apache.commons.csv.CSVRecord(strArray27, strMap28, "", (long) '#'); java.lang.String[] strArray32 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; org.apache.commons.csv.CSVRecord cSVRecord36 = new org.apache.commons.csv.CSVRecord(strArray32, strMap33, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator37 = cSVRecord36.spliterator(); int int38 = cSVRecord36.size(); java.lang.String str39 = cSVRecord36.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap40 = cSVRecord36.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap41 = cSVRecord31.putIn(strMap40); java.util.Map<java.lang.String, java.lang.String> strMap42 = cSVRecord21.putIn(strMap41); java.lang.String[] strArray43 = cSVRecord21.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray43, strMap44, "INVALID []", (long) (byte) -1); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat13.withHeader(strArray43); boolean boolean49 = cSVFormat13.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a'); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(strSpliterator22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\r\n" + "'", str24, "\r\n"); org.junit.Assert.assertNotNull(strSpliterator25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(strSpliterator37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\r\n" + "'", str39, "\r\n"); org.junit.Assert.assertNotNull(strMap40); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); java.lang.String str8 = cSVFormat5.getRecordSeparator(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\r\n" + "'", str8, "\r\n"); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); java.lang.String[] strArray4 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null; org.apache.commons.csv.CSVRecord cSVRecord8 = new org.apache.commons.csv.CSVRecord(strArray4, strMap5, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator9 = cSVRecord8.spliterator(); int int10 = cSVRecord8.size(); java.lang.String str11 = cSVRecord8.getComment(); java.lang.String[] strArray12 = cSVRecord8.values(); java.lang.String str13 = cSVFormat2.format((java.lang.Object[]) strArray12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat2.withIgnoreEmptyHeaders(true); boolean boolean16 = cSVFormat2.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strSpliterator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); boolean boolean19 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord20 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNull(cSVRecord20); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord4 = cSVParser3.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser3.iterator(); long long6 = cSVParser3.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(cSVRecord4); org.junit.Assert.assertNotNull(cSVRecordItor5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); boolean boolean9 = cSVFormat4.getIgnoreEmptyHeaders(); java.lang.Character char10 = cSVFormat4.getCommentStart(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("", cSVFormat4); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat4.withQuoteChar((java.lang.Character) '\t'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); boolean boolean16 = cSVFormat14.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withNullString("\u2028"); boolean boolean19 = cSVFormat18.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withDelimiter('#'); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD; token24.type = type26; boolean boolean28 = token24.isReady; org.apache.commons.csv.Token.Type type29 = token24.type; java.lang.String str30 = token24.toString(); java.lang.StringBuilder stringBuilder31 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat18.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat13.print((java.lang.Appendable) stringBuilder31); org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat9.print((java.lang.Appendable) stringBuilder31); java.lang.String str35 = cSVFormat9.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat9.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat9.withDelimiter(' '); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray41 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap42 = null; org.apache.commons.csv.CSVRecord cSVRecord45 = new org.apache.commons.csv.CSVRecord(strArray41, strMap42, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator46 = cSVRecord45.spliterator(); java.lang.String[] strArray47 = cSVRecord45.values(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat40.withHeader(strArray47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat9.withHeader(strArray47); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat9, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); java.io.Reader reader52 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser53 = cSVFormat9.parse(reader52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder31); org.junit.Assert.assertEquals(stringBuilder31.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter32); org.junit.Assert.assertNotNull(cSVPrinter33); org.junit.Assert.assertNotNull(cSVPrinter34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\r\n" + "'", str35, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strSpliterator46); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat6); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertNotNull(cSVParser11); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withNullString("\r"); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat7, "\u2029"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor23 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordItor23); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withEscape('\t'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withEscape('\f'); boolean boolean9 = cSVFormat6.isEscaping(); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat6.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withNullString("Delimiter=<,> Escape=<\037> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat7.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray8 = cSVFormat5.getHeader(); char char9 = cSVFormat5.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withIgnoreEmptyLines(false); java.io.Reader reader12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat11.parse(reader12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); cSVParser3.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser3.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); java.lang.String str8 = cSVFormat1.getNullString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNull(str8); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withSkipHeaderRecord(false); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat11.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); cSVParser5.close(); long long9 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator(); long long7 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser3.getRecords(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecordList5); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader22); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withCommentStart((java.lang.Character) '\036'); boolean boolean29 = cSVFormat28.isQuoting(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat28); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withIgnoreEmptyHeaders(false); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); long long7 = cSVParser3.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser3.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser3.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNull(strMap8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.Character char34 = cSVFormat33.getCommentStart(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(char34); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withSkipHeaderRecord(true); java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String str19 = cSVRecord17.toString(); java.lang.String[] strArray20 = cSVRecord17.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray20, strMap21, "[hi!]", (long) (short) -1); java.lang.String str25 = cSVFormat12.format((java.lang.Object[]) strArray20); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]"); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); cSVParser5.close(); long long13 = cSVParser5.getRecordNumber(); long long14 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader22); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withCommentStart((java.lang.Character) '\036'); boolean boolean29 = cSVFormat28.isQuoting(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat28); boolean boolean31 = cSVParser30.isClosed(); java.lang.Class<?> wildcardClass32 = cSVParser30.getClass(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(wildcardClass32); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.String[] strArray4 = cSVFormat2.getHeader(); java.lang.String str5 = cSVFormat2.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser5.getRecords(cSVRecordList29); cSVParser5.close(); boolean boolean33 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getRecordNumber(); boolean boolean11 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); long long9 = cSVParser5.getRecordNumber(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withNullString("\r\n"); boolean boolean11 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.Quote quote14 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat5.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote17 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNull(quote14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNull(quote17); org.junit.Assert.assertNotNull(cSVParser18); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNotNull(cSVRecordItor11); }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withIgnoreEmptyHeaders(false); boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); java.lang.String[] strArray15 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null; org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray15, strMap20, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat12.withHeader(strArray15); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isCommentingEnabled(); boolean boolean9 = cSVFormat7.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser10.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordSpliterator11); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(' '); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withEscape((java.lang.Character) '\"'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); long long18 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap19 = cSVParser5.getHeaderMap(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.Assertions.notNull((java.lang.Object) strMap19, "Delimiter=<\\> CommentStart=<a> SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'Delimiter=<\\> CommentStart=<a> SkipHeaderRecord:false' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNull(strMap19); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); long long11 = cSVParser5.getRecordNumber(); boolean boolean12 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser5.spliterator(); boolean boolean19 = cSVParser5.isClosed(); long long20 = cSVParser5.getRecordNumber(); long long21 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); long long8 = cSVParser7.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser7.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); cSVParser19.close(); cSVParser19.close(); boolean boolean22 = cSVParser19.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(strMap9); }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser12.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat16.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("", cSVFormat16); long long21 = cSVParser20.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser20.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection23 = cSVParser12.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList22); org.apache.commons.csv.CSVRecord cSVRecord24 = cSVParser12.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser12.getRecords(cSVRecordList32); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser5.getRecords(cSVRecordList33); org.apache.commons.csv.CSVRecord cSVRecord35 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVParser20); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordCollection23); org.junit.Assert.assertNull(cSVRecord24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNull(cSVRecord35); }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); long long8 = cSVParser3.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L); }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat33.withNullString("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote41 = null; org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuotePolicy(quote41); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat42.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray45 = cSVFormat42.getHeader(); char char46 = cSVFormat42.getDelimiter(); org.apache.commons.csv.Quote quote47 = org.apache.commons.csv.Quote.NON_NUMERIC; org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withQuotePolicy(quote47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat36.withQuotePolicy(quote47); boolean boolean50 = cSVFormat36.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertNotNull(cSVFormat36); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertNull(strArray45); org.junit.Assert.assertTrue("'" + char46 + "' != '" + ',' + "'", char46 == ','); org.junit.Assert.assertTrue("'" + quote47 + "' != '" + org.apache.commons.csv.Quote.NON_NUMERIC + "'", quote47.equals(org.apache.commons.csv.Quote.NON_NUMERIC)); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader1 = null; org.apache.commons.csv.Lexer lexer2 = new org.apache.commons.csv.Lexer(cSVFormat0, extendedBufferedReader1); java.lang.Character char3 = cSVFormat0.getCommentStart(); boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces(); java.io.Reader reader5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat0.parse(reader5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNull(char3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); long long11 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); boolean boolean5 = cSVFormat2.isQuoting(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); long long12 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertNull(strMap13); }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); boolean boolean9 = cSVParser5.isClosed(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); boolean boolean12 = cSVParser5.isClosed(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection13 = null; // The following exception was thrown during execution in test generation try { java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection14 = cSVParser5.getRecords(cSVRecordCollection13); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); boolean boolean12 = cSVFormat10.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withNullString("\u2028"); boolean boolean15 = cSVFormat14.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape('\037'); java.lang.String[] strArray18 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator23 = cSVRecord22.spliterator(); java.lang.String[] strArray24 = cSVRecord22.values(); java.lang.String str25 = cSVFormat14.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat9.withHeader(strArray24); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray28 = cSVFormat27.getHeader(); boolean boolean29 = cSVFormat27.isCommentingEnabled(); org.apache.commons.csv.Quote quote30 = cSVFormat27.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withIgnoreEmptyLines(true); java.lang.String[] strArray34 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray34, strMap39, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withHeader(strArray34); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray34, strMap44, "\205", (long) '\036'); java.lang.String str48 = cSVFormat26.format((java.lang.Object[]) strArray34); java.lang.String[] strArray49 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap50 = null; org.apache.commons.csv.CSVRecord cSVRecord53 = new org.apache.commons.csv.CSVRecord(strArray49, strMap50, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator54 = cSVRecord53.spliterator(); java.lang.String[] strArray55 = cSVRecord53.values(); org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean58 = cSVFormat57.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat57.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote61 = null; org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withQuotePolicy(quote61); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat60.withQuoteChar((java.lang.Character) '4'); char char65 = cSVFormat64.getDelimiter(); java.lang.Character char66 = cSVFormat64.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat67 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray68 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap69 = null; org.apache.commons.csv.CSVRecord cSVRecord72 = new org.apache.commons.csv.CSVRecord(strArray68, strMap69, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator73 = cSVRecord72.spliterator(); java.lang.String[] strArray74 = cSVRecord72.values(); org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat67.withHeader(strArray74); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat64.withHeader(strArray74); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader77 = null; org.apache.commons.csv.Lexer lexer78 = new org.apache.commons.csv.Lexer(cSVFormat76, extendedBufferedReader77); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat76.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser81 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat76); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser81, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap84 = cSVParser81.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord87 = new org.apache.commons.csv.CSVRecord(strArray55, strMap84, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord90 = new org.apache.commons.csv.CSVRecord(strArray34, strMap84, "Delimiter=<,> Escape=<a> QuoteChar=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 32L); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strSpliterator23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNull(strArray28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(quote30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!"); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(strSpliterator54); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + char65 + "' != '" + ',' + "'", char65 == ','); org.junit.Assert.assertNull(char66); org.junit.Assert.assertNotNull(cSVFormat67); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(strSpliterator73); org.junit.Assert.assertNotNull(strArray74); org.junit.Assert.assertNotNull(cSVFormat75); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertNotNull(cSVFormat80); org.junit.Assert.assertNotNull(cSVParser81); org.junit.Assert.assertNotNull(strMap84); }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withIgnoreEmptyLines(false); org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder12 = token11.content; org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat10.print((java.lang.Appendable) stringBuilder12); java.lang.Class<?> wildcardClass14 = stringBuilder12.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(stringBuilder12); org.junit.Assert.assertEquals(stringBuilder12.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter13); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser3.iterator(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertNotNull(cSVRecord5); org.junit.Assert.assertNotNull(cSVRecordItor6); }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.Quote quote7 = cSVFormat4.getQuotePolicy(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNull(quote7); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray1 = cSVFormat0.getHeader(); boolean boolean2 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.Quote quote3 = cSVFormat0.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat0.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreEmptyLines(false); java.io.Reader reader10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = cSVFormat7.parse(reader10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNull(strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat0.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat0.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreEmptyHeaders(false); boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withIgnoreEmptyHeaders(false); java.io.Reader reader14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser15 = cSVFormat13.parse(reader14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser10.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser10.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertNotNull(cSVRecordSpliterator12); }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat3.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withCommentStart((java.lang.Character) '\037'); boolean boolean32 = cSVFormat29.isQuoting(); boolean boolean33 = cSVFormat29.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat29.withQuoteChar((java.lang.Character) '\b'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat5); boolean boolean11 = cSVParser10.isClosed(); long long12 = cSVParser10.getCurrentLineNumber(); cSVParser10.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); boolean boolean9 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator27 = cSVParser15.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser15.iterator(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); long long35 = cSVParser34.getRecordNumber(); long long36 = cSVParser34.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean39 = cSVFormat38.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse("", cSVFormat38); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser42.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser42.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection45 = cSVParser34.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser15.getRecords(cSVRecordList44); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor49 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertNotNull(cSVRecordSpliterator27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertNotNull(cSVFormat38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVParser42); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordList44); org.junit.Assert.assertNotNull(cSVRecordCollection45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordItor48); org.junit.Assert.assertNotNull(cSVRecordItor49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); }
public void test353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test353"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat8.withDelimiter(','); boolean boolean23 = cSVFormat8.isQuoting(); java.lang.String str24 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<\036> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\r\n" + "'", str24, "\r\n"); org.junit.Assert.assertNotNull(cSVParser25); }
public void test354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test354"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getCurrentLineNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNull(strMap11); }
public void test355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test355"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser5.spliterator(); long long20 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test356"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNull(cSVRecord7); org.junit.Assert.assertNotNull(cSVRecordList8); }
public void test357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test357"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat(' '); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); }
public void test358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test358"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); long long10 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNull(cSVRecord11); }
public void test359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test359"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart((java.lang.Character) '\f'); java.lang.String str29 = cSVFormat28.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat28); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withCommentStart('\t'); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNull(str29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test360"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); long long9 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test361"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); long long18 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); }
public void test362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test362"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString(""); java.lang.String[] strArray6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(strArray6); java.lang.String str8 = cSVFormat2.getNullString(); java.lang.Character char9 = cSVFormat2.getCommentStart(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(str8); org.junit.Assert.assertNull(char9); }
public void test363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test363"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNull(cSVRecord9); }
public void test364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test364"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); java.lang.Class<?> wildcardClass13 = cSVFormat11.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test365"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVRecordList9); }
public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); java.lang.String str3 = cSVFormat1.getRecordSeparator(); boolean boolean4 = cSVFormat1.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser7.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser7.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test367"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withIgnoreEmptyHeaders(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat18); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); }
public void test368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test368"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat9.withDelimiter(','); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat23.withEscape('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVFormat25); }
public void test369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test369"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser3.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNull(cSVRecord7); }
public void test370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test370"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat1.withRecordSeparator(' '); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test371"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); long long23 = cSVParser22.getCurrentLineNumber(); cSVParser22.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); }
public void test372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test372"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean5 = cSVFormat4.getIgnoreEmptyHeaders(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withNullString("\u2028"); boolean boolean9 = cSVFormat8.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withDelimiter('#'); org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder15 = token14.content; org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD; token14.type = type16; boolean boolean18 = token14.isReady; org.apache.commons.csv.Token.Type type19 = token14.type; java.lang.String str20 = token14.toString(); java.lang.StringBuilder stringBuilder21 = token14.content; org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat8.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat3.print((java.lang.Appendable) stringBuilder21); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat3.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat3.withEscape((java.lang.Character) 'a'); boolean boolean28 = cSVFormat27.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(stringBuilder15); org.junit.Assert.assertEquals(stringBuilder15.toString(), ""); org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EORECORD []" + "'", str20, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder21); org.junit.Assert.assertEquals(stringBuilder21.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVPrinter23); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test373"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); boolean boolean27 = cSVFormat25.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat25.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat25.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat25.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withIgnoreEmptyHeaders(false); boolean boolean36 = cSVFormat35.getIgnoreEmptyHeaders(); java.lang.String[] strArray38 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray38, strMap39, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap43 = null; org.apache.commons.csv.CSVRecord cSVRecord46 = new org.apache.commons.csv.CSVRecord(strArray38, strMap43, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat35.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat21.withHeader(strArray38); boolean boolean49 = cSVFormat21.getSkipHeaderRecord(); char char50 = cSVFormat21.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertTrue("'" + char50 + "' != '" + '\036' + "'", char50 == '\036'); }
public void test374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test374"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); java.lang.String str6 = cSVFormat3.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat8); long long13 = cSVParser12.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser12.spliterator(); long long15 = cSVParser12.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser12.iterator(); long long17 = cSVParser12.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser12.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser12.getRecords(); boolean boolean20 = cSVFormat3.equals((java.lang.Object) cSVParser12); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat3.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<\036> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test375"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat6.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat6.withEscape('4'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test376"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withDelimiter('\036'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withNullString("\r"); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat12.withQuoteChar((java.lang.Character) '\f'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test377"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2); boolean boolean7 = cSVFormat2.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat2.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuotePolicy(quote12); boolean boolean14 = cSVFormat11.isQuoting(); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVParser6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(cSVParser15); }
public void test378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test378"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces(false); char char7 = cSVFormat6.getDelimiter(); boolean boolean8 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader11 = null; org.apache.commons.csv.Lexer lexer12 = new org.apache.commons.csv.Lexer(cSVFormat6, extendedBufferedReader11); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); boolean boolean15 = cSVFormat13.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat13.withEscape('\t'); java.lang.String[] strArray20 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray20, strMap21, "\r\n", (long) 10); java.lang.String[] strArray25 = cSVRecord24.values(); boolean boolean27 = cSVRecord24.isSet("hi!"); java.lang.String[] strArray28 = cSVRecord24.values(); java.lang.String[] strArray29 = cSVRecord24.values(); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat13.withHeader(strArray29); java.lang.String str31 = cSVFormat30.getRecordSeparator(); boolean boolean32 = cSVFormat6.equals((java.lang.Object) str31); boolean boolean33 = cSVFormat6.isCommentingEnabled(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser34 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\r\n" + "'", str31, "\r\n"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test379"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); java.lang.String[] strArray9 = cSVFormat8.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13); long long18 = cSVParser17.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser17.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser17.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = cSVParser17.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean24 = cSVFormat23.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23); long long28 = cSVParser27.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator29 = cSVParser27.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord30 = cSVParser27.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords(cSVRecordList31); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser27.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser17.getRecords(cSVRecordList33); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser17.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord36 = cSVParser17.nextRecord(); boolean boolean37 = cSVFormat11.equals((java.lang.Object) cSVParser17); boolean boolean38 = cSVFormat11.getIgnoreEmptyHeaders(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); org.junit.Assert.assertNull(strMap21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator29); org.junit.Assert.assertNull(cSVRecord30); org.junit.Assert.assertNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(cSVRecord36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); }
public void test380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test380"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat11.withIgnoreEmptyHeaders(true); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test381"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); java.lang.String[] strArray6 = cSVRecord4.values(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withQuoteChar((java.lang.Character) '4'); char char16 = cSVFormat15.getDelimiter(); java.lang.Character char17 = cSVFormat15.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord23.spliterator(); java.lang.String[] strArray25 = cSVRecord23.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat15.withHeader(strArray25); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader28 = null; org.apache.commons.csv.Lexer lexer29 = new org.apache.commons.csv.Lexer(cSVFormat27, extendedBufferedReader28); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat27); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser32, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap35 = cSVParser32.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray6, strMap35, "[\205]", (long) (byte) 10); java.util.Iterator<java.lang.String> strItor39 = cSVRecord38.iterator(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ','); org.junit.Assert.assertNull(char17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(strMap35); org.junit.Assert.assertNotNull(strItor39); }
public void test382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test382"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); }
public void test383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test383"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord(false); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote15 = null; org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withQuotePolicy(quote15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat14.withQuoteChar((java.lang.Character) '4'); char char19 = cSVFormat18.getDelimiter(); boolean boolean20 = cSVFormat18.getIgnoreEmptyLines(); java.lang.String[] strArray21 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null; org.apache.commons.csv.CSVRecord cSVRecord25 = new org.apache.commons.csv.CSVRecord(strArray21, strMap22, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator26 = cSVRecord25.spliterator(); java.lang.String[] strArray27 = cSVRecord25.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap28 = null; org.apache.commons.csv.CSVRecord cSVRecord31 = new org.apache.commons.csv.CSVRecord(strArray27, strMap28, "EORECORD []", (long) (-1)); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat18.withHeader(strArray27); boolean boolean33 = cSVFormat32.getIgnoreEmptyLines(); java.lang.String[] strArray34 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator39 = cSVRecord38.spliterator(); java.lang.String[] strArray40 = cSVRecord38.values(); boolean boolean41 = cSVRecord38.isConsistent(); java.lang.String[] strArray42 = cSVRecord38.values(); java.lang.String[] strArray43 = cSVRecord38.values(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat32.withHeader(strArray43); java.lang.String str45 = cSVFormat7.format((java.lang.Object[]) strArray43); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ','); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(strSpliterator26); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(strSpliterator39); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(cSVFormat44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); }
public void test384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test384"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); boolean boolean4 = cSVParser3.isClosed(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test385"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); java.lang.String[] strArray6 = cSVRecord4.values(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat11.withQuoteChar((java.lang.Character) '4'); char char16 = cSVFormat15.getDelimiter(); java.lang.Character char17 = cSVFormat15.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator24 = cSVRecord23.spliterator(); java.lang.String[] strArray25 = cSVRecord23.values(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat15.withHeader(strArray25); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader28 = null; org.apache.commons.csv.Lexer lexer29 = new org.apache.commons.csv.Lexer(cSVFormat27, extendedBufferedReader28); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat27.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat27); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser32, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap35 = cSVParser32.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray6, strMap35, "[\205]", (long) (byte) 10); // The following exception was thrown during execution in test generation try { java.lang.String str40 = cSVRecord38.get("Delimiter=<,> Escape=<a> QuoteChar=<4> NullString=<\205> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mapping for Delimiter=<,> Escape=<a> QuoteChar=<4> NullString=<?> RecordSeparator=<?> EmptyLines:ignored SkipHeaderRecord:false not found, expected one of [Delimiter=<, > Escape=<a> QuoteCh?=<\"> RecordSep??or=<]"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ','); org.junit.Assert.assertNull(char17); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strSpliterator24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(strMap35); }
public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(false); java.lang.String[] strArray8 = null; org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withHeader(strArray8); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); }
public void test387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test387"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection8 = null; java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection9 = cSVParser5.getRecords(cSVRecordCollection8); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(cSVRecord6); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertNull(cSVRecordCollection9); }
public void test388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test388"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); boolean boolean12 = cSVFormat10.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withNullString("\u2028"); boolean boolean15 = cSVFormat14.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape('\037'); java.lang.String[] strArray18 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator23 = cSVRecord22.spliterator(); java.lang.String[] strArray24 = cSVRecord22.values(); java.lang.String str25 = cSVFormat14.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat9.withHeader(strArray24); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray28 = cSVFormat27.getHeader(); boolean boolean29 = cSVFormat27.isCommentingEnabled(); org.apache.commons.csv.Quote quote30 = cSVFormat27.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withIgnoreEmptyLines(true); java.lang.String[] strArray34 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray34, strMap39, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withHeader(strArray34); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray34, strMap44, "\205", (long) '\036'); java.lang.String str48 = cSVFormat26.format((java.lang.Object[]) strArray34); org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean51 = cSVFormat50.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote54 = null; org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat53.withQuotePolicy(quote54); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withQuoteChar((java.lang.Character) '4'); char char58 = cSVFormat57.getDelimiter(); java.lang.Character char59 = cSVFormat57.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray61 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap62 = null; org.apache.commons.csv.CSVRecord cSVRecord65 = new org.apache.commons.csv.CSVRecord(strArray61, strMap62, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator66 = cSVRecord65.spliterator(); java.lang.String[] strArray67 = cSVRecord65.values(); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat60.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat57.withHeader(strArray67); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader70 = null; org.apache.commons.csv.Lexer lexer71 = new org.apache.commons.csv.Lexer(cSVFormat69, extendedBufferedReader70); org.apache.commons.csv.CSVFormat cSVFormat73 = cSVFormat69.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser74 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat69); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser74, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap77 = cSVParser74.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord80 = new org.apache.commons.csv.CSVRecord(strArray34, strMap77, "Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", (long) (short) 1); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strSpliterator23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNull(strArray28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(quote30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!"); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVFormat55); org.junit.Assert.assertNotNull(cSVFormat57); org.junit.Assert.assertTrue("'" + char58 + "' != '" + ',' + "'", char58 == ','); org.junit.Assert.assertNull(char59); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(strSpliterator66); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat68); org.junit.Assert.assertNotNull(cSVFormat69); org.junit.Assert.assertNotNull(cSVFormat73); org.junit.Assert.assertNotNull(cSVParser74); org.junit.Assert.assertNotNull(strMap77); }
public void test389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test389"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); }
public void test390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test390"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); cSVParser19.close(); cSVParser19.close(); long long22 = cSVParser19.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); }
public void test391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test391"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withQuotePolicy(quote12); boolean boolean14 = cSVFormat6.getIgnoreEmptyHeaders(); java.lang.Character char15 = cSVFormat6.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNull(char15); }
public void test392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test392"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); boolean boolean9 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test393"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser5.iterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertNotNull(cSVRecordItor12); org.junit.Assert.assertNotNull(cSVRecordSpliterator13); }
public void test394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test394"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator(); long long7 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordItor6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); }
public void test395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test395"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList12 = cSVParser5.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test396"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); long long9 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test397"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); long long10 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser16.getRecords(); boolean boolean19 = cSVParser16.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat21); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator24 = cSVParser23.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser23.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser23.getRecords(cSVRecordList26); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser23.iterator(); long long29 = cSVParser23.getCurrentLineNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser23.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser16.getRecords(cSVRecordList30); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection32 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator33 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertNotNull(cSVRecordSpliterator24); org.junit.Assert.assertNotNull(cSVRecordSpliterator25); org.junit.Assert.assertNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordCollection32); org.junit.Assert.assertNotNull(cSVRecordSpliterator33); }
public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat6.withCommentStart('a'); org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat6); boolean boolean12 = cSVParser11.isClosed(); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser11.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVParser11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNull(strMap13); }
public void test399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test399"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); long long10 = cSVParser5.getCurrentLineNumber(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNull(cSVRecord11); }
public void test400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test400"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString(""); java.lang.String[] strArray6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withHeader(strArray6); java.lang.Character char8 = cSVFormat2.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withCommentStart((java.lang.Character) ' '); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader11 = null; org.apache.commons.csv.Lexer lexer12 = new org.apache.commons.csv.Lexer(cSVFormat10, extendedBufferedReader11); java.lang.String[] strArray13 = cSVFormat10.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withCommentStart((java.lang.Character) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNull(char8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat15); }
public void test401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test401"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); java.lang.Character char6 = cSVFormat1.getEscape(); java.lang.String str7 = cSVFormat1.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); java.lang.String[] strArray10 = cSVFormat8.getHeader(); java.lang.String str11 = cSVFormat8.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat8.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat8.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); boolean boolean18 = cSVFormat16.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat16.withNullString("\u2028"); boolean boolean21 = cSVFormat20.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape('\037'); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); java.lang.String[] strArray30 = cSVRecord28.values(); java.lang.String str31 = cSVFormat20.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat15.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat1.withHeader(strArray30); java.lang.String str34 = cSVFormat33.getNullString(); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader35 = null; org.apache.commons.csv.Lexer lexer36 = new org.apache.commons.csv.Lexer(cSVFormat33, extendedBufferedReader35); boolean boolean37 = cSVFormat33.isCommentingEnabled(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNull(str7); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n"); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNull(str34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat4.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat4.withNullString("\r\n"); boolean boolean10 = cSVFormat4.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat4.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14); boolean boolean19 = cSVFormat14.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat14.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder25 = token24.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat23.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat12.print((java.lang.Appendable) stringBuilder25); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat12.withQuoteChar('\t'); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVParser18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); org.junit.Assert.assertNotNull(cSVPrinter27); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test403"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote11 = null; org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withQuotePolicy(quote11); boolean boolean13 = cSVFormat12.getIgnoreEmptyLines(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test404"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); long long5 = cSVParser3.getCurrentLineNumber(); cSVParser3.close(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser3.iterator(); long long8 = cSVParser3.getCurrentLineNumber(); long long9 = cSVParser3.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test405"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNull(cSVRecord9); }
public void test406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test406"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test407"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord5 = cSVParser3.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord6 = cSVParser3.nextRecord(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNull(cSVRecord5); org.junit.Assert.assertNull(cSVRecord6); }
public void test408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test408"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); long long8 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(strMap9); }
public void test409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test409"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withNullString("\r"); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVFormat7, "\u2029"); boolean boolean14 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat7.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); }
public void test410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test410"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVRecordList29.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser5.getRecords(cSVRecordList29); cSVParser5.close(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator33 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordSpliterator30); org.junit.Assert.assertNotNull(cSVRecordList31); org.junit.Assert.assertNotNull(cSVRecordSpliterator33); }
public void test411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test411"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); long long7 = cSVParser5.getCurrentLineNumber(); long long8 = cSVParser5.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); }
public void test412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test412"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat4.withQuoteChar('\037'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); }
public void test413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test413"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); java.lang.Character char11 = cSVFormat5.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withIgnoreEmptyHeaders(false); java.lang.Character char14 = cSVFormat5.getEscape(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNull(char14); }
public void test414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test414"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withCommentStart((java.lang.Character) '\f'); java.lang.String str29 = cSVFormat28.getRecordSeparator(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\037> QuoteChar=<\"> CommentStart=<a> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat28); java.lang.Character char31 = cSVFormat28.getQuoteChar(); boolean boolean32 = cSVFormat28.getSkipHeaderRecord(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNull(str29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertNull(char31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test415"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); boolean boolean26 = cSVFormat20.getIgnoreEmptyHeaders(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat20.withRecordSeparator("Delimiter=<#> QuoteChar=<\"> NullString=<Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test416"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser5.nextRecord(); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertNull(cSVRecord12); org.junit.Assert.assertNull(strMap13); }
public void test417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test417"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); java.io.Reader reader9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser10 = cSVFormat7.parse(reader9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test418"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(true); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test419"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withSkipHeaderRecord(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withDelimiter('a'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar character and the delimiter cannot be the same ('a')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); }
public void test420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test420"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); boolean boolean9 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat5); java.lang.String str11 = cSVFormat5.getNullString(); boolean boolean12 = cSVFormat5.getSkipHeaderRecord(); java.io.Reader reader13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = cSVFormat5.parse(reader13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u2028" + "'", str11, "\u2028"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test421"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser15.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean20 = cSVFormat19.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19); long long24 = cSVParser23.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser23.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection26 = cSVParser15.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25); boolean boolean27 = cSVParser15.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList28 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList30 = cSVParser5.getRecords(cSVRecordList29); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat32); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser36.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean41 = cSVFormat40.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("", cSVFormat40); long long45 = cSVParser44.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser44.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean49 = cSVFormat48.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat48.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse("", cSVFormat48); long long53 = cSVParser52.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList54 = cSVParser52.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection55 = cSVParser44.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList54); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator56 = cSVParser44.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor57 = cSVParser44.iterator(); org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean60 = cSVFormat59.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("", cSVFormat59); long long64 = cSVParser63.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator65 = cSVParser63.spliterator(); long long66 = cSVParser63.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor67 = cSVParser63.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList68 = cSVParser63.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator69 = cSVRecordList68.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser44.getRecords(cSVRecordList68); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList71 = cSVParser36.getRecords(cSVRecordList68); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList72 = cSVParser5.getRecords(cSVRecordList68); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(cSVFormat22); org.junit.Assert.assertNotNull(cSVParser23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordCollection26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVRecordList28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordList30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVParser36); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertNotNull(cSVRecordList38); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVParser44); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(cSVFormat51); org.junit.Assert.assertNotNull(cSVParser52); org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L); org.junit.Assert.assertNotNull(cSVRecordList54); org.junit.Assert.assertNotNull(cSVRecordCollection55); org.junit.Assert.assertNotNull(cSVRecordSpliterator56); org.junit.Assert.assertNotNull(cSVRecordItor57); org.junit.Assert.assertNotNull(cSVFormat59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVParser63); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator65); org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor67); org.junit.Assert.assertNotNull(cSVRecordList68); org.junit.Assert.assertNotNull(cSVRecordSpliterator69); org.junit.Assert.assertNotNull(cSVRecordList70); org.junit.Assert.assertNotNull(cSVRecordList71); org.junit.Assert.assertNotNull(cSVRecordList72); }
public void test422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test422"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); }
public void test423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test423"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord12 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertNull(cSVRecord12); }
public void test424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test424"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withNullString("\u2029]"); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean17 = cSVFormat16.getIgnoreEmptyHeaders(); java.lang.String[] strArray18 = cSVFormat16.getHeader(); java.lang.String str19 = cSVFormat16.getRecordSeparator(); org.apache.commons.csv.Quote quote20 = org.apache.commons.csv.Quote.ALL; org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withQuotePolicy(quote20); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat15.withQuotePolicy(quote20); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNull(strArray18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\r\n" + "'", str19, "\r\n"); org.junit.Assert.assertTrue("'" + quote20 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote20.equals(org.apache.commons.csv.Quote.ALL)); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat22); }
public void test425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test425"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); long long11 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); java.util.Map<java.lang.String, java.lang.Integer> strMap13 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNull(strMap13); }
public void test426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test426"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); long long11 = cSVParser5.getRecordNumber(); long long12 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator13); }
public void test427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test427"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser5.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser5.iterator(); boolean boolean19 = cSVParser5.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean22 = cSVFormat21.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21); long long26 = cSVParser25.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser25.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser33.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection36 = cSVParser25.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList35); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser5.getRecords(cSVRecordList35); long long38 = cSVParser5.getRecordNumber(); long long39 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNotNull(cSVRecordItor18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(cSVRecordList27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVRecordCollection36); org.junit.Assert.assertNotNull(cSVRecordList37); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); }
public void test428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test428"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(','); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2); org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean6 = cSVFormat5.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5); long long10 = cSVParser9.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser9.getRecords(); boolean boolean12 = cSVParser9.isClosed(); boolean boolean13 = cSVParser9.isClosed(); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean16 = cSVFormat15.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat15); long long20 = cSVParser19.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser19.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean24 = cSVFormat23.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23); long long28 = cSVParser27.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser27.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection30 = cSVParser19.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator31 = cSVParser19.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor32 = cSVParser19.iterator(); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34); long long39 = cSVParser38.getRecordNumber(); long long40 = cSVParser38.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean43 = cSVFormat42.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat42.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser46.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection49 = cSVParser38.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList48); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList50 = cSVParser19.getRecords(cSVRecordList48); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList51 = cSVParser9.getRecords(cSVRecordList50); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList52 = cSVParser3.getRecords(cSVRecordList50); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVRecordList50, "Delimiter=<,> Escape=<a> QuoteChar=<4> NullString=<\205> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator55 = cSVRecordList50.spliterator(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVParser9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordList11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertNotNull(cSVRecordCollection30); org.junit.Assert.assertNotNull(cSVRecordSpliterator31); org.junit.Assert.assertNotNull(cSVRecordItor32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertNotNull(cSVFormat42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVParser46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordCollection49); org.junit.Assert.assertNotNull(cSVRecordList50); org.junit.Assert.assertNotNull(cSVRecordList51); org.junit.Assert.assertNotNull(cSVRecordList52); org.junit.Assert.assertNotNull(cSVRecordSpliterator55); }
public void test429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test429"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); long long11 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap12 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor13 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNull(strMap12); org.junit.Assert.assertNotNull(cSVRecordItor13); }
public void test430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test430"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser7.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser7.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNull(strMap9); }
public void test431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test431"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyHeaders(false); boolean boolean6 = cSVFormat1.isEscaping(); char char7 = cSVFormat1.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat1.withIgnoreEmptyLines(false); java.lang.String[] strArray10 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null; org.apache.commons.csv.CSVRecord cSVRecord14 = new org.apache.commons.csv.CSVRecord(strArray10, strMap11, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator15 = cSVRecord14.spliterator(); int int16 = cSVRecord14.size(); java.lang.String str17 = cSVRecord14.getComment(); java.lang.String[] strArray18 = cSVRecord14.values(); java.util.Iterator<java.lang.String> strItor19 = cSVRecord14.iterator(); java.lang.String str20 = cSVRecord14.getComment(); java.lang.String str21 = cSVRecord14.toString(); java.lang.String[] strArray22 = cSVRecord14.values(); java.lang.String str23 = cSVFormat9.format((java.lang.Object[]) strArray22); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ','); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strSpliterator15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\r\n" + "'", str17, "\r\n"); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strItor19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]"); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test432"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(cSVRecordList19); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList21 = cSVParser15.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList22 = cSVParser5.getRecords(cSVRecordList21); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord24 = cSVParser5.nextRecord(); boolean boolean25 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNull(strMap9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordList21); org.junit.Assert.assertNotNull(cSVRecordList22); org.junit.Assert.assertNotNull(cSVRecordList23); org.junit.Assert.assertNull(cSVRecord24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test433"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape((java.lang.Character) '#'); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test434"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.Quote quote10 = cSVFormat6.getQuotePolicy(); boolean boolean11 = cSVFormat6.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat6.withIgnoreSurroundingSpaces(true); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat13); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(quote10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test435"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordList8); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); }
public void test436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test436"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withDelimiter('#'); org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder13 = token12.content; org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.EORECORD; token12.type = type14; boolean boolean16 = token12.isReady; org.apache.commons.csv.Token.Type type17 = token12.type; java.lang.String str18 = token12.toString(); java.lang.StringBuilder stringBuilder19 = token12.content; org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat6.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat1.print((java.lang.Appendable) stringBuilder19); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat1.withCommentStart((java.lang.Character) '\f'); boolean boolean24 = cSVFormat23.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean26 = cSVFormat25.getIgnoreEmptyHeaders(); java.lang.String[] strArray27 = cSVFormat25.getHeader(); boolean boolean28 = cSVFormat25.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); boolean boolean32 = cSVFormat30.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withNullString("\u2028"); boolean boolean35 = cSVFormat34.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat34.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat39.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat45.withDelimiter('#'); boolean boolean48 = cSVFormat45.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat45.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat50.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean55 = cSVFormat54.getIgnoreEmptyHeaders(); boolean boolean56 = cSVFormat54.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat54.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat54.withQuoteChar((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat54.withCommentStart((java.lang.Character) '#'); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withIgnoreEmptyHeaders(false); boolean boolean65 = cSVFormat64.getIgnoreEmptyHeaders(); java.lang.String[] strArray67 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap68 = null; org.apache.commons.csv.CSVRecord cSVRecord71 = new org.apache.commons.csv.CSVRecord(strArray67, strMap68, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap72 = null; org.apache.commons.csv.CSVRecord cSVRecord75 = new org.apache.commons.csv.CSVRecord(strArray67, strMap72, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat64.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat77 = cSVFormat50.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat25.withHeader(strArray67); org.apache.commons.csv.CSVFormat cSVFormat79 = cSVFormat23.withHeader(strArray67); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(stringBuilder13); org.junit.Assert.assertEquals(stringBuilder13.toString(), ""); org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type14.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type17.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EORECORD []" + "'", str18, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder19); org.junit.Assert.assertEquals(stringBuilder19.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter20); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNull(strArray27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVFormat39); org.junit.Assert.assertNotNull(cSVFormat41); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertNotNull(cSVFormat45); org.junit.Assert.assertNotNull(cSVFormat47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(cSVFormat50); org.junit.Assert.assertNotNull(cSVParser51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVFormat54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertNotNull(cSVFormat62); org.junit.Assert.assertNotNull(cSVFormat64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertNotNull(cSVFormat77); org.junit.Assert.assertNotNull(cSVFormat78); org.junit.Assert.assertNotNull(cSVFormat79); }
public void test437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test437"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser5.getHeaderMap(); long long18 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor19 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(strMap17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor19); }
public void test438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test438"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); boolean boolean12 = cSVFormat10.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withNullString("\u2028"); boolean boolean15 = cSVFormat14.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape('\037'); java.lang.String[] strArray18 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator23 = cSVRecord22.spliterator(); java.lang.String[] strArray24 = cSVRecord22.values(); java.lang.String str25 = cSVFormat14.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat9.withHeader(strArray24); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray28 = cSVFormat27.getHeader(); boolean boolean29 = cSVFormat27.isCommentingEnabled(); org.apache.commons.csv.Quote quote30 = cSVFormat27.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withIgnoreEmptyLines(true); java.lang.String[] strArray34 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap35 = null; org.apache.commons.csv.CSVRecord cSVRecord38 = new org.apache.commons.csv.CSVRecord(strArray34, strMap35, "", (long) '#'); java.util.Map<java.lang.String, java.lang.Integer> strMap39 = null; org.apache.commons.csv.CSVRecord cSVRecord42 = new org.apache.commons.csv.CSVRecord(strArray34, strMap39, "\u2028", 0L); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat27.withHeader(strArray34); java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null; org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray34, strMap44, "\205", (long) '\036'); java.lang.String str48 = cSVFormat26.format((java.lang.Object[]) strArray34); java.io.Reader reader49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser50 = cSVFormat26.parse(reader49); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strSpliterator23); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat27); org.junit.Assert.assertNull(strArray28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(quote30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(cSVFormat43); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!"); }
public void test439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test439"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); long long9 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); long long12 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test440"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); boolean boolean7 = cSVFormat5.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); java.lang.String[] strArray10 = cSVFormat9.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withQuoteChar((java.lang.Character) '\f'); boolean boolean13 = cSVFormat9.getSkipHeaderRecord(); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\t> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVParser14); }
public void test441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test441"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString(""); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); }
public void test442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test442"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser3.getHeaderMap(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.Assertions.notNull((java.lang.Object) strMap8, "\r\n"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter '??' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertNull(strMap8); }
public void test443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test443"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); org.apache.commons.csv.Quote quote26 = cSVFormat20.getQuotePolicy(); boolean boolean27 = cSVFormat20.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertNull(quote26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test444"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test445"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.Quote quote11 = cSVFormat7.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat7); java.lang.Character char13 = cSVFormat7.getCommentStart(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNull(quote11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNull(char13); }
public void test446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test446"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); long long12 = cSVParser5.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNull(cSVRecord11); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test447"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray1 = cSVFormat0.getHeader(); boolean boolean2 = cSVFormat0.isCommentingEnabled(); org.apache.commons.csv.Quote quote3 = cSVFormat0.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(true); java.lang.String str6 = cSVFormat5.toString(); java.io.Reader reader7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = cSVFormat5.parse(reader7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertNull(strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNull(quote3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test448"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); long long25 = cSVParser24.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser24.spliterator(); long long27 = cSVParser24.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor28 = cSVParser24.iterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList29 = cSVParser24.getRecords(); long long30 = cSVParser24.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean33 = cSVFormat32.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat32); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser34.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser24.getRecords(cSVRecordList35); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList37 = cSVParser5.getRecords(cSVRecordList36); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator26); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor28); org.junit.Assert.assertNotNull(cSVRecordList29); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(cSVParser34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVRecordList36); }
public void test449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test449"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat3.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote7 = null; org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withQuotePolicy(quote7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withIgnoreSurroundingSpaces(true); boolean boolean11 = cSVFormat10.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat13); org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder16 = token15.content; token15.reset(); token15.isReady = true; token15.reset(); token15.isReady = false; org.apache.commons.csv.Token.Type type23 = token15.type; boolean boolean24 = token15.isReady; boolean boolean25 = token15.isReady; token15.reset(); java.lang.StringBuilder stringBuilder27 = token15.content; org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat13.print((java.lang.Appendable) stringBuilder27); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat13.withQuoteChar('a'); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser31 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertNotNull(stringBuilder16); org.junit.Assert.assertEquals(stringBuilder16.toString(), ""); org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(stringBuilder27); org.junit.Assert.assertEquals(stringBuilder27.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter28); org.junit.Assert.assertNotNull(cSVFormat30); }
public void test450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test450"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withIgnoreSurroundingSpaces(true); java.lang.String[] strArray10 = cSVFormat7.getHeader(); char char11 = cSVFormat7.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNull(strArray10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + ',' + "'", char11 == ','); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test451"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); boolean boolean8 = cSVParser5.isClosed(); org.apache.commons.csv.Assertions.notNull((java.lang.Object) boolean8, "Delimiter=<,> Escape=<a> QuoteChar=<\"> NullString=<Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test452"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces(true); boolean boolean9 = cSVFormat8.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar('\"'); org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat11); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; token13.reset(); token13.isReady = true; token13.reset(); token13.isReady = false; org.apache.commons.csv.Token.Type type21 = token13.type; boolean boolean22 = token13.isReady; boolean boolean23 = token13.isReady; token13.reset(); java.lang.StringBuilder stringBuilder25 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat11.print((java.lang.Appendable) stringBuilder25); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat11.withRecordSeparator(' '); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Record separator can only by CR, LF or CRLF"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVParser12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(stringBuilder25); org.junit.Assert.assertEquals(stringBuilder25.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter26); }
public void test453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test453"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(); java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser5.getHeaderMap(); boolean boolean12 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordSpliterator9); org.junit.Assert.assertNotNull(cSVRecordList10); org.junit.Assert.assertNull(strMap11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test454"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); boolean boolean7 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVRecordItor8); }
public void test455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test455"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces(true); boolean boolean8 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withQuoteChar('\"'); java.lang.String[] strArray11 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null; org.apache.commons.csv.CSVRecord cSVRecord15 = new org.apache.commons.csv.CSVRecord(strArray11, strMap12, "\r\n", (long) 10); java.lang.String[] strArray16 = cSVRecord15.values(); boolean boolean18 = cSVRecord15.isSet("hi!"); long long19 = cSVRecord15.getRecordNumber(); java.lang.String[] strArray20 = cSVRecord15.values(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat7.withHeader(strArray20); java.lang.String[] strArray22 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator27 = cSVRecord26.spliterator(); java.lang.String[] strArray28 = cSVRecord26.values(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean31 = cSVFormat30.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote34 = null; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuotePolicy(quote34); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withQuoteChar((java.lang.Character) '4'); char char38 = cSVFormat37.getDelimiter(); java.lang.Character char39 = cSVFormat37.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray41 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap42 = null; org.apache.commons.csv.CSVRecord cSVRecord45 = new org.apache.commons.csv.CSVRecord(strArray41, strMap42, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator46 = cSVRecord45.spliterator(); java.lang.String[] strArray47 = cSVRecord45.values(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat40.withHeader(strArray47); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat37.withHeader(strArray47); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader50 = null; org.apache.commons.csv.Lexer lexer51 = new org.apache.commons.csv.Lexer(cSVFormat49, extendedBufferedReader50); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat49.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat49); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser54, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap57 = cSVParser54.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord60 = new org.apache.commons.csv.CSVRecord(strArray28, strMap57, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord63 = new org.apache.commons.csv.CSVRecord(strArray20, strMap57, "Delimiter=<,> QuoteChar=<\"> CommentStart=<\b> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 35L); java.lang.String[] strArray64 = cSVRecord63.values(); java.util.Spliterator<java.lang.String> strSpliterator65 = cSVRecord63.spliterator(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strSpliterator27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + char38 + "' != '" + ',' + "'", char38 == ','); org.junit.Assert.assertNull(char39); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(strSpliterator46); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(cSVFormat48); org.junit.Assert.assertNotNull(cSVFormat49); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertNotNull(cSVParser54); org.junit.Assert.assertNotNull(strMap57); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strSpliterator65); }
public void test456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test456"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); java.lang.String[] strArray25 = null; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withHeader(strArray25); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); }
public void test457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test457"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); long long10 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertNotNull(cSVRecordList11); }
public void test458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test458"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(cSVRecordList6); long long8 = cSVParser3.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordSpliterator4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test459"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(cSVRecordList17); java.lang.Class<?> wildcardClass19 = cSVRecordList17.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertNotNull(cSVRecordList17); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(wildcardClass19); }
public void test460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test460"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.Map<java.lang.String, java.lang.Integer> strMap4 = cSVParser3.getHeaderMap(); cSVParser3.close(); long long6 = cSVParser3.getRecordNumber(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNull(strMap4); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test461"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = null; org.apache.commons.csv.Lexer lexer26 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader25); java.lang.Class<?> wildcardClass27 = cSVFormat21.getClass(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(wildcardClass27); }
public void test462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test462"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser5.nextRecord(); cSVParser5.close(); cSVParser5.close(); long long20 = cSVParser5.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor21 = cSVParser5.iterator(); cSVParser5.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNull(cSVRecord17); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor21); }
public void test463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test463"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isNullHandling(); boolean boolean9 = cSVFormat7.getIgnoreSurroundingSpaces(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withSkipHeaderRecord(true); java.lang.Character char13 = cSVFormat7.getEscape(); java.lang.Character char14 = cSVFormat7.getCommentStart(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNull(char13); org.junit.Assert.assertNull(char14); }
public void test464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test464"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); long long9 = cSVParser5.getCurrentLineNumber(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(cSVRecordItor10); }
public void test465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test465"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.Quote quote9 = cSVFormat5.getQuotePolicy(); org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat5); char char11 = cSVFormat5.getDelimiter(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(quote9); org.junit.Assert.assertNotNull(cSVParser10); org.junit.Assert.assertTrue("'" + char11 + "' != '" + ',' + "'", char11 == ','); }
public void test466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test466"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); boolean boolean8 = cSVParser5.isClosed(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser5.iterator(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); boolean boolean11 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVRecordItor9); org.junit.Assert.assertNull(cSVRecord10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test467"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); java.lang.String[] strArray9 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null; org.apache.commons.csv.CSVRecord cSVRecord13 = new org.apache.commons.csv.CSVRecord(strArray9, strMap10, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator14 = cSVRecord13.spliterator(); java.lang.String[] strArray15 = cSVRecord13.values(); java.lang.String str16 = cSVFormat5.format((java.lang.Object[]) strArray15); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat5.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat5); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor20 = cSVParser19.iterator(); boolean boolean21 = cSVParser19.isClosed(); org.apache.commons.csv.CSVRecord cSVRecord22 = cSVParser19.nextRecord(); int int23 = cSVRecord22.size(); java.util.Map<java.lang.String, java.lang.String> strMap24 = cSVRecord22.toMap(); java.lang.String str26 = cSVRecord22.get((int) (short) 0); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strSpliterator14); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(cSVParser19); org.junit.Assert.assertNotNull(cSVRecordItor20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVRecord22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2); org.junit.Assert.assertNotNull(strMap24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Delimiter=<" + "'", str26, "Delimiter=<"); }
public void test468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test468"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\\'); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean4 = cSVFormat3.getIgnoreEmptyHeaders(); boolean boolean5 = cSVFormat3.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat7.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat7.withDelimiter('#'); org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token(); java.lang.StringBuilder stringBuilder14 = token13.content; org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD; token13.type = type15; boolean boolean17 = token13.isReady; org.apache.commons.csv.Token.Type type18 = token13.type; java.lang.String str19 = token13.toString(); java.lang.StringBuilder stringBuilder20 = token13.content; org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat7.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat2.print((java.lang.Appendable) stringBuilder20); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat2.withCommentStart((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat2.withCommentStart('a'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) '\037'); java.lang.String str31 = cSVFormat30.getNullString(); org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withIgnoreEmptyLines(true); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(stringBuilder14); org.junit.Assert.assertEquals(stringBuilder14.toString(), ""); org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EORECORD []" + "'", str19, "EORECORD []"); org.junit.Assert.assertNotNull(stringBuilder20); org.junit.Assert.assertEquals(stringBuilder20.toString(), ""); org.junit.Assert.assertNotNull(cSVPrinter21); org.junit.Assert.assertNotNull(cSVPrinter22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNull(str31); org.junit.Assert.assertNotNull(cSVParser32); org.junit.Assert.assertNotNull(cSVFormat34); }
public void test469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test469"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap(); long long8 = cSVParser5.getRecordNumber(); long long9 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNull(strMap7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test470"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray2 = cSVFormat1.getHeader(); boolean boolean3 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.Quote quote4 = cSVFormat1.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat1.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat6); java.lang.String[] strArray8 = cSVFormat6.getHeader(); java.lang.String str9 = cSVFormat6.toString(); boolean boolean10 = cSVFormat6.getIgnoreEmptyLines(); boolean boolean11 = cSVFormat6.isQuoting(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNull(quote4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVParser7); org.junit.Assert.assertNull(strArray8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str9, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test471"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); boolean boolean7 = cSVFormat5.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat9.withEscape((java.lang.Character) '\t'); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat9.withIgnoreEmptyHeaders(false); org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("INVALID []", cSVFormat9); long long15 = cSVParser14.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList16 = cSVParser14.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVParser14); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(cSVRecordList16); }
public void test472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test472"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); long long14 = cSVParser13.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); boolean boolean17 = cSVParser5.isClosed(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList18 = cSVParser5.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser5.getRecords(); long long20 = cSVParser5.getCurrentLineNumber(); long long21 = cSVParser5.getRecordNumber(); java.util.Map<java.lang.String, java.lang.Integer> strMap22 = cSVParser5.getHeaderMap(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordList7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(cSVRecordList18); org.junit.Assert.assertNotNull(cSVRecordList19); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertNull(strMap22); }
public void test473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test473"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withEscape((java.lang.Character) '\036'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreSurroundingSpaces(false); java.lang.String str12 = cSVFormat7.toString(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<a> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str12, "Delimiter=<,> QuoteChar=<a> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); }
public void test474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test474"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean1 = cSVFormat0.getIgnoreEmptyHeaders(); boolean boolean2 = cSVFormat0.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat0.withNullString("\u2028"); boolean boolean5 = cSVFormat4.isCommentingEnabled(); boolean boolean6 = cSVFormat4.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); java.lang.String[] strArray9 = cSVFormat8.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuoteChar((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean14 = cSVFormat13.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13); long long18 = cSVParser17.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser17.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser17.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap21 = cSVParser17.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean24 = cSVFormat23.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23); long long28 = cSVParser27.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator29 = cSVParser27.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord30 = cSVParser27.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser27.getRecords(cSVRecordList31); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser27.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser17.getRecords(cSVRecordList33); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser17.getRecords(); org.apache.commons.csv.CSVRecord cSVRecord36 = cSVParser17.nextRecord(); boolean boolean37 = cSVFormat11.equals((java.lang.Object) cSVParser17); boolean boolean38 = cSVParser17.isClosed(); org.junit.Assert.assertNotNull(cSVFormat0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVParser17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator19); org.junit.Assert.assertNotNull(cSVRecordSpliterator20); org.junit.Assert.assertNull(strMap21); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertNotNull(cSVParser27); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator29); org.junit.Assert.assertNull(cSVRecord30); org.junit.Assert.assertNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordList33); org.junit.Assert.assertNotNull(cSVRecordList34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(cSVRecord36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); }
public void test475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test475"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); long long4 = cSVParser3.getCurrentLineNumber(); boolean boolean5 = cSVParser3.isClosed(); long long6 = cSVParser3.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test476"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); boolean boolean4 = cSVFormat2.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat2.withNullString("\u2028"); boolean boolean7 = cSVFormat6.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat6.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat6.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[]"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat11); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(cSVFormat13); }
public void test477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test477"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); boolean boolean4 = cSVFormat1.isQuoting(); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.Assertions.notNull((java.lang.Object) strMap9, "Delimiter=<,> QuoteChar=<\"> CommentStart=<\037\u2028> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'Delimiter=<,> QuoteChar=<\"> CommentStart=<?> NullString=<?> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordSpliterator6); org.junit.Assert.assertNull(cSVRecord7); org.junit.Assert.assertNotNull(cSVRecordItor8); org.junit.Assert.assertNull(strMap9); }
public void test478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test478"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser5.nextRecord(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = null; java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords(cSVRecordList9); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean13 = cSVFormat12.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12); long long17 = cSVParser16.getRecordNumber(); long long18 = cSVParser16.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean21 = cSVFormat20.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat20.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("", cSVFormat20); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser24.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList26 = cSVParser24.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection27 = cSVParser16.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList26); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean30 = cSVFormat29.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat29); long long34 = cSVParser33.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser33.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean38 = cSVFormat37.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37); long long42 = cSVParser41.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList43 = cSVParser41.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection44 = cSVParser33.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator45 = cSVRecordList43.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser16.getRecords(cSVRecordList43); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser5.getRecords(cSVRecordList46); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator49 = cSVParser5.spliterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap50 = cSVParser5.getHeaderMap(); long long51 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNull(cSVRecord8); org.junit.Assert.assertNull(cSVRecordList10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVParser16); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(cSVFormat23); org.junit.Assert.assertNotNull(cSVParser24); org.junit.Assert.assertNotNull(cSVRecordList25); org.junit.Assert.assertNotNull(cSVRecordList26); org.junit.Assert.assertNotNull(cSVRecordCollection27); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVParser33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(cSVFormat40); org.junit.Assert.assertNotNull(cSVParser41); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(cSVRecordList43); org.junit.Assert.assertNotNull(cSVRecordCollection44); org.junit.Assert.assertNotNull(cSVRecordSpliterator45); org.junit.Assert.assertNotNull(cSVRecordList46); org.junit.Assert.assertNotNull(cSVRecordList47); org.junit.Assert.assertNotNull(cSVRecordList48); org.junit.Assert.assertNotNull(cSVRecordSpliterator49); org.junit.Assert.assertNull(strMap50); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L); }
public void test479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test479"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); boolean boolean37 = cSVParser5.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test480"); java.net.URL uRL0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withIgnoreEmptyLines(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'url' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); }
public void test481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test481"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); cSVParser5.close(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser5.nextRecord(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed"); } catch (java.io.IOException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test482"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser3.getRecords(); long long7 = cSVParser3.getCurrentLineNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser3.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser3.getRecords(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); org.junit.Assert.assertNotNull(cSVRecordSpliterator5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertNotNull(cSVRecordList9); }
public void test483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test483"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a'); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyHeaders(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('\037'); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray7 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null; org.apache.commons.csv.CSVRecord cSVRecord11 = new org.apache.commons.csv.CSVRecord(strArray7, strMap8, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator12 = cSVRecord11.spliterator(); java.lang.String[] strArray13 = cSVRecord11.values(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat6.withHeader(strArray13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat6.withCommentStart('\f'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withEscape('\\'); java.lang.String[] strArray19 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null; org.apache.commons.csv.CSVRecord cSVRecord23 = new org.apache.commons.csv.CSVRecord(strArray19, strMap20, "\r\n", (long) 10); java.lang.String[] strArray24 = cSVRecord23.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\u2028", 0L); java.lang.String str29 = cSVFormat18.format((java.lang.Object[]) strArray24); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat5.withHeader(strArray24); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat5.withEscape((java.lang.Character) '\\'); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean35 = cSVFormat34.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat34); boolean boolean37 = cSVFormat32.equals((java.lang.Object) cSVFormat34); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertNotNull(cSVFormat3); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strSpliterator12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(cSVFormat30); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(cSVParser36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test484"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); long long8 = cSVParser5.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean12 = cSVFormat11.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11); long long16 = cSVParser15.getRecordNumber(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator17 = cSVParser15.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord18 = cSVParser15.nextRecord(); long long19 = cSVParser15.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList20 = cSVParser15.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection21 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(cSVRecordList9); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVParser15); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(cSVRecordSpliterator17); org.junit.Assert.assertNull(cSVRecord18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(cSVRecordList20); org.junit.Assert.assertNotNull(cSVRecordCollection21); }
public void test485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test485"); java.lang.String[] strArray0 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null; org.apache.commons.csv.CSVRecord cSVRecord4 = new org.apache.commons.csv.CSVRecord(strArray0, strMap1, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator5 = cSVRecord4.spliterator(); int int6 = cSVRecord4.size(); java.lang.String str7 = cSVRecord4.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap8 = cSVRecord4.toMap(); boolean boolean9 = cSVRecord4.isConsistent(); java.util.Iterator<java.lang.String> strItor10 = cSVRecord4.iterator(); java.util.Map<java.lang.String, java.lang.String> strMap11 = cSVRecord4.toMap(); java.lang.String[] strArray12 = cSVRecord4.values(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean15 = cSVFormat14.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat14.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote18 = null; org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withQuotePolicy(quote18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat17.withQuoteChar((java.lang.Character) '4'); char char22 = cSVFormat21.getDelimiter(); java.lang.Character char23 = cSVFormat21.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray25 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap26 = null; org.apache.commons.csv.CSVRecord cSVRecord29 = new org.apache.commons.csv.CSVRecord(strArray25, strMap26, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator30 = cSVRecord29.spliterator(); java.lang.String[] strArray31 = cSVRecord29.values(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat24.withHeader(strArray31); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat21.withHeader(strArray31); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = null; org.apache.commons.csv.Lexer lexer35 = new org.apache.commons.csv.Lexer(cSVFormat33, extendedBufferedReader34); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat33.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat33); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser38, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap41 = cSVParser38.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord44 = new org.apache.commons.csv.CSVRecord(strArray12, strMap41, "Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[hi!]", 0L); java.lang.String[] strArray45 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator50 = cSVRecord49.spliterator(); java.lang.String str51 = cSVRecord49.toString(); boolean boolean52 = cSVRecord49.isConsistent(); java.lang.String[] strArray53 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap54 = null; org.apache.commons.csv.CSVRecord cSVRecord57 = new org.apache.commons.csv.CSVRecord(strArray53, strMap54, "\r\n", (long) 10); java.lang.String[] strArray58 = cSVRecord57.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap59 = null; org.apache.commons.csv.CSVRecord cSVRecord62 = new org.apache.commons.csv.CSVRecord(strArray58, strMap59, "Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (long) (short) 100); long long63 = cSVRecord62.getRecordNumber(); boolean boolean65 = cSVRecord62.isMapped("Delimiter=<,> Escape=<4> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.String> strMap66 = cSVRecord62.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap67 = cSVRecord49.putIn(strMap66); java.util.Map<java.lang.String, java.lang.String> strMap68 = cSVRecord44.putIn(strMap66); java.util.Map<java.lang.String, java.lang.String> strMap69 = cSVRecord44.toMap(); org.junit.Assert.assertNotNull(strArray0); org.junit.Assert.assertNotNull(strSpliterator5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n"); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strItor10); org.junit.Assert.assertNotNull(strMap11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertTrue("'" + char22 + "' != '" + ',' + "'", char22 == ','); org.junit.Assert.assertNull(char23); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(strSpliterator30); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(cSVFormat32); org.junit.Assert.assertNotNull(cSVFormat33); org.junit.Assert.assertNotNull(cSVFormat37); org.junit.Assert.assertNotNull(cSVParser38); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(strSpliterator50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(strMap66); org.junit.Assert.assertNotNull(strMap67); org.junit.Assert.assertNotNull(strMap68); org.junit.Assert.assertNotNull(strMap69); }
public void test486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test486"); java.io.File file0 = null; java.nio.charset.Charset charset1 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); boolean boolean6 = cSVFormat5.isNullHandling(); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'file' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test487"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat1.withQuoteChar((java.lang.Character) 'a'); boolean boolean8 = cSVFormat7.isCommentingEnabled(); java.lang.String[] strArray9 = cSVFormat7.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean11 = cSVFormat10.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote14 = null; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat13.withQuoteChar((java.lang.Character) '4'); char char18 = cSVFormat17.getDelimiter(); boolean boolean19 = cSVFormat17.getIgnoreEmptyLines(); java.lang.String[] strArray20 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null; org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray20, strMap21, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord24.spliterator(); java.lang.String[] strArray26 = cSVRecord24.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap27 = null; org.apache.commons.csv.CSVRecord cSVRecord30 = new org.apache.commons.csv.CSVRecord(strArray26, strMap27, "EORECORD []", (long) (-1)); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat17.withHeader(strArray26); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat7.withHeader(strArray26); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser33 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNull(strArray9); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(cSVFormat13); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(cSVFormat17); org.junit.Assert.assertTrue("'" + char18 + "' != '" + ',' + "'", char18 == ','); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(strSpliterator25); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertNotNull(cSVFormat31); org.junit.Assert.assertNotNull(cSVFormat32); }
public void test488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test488"); java.lang.String[] strArray3 = new java.lang.String[] { "\u2029]", "Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<,> Escape=<a> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" }; java.util.Map<java.lang.String, java.lang.Integer> strMap4 = null; org.apache.commons.csv.CSVRecord cSVRecord7 = new org.apache.commons.csv.CSVRecord(strArray3, strMap4, "", (long) (short) -1); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean9 = cSVFormat8.getIgnoreEmptyHeaders(); boolean boolean10 = cSVFormat8.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withNullString("\u2028"); boolean boolean13 = cSVFormat12.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withEscape('\037'); java.lang.String[] strArray16 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null; org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord20.spliterator(); java.lang.String[] strArray22 = cSVRecord20.values(); java.lang.String str23 = cSVFormat12.format((java.lang.Object[]) strArray22); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap25 = null; org.apache.commons.csv.CSVRecord cSVRecord28 = new org.apache.commons.csv.CSVRecord(strArray24, strMap25, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator29 = cSVRecord28.spliterator(); int int30 = cSVRecord28.size(); java.lang.String str31 = cSVRecord28.getComment(); java.lang.String str32 = cSVRecord28.getComment(); boolean boolean33 = cSVRecord28.isConsistent(); java.lang.String[] strArray35 = new java.lang.String[] { "hi!" }; java.util.Map<java.lang.String, java.lang.Integer> strMap36 = null; org.apache.commons.csv.CSVRecord cSVRecord39 = new org.apache.commons.csv.CSVRecord(strArray35, strMap36, "", (long) '#'); java.lang.String str40 = cSVRecord39.getComment(); java.util.Map<java.lang.String, java.lang.String> strMap41 = cSVRecord39.toMap(); java.util.Map<java.lang.String, java.lang.String> strMap42 = cSVRecord28.putIn(strMap41); java.lang.String[] strArray43 = cSVRecord28.values(); java.lang.String[] strArray44 = cSVRecord28.values(); java.lang.String[] strArray45 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null; org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator50 = cSVRecord49.spliterator(); java.lang.String[] strArray51 = cSVRecord49.values(); org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean54 = cSVFormat53.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat53.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote57 = null; org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withQuotePolicy(quote57); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat56.withQuoteChar((java.lang.Character) '4'); char char61 = cSVFormat60.getDelimiter(); java.lang.Character char62 = cSVFormat60.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray64 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap65 = null; org.apache.commons.csv.CSVRecord cSVRecord68 = new org.apache.commons.csv.CSVRecord(strArray64, strMap65, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator69 = cSVRecord68.spliterator(); java.lang.String[] strArray70 = cSVRecord68.values(); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat63.withHeader(strArray70); org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat60.withHeader(strArray70); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader73 = null; org.apache.commons.csv.Lexer lexer74 = new org.apache.commons.csv.Lexer(cSVFormat72, extendedBufferedReader73); org.apache.commons.csv.CSVFormat cSVFormat76 = cSVFormat72.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser77 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat72); org.apache.commons.csv.Assertions.notNull((java.lang.Object) cSVParser77, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); java.util.Map<java.lang.String, java.lang.Integer> strMap80 = cSVParser77.getHeaderMap(); org.apache.commons.csv.CSVRecord cSVRecord83 = new org.apache.commons.csv.CSVRecord(strArray51, strMap80, "[\205]", (long) (byte) 10); org.apache.commons.csv.CSVRecord cSVRecord86 = new org.apache.commons.csv.CSVRecord(strArray44, strMap80, "Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", (long) (short) -1); org.apache.commons.csv.CSVRecord cSVRecord89 = new org.apache.commons.csv.CSVRecord(strArray22, strMap80, "", (long) ' '); org.apache.commons.csv.CSVRecord cSVRecord92 = new org.apache.commons.csv.CSVRecord(strArray3, strMap80, "Delimiter=<,> Escape=<a> QuoteChar=<\\> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (long) 10); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(cSVFormat15); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strSpliterator21); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strSpliterator29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\r\n" + "'", str31, "\r\n"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(strMap41); org.junit.Assert.assertNotNull(strMap42); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(strSpliterator50); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(cSVFormat53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(cSVFormat56); org.junit.Assert.assertNotNull(cSVFormat58); org.junit.Assert.assertNotNull(cSVFormat60); org.junit.Assert.assertTrue("'" + char61 + "' != '" + ',' + "'", char61 == ','); org.junit.Assert.assertNull(char62); org.junit.Assert.assertNotNull(cSVFormat63); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertNotNull(strSpliterator69); org.junit.Assert.assertNotNull(strArray70); org.junit.Assert.assertNotNull(cSVFormat71); org.junit.Assert.assertNotNull(cSVFormat72); org.junit.Assert.assertNotNull(cSVFormat76); org.junit.Assert.assertNotNull(cSVParser77); org.junit.Assert.assertNotNull(strMap80); }
public void test489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test489"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); long long7 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean10 = cSVFormat9.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat9.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser13.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection16 = cSVParser5.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15); org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean19 = cSVFormat18.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18); long long23 = cSVParser22.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser22.getRecords(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean27 = cSVFormat26.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat26); long long31 = cSVParser30.getRecordNumber(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); java.util.Collection<org.apache.commons.csv.CSVRecord> cSVRecordCollection33 = cSVParser22.getRecords((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator34 = cSVRecordList32.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList35 = cSVParser5.getRecords(cSVRecordList32); cSVParser5.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap37 = cSVParser5.getHeaderMap(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor38 = cSVParser5.iterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor39 = cSVParser5.iterator(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVParser13); org.junit.Assert.assertNotNull(cSVRecordList14); org.junit.Assert.assertNotNull(cSVRecordList15); org.junit.Assert.assertNotNull(cSVRecordCollection16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNotNull(cSVRecordList24); org.junit.Assert.assertNotNull(cSVFormat26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(cSVFormat29); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertNotNull(cSVRecordCollection33); org.junit.Assert.assertNotNull(cSVRecordSpliterator34); org.junit.Assert.assertNotNull(cSVRecordList35); org.junit.Assert.assertNull(strMap37); org.junit.Assert.assertNotNull(cSVRecordItor38); org.junit.Assert.assertNotNull(cSVRecordItor39); }
public void test490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test490"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote5 = null; org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormat4.withQuotePolicy(quote5); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat4.withQuoteChar((java.lang.Character) '4'); char char9 = cSVFormat8.getDelimiter(); java.lang.Character char10 = cSVFormat8.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray12 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null; org.apache.commons.csv.CSVRecord cSVRecord16 = new org.apache.commons.csv.CSVRecord(strArray12, strMap13, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator17 = cSVRecord16.spliterator(); java.lang.String[] strArray18 = cSVRecord16.values(); org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat11.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat8.withHeader(strArray18); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null; org.apache.commons.csv.Lexer lexer22 = new org.apache.commons.csv.Lexer(cSVFormat20, extendedBufferedReader21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat20.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat20); boolean boolean26 = cSVFormat20.isNullHandling(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVFormat6); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ','); org.junit.Assert.assertNull(char10); org.junit.Assert.assertNotNull(cSVFormat11); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strSpliterator17); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(cSVFormat19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVParser25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test491"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); long long23 = cSVParser22.getCurrentLineNumber(); long long24 = cSVParser22.getCurrentLineNumber(); boolean boolean25 = cSVParser22.isClosed(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test492"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList4 = cSVParser3.getRecords(); cSVParser3.close(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVParser3); org.junit.Assert.assertNotNull(cSVRecordList4); }
public void test493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test493"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withDelimiter(' '); java.lang.String str27 = cSVFormat26.toString(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat26.withNullString("Delimiter=<,> QuoteChar=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withQuoteChar('\t'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character and the quoteChar cannot be the same ('?')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); org.junit.Assert.assertNotNull(cSVFormat26); // flaky:     org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Delimiter=< > QuoteChar=<\"> CommentStart=<\t\u2028> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str27, "Delimiter=< > QuoteChar=<\"> CommentStart=<\t\u2028> RecordSeparator=<\r\n> SkipHeaderRecord:false"); org.junit.Assert.assertNotNull(cSVFormat29); }
public void test494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test494"); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.Quote quote6 = null; org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuotePolicy(quote6); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat5.withQuoteChar((java.lang.Character) '4'); char char10 = cSVFormat9.getDelimiter(); java.lang.Character char11 = cSVFormat9.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.DEFAULT; java.lang.String[] strArray13 = new java.lang.String[] {}; java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "\r\n", (long) 10); java.util.Spliterator<java.lang.String> strSpliterator18 = cSVRecord17.spliterator(); java.lang.String[] strArray19 = cSVRecord17.values(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat12.withHeader(strArray19); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat9.withHeader(strArray19); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null; org.apache.commons.csv.Lexer lexer23 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader22); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat21.withNullString("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true"); org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<a> QuoteChar=<\"> RecordSeparator=<\r> EmptyLines:ignored SkipHeaderRecord:true", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withCommentStart((java.lang.Character) '\036'); boolean boolean29 = cSVFormat28.isQuoting(); org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("EOF []", cSVFormat28); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator31 = cSVParser30.spliterator(); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList32 = cSVParser30.getRecords(); long long33 = cSVParser30.getRecordNumber(); org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertNotNull(cSVFormat7); org.junit.Assert.assertNotNull(cSVFormat9); org.junit.Assert.assertTrue("'" + char10 + "' != '" + ',' + "'", char10 == ','); org.junit.Assert.assertNull(char11); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(strSpliterator18); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(cSVFormat20); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVFormat25); org.junit.Assert.assertNotNull(cSVParser26); org.junit.Assert.assertNotNull(cSVFormat28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(cSVParser30); org.junit.Assert.assertNotNull(cSVRecordSpliterator31); org.junit.Assert.assertNotNull(cSVRecordList32); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L); }
public void test495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test495"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); boolean boolean3 = cSVFormat1.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat1.withNullString("\u2028"); boolean boolean6 = cSVFormat5.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withEscape('\037'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withDelimiter('#'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withDelimiter('#'); boolean boolean19 = cSVFormat16.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat16.withDelimiter('\036'); org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("[hi!]", cSVFormat21); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withQuoteChar('#'); org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = null; org.apache.commons.csv.Lexer lexer26 = new org.apache.commons.csv.Lexer(cSVFormat21, extendedBufferedReader25); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withEscape('\t'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start and the escape character cannot be the same ('?')"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVFormat5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNotNull(cSVFormat12); org.junit.Assert.assertNotNull(cSVFormat14); org.junit.Assert.assertNotNull(cSVFormat16); org.junit.Assert.assertNotNull(cSVFormat18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(cSVFormat21); org.junit.Assert.assertNotNull(cSVParser22); org.junit.Assert.assertNotNull(cSVFormat24); }
public void test496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test496"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser5.getRecords(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator7 = cSVParser5.spliterator(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator(); long long9 = cSVParser5.getRecordNumber(); long long10 = cSVParser5.getRecordNumber(); boolean boolean11 = cSVParser5.isClosed(); long long12 = cSVParser5.getCurrentLineNumber(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertNotNull(cSVRecordList6); org.junit.Assert.assertNotNull(cSVRecordSpliterator7); org.junit.Assert.assertNotNull(cSVRecordSpliterator8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); }
public void test497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test497"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); boolean boolean6 = cSVFormat1.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat1.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat1.withIgnoreEmptyLines(false); org.apache.commons.csv.Quote quote11 = cSVFormat1.getQuotePolicy(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(cSVFormat8); org.junit.Assert.assertNotNull(cSVFormat10); org.junit.Assert.assertNull(quote11); }
public void test498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test498"); org.apache.commons.csv.CSVFormat cSVFormat1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\\> QuoteChar=<\"> CommentStart=<\f> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'format' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test499"); java.io.Reader reader0 = null; org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean3 = cSVFormat2.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("\r\n", cSVFormat2); boolean boolean5 = cSVFormat2.getIgnoreEmptyHeaders(); java.lang.Character char6 = cSVFormat2.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat2.withIgnoreEmptyHeaders(false); // The following exception was thrown during execution in test generation try { org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'reader' must not be null!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(cSVFormat2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(cSVParser4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNull(char6); org.junit.Assert.assertNotNull(cSVFormat8); }
public void test500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test500"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; boolean boolean2 = cSVFormat1.getIgnoreEmptyHeaders(); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat1.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1); long long6 = cSVParser5.getRecordNumber(); boolean boolean7 = cSVParser5.isClosed(); long long8 = cSVParser5.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord9 = cSVParser5.nextRecord(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator(); org.apache.commons.csv.CSVRecord cSVRecord11 = cSVParser5.nextRecord(); org.junit.Assert.assertNotNull(cSVFormat1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(cSVFormat4); org.junit.Assert.assertNotNull(cSVParser5); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNull(cSVRecord9); org.junit.Assert.assertNotNull(cSVRecordSpliterator10); org.junit.Assert.assertNull(cSVRecord11); }
