public void test00() throws Throwable { ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear(); DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder(); zoneInfoCompiler_DateTimeOfYear0.addCutover(dateTimeZoneBuilder0, 0); }
public void test01() throws Throwable { ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(); DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder(); zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, ",HH'{zYIe$F9R", (-780), (-780), 1); } @Test(timeout = 4000) public void test02() throws Throwable { ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(); String string0 = zoneInfoCompiler_DateTimeOfYear0.toString(); assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0); } @Test(timeout = 4000) public void test03() throws Throwable { String[] stringArray0 = new String[4]; stringArray0[0] = "-?"; ZoneInfoCompiler.main(stringArray0); assertEquals(4, stringArray0.length); } @Test(timeout = 4000) public void test04() throws Throwable { boolean boolean0 = ZoneInfoCompiler.verbose(); assertFalse(boolean0); } @Test(timeout = 4000) public void test05() throws Throwable { StringTokenizer stringTokenizer0 = new StringTokenizer("r.TyhS"); ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null; try { zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Value \"r.TyhS\" for monthOfYear is not supported // verifyException("org.joda.time.chrono.GJLocaleSymbols", e); } } @Test(timeout = 4000) public void test06() throws Throwable { // Undeclared exception! try { ZoneInfoCompiler.parseDayOfWeek("s}a~-v968Q"); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Value \"s}a~-v968Q\" for dayOfWeek is not supported // verifyException("org.joda.time.chrono.GJLocaleSymbols", e); }
public void test02() throws Throwable { ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(); String string0 = zoneInfoCompiler_DateTimeOfYear0.toString(); assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0); }
public void test03() throws Throwable { String[] stringArray0 = new String[4]; stringArray0[0] = "-?"; ZoneInfoCompiler.main(stringArray0); assertEquals(4, stringArray0.length); }
public void test04() throws Throwable { boolean boolean0 = ZoneInfoCompiler.verbose(); assertFalse(boolean0); }
public void test05() throws Throwable { StringTokenizer stringTokenizer0 = new StringTokenizer("r.TyhS"); ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null; try { zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Value \"r.TyhS\" for monthOfYear is not supported // verifyException("org.joda.time.chrono.GJLocaleSymbols", e); } }
public void test06() throws Throwable { // Undeclared exception! try { ZoneInfoCompiler.parseDayOfWeek("s}a~-v968Q"); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Value \"s}a~-v968Q\" for dayOfWeek is not supported
public void test07() throws Throwable { String[] stringArray0 = new String[0]; ZoneInfoCompiler.main(stringArray0); assertEquals(0, stringArray0.length); }
public void test08() throws Throwable { String[] stringArray0 = new String[4]; stringArray0[0] = "-dst"; stringArray0[1] = "YU[j!Mo8\"D/>L^iG;"; stringArray0[2] = "-dst"; stringArray0[3] = "-dst"; ZoneInfoCompiler.main(stringArray0); assertEquals(4, stringArray0.length); }
public void test09() throws Throwable { String[] stringArray0 = new String[2]; stringArray0[0] = "-verbose"; stringArray0[1] = "UnsupportedDurationField["; try { ZoneInfoCompiler.main(stringArray0); fail("Expecting exception: FileNotFoundException"); } catch(FileNotFoundException e) { // // no message in exception (getMessage() returned null) // verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e); } }
public void test10() throws Throwable { String[] stringArray0 = new String[3]; stringArray0[0] = "-src"; stringArray0[1] = "<"; try { ZoneInfoCompiler.main(stringArray0); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.evosuite.runtime.mock.java.io.MockFile", e); } }
public void test11() throws Throwable { ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear(); ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear(); assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0); }
public void test12() throws Throwable { ZoneInfoCompiler.parseTime("24:00"); int int0 = ZoneInfoCompiler.parseTime("24:00"); assertEquals(86400000, int0); }
public void test13() throws Throwable { HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(); DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1); hashMap0.put("]55ZA?d*", dateTimeZone0); ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(); DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0); ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0); assertEquals(33, byteArrayOutputStream0.size()); assertEquals("\u0000\u0002\u0000\b]55ZA?d*\u0000\r+00:00:00.001\u0000\u0001\u0000\u0000\u0000\u0001", byteArrayOutputStream0.toString()); }
public void test14() throws Throwable { HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(); DateTimeZone dateTimeZone0 = DateTimeZone.getDefault(); hashMap0.put("Field is not supported", dateTimeZone0); hashMap0.put("qGwTU@<ne,]!zy}}=", dateTimeZone0); // Undeclared exception! try { ZoneInfoCompiler.writeZoneInfoMap((DataOutputStream) null, hashMap0); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.joda.time.tz.ZoneInfoCompiler", e); } }
public void test15() throws Throwable { int int0 = ZoneInfoCompiler.parseYear("minimum", 1); assertEquals(Integer.MIN_VALUE, int0); }
public void test16() throws Throwable { // Undeclared exception! try { ZoneInfoCompiler.parseYear("#U", (-65015560)); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"#u\" // verifyException("java.lang.NumberFormatException", e); } }
public void test17() throws Throwable { int int0 = ZoneInfoCompiler.parseYear("min", (-1)); assertEquals(Integer.MIN_VALUE, int0); }
public void test18() throws Throwable { int int0 = ZoneInfoCompiler.parseYear("maximum", 3142); assertEquals(Integer.MAX_VALUE, int0); }
public void test19() throws Throwable { int int0 = ZoneInfoCompiler.parseYear("only", (-100390397)); assertEquals((-100390397), int0); }
public void test20() throws Throwable { String string0 = ZoneInfoCompiler.parseOptional("-src"); assertEquals("-src", string0); }
public void test21() throws Throwable { String string0 = ZoneInfoCompiler.parseOptional("-"); assertNull(string0); }
public void test22() throws Throwable { // Undeclared exception! try { ZoneInfoCompiler.parseTime("-src"); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // -src // verifyException("org.joda.time.tz.ZoneInfoCompiler", e); } }
public void test23() throws Throwable { int int0 = ZoneInfoCompiler.parseTime("-9XfffuN;wE&8(OZ`5h"); assertEquals((-32400000), int0); }
public void test24() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('G'); assertEquals('u', char0); }
public void test25() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('z'); assertEquals('u', char0); }
public void test26() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('S'); assertEquals('s', char0); }
public void test27() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('U'); assertEquals('u', char0); }
public void test28() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('W'); assertEquals('w', char0); }
public void test29() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('Z'); assertEquals('u', char0); }
public void test30() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('g'); assertEquals('u', char0); }
public void test31() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('s'); assertEquals('s', char0); }
public void test32() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('u'); assertEquals('u', char0); }
public void test33() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('w'); assertEquals('w', char0); }
public void test34() throws Throwable { char char0 = ZoneInfoCompiler.parseZoneChar('\"'); assertEquals('w', char0); }
public void test35() throws Throwable { DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder(); DateTimeZone dateTimeZone0 = dateTimeZoneBuilder0.toDateTimeZone("WhKYe@", false); boolean boolean0 = ZoneInfoCompiler.test("WhKYe@", dateTimeZone0); assertTrue(boolean0); }
public void test36() throws Throwable { FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC; boolean boolean0 = ZoneInfoCompiler.test("#U", fixedDateTimeZone0); assertTrue(boolean0); }
public void test37() throws Throwable { ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler(); MockFile mockFile0 = new MockFile("}O2!Of!6", "}O2!Of!6"); File[] fileArray0 = new File[0]; Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile(mockFile0, fileArray0); Map<String, DateTimeZone> map1 = zoneInfoCompiler0.compile(mockFile0, fileArray0); assertTrue(map1.equals((Object)map0)); }
public void test38() throws Throwable { ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler(); Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) null, (File[]) null); assertTrue(map0.isEmpty()); }
public void test40() throws Throwable { ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler(); File file0 = MockFile.createTempFile("<u`Z#Mb", "<u`Z#Mb"); try { zoneInfoCompiler0.compile(file0, (File[]) null); fail("Expecting exception: IOException"); } catch(IOException e) { // // Destination is not a directory: /tmp/<u`Z#Mb0<u`Z#Mb // verifyException("org.joda.time.tz.ZoneInfoCompiler", e); } }
public void test41() throws Throwable { StringReader stringReader0 = new StringReader("\nAdvanceDayOfWeek: "); BufferedReader bufferedReader0 = new BufferedReader(stringReader0); ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler(); zoneInfoCompiler0.parseDataFile(bufferedReader0); }
public void test42() throws Throwable { StringReader stringReader0 = new StringReader("#:#y$A*"); BufferedReader bufferedReader0 = new BufferedReader(stringReader0); ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler(); zoneInfoCompiler0.parseDataFile(bufferedReader0); }
public void test43() throws Throwable { StringReader stringReader0 = new StringReader("<u`Z#Mb"); BufferedReader bufferedReader0 = new BufferedReader(stringReader0); ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler(); zoneInfoCompiler0.parseDataFile(bufferedReader0); }
public void test44() throws Throwable { StringReader stringReader0 = new StringReader(" VN}V<`vG7");
public void test45() throws Throwable { StringTokenizer stringTokenizer0 = new StringTokenizer("N", "N"); ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0); }
