public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("hi!"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("", (int) (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime(); org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved(); org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.ReadableInterval readableInterval5 = null; org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5); org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone8); org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 100, chronology6); boolean boolean11 = dateTimeFieldType3.isSupported(chronology6); // The following exception was thrown during execution in test generation try { org.joda.time.Period period12 = new org.joda.time.Period((java.lang.Object) dateTimeOfYear0, periodType1, chronology6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertNotNull(periodType1); org.junit.Assert.assertNotNull(periodType2); org.junit.Assert.assertNotNull(dateTimeFieldType3); org.junit.Assert.assertNotNull(chronology6); org.junit.Assert.assertNotNull(dateTimeZone8); org.junit.Assert.assertNotNull(zonedChronology9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.BufferedReader bufferedReader1 = null; // The following exception was thrown during execution in test generation try { zoneInfoCompiler0.parseDataFile(bufferedReader1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("GregorianChronology[UTC]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: GregorianChronology[UTC]"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.joda.time.Chronology chronology0 = org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology(); org.junit.Assert.assertNotNull(chronology0); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("ISOChronology[UTC]"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ISOChronology[UTC]\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MonthOfYear: 1?DayOfMonth: 1?DayOfWeek: 0?AdvanceDayOfWeek: false?MillisOfDay: 0?ZoneChar: w?"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("71"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "71" + "'", str1, "71"); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("hi!"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); java.io.DataOutputStream dataOutputStream0 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null; // The following exception was thrown during execution in test generation try { org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("10"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"10\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("70"); // flaky:       org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"70\": Value 70 for hourOfDay must be in the range [0,23]"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('#'); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("millis", 0); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"millis\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("3465", (int) (byte) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3465 + "'", int2 == 3465); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"MonthOfYear: 1?DayOfMonth: 1?DayOfWeek: 0?AdvanceDayOfWeek: false?MillisOfDay: 0?ZoneChar: w?\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("minutes"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes"); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('a'); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("UTC", 2024); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"utc\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.BufferedReader bufferedReader4 = null; // The following exception was thrown during execution in test generation try { zoneInfoCompiler0.parseDataFile(bufferedReader4); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.File file4 = null; java.io.File file5 = null; java.io.File[] fileArray6 = new java.io.File[] { file5 }; // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = zoneInfoCompiler0.compile(file4, fileArray6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(fileArray6); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("-292275054"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-292275054\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("P1D"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P1D\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4); org.joda.time.DateTimeField dateTimeField6 = zonedChronology5.weekyear(); org.joda.time.ReadableInterval readableInterval7 = null; org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7); org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology11 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone10); org.joda.time.Period period14 = new org.joda.time.Period((long) '4', 10L); int[] intArray17 = zonedChronology11.get((org.joda.time.ReadablePeriod) period14, (long) (byte) -1, (long) 1); java.lang.String str18 = zonedChronology11.toString(); org.joda.time.DateTimeField dateTimeField19 = zonedChronology11.hourOfDay(); org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology11); org.joda.time.DurationField durationField21 = zonedChronology11.hours(); org.joda.time.chrono.LenientChronology lenientChronology22 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology11); org.joda.time.ReadableInterval readableInterval23 = null; org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23); org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone26); java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone(); org.joda.time.ReadableInstant readableInstant29 = null; int int30 = dateTimeZone26.getOffset(readableInstant29); org.joda.time.Chronology chronology31 = lenientChronology22.withZone(dateTimeZone26); org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology5, dateTimeZone26); boolean boolean33 = org.joda.time.tz.ZoneInfoCompiler.test("(\"org.joda.time.JodaTimePermission\" \"DateTimeField[yearOfCentury]\")", dateTimeZone26); org.junit.Assert.assertNotNull(chronology2); org.junit.Assert.assertNotNull(dateTimeZone4); org.junit.Assert.assertNotNull(zonedChronology5); org.junit.Assert.assertNotNull(dateTimeField6); org.junit.Assert.assertNotNull(chronology8); org.junit.Assert.assertNotNull(dateTimeZone10); org.junit.Assert.assertNotNull(zonedChronology11); org.junit.Assert.assertNotNull(intArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str18, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField19); org.junit.Assert.assertNotNull(chronology20); org.junit.Assert.assertNotNull(durationField21); org.junit.Assert.assertNotNull(lenientChronology22); org.junit.Assert.assertNotNull(chronology24); org.junit.Assert.assertNotNull(dateTimeZone26); org.junit.Assert.assertNotNull(zonedChronology27); org.junit.Assert.assertNotNull(timeZone28); org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time"); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNotNull(chronology31); org.junit.Assert.assertNotNull(zonedChronology32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); java.io.DataOutputStream dataOutputStream0 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames(); // The following exception was thrown during execution in test generation try { org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(strMap1); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); char char1 = dateTimeOfYear0.iZoneChar; org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("10"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "10" + "'", str1, "10"); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("millis"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: millis"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder5.setStandardOffset(3465); java.io.DataOutput dataOutput29 = null; // The following exception was thrown during execution in test generation try { dateTimeZoneBuilder27.writeTo("PT0.100S", dataOutput29); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(dateTimeZoneBuilder25); org.junit.Assert.assertNotNull(dateTimeZoneBuilder27); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("PM", (int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"pm\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("DateTimeField[year]"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DateTimeField[year]" + "'", str1, "DateTimeField[year]"); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("0"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); // The following exception was thrown during execution in test generation try { org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder25.addCutover(70, 'a', 4, 0, 3, true, 99); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(dateTimeZoneBuilder25); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('4'); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("centuries"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: centuries"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3); org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3); org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); java.io.DataOutputStream dataOutputStream0 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file2 = null; java.io.File[] fileArray3 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3); org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap4); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear6 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char7 = dateTimeOfYear6.iZoneChar; int int8 = dateTimeOfYear6.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = dateTimeZoneBuilder9.setStandardOffset(0); dateTimeOfYear6.addCutover(dateTimeZoneBuilder11, (int) (short) 0); boolean boolean14 = org.joda.time.field.FieldUtils.equals((java.lang.Object) strMap4, (java.lang.Object) dateTimeOfYear6); // The following exception was thrown during execution in test generation try { org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap4); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray3); org.junit.Assert.assertNotNull(strMap4); org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'w' + "'", char7 == 'w'); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder11); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); // The following exception was thrown during execution in test generation try { org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("97", (int) '4', (int) ' ', (int) '#', 'a', (int) '#', 2836, 2024, true, (-42)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2); int int5 = cachedDateTimeZone3.getOffset(10L); java.lang.String str7 = cachedDateTimeZone3.getNameKey((long) 71); int int9 = cachedDateTimeZone3.getStandardOffset((long) (-292275054)); int int11 = cachedDateTimeZone3.getStandardOffset(315569520000L); boolean boolean12 = org.joda.time.tz.ZoneInfoCompiler.test("1970-01-01T00:00:03.654Z/1970-01-01T00:00:03.654Z", (org.joda.time.DateTimeZone) cachedDateTimeZone3); org.junit.Assert.assertNotNull(dateTimeZone2); org.junit.Assert.assertNotNull(cachedDateTimeZone3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("24"); // flaky:       org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"24\": Value 24 for hourOfDay must be in the range [0,23]"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("2024-05-15T11:04:14.045Z/2024-05-15T11:04:14.045Z"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2024-05-15T11:04:14.045Z/2024-05-15T11:04:14.045Z\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear5 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char6 = dateTimeOfYear5.iZoneChar; int int7 = dateTimeOfYear5.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder10 = dateTimeZoneBuilder8.setStandardOffset(0); dateTimeOfYear5.addCutover(dateTimeZoneBuilder10, (int) (short) 0); boolean boolean13 = org.joda.time.field.FieldUtils.equals((java.lang.Object) strMap3, (java.lang.Object) dateTimeOfYear5); int int14 = dateTimeOfYear5.iDayOfWeek; org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'w' + "'", char6 == 'w'); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder10); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("PT0.071S", 69); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"pt0.071s\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("PeriodType[YearMonthDayTime]"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PeriodType[YearMonthDayTime]" + "'", str1, "PeriodType[YearMonthDayTime]"); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.hourOfHalfday(); // The following exception was thrown during execution in test generation try { long long42 = zonedChronology19.getDateTimeMillis(0, 25, (int) (byte) -1, (-3464), 99, (int) '#', 35); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3464 for hourOfDay must be in the range [0,23]"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1" + "'", str1, "1"); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("2024-05-15T11:04:13.339Z/2024-05-15T11:04:13.339Z"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2024-05-15T11:04:13.339Z/2024-05-15T11:04:13.339Z\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("yearOfCentury"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: yearOfCentury"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean3 = dateTimeOfYear2.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char5 = dateTimeOfYear4.iZoneChar; int int6 = dateTimeOfYear4.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = dateTimeZoneBuilder7.setStandardOffset((int) '#'); dateTimeOfYear4.addRecurring(dateTimeZoneBuilder7, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear2.addCutover(dateTimeZoneBuilder7, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder7.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, 25); java.io.OutputStream outputStream31 = null; // The following exception was thrown during execution in test generation try { dateTimeZoneBuilder7.writeTo("69", outputStream31); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertNotNull(dateTimeOfYear2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'w' + "'", char5 == 'w'); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder9); org.junit.Assert.assertNotNull(dateTimeZoneBuilder27); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek(""); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("+00:00"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear5 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char6 = dateTimeOfYear5.iZoneChar; int int7 = dateTimeOfYear5.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder10 = dateTimeZoneBuilder8.setStandardOffset(0); dateTimeOfYear5.addCutover(dateTimeZoneBuilder10, (int) (short) 0); boolean boolean13 = org.joda.time.field.FieldUtils.equals((java.lang.Object) strMap3, (java.lang.Object) dateTimeOfYear5); org.joda.time.ReadableInterval readableInterval14 = null; org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14); org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone17); org.joda.time.Period period21 = new org.joda.time.Period((long) '4', 10L); int[] intArray24 = zonedChronology18.get((org.joda.time.ReadablePeriod) period21, (long) (byte) -1, (long) 1); java.lang.String str25 = zonedChronology18.toString(); org.joda.time.DateTimeField dateTimeField26 = zonedChronology18.hourOfDay(); org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology18); org.joda.time.DurationField durationField28 = zonedChronology18.hours(); org.joda.time.chrono.LenientChronology lenientChronology29 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology18); org.joda.time.ReadableInterval readableInterval30 = null; org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30); org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone33); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone35 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone33); org.joda.time.ReadableInstant readableInstant36 = null; int int37 = dateTimeZone33.getOffset(readableInstant36); org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33); long long41 = dateTimeZone33.adjustOffset((long) (byte) 100, true); org.joda.time.Chronology chronology42 = lenientChronology29.withZone(dateTimeZone33); org.joda.time.DurationField durationField43 = chronology42.seconds(); boolean boolean44 = org.joda.time.field.FieldUtils.equals((java.lang.Object) boolean13, (java.lang.Object) durationField43); org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'w' + "'", char6 == 'w'); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder10); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(chronology15); org.junit.Assert.assertNotNull(dateTimeZone17); org.junit.Assert.assertNotNull(zonedChronology18); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str25, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField26); org.junit.Assert.assertNotNull(chronology27); org.junit.Assert.assertNotNull(durationField28); org.junit.Assert.assertNotNull(lenientChronology29); org.junit.Assert.assertNotNull(chronology31); org.junit.Assert.assertNotNull(dateTimeZone33); org.junit.Assert.assertNotNull(zonedChronology34); org.junit.Assert.assertNotNull(cachedDateTimeZone35); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertNotNull(iSOChronology38); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L); org.junit.Assert.assertNotNull(chronology42); org.junit.Assert.assertNotNull(durationField43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); java.io.OutputStream outputStream16 = null; // The following exception was thrown during execution in test generation try { dateTimeZoneBuilder5.writeTo("", outputStream16); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.centuryOfEra(); org.joda.time.ReadablePartial readablePartial35 = null; org.joda.time.ReadableInterval readableInterval36 = null; org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36); org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone39); org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.yearOfCentury(); int int42 = dateTimeField41.getMinimumValue(); org.joda.time.ReadablePartial readablePartial43 = null; int int44 = dateTimeField41.getMaximumValue(readablePartial43); java.lang.String str45 = dateTimeField41.toString(); org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfWeek(); org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField47 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField41, dateTimeFieldType46); org.joda.time.DurationField durationField48 = zeroIsMaxDateTimeField47.getDurationField(); long long51 = zeroIsMaxDateTimeField47.add((long) 'w', (long) ' '); boolean boolean53 = zeroIsMaxDateTimeField47.isLeap((long) 1); org.joda.time.ReadablePartial readablePartial54 = null; int int55 = zeroIsMaxDateTimeField47.getMaximumValue(readablePartial54); org.joda.time.ReadablePartial readablePartial56 = null; org.joda.time.ReadableInterval readableInterval59 = null; org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval59); org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology63 = org.joda.time.chrono.ZonedChronology.getInstance(chronology60, dateTimeZone62); org.joda.time.Period period64 = new org.joda.time.Period((long) (short) 100, chronology60); org.joda.time.ReadableInterval readableInterval66 = null; org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval66); org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology70 = org.joda.time.chrono.ZonedChronology.getInstance(chronology67, dateTimeZone69); org.joda.time.Period period71 = new org.joda.time.Period((long) (short) 100, chronology67); int[] intArray74 = chronology60.get((org.joda.time.ReadablePeriod) period71, (long) 10, (long) 1); int[] intArray76 = zeroIsMaxDateTimeField47.add(readablePartial56, 2024, intArray74, 0); // The following exception was thrown during execution in test generation try { zonedChronology19.validate(readablePartial35, intArray74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(chronology37); org.junit.Assert.assertNotNull(dateTimeZone39); org.junit.Assert.assertNotNull(zonedChronology40); org.junit.Assert.assertNotNull(dateTimeField41); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str45, "DateTimeField[yearOfCentury]"); org.junit.Assert.assertNotNull(dateTimeFieldType46); org.junit.Assert.assertNotNull(durationField48); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1009843200119L + "'", long51 == 1009843200119L); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100); org.junit.Assert.assertNotNull(chronology60); org.junit.Assert.assertNotNull(dateTimeZone62); org.junit.Assert.assertNotNull(zonedChronology63); org.junit.Assert.assertNotNull(chronology67); org.junit.Assert.assertNotNull(dateTimeZone69); org.junit.Assert.assertNotNull(zonedChronology70); org.junit.Assert.assertNotNull(intArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -9]"); org.junit.Assert.assertNotNull(intArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -9]"); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.File file4 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler5 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file6 = null; java.io.File[] fileArray7 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = zoneInfoCompiler5.compile(file6, fileArray7); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler0.compile(file4, fileArray7); java.io.BufferedReader bufferedReader10 = null; // The following exception was thrown during execution in test generation try { zoneInfoCompiler0.parseDataFile(bufferedReader10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(fileArray7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertNotNull(strMap9); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("DurationField[weekyears]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DurationField[weekyears]"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("", 110); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); java.io.DataOutputStream dataOutputStream0 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file2 = null; java.io.File[] fileArray3 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3); java.io.File file5 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler6 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file7 = null; java.io.File[] fileArray8 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler6.compile(file7, fileArray8); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = zoneInfoCompiler1.compile(file5, fileArray8); org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap10); // The following exception was thrown during execution in test generation try { org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray3); org.junit.Assert.assertNotNull(strMap4); org.junit.Assert.assertNotNull(fileArray8); org.junit.Assert.assertNotNull(strMap9); org.junit.Assert.assertNotNull(strMap10); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("GregorianChronology[52]"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GregorianChronology[52]\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.tz.ZoneInfoCompiler.cStartOfYear = dateTimeOfYear0; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear16 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char17 = dateTimeOfYear16.iZoneChar; int int18 = dateTimeOfYear16.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder19 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder21 = dateTimeZoneBuilder19.setStandardOffset(0); dateTimeOfYear16.addCutover(dateTimeZoneBuilder21, (int) (short) 0); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder31 = dateTimeZoneBuilder21.addCutover((int) '#', 'w', 13, 6, (-2), true, 81); dateTimeOfYear0.addCutover(dateTimeZoneBuilder21, (int) (byte) 1); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'w' + "'", char17 == 'w'); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder21); org.junit.Assert.assertNotNull(dateTimeZoneBuilder31); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear34 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean35 = dateTimeOfYear34.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear36 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char37 = dateTimeOfYear36.iZoneChar; int int38 = dateTimeOfYear36.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder39 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder41 = dateTimeZoneBuilder39.setStandardOffset((int) '#'); dateTimeOfYear36.addRecurring(dateTimeZoneBuilder39, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear34.addCutover(dateTimeZoneBuilder39, (int) '4'); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder39, "+35:00", (-42), 110, 2922789); // The following exception was thrown during execution in test generation try { org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder64 = dateTimeZoneBuilder39.addRecurringSavings("52", (int) (byte) -1, (-24175), 11, '#', 2290, (-2033899), 2, true, (-2)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: #"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeOfYear34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + char37 + "' != '" + 'w' + "'", char37 == 'w'); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder41); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); java.io.DataOutputStream dataOutputStream0 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file2 = null; java.io.File[] fileArray3 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3); // The following exception was thrown during execution in test generation try { org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap4); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray3); org.junit.Assert.assertNotNull(strMap4); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth(""); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury(); java.lang.String str35 = zonedChronology19.toString(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]"); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("2024-05-15T11:04:17.284Z"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 72000000 + "'", int1 == 72000000); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("69", (int) 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 69 + "'", int2 == 69); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury(); org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.dayOfWeek(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(dateTimeField35); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("DurationField[centuries]", 66); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"durationfield[centuries]\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("YearMonthDayTimeNoSeconds"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"YearMonthDayTimeNoSeconds\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("", (int) (short) 0); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder5.setStandardOffset(3465); org.joda.time.DateTimeZone dateTimeZone30 = dateTimeZoneBuilder27.toDateTimeZone("1967-01-01T00:00:00.000Z", true); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(dateTimeZoneBuilder25); org.junit.Assert.assertNotNull(dateTimeZoneBuilder27); org.junit.Assert.assertNotNull(dateTimeZone30); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; java.lang.String str2 = dateTimeOfYear0.toString(); char char3 = dateTimeOfYear0.iZoneChar; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean5 = dateTimeOfYear4.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear6 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char7 = dateTimeOfYear6.iZoneChar; int int8 = dateTimeOfYear6.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = dateTimeZoneBuilder9.setStandardOffset((int) '#'); dateTimeOfYear6.addRecurring(dateTimeZoneBuilder9, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear4.addCutover(dateTimeZoneBuilder9, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder29 = dateTimeZoneBuilder9.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder31 = dateTimeZoneBuilder9.setStandardOffset(3465); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder9.setStandardOffset(0); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder33, "DurationField[years]", 1970, 52, 0); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n" + "'", str2, "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertNotNull(dateTimeOfYear4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'w' + "'", char7 == 'w'); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder11); org.junit.Assert.assertNotNull(dateTimeZoneBuilder29); org.junit.Assert.assertNotNull(dateTimeZoneBuilder31); org.junit.Assert.assertNotNull(dateTimeZoneBuilder33); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("DayTime"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DayTime" + "'", str1, "DayTime"); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#'); long long5 = dateTimeZone2.adjustOffset((long) '4', true); org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone2); org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra(); org.joda.time.ReadableInterval readableInterval8 = null; org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8); org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology9, dateTimeZone11); org.joda.time.Period period15 = new org.joda.time.Period((long) '4', 10L); int[] intArray18 = zonedChronology12.get((org.joda.time.ReadablePeriod) period15, (long) (byte) -1, (long) 1); java.lang.String str19 = zonedChronology12.toString(); org.joda.time.DurationField durationField20 = zonedChronology12.hours(); org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.yearOfEra(); org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra(); org.joda.time.DurationField durationField23 = zonedChronology12.minutes(); boolean boolean24 = gregorianChronology6.equals((java.lang.Object) durationField23); org.joda.time.DateTimeField dateTimeField25 = gregorianChronology6.hourOfHalfday(); org.joda.time.DurationField durationField26 = gregorianChronology6.weekyears(); org.joda.time.DateTimeZone dateTimeZone27 = gregorianChronology6.getZone(); boolean boolean28 = org.joda.time.tz.ZoneInfoCompiler.test("Thu", dateTimeZone27); org.junit.Assert.assertNotNull(dateTimeZone2); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L); org.junit.Assert.assertNotNull(gregorianChronology6); org.junit.Assert.assertNotNull(dateTimeField7); org.junit.Assert.assertNotNull(chronology9); org.junit.Assert.assertNotNull(dateTimeZone11); org.junit.Assert.assertNotNull(zonedChronology12); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str19, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(durationField20); org.junit.Assert.assertNotNull(dateTimeField21); org.junit.Assert.assertNotNull(dateTimeField22); org.junit.Assert.assertNotNull(durationField23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dateTimeField25); org.junit.Assert.assertNotNull(durationField26); org.junit.Assert.assertNotNull(dateTimeZone27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.Chronology chronology2 = iSOChronology1.withUTC(); org.joda.time.DateTimeZone dateTimeZone3 = iSOChronology1.getZone(); boolean boolean4 = org.joda.time.tz.ZoneInfoCompiler.test("Standard", dateTimeZone3); org.junit.Assert.assertNotNull(iSOChronology1); org.junit.Assert.assertNotNull(chronology2); org.junit.Assert.assertNotNull(dateTimeZone3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(); long long5 = gregorianChronology1.add((long) 10, (long) (-2), 52); org.joda.time.Period period7 = org.joda.time.Period.days((int) (short) 1); org.joda.time.format.PeriodFormatter periodFormatter8 = null; java.lang.String str9 = period7.toString(periodFormatter8); org.joda.time.Period period11 = period7.minusWeeks((int) (short) -1); org.joda.time.ReadableInterval readableInterval13 = null; org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13); org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone16); org.joda.time.Period period18 = new org.joda.time.Period((long) (short) 100, chronology14); org.joda.time.Weeks weeks19 = period18.toStandardWeeks(); int int20 = period18.getSeconds(); org.joda.time.Period period21 = period11.plus((org.joda.time.ReadablePeriod) period18); org.joda.time.Period period23 = period21.withSeconds((int) (byte) 1); int[] intArray25 = gregorianChronology1.get((org.joda.time.ReadablePeriod) period23, (long) 10); org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime(); org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26); boolean boolean28 = gregorianChronology1.equals((java.lang.Object) periodType27); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100); boolean boolean35 = fixedDateTimeZone33.isStandardOffset(3752784000097L); int int37 = fixedDateTimeZone33.getOffsetFromLocal(31536000000L); java.util.TimeZone timeZone38 = fixedDateTimeZone33.toTimeZone(); int int40 = fixedDateTimeZone33.getOffset((long) 71); org.joda.time.Chronology chronology41 = gregorianChronology1.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone33); java.lang.String str42 = fixedDateTimeZone33.toString(); boolean boolean43 = fixedDateTimeZone33.isFixed(); long long45 = fixedDateTimeZone33.previousTransition(22556602654770L); boolean boolean46 = org.joda.time.tz.ZoneInfoCompiler.test("109344815999901", (org.joda.time.DateTimeZone) fixedDateTimeZone33); boolean boolean48 = fixedDateTimeZone33.isStandardOffset((-6418121270366902L)); org.junit.Assert.assertNotNull(gregorianChronology1); org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-94L) + "'", long5 == (-94L)); org.junit.Assert.assertNotNull(period7); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P1D" + "'", str9, "P1D"); org.junit.Assert.assertNotNull(period11); org.junit.Assert.assertNotNull(chronology14); org.junit.Assert.assertNotNull(dateTimeZone16); org.junit.Assert.assertNotNull(zonedChronology17); org.junit.Assert.assertNotNull(weeks19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(period21); org.junit.Assert.assertNotNull(period23); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 10]"); org.junit.Assert.assertNotNull(periodType26); org.junit.Assert.assertNotNull(periodType27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23); org.junit.Assert.assertNotNull(timeZone38); org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00"); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23); org.junit.Assert.assertNotNull(chronology41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 22556602654770L + "'", long45 == 22556602654770L); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2); int int5 = cachedDateTimeZone3.getOffset(10L); java.lang.String str7 = cachedDateTimeZone3.getNameKey(3155760000010L); java.lang.String str9 = cachedDateTimeZone3.getName(2272L); boolean boolean10 = org.joda.time.tz.ZoneInfoCompiler.test("77", (org.joda.time.DateTimeZone) cachedDateTimeZone3); org.joda.time.ReadableInterval readableInterval11 = null; org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11); org.joda.time.Period period13 = readableInterval12.toPeriod(); java.lang.Object obj14 = null; boolean boolean15 = readableInterval12.equals(obj14); org.joda.time.Period period16 = readableInterval12.toPeriod(); org.joda.time.MutableInterval mutableInterval17 = readableInterval12.toMutableInterval(); org.joda.time.ReadableInstant readableInstant18 = null; boolean boolean19 = readableInterval12.contains(readableInstant18); org.joda.time.ReadableInterval readableInterval20 = null; org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20); org.joda.time.Period period22 = readableInterval21.toPeriod(); java.lang.Object obj23 = null; boolean boolean24 = readableInterval21.equals(obj23); org.joda.time.Period period25 = readableInterval21.toPeriod(); org.joda.time.DateTime dateTime26 = readableInterval21.getEnd(); boolean boolean27 = readableInterval12.contains((org.joda.time.ReadableInstant) dateTime26); org.joda.time.ReadableInterval readableInterval28 = null; org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28); org.joda.time.Period period30 = readableInterval29.toPeriod(); java.lang.Object obj31 = null; boolean boolean32 = readableInterval29.equals(obj31); org.joda.time.Period period33 = readableInterval29.toPeriod(); org.joda.time.Duration duration34 = readableInterval29.toDuration(); org.joda.time.ReadableInterval readableInterval35 = null; org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35); org.joda.time.Period period37 = readableInterval36.toPeriod(); java.lang.Object obj38 = null; boolean boolean39 = readableInterval36.equals(obj38); org.joda.time.Period period40 = readableInterval36.toPeriod(); org.joda.time.DateTime dateTime41 = readableInterval36.getEnd(); org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDay(); org.joda.time.DurationFieldType durationFieldType43 = null; boolean boolean44 = periodType42.isSupported(durationFieldType43); org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime41, periodType42); org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration34); org.joda.time.ReadableInterval readableInterval47 = null; org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47); org.joda.time.Period period49 = readableInterval48.toPeriod(); java.lang.Object obj50 = null; boolean boolean51 = readableInterval48.equals(obj50); org.joda.time.Period period52 = readableInterval48.toPeriod(); org.joda.time.MutableInterval mutableInterval53 = readableInterval48.toMutableInterval(); org.joda.time.ReadableInstant readableInstant54 = null; boolean boolean55 = readableInterval48.contains(readableInstant54); org.joda.time.ReadableInterval readableInterval56 = null; org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56); org.joda.time.Period period58 = readableInterval57.toPeriod(); java.lang.Object obj59 = null; boolean boolean60 = readableInterval57.equals(obj59); org.joda.time.Period period61 = readableInterval57.toPeriod(); org.joda.time.DateTime dateTime62 = readableInterval57.getEnd(); boolean boolean63 = readableInterval48.contains((org.joda.time.ReadableInstant) dateTime62); long long64 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime62); long long65 = dateTime62.getMillis(); org.joda.time.Duration duration66 = period46.toDurationTo((org.joda.time.ReadableInstant) dateTime62); boolean boolean67 = cachedDateTimeZone3.equals((java.lang.Object) period46); org.junit.Assert.assertNotNull(dateTimeZone2); org.junit.Assert.assertNotNull(cachedDateTimeZone3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(readableInterval12); org.junit.Assert.assertNotNull(period13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(period16); org.junit.Assert.assertNotNull(mutableInterval17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(readableInterval21); org.junit.Assert.assertNotNull(period22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(period25); org.junit.Assert.assertNotNull(dateTime26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(readableInterval29); org.junit.Assert.assertNotNull(period30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(period33); org.junit.Assert.assertNotNull(duration34); org.junit.Assert.assertNotNull(readableInterval36); org.junit.Assert.assertNotNull(period37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(period40); org.junit.Assert.assertNotNull(dateTime41); org.junit.Assert.assertNotNull(periodType42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(readableInterval48); org.junit.Assert.assertNotNull(period49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(period52); org.junit.Assert.assertNotNull(mutableInterval53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(readableInterval57); org.junit.Assert.assertNotNull(period58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(period61); org.junit.Assert.assertNotNull(dateTime62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); // flaky:     org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1715770342796L + "'", long64 == 1715770342796L); // flaky:     org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1715770342796L + "'", long65 == 1715770342796L); org.junit.Assert.assertNotNull(duration66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; int int2 = dateTimeOfYear0.iMillisOfDay; int int3 = dateTimeOfYear0.iMonthOfYear; int int4 = dateTimeOfYear0.iMonthOfYear; int int5 = dateTimeOfYear0.iMillisOfDay; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear6 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean7 = dateTimeOfYear6.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear8 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char9 = dateTimeOfYear8.iZoneChar; int int10 = dateTimeOfYear8.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder13 = dateTimeZoneBuilder11.setStandardOffset((int) '#'); dateTimeOfYear8.addRecurring(dateTimeZoneBuilder11, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear6.addCutover(dateTimeZoneBuilder11, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder31 = dateTimeZoneBuilder11.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder11.setStandardOffset(3465); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder35 = dateTimeZoneBuilder11.setStandardOffset(0); dateTimeOfYear0.addCutover(dateTimeZoneBuilder35, (-3464)); // The following exception was thrown during execution in test generation try { org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder48 = dateTimeZoneBuilder35.addRecurringSavings("DateTimeField[yearOfCentury]", 719527, (-47660), 0, ' ', 0, (-480), (-265276301), true, (-265276301)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: "); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dateTimeOfYear6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'w' + "'", char9 == 'w'); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder13); org.junit.Assert.assertNotNull(dateTimeZoneBuilder31); org.junit.Assert.assertNotNull(dateTimeZoneBuilder33); org.junit.Assert.assertNotNull(dateTimeZoneBuilder35); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("YearMonthDayTimeNoSeconds"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YearMonthDayTimeNoSeconds" + "'", str1, "YearMonthDayTimeNoSeconds"); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone6 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4); org.joda.time.Period period8 = org.joda.time.Period.days((int) (short) 1); org.joda.time.DurationFieldType durationFieldType9 = null; boolean boolean10 = period8.isSupported(durationFieldType9); boolean boolean11 = cachedDateTimeZone6.equals((java.lang.Object) boolean10); int int13 = cachedDateTimeZone6.getStandardOffset((long) 2024); boolean boolean14 = org.joda.time.tz.ZoneInfoCompiler.test("DurationField[centuries]", (org.joda.time.DateTimeZone) cachedDateTimeZone6); java.lang.String str16 = cachedDateTimeZone6.getNameKey((long) (-154)); org.junit.Assert.assertNotNull(chronology2); org.junit.Assert.assertNotNull(dateTimeZone4); org.junit.Assert.assertNotNull(zonedChronology5); org.junit.Assert.assertNotNull(cachedDateTimeZone6); org.junit.Assert.assertNotNull(period8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC"); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean3 = dateTimeOfYear2.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char5 = dateTimeOfYear4.iZoneChar; int int6 = dateTimeOfYear4.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = dateTimeZoneBuilder7.setStandardOffset((int) '#'); dateTimeOfYear4.addRecurring(dateTimeZoneBuilder7, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear2.addCutover(dateTimeZoneBuilder7, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder7.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, 25); int int30 = dateTimeOfYear0.iMillisOfDay; int int31 = dateTimeOfYear0.iMonthOfYear; org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertNotNull(dateTimeOfYear2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'w' + "'", char5 == 'w'); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder9); org.junit.Assert.assertNotNull(dateTimeZoneBuilder27); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.joda.time.ReadableInterval readableInterval0 = null; org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0); org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance(chronology1, dateTimeZone3); org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay(); java.lang.String str6 = zonedChronology4.toString(); org.joda.time.DurationField durationField7 = zonedChronology4.halfdays(); org.joda.time.chrono.LenientChronology lenientChronology8 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology4); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear9 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean10 = dateTimeOfYear9.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear11 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char12 = dateTimeOfYear11.iZoneChar; int int13 = dateTimeOfYear11.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder14 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder16 = dateTimeZoneBuilder14.setStandardOffset((int) '#'); dateTimeOfYear11.addRecurring(dateTimeZoneBuilder14, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear9.addCutover(dateTimeZoneBuilder14, (int) '4'); org.joda.time.ReadableInterval readableInterval24 = null; org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24); org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone27); org.joda.time.Period period31 = new org.joda.time.Period((long) '4', 10L); int[] intArray34 = zonedChronology28.get((org.joda.time.ReadablePeriod) period31, (long) (byte) -1, (long) 1); java.lang.String str35 = zonedChronology28.toString(); org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.hourOfDay(); org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology28); org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.yearOfCentury(); org.joda.time.DurationField durationField39 = zonedChronology28.weekyears(); org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.year(); org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.yearOfEra(); boolean boolean42 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear9, (java.lang.Object) zonedChronology28); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear43 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean44 = dateTimeOfYear43.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear45 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char46 = dateTimeOfYear45.iZoneChar; int int47 = dateTimeOfYear45.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder48 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder50 = dateTimeZoneBuilder48.setStandardOffset((int) '#'); dateTimeOfYear45.addRecurring(dateTimeZoneBuilder48, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear43.addCutover(dateTimeZoneBuilder48, (int) '4'); dateTimeOfYear9.addRecurring(dateTimeZoneBuilder48, "+35:00", (-42), 110, 2922789); boolean boolean63 = lenientChronology8.equals((java.lang.Object) dateTimeZoneBuilder48); org.junit.Assert.assertNotNull(chronology1); org.junit.Assert.assertNotNull(dateTimeZone3); org.junit.Assert.assertNotNull(zonedChronology4); org.junit.Assert.assertNotNull(dateTimeField5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str6, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(durationField7); org.junit.Assert.assertNotNull(lenientChronology8); org.junit.Assert.assertNotNull(dateTimeOfYear9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'w' + "'", char12 == 'w'); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder16); org.junit.Assert.assertNotNull(chronology25); org.junit.Assert.assertNotNull(dateTimeZone27); org.junit.Assert.assertNotNull(zonedChronology28); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField36); org.junit.Assert.assertNotNull(chronology37); org.junit.Assert.assertNotNull(dateTimeField38); org.junit.Assert.assertNotNull(durationField39); org.junit.Assert.assertNotNull(dateTimeField40); org.junit.Assert.assertNotNull(dateTimeField41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(dateTimeOfYear43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + char46 + "' != '" + 'w' + "'", char46 == 'w'); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder50); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear34 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean35 = dateTimeOfYear34.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear36 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char37 = dateTimeOfYear36.iZoneChar; int int38 = dateTimeOfYear36.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder39 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder41 = dateTimeZoneBuilder39.setStandardOffset((int) '#'); dateTimeOfYear36.addRecurring(dateTimeZoneBuilder39, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear34.addCutover(dateTimeZoneBuilder39, (int) '4'); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder39, "+35:00", (-42), 110, 2922789); // The following exception was thrown during execution in test generation try { org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder61 = dateTimeZoneBuilder39.addCutover(140, 'a', 11, 0, 106255, true, (-78)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeOfYear34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + char37 + "' != '" + 'w' + "'", char37 == 'w'); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder41); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100); boolean boolean7 = fixedDateTimeZone5.isStandardOffset(3752784000097L); int int9 = fixedDateTimeZone5.getOffsetFromLocal(31536000000L); java.util.TimeZone timeZone10 = fixedDateTimeZone5.toTimeZone(); org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone((org.joda.time.DateTimeZone) fixedDateTimeZone5); long long14 = fixedDateTimeZone5.convertLocalToUTC(14515200000L, false); boolean boolean15 = org.joda.time.tz.ZoneInfoCompiler.test("minutes", (org.joda.time.DateTimeZone) fixedDateTimeZone5); long long18 = fixedDateTimeZone5.convertLocalToUTC((-292277025L), true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23); org.junit.Assert.assertNotNull(timeZone10); org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00"); org.junit.Assert.assertNotNull(dateTimeZone11); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 14515199977L + "'", long14 == 14515199977L); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-292277048L) + "'", long18 == (-292277048L)); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; int int2 = dateTimeOfYear0.iMillisOfDay; int int3 = dateTimeOfYear0.iMonthOfYear; int int4 = dateTimeOfYear0.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset(0); dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, (int) ' '); java.lang.String str10 = dateTimeOfYear0.toString(); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear11 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean12 = dateTimeOfYear11.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear13 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char14 = dateTimeOfYear13.iZoneChar; int int15 = dateTimeOfYear13.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder16 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder18 = dateTimeZoneBuilder16.setStandardOffset((int) '#'); dateTimeOfYear13.addRecurring(dateTimeZoneBuilder16, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear11.addCutover(dateTimeZoneBuilder16, (int) '4'); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder16, "8", 8, 0, 0); java.io.OutputStream outputStream32 = null; // The following exception was thrown during execution in test generation try { dateTimeZoneBuilder16.writeTo("DateTimeField[yearOfCentury]", outputStream32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n" + "'", str10, "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"); org.junit.Assert.assertNotNull(dateTimeOfYear11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + char14 + "' != '" + 'w' + "'", char14 == 'w'); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder18); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("25"); // flaky:       org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"25\": Value 25 for hourOfDay must be in the range [0,23]"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4); org.joda.time.Period period8 = new org.joda.time.Period((long) '4', 10L); int[] intArray11 = zonedChronology5.get((org.joda.time.ReadablePeriod) period8, (long) (byte) -1, (long) 1); java.lang.String str12 = zonedChronology5.toString(); org.joda.time.Chronology chronology13 = zonedChronology5.withUTC(); org.joda.time.DateTimeZone dateTimeZone14 = zonedChronology5.getZone(); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14); long long17 = cachedDateTimeZone15.previousTransition(4840639870000L); boolean boolean18 = org.joda.time.tz.ZoneInfoCompiler.test("", (org.joda.time.DateTimeZone) cachedDateTimeZone15); org.junit.Assert.assertNotNull(chronology2); org.junit.Assert.assertNotNull(dateTimeZone4); org.junit.Assert.assertNotNull(zonedChronology5); org.junit.Assert.assertNotNull(intArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str12, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(chronology13); org.junit.Assert.assertNotNull(dateTimeZone14); org.junit.Assert.assertNotNull(cachedDateTimeZone15); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4840639870000L + "'", long17 == 4840639870000L); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("weekOfWeekyear"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekOfWeekyear\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("6"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField35 = zonedChronology19.days(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(durationField35); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("2024-05-15T11:04:13.339Z/2024-05-15T11:04:13.339Z"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 72000000 + "'", int1 == 72000000); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("1967-01-01T00:00:00.000Z"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1967-01-01T00:00:00.000Z" + "'", str1, "1967-01-01T00:00:00.000Z"); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("72"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"72\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); java.io.DataOutputStream dataOutputStream0 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file2 = null; java.io.File[] fileArray3 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3); java.io.File file5 = null; java.io.File[] fileArray6 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = zoneInfoCompiler1.compile(file5, fileArray6); java.io.File file8 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler9 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file10 = null; java.io.File[] fileArray11 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = zoneInfoCompiler9.compile(file10, fileArray11); java.io.File file13 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler14 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file15 = null; java.io.File[] fileArray16 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = zoneInfoCompiler14.compile(file15, fileArray16); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler9.compile(file13, fileArray16); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = zoneInfoCompiler1.compile(file8, fileArray16); // The following exception was thrown during execution in test generation try { org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray3); org.junit.Assert.assertNotNull(strMap4); org.junit.Assert.assertNotNull(strMap7); org.junit.Assert.assertNotNull(fileArray11); org.junit.Assert.assertNotNull(strMap12); org.junit.Assert.assertNotNull(fileArray16); org.junit.Assert.assertNotNull(strMap17); org.junit.Assert.assertNotNull(strMap18); org.junit.Assert.assertNotNull(strMap19); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("PT0.070S"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0.070S" + "'", str1, "PT0.070S"); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4); org.joda.time.Period period8 = new org.joda.time.Period((long) '4', 10L); int[] intArray11 = zonedChronology5.get((org.joda.time.ReadablePeriod) period8, (long) (byte) -1, (long) 1); java.lang.String str12 = zonedChronology5.toString(); org.joda.time.DateTimeField dateTimeField13 = zonedChronology5.hourOfDay(); org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology5); org.joda.time.DurationField durationField15 = zonedChronology5.hours(); org.joda.time.chrono.LenientChronology lenientChronology16 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology5); org.joda.time.DurationField durationField17 = lenientChronology16.millis(); org.joda.time.ReadableInterval readableInterval18 = null; org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18); org.joda.time.DateTimeField dateTimeField20 = chronology19.halfdayOfDay(); org.joda.time.DurationField durationField21 = chronology19.minutes(); boolean boolean22 = lenientChronology16.equals((java.lang.Object) chronology19); org.joda.time.ReadableInterval readableInterval23 = null; org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23); org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone26); org.joda.time.Period period30 = new org.joda.time.Period((long) '4', 10L); int[] intArray33 = zonedChronology27.get((org.joda.time.ReadablePeriod) period30, (long) (byte) -1, (long) 1); org.joda.time.DateTimeField dateTimeField34 = zonedChronology27.yearOfEra(); org.joda.time.DateTimeField dateTimeField35 = zonedChronology27.monthOfYear(); boolean boolean36 = lenientChronology16.equals((java.lang.Object) dateTimeField35); org.joda.time.Chronology chronology37 = lenientChronology16.withUTC(); org.joda.time.DateTimeField dateTimeField38 = lenientChronology16.minuteOfHour(); org.joda.time.ReadableInterval readableInterval39 = null; org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39); org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone42); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone44 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone42); org.joda.time.Period period46 = org.joda.time.Period.days((int) (short) 1); org.joda.time.DurationFieldType durationFieldType47 = null; boolean boolean48 = period46.isSupported(durationFieldType47); boolean boolean49 = cachedDateTimeZone44.equals((java.lang.Object) boolean48); org.joda.time.DateTimeZone dateTimeZone50 = cachedDateTimeZone44.getUncachedZone(); java.util.Locale locale52 = null; java.lang.String str53 = cachedDateTimeZone44.getName(2440588L, locale52); org.joda.time.Chronology chronology54 = lenientChronology16.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone44); boolean boolean55 = org.joda.time.tz.ZoneInfoCompiler.test("24", (org.joda.time.DateTimeZone) cachedDateTimeZone44); org.junit.Assert.assertNotNull(chronology2); org.junit.Assert.assertNotNull(dateTimeZone4); org.junit.Assert.assertNotNull(zonedChronology5); org.junit.Assert.assertNotNull(intArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str12, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField13); org.junit.Assert.assertNotNull(chronology14); org.junit.Assert.assertNotNull(durationField15); org.junit.Assert.assertNotNull(lenientChronology16); org.junit.Assert.assertNotNull(durationField17); org.junit.Assert.assertNotNull(chronology19); org.junit.Assert.assertNotNull(dateTimeField20); org.junit.Assert.assertNotNull(durationField21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(chronology24); org.junit.Assert.assertNotNull(dateTimeZone26); org.junit.Assert.assertNotNull(zonedChronology27); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(dateTimeField35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(chronology37); org.junit.Assert.assertNotNull(dateTimeField38); org.junit.Assert.assertNotNull(chronology40); org.junit.Assert.assertNotNull(dateTimeZone42); org.junit.Assert.assertNotNull(zonedChronology43); org.junit.Assert.assertNotNull(cachedDateTimeZone44); org.junit.Assert.assertNotNull(period46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dateTimeZone50); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00"); org.junit.Assert.assertNotNull(chronology54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("1970-01-01T00:00:00.028+00:00:00.023"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.028+00:00:00.023\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4); org.joda.time.DateTimeZone.setDefault(dateTimeZone4); java.lang.String str7 = dateTimeZone4.getID(); int int9 = dateTimeZone4.getOffsetFromLocal(0L); boolean boolean10 = org.joda.time.tz.ZoneInfoCompiler.test("ISOChronology[52]", dateTimeZone4); org.junit.Assert.assertNotNull(chronology2); org.junit.Assert.assertNotNull(dateTimeZone4); org.junit.Assert.assertNotNull(zonedChronology5); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.File file4 = null; java.io.File[] fileArray5 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = zoneInfoCompiler0.compile(file4, fileArray5); java.io.File file7 = null; java.io.File[] fileArray8 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler0.compile(file7, fileArray8); java.io.BufferedReader bufferedReader10 = null; // The following exception was thrown during execution in test generation try { zoneInfoCompiler0.parseDataFile(bufferedReader10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertNotNull(strMap9); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('w'); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2); int int5 = cachedDateTimeZone3.getOffset(10L); java.lang.String str7 = cachedDateTimeZone3.getNameKey(3155760000010L); java.lang.String str9 = cachedDateTimeZone3.getName(2272L); boolean boolean10 = org.joda.time.tz.ZoneInfoCompiler.test("77", (org.joda.time.DateTimeZone) cachedDateTimeZone3); boolean boolean12 = cachedDateTimeZone3.isStandardOffset((-31622399965L)); java.lang.String str14 = cachedDateTimeZone3.getNameKey(232499088224L); org.junit.Assert.assertNotNull(dateTimeZone2); org.junit.Assert.assertNotNull(cachedDateTimeZone3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC"); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("3"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10800000 + "'", int1 == 10800000); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology19.getZone(); org.joda.time.DurationField durationField35 = zonedChronology19.halfdays(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeZone34); org.junit.Assert.assertNotNull(durationField35); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("UTC"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC"); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); org.joda.time.DateTimeZone dateTimeZone28 = dateTimeZoneBuilder25.toDateTimeZone("DateTimeField[yearOfCentury]", false); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(dateTimeZoneBuilder25); org.junit.Assert.assertNotNull(dateTimeZone28); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100); boolean boolean7 = fixedDateTimeZone5.isStandardOffset(3752784000097L); int int9 = fixedDateTimeZone5.getOffsetFromLocal(31536000000L); java.util.TimeZone timeZone10 = fixedDateTimeZone5.toTimeZone(); boolean boolean11 = org.joda.time.tz.ZoneInfoCompiler.test("DurationField[centuries]", (org.joda.time.DateTimeZone) fixedDateTimeZone5); int int13 = fixedDateTimeZone5.getOffsetFromLocal(31500000000L); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23); org.junit.Assert.assertNotNull(timeZone10); org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("52", "PT0.002S", 23, (int) (byte) 10); org.joda.time.ReadableInterval readableInterval6 = null; org.joda.time.ReadableInterval readableInterval7 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval6); org.joda.time.Period period8 = readableInterval7.toPeriod(); java.lang.Object obj9 = null; boolean boolean10 = readableInterval7.equals(obj9); org.joda.time.Period period11 = readableInterval7.toPeriod(); org.joda.time.Duration duration12 = readableInterval7.toDuration(); org.joda.time.ReadableInterval readableInterval13 = null; org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13); org.joda.time.Period period15 = readableInterval14.toPeriod(); java.lang.Object obj16 = null; boolean boolean17 = readableInterval14.equals(obj16); org.joda.time.Period period18 = readableInterval14.toPeriod(); org.joda.time.DateTime dateTime19 = readableInterval14.getEnd(); org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay(); org.joda.time.DurationFieldType durationFieldType21 = null; boolean boolean22 = periodType20.isSupported(durationFieldType21); org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime19, periodType20); org.joda.time.ReadableInterval readableInterval24 = null; org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24); org.joda.time.Period period26 = readableInterval25.toPeriod(); java.lang.Object obj27 = null; boolean boolean28 = readableInterval25.equals(obj27); org.joda.time.Period period29 = readableInterval25.toPeriod(); org.joda.time.Duration duration30 = readableInterval25.toDuration(); org.joda.time.ReadableInterval readableInterval31 = null; org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31); org.joda.time.Period period33 = readableInterval32.toPeriod(); java.lang.Object obj34 = null; boolean boolean35 = readableInterval32.equals(obj34); org.joda.time.Period period36 = readableInterval32.toPeriod(); org.joda.time.DateTime dateTime37 = readableInterval32.getEnd(); org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay(); org.joda.time.DurationFieldType durationFieldType39 = null; boolean boolean40 = periodType38.isSupported(durationFieldType39); org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime37, periodType38); org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime37); int int43 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime37); org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5); long long46 = fixedDateTimeZone5.previousTransition(1640995200000L); boolean boolean47 = fixedDateTimeZone5.isFixed(); int int49 = fixedDateTimeZone5.getOffsetFromLocal(52584L); long long51 = fixedDateTimeZone5.previousTransition(232542283537L); long long53 = fixedDateTimeZone5.previousTransition((-896565L)); java.util.TimeZone timeZone54 = fixedDateTimeZone5.toTimeZone(); boolean boolean55 = org.joda.time.tz.ZoneInfoCompiler.test("PT99M", (org.joda.time.DateTimeZone) fixedDateTimeZone5); long long57 = fixedDateTimeZone5.nextTransition(1715770381315L); org.junit.Assert.assertNotNull(readableInterval7); org.junit.Assert.assertNotNull(period8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(period11); org.junit.Assert.assertNotNull(duration12); org.junit.Assert.assertNotNull(readableInterval14); org.junit.Assert.assertNotNull(period15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(period18); org.junit.Assert.assertNotNull(dateTime19); org.junit.Assert.assertNotNull(periodType20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(readableInterval25); org.junit.Assert.assertNotNull(period26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(period29); org.junit.Assert.assertNotNull(duration30); org.junit.Assert.assertNotNull(readableInterval32); org.junit.Assert.assertNotNull(period33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(period36); org.junit.Assert.assertNotNull(dateTime37); org.junit.Assert.assertNotNull(periodType38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23); org.junit.Assert.assertNotNull(gregorianChronology44); org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1640995200000L + "'", long46 == 1640995200000L); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 232542283537L + "'", long51 == 232542283537L); org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-896565L) + "'", long53 == (-896565L)); org.junit.Assert.assertNotNull(timeZone54); org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1715770381315L + "'", long57 == 1715770381315L); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("UnsupportedDurationField[days]"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UnsupportedDurationField[days]" + "'", str1, "UnsupportedDurationField[days]"); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); int int1 = dateTimeOfYear0.iDayOfMonth; int int2 = dateTimeOfYear0.iDayOfWeek; org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology19.getZone(); org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.millisOfSecond(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeZone34); org.junit.Assert.assertNotNull(dateTimeField35); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar(' '); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("1977-05-15T11:05:14.959+00:00:00.023"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1977-05-15T11:05:14.959+00:00:00.023" + "'", str1, "1977-05-15T11:05:14.959+00:00:00.023"); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; int int2 = dateTimeOfYear0.iMillisOfDay; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear3 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); int int4 = dateTimeOfYear3.iMonthOfYear; java.lang.String str5 = dateTimeOfYear3.toString(); boolean boolean6 = dateTimeOfYear3.iAdvanceDayOfWeek; int int7 = dateTimeOfYear3.iDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear8 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean9 = dateTimeOfYear8.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear10 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char11 = dateTimeOfYear10.iZoneChar; int int12 = dateTimeOfYear10.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder13 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder15 = dateTimeZoneBuilder13.setStandardOffset((int) '#'); dateTimeOfYear10.addRecurring(dateTimeZoneBuilder13, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear8.addCutover(dateTimeZoneBuilder13, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder13.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); dateTimeOfYear3.addRecurring(dateTimeZoneBuilder13, "35", (-2440586), 18, 0); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder13, "", 0, 348650, 19); org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n" + "'", str5, "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dateTimeOfYear8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'w' + "'", char11 == 'w'); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder15); org.junit.Assert.assertNotNull(dateTimeZoneBuilder33); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.tz.ZoneInfoCompiler.cStartOfYear = dateTimeOfYear0; int int16 = dateTimeOfYear0.iDayOfMonth; char char17 = dateTimeOfYear0.iZoneChar; org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'w' + "'", char17 == 'w'); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("-292275054"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-292275054\" for monthOfYear is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); // The following exception was thrown during execution in test generation try { int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("org.joda.time.IllegalFieldValueException: Value 315532800000 for yearOfCentury is not supported: millis", 70); org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"org.joda.time.illegalfieldvalueexception: value 315532800000 for yearofcentury is not supported: millis\""); } catch (java.lang.NumberFormatException e) { // Expected exception. } }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("97"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "97" + "'", str1, "97"); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("71"); // flaky:       org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"71\": Value 71 for hourOfDay must be in the range [0,23]"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology19.getZone(); java.lang.String str35 = dateTimeZone34.toString(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeZone34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC"); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.joda.time.ReadableInterval readableInterval2 = null; org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2); org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance(chronology3, dateTimeZone5); org.joda.time.DateTimeField dateTimeField7 = zonedChronology6.yearOfCentury(); int int8 = dateTimeField7.getMinimumValue(); org.joda.time.ReadablePartial readablePartial9 = null; int int10 = dateTimeField7.getMaximumValue(readablePartial9); java.lang.String str11 = dateTimeField7.toString(); org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfWeek(); org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField13 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType12); org.joda.time.DurationField durationField14 = zeroIsMaxDateTimeField13.getLeapDurationField(); org.joda.time.DurationField durationField15 = zeroIsMaxDateTimeField13.getDurationField(); org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance(); long long20 = gregorianChronology16.add((long) 10, (long) (-2), 52); org.joda.time.Period period22 = org.joda.time.Period.days((int) (short) 1); org.joda.time.format.PeriodFormatter periodFormatter23 = null; java.lang.String str24 = period22.toString(periodFormatter23); org.joda.time.Period period26 = period22.minusWeeks((int) (short) -1); org.joda.time.ReadableInterval readableInterval28 = null; org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28); org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone31); org.joda.time.Period period33 = new org.joda.time.Period((long) (short) 100, chronology29); org.joda.time.Weeks weeks34 = period33.toStandardWeeks(); int int35 = period33.getSeconds(); org.joda.time.Period period36 = period26.plus((org.joda.time.ReadablePeriod) period33); org.joda.time.Period period38 = period36.withSeconds((int) (byte) 1); int[] intArray40 = gregorianChronology16.get((org.joda.time.ReadablePeriod) period38, (long) 10); org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime(); org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType41); boolean boolean43 = gregorianChronology16.equals((java.lang.Object) periodType42); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone48 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100); boolean boolean50 = fixedDateTimeZone48.isStandardOffset(3752784000097L); int int52 = fixedDateTimeZone48.getOffsetFromLocal(31536000000L); java.util.TimeZone timeZone53 = fixedDateTimeZone48.toTimeZone(); int int55 = fixedDateTimeZone48.getOffset((long) 71); org.joda.time.Chronology chronology56 = gregorianChronology16.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone48); java.lang.String str57 = fixedDateTimeZone48.toString(); boolean boolean58 = org.joda.time.field.FieldUtils.equals((java.lang.Object) zeroIsMaxDateTimeField13, (java.lang.Object) fixedDateTimeZone48); java.util.TimeZone timeZone59 = fixedDateTimeZone48.toTimeZone(); org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone48); boolean boolean61 = org.joda.time.tz.ZoneInfoCompiler.test("org.joda.time.IllegalFieldValueException: Value \"secondOfDay\" for millisOfSecond is not supported", (org.joda.time.DateTimeZone) fixedDateTimeZone48); boolean boolean62 = org.joda.time.tz.ZoneInfoCompiler.test("", (org.joda.time.DateTimeZone) fixedDateTimeZone48); long long64 = fixedDateTimeZone48.nextTransition(108100038L); java.lang.String str66 = fixedDateTimeZone48.getNameKey((long) (-23479)); org.junit.Assert.assertNotNull(chronology3); org.junit.Assert.assertNotNull(dateTimeZone5); org.junit.Assert.assertNotNull(zonedChronology6); org.junit.Assert.assertNotNull(dateTimeField7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str11, "DateTimeField[yearOfCentury]"); org.junit.Assert.assertNotNull(dateTimeFieldType12); org.junit.Assert.assertNull(durationField14); org.junit.Assert.assertNotNull(durationField15); org.junit.Assert.assertNotNull(gregorianChronology16); org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-94L) + "'", long20 == (-94L)); org.junit.Assert.assertNotNull(period22); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P1D" + "'", str24, "P1D"); org.junit.Assert.assertNotNull(period26); org.junit.Assert.assertNotNull(chronology29); org.junit.Assert.assertNotNull(dateTimeZone31); org.junit.Assert.assertNotNull(zonedChronology32); org.junit.Assert.assertNotNull(weeks34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertNotNull(period36); org.junit.Assert.assertNotNull(period38); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 10]"); org.junit.Assert.assertNotNull(periodType41); org.junit.Assert.assertNotNull(periodType42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23); org.junit.Assert.assertNotNull(timeZone53); org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00"); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23); org.junit.Assert.assertNotNull(chronology56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1"); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(timeZone59); org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00"); org.junit.Assert.assertNotNull(iSOChronology60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertTrue("'" + long64 + "' != '" + 108100038L + "'", long64 == 108100038L); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC"); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField35 = zonedChronology19.centuries(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(durationField35); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("31"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "31" + "'", str1, "31"); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); // The following exception was thrown during execution in test generation try { int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("1969"); org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969\" for dayOfWeek is not supported"); } catch (org.joda.time.IllegalFieldValueException e) { // Expected exception. } }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("2028-06-25T13:04:27.709Z"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 72000000 + "'", int1 == 72000000); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2); long long6 = cachedDateTimeZone3.convertLocalToUTC((long) ' ', false); org.joda.time.ReadableInterval readableInterval7 = null; org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7); org.joda.time.Period period9 = readableInterval8.toPeriod(); java.lang.Object obj10 = null; boolean boolean11 = readableInterval8.equals(obj10); org.joda.time.Period period12 = readableInterval8.toPeriod(); org.joda.time.Duration duration13 = readableInterval8.toDuration(); org.joda.time.ReadableInterval readableInterval14 = null; org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14); org.joda.time.Period period16 = readableInterval15.toPeriod(); java.lang.Object obj17 = null; boolean boolean18 = readableInterval15.equals(obj17); org.joda.time.Period period19 = readableInterval15.toPeriod(); org.joda.time.DateTime dateTime20 = readableInterval15.getEnd(); org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay(); org.joda.time.DurationFieldType durationFieldType22 = null; boolean boolean23 = periodType21.isSupported(durationFieldType22); org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime20, periodType21); org.joda.time.ReadableInterval readableInterval25 = null; org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25); org.joda.time.Period period27 = readableInterval26.toPeriod(); java.lang.Object obj28 = null; boolean boolean29 = readableInterval26.equals(obj28); org.joda.time.Period period30 = readableInterval26.toPeriod(); org.joda.time.Duration duration31 = readableInterval26.toDuration(); org.joda.time.ReadableInterval readableInterval32 = null; org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32); org.joda.time.Period period34 = readableInterval33.toPeriod(); java.lang.Object obj35 = null; boolean boolean36 = readableInterval33.equals(obj35); org.joda.time.Period period37 = readableInterval33.toPeriod(); org.joda.time.DateTime dateTime38 = readableInterval33.getEnd(); org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay(); org.joda.time.DurationFieldType durationFieldType40 = null; boolean boolean41 = periodType39.isSupported(durationFieldType40); org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime38, periodType39); org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38); int int44 = cachedDateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime38); org.joda.time.LocalDateTime localDateTime45 = null; boolean boolean46 = cachedDateTimeZone3.isLocalDateTimeGap(localDateTime45); boolean boolean47 = org.joda.time.tz.ZoneInfoCompiler.test("centuries", (org.joda.time.DateTimeZone) cachedDateTimeZone3); org.junit.Assert.assertNotNull(dateTimeZone2); org.junit.Assert.assertNotNull(cachedDateTimeZone3); org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L); org.junit.Assert.assertNotNull(readableInterval8); org.junit.Assert.assertNotNull(period9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(period12); org.junit.Assert.assertNotNull(duration13); org.junit.Assert.assertNotNull(readableInterval15); org.junit.Assert.assertNotNull(period16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(period19); org.junit.Assert.assertNotNull(dateTime20); org.junit.Assert.assertNotNull(periodType21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(readableInterval26); org.junit.Assert.assertNotNull(period27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(period30); org.junit.Assert.assertNotNull(duration31); org.junit.Assert.assertNotNull(readableInterval33); org.junit.Assert.assertNotNull(period34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(period37); org.junit.Assert.assertNotNull(dateTime38); org.junit.Assert.assertNotNull(periodType39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char1 = dateTimeOfYear0.iZoneChar; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean3 = dateTimeOfYear2.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char5 = dateTimeOfYear4.iZoneChar; int int6 = dateTimeOfYear4.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = dateTimeZoneBuilder7.setStandardOffset((int) '#'); dateTimeOfYear4.addRecurring(dateTimeZoneBuilder7, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear2.addCutover(dateTimeZoneBuilder7, (int) '4'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder7.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0); dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, 25); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder30 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder32 = dateTimeZoneBuilder30.setStandardOffset((int) '#'); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder43 = dateTimeZoneBuilder32.addRecurringSavings("DurationField[years]", (int) 'a', 3520, (int) (byte) 1, '#', (int) (short) 10, 3, 604847, false, 4); org.joda.time.DateTimeZone dateTimeZone46 = dateTimeZoneBuilder43.toDateTimeZone("weekOfWeekyear", false); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder57 = dateTimeZoneBuilder43.addRecurringSavings("ZonedChronology[ISOChronology[UTC], UTC]", (int) (short) 0, 9, 0, 'w', (int) '#', 28596184, 2836, true, 2272); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder60 = dateTimeZoneBuilder57.setFixedSavings("", 0); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder60, "org.joda.time.IllegalFieldValueException: weekOfWeekyear: Value \"DurationField[millis]\" for UTC is not supported", 4140, 66, (-10)); boolean boolean66 = dateTimeOfYear0.iAdvanceDayOfWeek; org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w'); org.junit.Assert.assertNotNull(dateTimeOfYear2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'w' + "'", char5 == 'w'); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder9); org.junit.Assert.assertNotNull(dateTimeZoneBuilder27); org.junit.Assert.assertNotNull(dateTimeZoneBuilder32); org.junit.Assert.assertNotNull(dateTimeZoneBuilder43); org.junit.Assert.assertNotNull(dateTimeZone46); org.junit.Assert.assertNotNull(dateTimeZoneBuilder57); org.junit.Assert.assertNotNull(dateTimeZoneBuilder60); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.File file4 = null; java.io.File[] fileArray5 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = zoneInfoCompiler0.compile(file4, fileArray5); java.io.BufferedReader bufferedReader7 = null; // The following exception was thrown during execution in test generation try { zoneInfoCompiler0.parseDataFile(bufferedReader7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(strMap6); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("4"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4" + "'", str1, "4"); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("May"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "May" + "'", str1, "May"); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.hourOfHalfday(); org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.yearOfEra(); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(dateTimeField35); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.File file4 = null; java.io.File[] fileArray5 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = zoneInfoCompiler0.compile(file4, fileArray5); java.io.File file7 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler8 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file9 = null; java.io.File[] fileArray10 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = zoneInfoCompiler8.compile(file9, fileArray10); java.io.File file12 = null; java.io.File[] fileArray13 = null; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = zoneInfoCompiler8.compile(file12, fileArray13); java.io.File file15 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler16 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file17 = null; java.io.File[] fileArray18 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = zoneInfoCompiler16.compile(file17, fileArray18); java.io.File file20 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler21 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file22 = null; java.io.File[] fileArray23 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = zoneInfoCompiler21.compile(file22, fileArray23); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = zoneInfoCompiler16.compile(file20, fileArray23); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = zoneInfoCompiler8.compile(file15, fileArray23); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = zoneInfoCompiler0.compile(file7, fileArray23); org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertNotNull(fileArray10); org.junit.Assert.assertNotNull(strMap11); org.junit.Assert.assertNotNull(strMap14); org.junit.Assert.assertNotNull(fileArray18); org.junit.Assert.assertNotNull(strMap19); org.junit.Assert.assertNotNull(fileArray23); org.junit.Assert.assertNotNull(strMap24); org.junit.Assert.assertNotNull(strMap25); org.junit.Assert.assertNotNull(strMap26); org.junit.Assert.assertNotNull(strMap27); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder34 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder36 = dateTimeZoneBuilder34.setStandardOffset((int) '#'); org.joda.time.DateTimeZone dateTimeZone39 = dateTimeZoneBuilder34.toDateTimeZone("UTC", false); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder50 = dateTimeZoneBuilder34.addRecurringSavings("PT0.002S", (int) (byte) 0, 480, 0, 'a', (int) ' ', 0, (int) (short) 0, false, 292277024); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder53 = dateTimeZoneBuilder34.setFixedSavings("+00:00:00.007", 71); dateTimeOfYear0.addRecurring(dateTimeZoneBuilder53, "66", 0, 7, 28596184); boolean boolean59 = dateTimeOfYear0.iAdvanceDayOfWeek; org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeZoneBuilder36); org.junit.Assert.assertNotNull(dateTimeZone39); org.junit.Assert.assertNotNull(dateTimeZoneBuilder50); org.junit.Assert.assertNotNull(dateTimeZoneBuilder53); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file1 = null; java.io.File[] fileArray2 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2); java.io.File file4 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler5 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file6 = null; java.io.File[] fileArray7 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = zoneInfoCompiler5.compile(file6, fileArray7); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler0.compile(file4, fileArray7); java.io.File file10 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler11 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file12 = null; java.io.File[] fileArray13 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = zoneInfoCompiler11.compile(file12, fileArray13); java.io.File file15 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler16 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file17 = null; java.io.File[] fileArray18 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = zoneInfoCompiler16.compile(file17, fileArray18); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = zoneInfoCompiler11.compile(file15, fileArray18); java.io.File file21 = null; org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler22 = new org.joda.time.tz.ZoneInfoCompiler(); java.io.File file23 = null; java.io.File[] fileArray24 = new java.io.File[] {}; java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = zoneInfoCompiler22.compile(file23, fileArray24); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = zoneInfoCompiler11.compile(file21, fileArray24); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = zoneInfoCompiler0.compile(file10, fileArray24); org.junit.Assert.assertNotNull(fileArray2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(fileArray7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertNotNull(strMap9); org.junit.Assert.assertNotNull(fileArray13); org.junit.Assert.assertNotNull(strMap14); org.junit.Assert.assertNotNull(fileArray18); org.junit.Assert.assertNotNull(strMap19); org.junit.Assert.assertNotNull(strMap20); org.junit.Assert.assertNotNull(fileArray24); org.junit.Assert.assertNotNull(strMap25); org.junit.Assert.assertNotNull(strMap26); org.junit.Assert.assertNotNull(strMap27); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("-2033899"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-72000000) + "'", int1 == (-72000000)); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear(); boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek; org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear(); char char3 = dateTimeOfYear2.iZoneChar; int int4 = dateTimeOfYear2.iMillisOfDay; org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder(); org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#'); dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1); dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4'); org.joda.time.ReadableInterval readableInterval15 = null; org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15); org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18); org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L); int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1); java.lang.String str26 = zonedChronology19.toString(); org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay(); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19); org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury(); org.joda.time.DurationField durationField30 = zonedChronology19.weekyears(); org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year(); org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra(); boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19); org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury(); org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.year(); org.joda.time.ReadableInterval readableInterval36 = null; org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36); org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(0); org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone39); org.joda.time.Period period43 = new org.joda.time.Period((long) '4', 10L); int[] intArray46 = zonedChronology40.get((org.joda.time.ReadablePeriod) period43, (long) (byte) -1, (long) 1); java.lang.String str47 = zonedChronology40.toString(); org.joda.time.DurationField durationField48 = zonedChronology40.hours(); org.joda.time.DateTimeField dateTimeField49 = zonedChronology40.yearOfEra(); org.joda.time.DateTimeField dateTimeField50 = zonedChronology40.yearOfEra(); org.joda.time.DateTimeField dateTimeField51 = zonedChronology40.weekyearOfCentury(); org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField56 = new org.joda.time.field.OffsetDateTimeField(dateTimeField51, dateTimeFieldType52, (int) (short) 1, (int) (short) 10, (int) '4'); int int58 = offsetDateTimeField56.get((-99L)); long long60 = offsetDateTimeField56.roundFloor((-98L)); boolean boolean62 = offsetDateTimeField56.isLeap((long) '#'); int int64 = offsetDateTimeField56.get((long) (-71)); org.joda.time.DateTimeFieldType dateTimeFieldType65 = offsetDateTimeField56.getType(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField67 = new org.joda.time.field.OffsetDateTimeField(dateTimeField35, dateTimeFieldType65, 1); org.junit.Assert.assertNotNull(dateTimeOfYear0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dateTimeZoneBuilder7); org.junit.Assert.assertNotNull(chronology16); org.junit.Assert.assertNotNull(dateTimeZone18); org.junit.Assert.assertNotNull(zonedChronology19); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(dateTimeField27); org.junit.Assert.assertNotNull(chronology28); org.junit.Assert.assertNotNull(dateTimeField29); org.junit.Assert.assertNotNull(durationField30); org.junit.Assert.assertNotNull(dateTimeField31); org.junit.Assert.assertNotNull(dateTimeField32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dateTimeField34); org.junit.Assert.assertNotNull(dateTimeField35); org.junit.Assert.assertNotNull(chronology37); org.junit.Assert.assertNotNull(dateTimeZone39); org.junit.Assert.assertNotNull(zonedChronology40); org.junit.Assert.assertNotNull(intArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 2]"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str47, "ZonedChronology[ISOChronology[UTC], UTC]"); org.junit.Assert.assertNotNull(durationField48); org.junit.Assert.assertNotNull(dateTimeField49); org.junit.Assert.assertNotNull(dateTimeField50); org.junit.Assert.assertNotNull(dateTimeField51); org.junit.Assert.assertNotNull(dateTimeFieldType52); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 70 + "'", int58 == 70); org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31536000000L) + "'", long60 == (-31536000000L)); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70); org.junit.Assert.assertNotNull(dateTimeFieldType65); }
