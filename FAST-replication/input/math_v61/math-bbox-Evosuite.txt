public void test0() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); poissonDistributionImpl0.inverseCumulativeProbability(0.07490822288864472); }
public void test1() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472, 0.07490822288864472); double double0 = poissonDistributionImpl0.getMean(); assertEquals(0.07490822288864472, double0, 0.01); }
public void test2() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); int int0 = poissonDistributionImpl0.sample(); assertEquals(0, int0); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); }
public void test3() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2925.312765687821, 1707); double double0 = poissonDistributionImpl0.probability(1457); assertEquals(2.4632418364250662E-199, double0, 0.01); }
public void test4() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); double double0 = poissonDistributionImpl0.normalApproximateProbability(0); assertEquals(0.9398082942215191, double0, 0.01); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); }
public void test5() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = null; try { poissonDistributionImpl0 = new PoissonDistributionImpl(-0.0, 0.0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // -0 is smaller than, or equal to, the minimum (0): mean (-0) // verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e); } }
public void test6() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); double double0 = poissonDistributionImpl0.probability((-1)); assertEquals(0.0, double0, 0.01); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); }
public void test7() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); double double0 = poissonDistributionImpl0.probability(0); assertEquals(0.9278286358531357, double0, 0.01); }
public void test8() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1374.35, 1374.35, 2653); double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE); assertEquals(1374.35, poissonDistributionImpl0.getMean(), 0.01); assertEquals(0.0, double0, 0.01); }
public void test9() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472, 0.07490822288864472); double double0 = poissonDistributionImpl0.cumulativeProbability((-1), Integer.MAX_VALUE); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); assertEquals(1.0, double0, 0.01); }
